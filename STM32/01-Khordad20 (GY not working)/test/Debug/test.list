
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000946c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000860  08009580  08009580  00019580  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009de0  08009de0  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  08009de0  08009de0  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009de0  08009de0  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009de0  08009de0  00019de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009de4  08009de4  00019de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08009de8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a0  20000094  08009e7c  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000734  08009e7c  00020734  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012907  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002633  00000000  00000000  000329c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  00034ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c0  00000000  00000000  00036188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018bd2  00000000  00000000  00037248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014a15  00000000  00000000  0004fe1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091c49  00000000  00000000  0006482f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f6478  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ff4  00000000  00000000  000f64c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000094 	.word	0x20000094
 800012c:	00000000 	.word	0x00000000
 8000130:	08009564 	.word	0x08009564

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000098 	.word	0x20000098
 800014c:	08009564 	.word	0x08009564

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <initGY>:
uint8_t Rx2_Buff[RX2_Size];

void delay(int sec){
	for(register long int i=0; i<sec; i++);
}
void initGY(){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 8000a7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a80:	f001 fd10 	bl	80024a4 <HAL_Delay>
	HAL_UART_Transmit(&huart1, GY_A5, 1, 100);
 8000a84:	2364      	movs	r3, #100	; 0x64
 8000a86:	2201      	movs	r2, #1
 8000a88:	4915      	ldr	r1, [pc, #84]	; (8000ae0 <initGY+0x68>)
 8000a8a:	4816      	ldr	r0, [pc, #88]	; (8000ae4 <initGY+0x6c>)
 8000a8c:	f006 fbe1 	bl	8007252 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, GY_54, 1, 100);
 8000a90:	2364      	movs	r3, #100	; 0x64
 8000a92:	2201      	movs	r2, #1
 8000a94:	4914      	ldr	r1, [pc, #80]	; (8000ae8 <initGY+0x70>)
 8000a96:	4813      	ldr	r0, [pc, #76]	; (8000ae4 <initGY+0x6c>)
 8000a98:	f006 fbdb 	bl	8007252 <HAL_UART_Transmit>
	HAL_Delay(500);
 8000a9c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000aa0:	f001 fd00 	bl	80024a4 <HAL_Delay>
	HAL_UART_Transmit(&huart1, GY_A5, 1, 100);
 8000aa4:	2364      	movs	r3, #100	; 0x64
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	490d      	ldr	r1, [pc, #52]	; (8000ae0 <initGY+0x68>)
 8000aaa:	480e      	ldr	r0, [pc, #56]	; (8000ae4 <initGY+0x6c>)
 8000aac:	f006 fbd1 	bl	8007252 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, GY_51, 1, 100);
 8000ab0:	2364      	movs	r3, #100	; 0x64
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	490d      	ldr	r1, [pc, #52]	; (8000aec <initGY+0x74>)
 8000ab6:	480b      	ldr	r0, [pc, #44]	; (8000ae4 <initGY+0x6c>)
 8000ab8:	f006 fbcb 	bl	8007252 <HAL_UART_Transmit>
	HAL_Delay(500);
 8000abc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ac0:	f001 fcf0 	bl	80024a4 <HAL_Delay>
	HAL_UART_Transmit(&huart1, GY_A5, 1, 100);
 8000ac4:	2364      	movs	r3, #100	; 0x64
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	4905      	ldr	r1, [pc, #20]	; (8000ae0 <initGY+0x68>)
 8000aca:	4806      	ldr	r0, [pc, #24]	; (8000ae4 <initGY+0x6c>)
 8000acc:	f006 fbc1 	bl	8007252 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, GY_55, 1, 100);
 8000ad0:	2364      	movs	r3, #100	; 0x64
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	4906      	ldr	r1, [pc, #24]	; (8000af0 <initGY+0x78>)
 8000ad6:	4803      	ldr	r0, [pc, #12]	; (8000ae4 <initGY+0x6c>)
 8000ad8:	f006 fbbb 	bl	8007252 <HAL_UART_Transmit>
}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000010 	.word	0x20000010
 8000ae4:	20000208 	.word	0x20000208
 8000ae8:	20000014 	.word	0x20000014
 8000aec:	20000018 	.word	0x20000018
 8000af0:	2000001c 	.word	0x2000001c

08000af4 <print_num>:
			else 																	 stop();
			out_cnt++;
		}
	}
}
void print_num(char* label, int num, int x, int y){
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
 8000b00:	603b      	str	r3, [r7, #0]
	SSD1306_GotoXY(x, y);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	683a      	ldr	r2, [r7, #0]
 8000b08:	b292      	uxth	r2, r2
 8000b0a:	4611      	mov	r1, r2
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f001 f883 	bl	8001c18 <SSD1306_GotoXY>
	SSD1306_Puts(label, &Font_7x10, SSD1306_COLOR_WHITE);
 8000b12:	2201      	movs	r2, #1
 8000b14:	496d      	ldr	r1, [pc, #436]	; (8000ccc <print_num+0x1d8>)
 8000b16:	68f8      	ldr	r0, [r7, #12]
 8000b18:	f001 f914 	bl	8001d44 <SSD1306_Puts>
	if(num >= 0){
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	db67      	blt.n	8000bf2 <print_num+0xfe>
		SSD1306_Putc('+', &Font_7x10, SSD1306_COLOR_WHITE);
 8000b22:	2201      	movs	r2, #1
 8000b24:	4969      	ldr	r1, [pc, #420]	; (8000ccc <print_num+0x1d8>)
 8000b26:	202b      	movs	r0, #43	; 0x2b
 8000b28:	f001 f88c 	bl	8001c44 <SSD1306_Putc>
		SSD1306_Putc((num/1000)%10+'0', &Font_7x10, SSD1306_COLOR_WHITE);
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	4a68      	ldr	r2, [pc, #416]	; (8000cd0 <print_num+0x1dc>)
 8000b30:	fb82 1203 	smull	r1, r2, r2, r3
 8000b34:	1192      	asrs	r2, r2, #6
 8000b36:	17db      	asrs	r3, r3, #31
 8000b38:	1ad2      	subs	r2, r2, r3
 8000b3a:	4b66      	ldr	r3, [pc, #408]	; (8000cd4 <print_num+0x1e0>)
 8000b3c:	fb83 1302 	smull	r1, r3, r3, r2
 8000b40:	1099      	asrs	r1, r3, #2
 8000b42:	17d3      	asrs	r3, r2, #31
 8000b44:	1ac9      	subs	r1, r1, r3
 8000b46:	460b      	mov	r3, r1
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	440b      	add	r3, r1
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	1ad1      	subs	r1, r2, r3
 8000b50:	b2cb      	uxtb	r3, r1
 8000b52:	3330      	adds	r3, #48	; 0x30
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	2201      	movs	r2, #1
 8000b58:	495c      	ldr	r1, [pc, #368]	; (8000ccc <print_num+0x1d8>)
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f001 f872 	bl	8001c44 <SSD1306_Putc>
		SSD1306_Putc((num/100)%10+'0', &Font_7x10, SSD1306_COLOR_WHITE);
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	4a5d      	ldr	r2, [pc, #372]	; (8000cd8 <print_num+0x1e4>)
 8000b64:	fb82 1203 	smull	r1, r2, r2, r3
 8000b68:	1152      	asrs	r2, r2, #5
 8000b6a:	17db      	asrs	r3, r3, #31
 8000b6c:	1ad2      	subs	r2, r2, r3
 8000b6e:	4b59      	ldr	r3, [pc, #356]	; (8000cd4 <print_num+0x1e0>)
 8000b70:	fb83 1302 	smull	r1, r3, r3, r2
 8000b74:	1099      	asrs	r1, r3, #2
 8000b76:	17d3      	asrs	r3, r2, #31
 8000b78:	1ac9      	subs	r1, r1, r3
 8000b7a:	460b      	mov	r3, r1
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	440b      	add	r3, r1
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	1ad1      	subs	r1, r2, r3
 8000b84:	b2cb      	uxtb	r3, r1
 8000b86:	3330      	adds	r3, #48	; 0x30
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	494f      	ldr	r1, [pc, #316]	; (8000ccc <print_num+0x1d8>)
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f001 f858 	bl	8001c44 <SSD1306_Putc>
		SSD1306_Putc((num/10)%10+'0', &Font_7x10, SSD1306_COLOR_WHITE);
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	4a4f      	ldr	r2, [pc, #316]	; (8000cd4 <print_num+0x1e0>)
 8000b98:	fb82 1203 	smull	r1, r2, r2, r3
 8000b9c:	1092      	asrs	r2, r2, #2
 8000b9e:	17db      	asrs	r3, r3, #31
 8000ba0:	1ad2      	subs	r2, r2, r3
 8000ba2:	4b4c      	ldr	r3, [pc, #304]	; (8000cd4 <print_num+0x1e0>)
 8000ba4:	fb83 1302 	smull	r1, r3, r3, r2
 8000ba8:	1099      	asrs	r1, r3, #2
 8000baa:	17d3      	asrs	r3, r2, #31
 8000bac:	1ac9      	subs	r1, r1, r3
 8000bae:	460b      	mov	r3, r1
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	440b      	add	r3, r1
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	1ad1      	subs	r1, r2, r3
 8000bb8:	b2cb      	uxtb	r3, r1
 8000bba:	3330      	adds	r3, #48	; 0x30
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	4942      	ldr	r1, [pc, #264]	; (8000ccc <print_num+0x1d8>)
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f001 f83e 	bl	8001c44 <SSD1306_Putc>
		SSD1306_Putc((num/1)%10+'0', &Font_7x10, SSD1306_COLOR_WHITE);
 8000bc8:	68ba      	ldr	r2, [r7, #8]
 8000bca:	4b42      	ldr	r3, [pc, #264]	; (8000cd4 <print_num+0x1e0>)
 8000bcc:	fb83 1302 	smull	r1, r3, r3, r2
 8000bd0:	1099      	asrs	r1, r3, #2
 8000bd2:	17d3      	asrs	r3, r2, #31
 8000bd4:	1ac9      	subs	r1, r1, r3
 8000bd6:	460b      	mov	r3, r1
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	440b      	add	r3, r1
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	1ad1      	subs	r1, r2, r3
 8000be0:	b2cb      	uxtb	r3, r1
 8000be2:	3330      	adds	r3, #48	; 0x30
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	2201      	movs	r2, #1
 8000be8:	4938      	ldr	r1, [pc, #224]	; (8000ccc <print_num+0x1d8>)
 8000bea:	4618      	mov	r0, r3
 8000bec:	f001 f82a 	bl	8001c44 <SSD1306_Putc>
		SSD1306_Putc((-num/1000)%10+'0', &Font_7x10, SSD1306_COLOR_WHITE);
		SSD1306_Putc((-num/100)%10+'0', &Font_7x10, SSD1306_COLOR_WHITE);
		SSD1306_Putc((-num/10)%10+'0', &Font_7x10, SSD1306_COLOR_WHITE);
		SSD1306_Putc((-num/1)%10+'0', &Font_7x10, SSD1306_COLOR_WHITE);
	}
}
 8000bf0:	e067      	b.n	8000cc2 <print_num+0x1ce>
		SSD1306_Putc('-', &Font_7x10, SSD1306_COLOR_WHITE);
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	4935      	ldr	r1, [pc, #212]	; (8000ccc <print_num+0x1d8>)
 8000bf6:	202d      	movs	r0, #45	; 0x2d
 8000bf8:	f001 f824 	bl	8001c44 <SSD1306_Putc>
		SSD1306_Putc((-num/1000)%10+'0', &Font_7x10, SSD1306_COLOR_WHITE);
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	4a34      	ldr	r2, [pc, #208]	; (8000cd0 <print_num+0x1dc>)
 8000c00:	fb82 1203 	smull	r1, r2, r2, r3
 8000c04:	1192      	asrs	r2, r2, #6
 8000c06:	17db      	asrs	r3, r3, #31
 8000c08:	1a9a      	subs	r2, r3, r2
 8000c0a:	4b32      	ldr	r3, [pc, #200]	; (8000cd4 <print_num+0x1e0>)
 8000c0c:	fb83 1302 	smull	r1, r3, r3, r2
 8000c10:	1099      	asrs	r1, r3, #2
 8000c12:	17d3      	asrs	r3, r2, #31
 8000c14:	1ac9      	subs	r1, r1, r3
 8000c16:	460b      	mov	r3, r1
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	440b      	add	r3, r1
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	1ad1      	subs	r1, r2, r3
 8000c20:	b2cb      	uxtb	r3, r1
 8000c22:	3330      	adds	r3, #48	; 0x30
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	2201      	movs	r2, #1
 8000c28:	4928      	ldr	r1, [pc, #160]	; (8000ccc <print_num+0x1d8>)
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f001 f80a 	bl	8001c44 <SSD1306_Putc>
		SSD1306_Putc((-num/100)%10+'0', &Font_7x10, SSD1306_COLOR_WHITE);
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	4a29      	ldr	r2, [pc, #164]	; (8000cd8 <print_num+0x1e4>)
 8000c34:	fb82 1203 	smull	r1, r2, r2, r3
 8000c38:	1152      	asrs	r2, r2, #5
 8000c3a:	17db      	asrs	r3, r3, #31
 8000c3c:	1a9a      	subs	r2, r3, r2
 8000c3e:	4b25      	ldr	r3, [pc, #148]	; (8000cd4 <print_num+0x1e0>)
 8000c40:	fb83 1302 	smull	r1, r3, r3, r2
 8000c44:	1099      	asrs	r1, r3, #2
 8000c46:	17d3      	asrs	r3, r2, #31
 8000c48:	1ac9      	subs	r1, r1, r3
 8000c4a:	460b      	mov	r3, r1
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	440b      	add	r3, r1
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	1ad1      	subs	r1, r2, r3
 8000c54:	b2cb      	uxtb	r3, r1
 8000c56:	3330      	adds	r3, #48	; 0x30
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	491b      	ldr	r1, [pc, #108]	; (8000ccc <print_num+0x1d8>)
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f000 fff0 	bl	8001c44 <SSD1306_Putc>
		SSD1306_Putc((-num/10)%10+'0', &Font_7x10, SSD1306_COLOR_WHITE);
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	4a1b      	ldr	r2, [pc, #108]	; (8000cd4 <print_num+0x1e0>)
 8000c68:	fb82 1203 	smull	r1, r2, r2, r3
 8000c6c:	1092      	asrs	r2, r2, #2
 8000c6e:	17db      	asrs	r3, r3, #31
 8000c70:	1a9a      	subs	r2, r3, r2
 8000c72:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <print_num+0x1e0>)
 8000c74:	fb83 1302 	smull	r1, r3, r3, r2
 8000c78:	1099      	asrs	r1, r3, #2
 8000c7a:	17d3      	asrs	r3, r2, #31
 8000c7c:	1ac9      	subs	r1, r1, r3
 8000c7e:	460b      	mov	r3, r1
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	440b      	add	r3, r1
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	1ad1      	subs	r1, r2, r3
 8000c88:	b2cb      	uxtb	r3, r1
 8000c8a:	3330      	adds	r3, #48	; 0x30
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	2201      	movs	r2, #1
 8000c90:	490e      	ldr	r1, [pc, #56]	; (8000ccc <print_num+0x1d8>)
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 ffd6 	bl	8001c44 <SSD1306_Putc>
		SSD1306_Putc((-num/1)%10+'0', &Font_7x10, SSD1306_COLOR_WHITE);
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	425a      	negs	r2, r3
 8000c9c:	4b0d      	ldr	r3, [pc, #52]	; (8000cd4 <print_num+0x1e0>)
 8000c9e:	fb83 1302 	smull	r1, r3, r3, r2
 8000ca2:	1099      	asrs	r1, r3, #2
 8000ca4:	17d3      	asrs	r3, r2, #31
 8000ca6:	1ac9      	subs	r1, r1, r3
 8000ca8:	460b      	mov	r3, r1
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	440b      	add	r3, r1
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	1ad1      	subs	r1, r2, r3
 8000cb2:	b2cb      	uxtb	r3, r1
 8000cb4:	3330      	adds	r3, #48	; 0x30
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	2201      	movs	r2, #1
 8000cba:	4904      	ldr	r1, [pc, #16]	; (8000ccc <print_num+0x1d8>)
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f000 ffc1 	bl	8001c44 <SSD1306_Putc>
}
 8000cc2:	bf00      	nop
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000000 	.word	0x20000000
 8000cd0:	10624dd3 	.word	0x10624dd3
 8000cd4:	66666667 	.word	0x66666667
 8000cd8:	51eb851f 	.word	0x51eb851f

08000cdc <HAL_ADC_ConvCpltCallback>:
		spin(0);
		stop();
	}

}
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	shb = adc_result[8];
 8000ce4:	4b1c      	ldr	r3, [pc, #112]	; (8000d58 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000ce6:	8a1b      	ldrh	r3, [r3, #16]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <HAL_ADC_ConvCpltCallback+0x80>)
 8000cec:	601a      	str	r2, [r3, #0]
	shr = adc_result[0];
 8000cee:	4b1a      	ldr	r3, [pc, #104]	; (8000d58 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000cf0:	881b      	ldrh	r3, [r3, #0]
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <HAL_ADC_ConvCpltCallback+0x84>)
 8000cf6:	601a      	str	r2, [r3, #0]
	shl = adc_result[1];
 8000cf8:	4b17      	ldr	r3, [pc, #92]	; (8000d58 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000cfa:	885b      	ldrh	r3, [r3, #2]
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <HAL_ADC_ConvCpltCallback+0x88>)
 8000d00:	601a      	str	r2, [r3, #0]
	kf = adc_result[3] - kf_set;
 8000d02:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000d04:	88db      	ldrh	r3, [r3, #6]
 8000d06:	461a      	mov	r2, r3
 8000d08:	4b17      	ldr	r3, [pc, #92]	; (8000d68 <HAL_ADC_ConvCpltCallback+0x8c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	4a17      	ldr	r2, [pc, #92]	; (8000d6c <HAL_ADC_ConvCpltCallback+0x90>)
 8000d10:	6013      	str	r3, [r2, #0]
	kr = adc_result[4] - kr_set;
 8000d12:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000d14:	891b      	ldrh	r3, [r3, #8]
 8000d16:	461a      	mov	r2, r3
 8000d18:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <HAL_ADC_ConvCpltCallback+0x94>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	4a15      	ldr	r2, [pc, #84]	; (8000d74 <HAL_ADC_ConvCpltCallback+0x98>)
 8000d20:	6013      	str	r3, [r2, #0]
	kb = adc_result[5] - kb_set;
 8000d22:	4b0d      	ldr	r3, [pc, #52]	; (8000d58 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000d24:	895b      	ldrh	r3, [r3, #10]
 8000d26:	461a      	mov	r2, r3
 8000d28:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <HAL_ADC_ConvCpltCallback+0x9c>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	4a13      	ldr	r2, [pc, #76]	; (8000d7c <HAL_ADC_ConvCpltCallback+0xa0>)
 8000d30:	6013      	str	r3, [r2, #0]
	kl = adc_result[6] - kl_set;
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000d34:	899b      	ldrh	r3, [r3, #12]
 8000d36:	461a      	mov	r2, r3
 8000d38:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <HAL_ADC_ConvCpltCallback+0xa4>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	4a11      	ldr	r2, [pc, #68]	; (8000d84 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000d40:	6013      	str	r3, [r2, #0]
	ball_in_kicker = adc_result[2];
 8000d42:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000d44:	889b      	ldrh	r3, [r3, #4]
 8000d46:	461a      	mov	r2, r3
 8000d48:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <HAL_ADC_ConvCpltCallback+0xac>)
 8000d4a:	601a      	str	r2, [r3, #0]
	__NOP();
 8000d4c:	bf00      	nop
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr
 8000d58:	20000308 	.word	0x20000308
 8000d5c:	200002cc 	.word	0x200002cc
 8000d60:	200002d0 	.word	0x200002d0
 8000d64:	200002d4 	.word	0x200002d4
 8000d68:	200002ec 	.word	0x200002ec
 8000d6c:	200002d8 	.word	0x200002d8
 8000d70:	200002f0 	.word	0x200002f0
 8000d74:	200002dc 	.word	0x200002dc
 8000d78:	200002f4 	.word	0x200002f4
 8000d7c:	200002e0 	.word	0x200002e0
 8000d80:	200002f8 	.word	0x200002f8
 8000d84:	200002e4 	.word	0x200002e4
 8000d88:	200002e8 	.word	0x200002e8
 8000d8c:	00000000 	.word	0x00000000

08000d90 <HAL_I2C_MasterRxCpltCallback>:
//{
//	HAL_I2C_Master_Receive_IT(&hi2c2, 0x54 << 1, i2c_rx_data, sizeof(i2c_rx_data));
//
//}
void HAL_I2C_MasterRxCpltCallback (I2C_HandleTypeDef * hi2c)
{
 8000d90:	b5b0      	push	{r4, r5, r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	is_ball = 0;
 8000d98:	4b7b      	ldr	r3, [pc, #492]	; (8000f88 <HAL_I2C_MasterRxCpltCallback+0x1f8>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < sizeof(i2c_rx_data)-1; i++) {
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	e0e0      	b.n	8000f66 <HAL_I2C_MasterRxCpltCallback+0x1d6>
		if(i2c_rx_data[i] == 0x55 && i2c_rx_data[i+1] == 0xaa){
 8000da4:	4a79      	ldr	r2, [pc, #484]	; (8000f8c <HAL_I2C_MasterRxCpltCallback+0x1fc>)
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	4413      	add	r3, r2
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b55      	cmp	r3, #85	; 0x55
 8000dae:	f040 80d7 	bne.w	8000f60 <HAL_I2C_MasterRxCpltCallback+0x1d0>
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	3301      	adds	r3, #1
 8000db6:	4a75      	ldr	r2, [pc, #468]	; (8000f8c <HAL_I2C_MasterRxCpltCallback+0x1fc>)
 8000db8:	5cd3      	ldrb	r3, [r2, r3]
 8000dba:	2baa      	cmp	r3, #170	; 0xaa
 8000dbc:	f040 80d0 	bne.w	8000f60 <HAL_I2C_MasterRxCpltCallback+0x1d0>
			is_ball = 1;
 8000dc0:	4b71      	ldr	r3, [pc, #452]	; (8000f88 <HAL_I2C_MasterRxCpltCallback+0x1f8>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	601a      	str	r2, [r3, #0]
			checksum  = i2c_rx_data[i+2]  | (i2c_rx_data[i+3] << 8);
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	3302      	adds	r3, #2
 8000dca:	4a70      	ldr	r2, [pc, #448]	; (8000f8c <HAL_I2C_MasterRxCpltCallback+0x1fc>)
 8000dcc:	5cd3      	ldrb	r3, [r2, r3]
 8000dce:	b21a      	sxth	r2, r3
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	3303      	adds	r3, #3
 8000dd4:	496d      	ldr	r1, [pc, #436]	; (8000f8c <HAL_I2C_MasterRxCpltCallback+0x1fc>)
 8000dd6:	5ccb      	ldrb	r3, [r1, r3]
 8000dd8:	021b      	lsls	r3, r3, #8
 8000dda:	b21b      	sxth	r3, r3
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	b21b      	sxth	r3, r3
 8000de0:	b29a      	uxth	r2, r3
 8000de2:	4b6b      	ldr	r3, [pc, #428]	; (8000f90 <HAL_I2C_MasterRxCpltCallback+0x200>)
 8000de4:	801a      	strh	r2, [r3, #0]
			signature = i2c_rx_data[i+4]  | (i2c_rx_data[i+5] << 8);
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	3304      	adds	r3, #4
 8000dea:	4a68      	ldr	r2, [pc, #416]	; (8000f8c <HAL_I2C_MasterRxCpltCallback+0x1fc>)
 8000dec:	5cd3      	ldrb	r3, [r2, r3]
 8000dee:	b21a      	sxth	r2, r3
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	3305      	adds	r3, #5
 8000df4:	4965      	ldr	r1, [pc, #404]	; (8000f8c <HAL_I2C_MasterRxCpltCallback+0x1fc>)
 8000df6:	5ccb      	ldrb	r3, [r1, r3]
 8000df8:	021b      	lsls	r3, r3, #8
 8000dfa:	b21b      	sxth	r3, r3
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	b21b      	sxth	r3, r3
 8000e00:	b29a      	uxth	r2, r3
 8000e02:	4b64      	ldr	r3, [pc, #400]	; (8000f94 <HAL_I2C_MasterRxCpltCallback+0x204>)
 8000e04:	801a      	strh	r2, [r3, #0]
			x_ball    = i2c_rx_data[i+6]  | (i2c_rx_data[i+7] << 8);
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	3306      	adds	r3, #6
 8000e0a:	4a60      	ldr	r2, [pc, #384]	; (8000f8c <HAL_I2C_MasterRxCpltCallback+0x1fc>)
 8000e0c:	5cd3      	ldrb	r3, [r2, r3]
 8000e0e:	b21a      	sxth	r2, r3
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	3307      	adds	r3, #7
 8000e14:	495d      	ldr	r1, [pc, #372]	; (8000f8c <HAL_I2C_MasterRxCpltCallback+0x1fc>)
 8000e16:	5ccb      	ldrb	r3, [r1, r3]
 8000e18:	021b      	lsls	r3, r3, #8
 8000e1a:	b21b      	sxth	r3, r3
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	b21b      	sxth	r3, r3
 8000e20:	b29a      	uxth	r2, r3
 8000e22:	4b5d      	ldr	r3, [pc, #372]	; (8000f98 <HAL_I2C_MasterRxCpltCallback+0x208>)
 8000e24:	801a      	strh	r2, [r3, #0]
			y_ball 	  = i2c_rx_data[i+8]  | (i2c_rx_data[i+9] << 8);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	3308      	adds	r3, #8
 8000e2a:	4a58      	ldr	r2, [pc, #352]	; (8000f8c <HAL_I2C_MasterRxCpltCallback+0x1fc>)
 8000e2c:	5cd3      	ldrb	r3, [r2, r3]
 8000e2e:	b21a      	sxth	r2, r3
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	3309      	adds	r3, #9
 8000e34:	4955      	ldr	r1, [pc, #340]	; (8000f8c <HAL_I2C_MasterRxCpltCallback+0x1fc>)
 8000e36:	5ccb      	ldrb	r3, [r1, r3]
 8000e38:	021b      	lsls	r3, r3, #8
 8000e3a:	b21b      	sxth	r3, r3
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	b21b      	sxth	r3, r3
 8000e40:	b29a      	uxth	r2, r3
 8000e42:	4b56      	ldr	r3, [pc, #344]	; (8000f9c <HAL_I2C_MasterRxCpltCallback+0x20c>)
 8000e44:	801a      	strh	r2, [r3, #0]
			w 		  = i2c_rx_data[i+10] | (i2c_rx_data[i+11] << 8);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	330a      	adds	r3, #10
 8000e4a:	4a50      	ldr	r2, [pc, #320]	; (8000f8c <HAL_I2C_MasterRxCpltCallback+0x1fc>)
 8000e4c:	5cd3      	ldrb	r3, [r2, r3]
 8000e4e:	b21a      	sxth	r2, r3
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	330b      	adds	r3, #11
 8000e54:	494d      	ldr	r1, [pc, #308]	; (8000f8c <HAL_I2C_MasterRxCpltCallback+0x1fc>)
 8000e56:	5ccb      	ldrb	r3, [r1, r3]
 8000e58:	021b      	lsls	r3, r3, #8
 8000e5a:	b21b      	sxth	r3, r3
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	b21b      	sxth	r3, r3
 8000e60:	b29a      	uxth	r2, r3
 8000e62:	4b4f      	ldr	r3, [pc, #316]	; (8000fa0 <HAL_I2C_MasterRxCpltCallback+0x210>)
 8000e64:	801a      	strh	r2, [r3, #0]
			h 		  = i2c_rx_data[i+12] | (i2c_rx_data[i+13] << 8);
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	330c      	adds	r3, #12
 8000e6a:	4a48      	ldr	r2, [pc, #288]	; (8000f8c <HAL_I2C_MasterRxCpltCallback+0x1fc>)
 8000e6c:	5cd3      	ldrb	r3, [r2, r3]
 8000e6e:	b21a      	sxth	r2, r3
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	330d      	adds	r3, #13
 8000e74:	4945      	ldr	r1, [pc, #276]	; (8000f8c <HAL_I2C_MasterRxCpltCallback+0x1fc>)
 8000e76:	5ccb      	ldrb	r3, [r1, r3]
 8000e78:	021b      	lsls	r3, r3, #8
 8000e7a:	b21b      	sxth	r3, r3
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	b21b      	sxth	r3, r3
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	4b48      	ldr	r3, [pc, #288]	; (8000fa4 <HAL_I2C_MasterRxCpltCallback+0x214>)
 8000e84:	801a      	strh	r2, [r3, #0]
			ball_angle     = atan2(y_ball - y_robot, x_robot - x_ball) * 180 / M_PI;
 8000e86:	4b45      	ldr	r3, [pc, #276]	; (8000f9c <HAL_I2C_MasterRxCpltCallback+0x20c>)
 8000e88:	881b      	ldrh	r3, [r3, #0]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	4b46      	ldr	r3, [pc, #280]	; (8000fa8 <HAL_I2C_MasterRxCpltCallback+0x218>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff faae 	bl	80003f4 <__aeabi_i2d>
 8000e98:	4604      	mov	r4, r0
 8000e9a:	460d      	mov	r5, r1
 8000e9c:	4b43      	ldr	r3, [pc, #268]	; (8000fac <HAL_I2C_MasterRxCpltCallback+0x21c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a3d      	ldr	r2, [pc, #244]	; (8000f98 <HAL_I2C_MasterRxCpltCallback+0x208>)
 8000ea2:	8812      	ldrh	r2, [r2, #0]
 8000ea4:	1a9b      	subs	r3, r3, r2
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff faa4 	bl	80003f4 <__aeabi_i2d>
 8000eac:	4602      	mov	r2, r0
 8000eae:	460b      	mov	r3, r1
 8000eb0:	4620      	mov	r0, r4
 8000eb2:	4629      	mov	r1, r5
 8000eb4:	f007 f9ec 	bl	8008290 <atan2>
 8000eb8:	f04f 0200 	mov.w	r2, #0
 8000ebc:	4b3c      	ldr	r3, [pc, #240]	; (8000fb0 <HAL_I2C_MasterRxCpltCallback+0x220>)
 8000ebe:	f7ff fb03 	bl	80004c8 <__aeabi_dmul>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	4610      	mov	r0, r2
 8000ec8:	4619      	mov	r1, r3
 8000eca:	a32d      	add	r3, pc, #180	; (adr r3, 8000f80 <HAL_I2C_MasterRxCpltCallback+0x1f0>)
 8000ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed0:	f7ff fc24 	bl	800071c <__aeabi_ddiv>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	4610      	mov	r0, r2
 8000eda:	4619      	mov	r1, r3
 8000edc:	f7ff fda4 	bl	8000a28 <__aeabi_d2iz>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	4a34      	ldr	r2, [pc, #208]	; (8000fb4 <HAL_I2C_MasterRxCpltCallback+0x224>)
 8000ee4:	6013      	str	r3, [r2, #0]
			if(ball_angle < 0)   ball_angle = ball_angle + 360;
 8000ee6:	4b33      	ldr	r3, [pc, #204]	; (8000fb4 <HAL_I2C_MasterRxCpltCallback+0x224>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	da05      	bge.n	8000efa <HAL_I2C_MasterRxCpltCallback+0x16a>
 8000eee:	4b31      	ldr	r3, [pc, #196]	; (8000fb4 <HAL_I2C_MasterRxCpltCallback+0x224>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000ef6:	4a2f      	ldr	r2, [pc, #188]	; (8000fb4 <HAL_I2C_MasterRxCpltCallback+0x224>)
 8000ef8:	6013      	str	r3, [r2, #0]
			ball_dist = sqrt(pow(x_robot - x_ball , 2) + pow(y_robot - y_ball , 2));
 8000efa:	4b2c      	ldr	r3, [pc, #176]	; (8000fac <HAL_I2C_MasterRxCpltCallback+0x21c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a26      	ldr	r2, [pc, #152]	; (8000f98 <HAL_I2C_MasterRxCpltCallback+0x208>)
 8000f00:	8812      	ldrh	r2, [r2, #0]
 8000f02:	1a9b      	subs	r3, r3, r2
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff fa75 	bl	80003f4 <__aeabi_i2d>
 8000f0a:	f04f 0200 	mov.w	r2, #0
 8000f0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f12:	f007 f9bf 	bl	8008294 <pow>
 8000f16:	4604      	mov	r4, r0
 8000f18:	460d      	mov	r5, r1
 8000f1a:	4b23      	ldr	r3, [pc, #140]	; (8000fa8 <HAL_I2C_MasterRxCpltCallback+0x218>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a1f      	ldr	r2, [pc, #124]	; (8000f9c <HAL_I2C_MasterRxCpltCallback+0x20c>)
 8000f20:	8812      	ldrh	r2, [r2, #0]
 8000f22:	1a9b      	subs	r3, r3, r2
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff fa65 	bl	80003f4 <__aeabi_i2d>
 8000f2a:	f04f 0200 	mov.w	r2, #0
 8000f2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f32:	f007 f9af 	bl	8008294 <pow>
 8000f36:	4602      	mov	r2, r0
 8000f38:	460b      	mov	r3, r1
 8000f3a:	4620      	mov	r0, r4
 8000f3c:	4629      	mov	r1, r5
 8000f3e:	f7ff f90d 	bl	800015c <__adddf3>
 8000f42:	4602      	mov	r2, r0
 8000f44:	460b      	mov	r3, r1
 8000f46:	4610      	mov	r0, r2
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f007 fa0b 	bl	8008364 <sqrt>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	460b      	mov	r3, r1
 8000f52:	4610      	mov	r0, r2
 8000f54:	4619      	mov	r1, r3
 8000f56:	f7ff fd67 	bl	8000a28 <__aeabi_d2iz>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	4a16      	ldr	r2, [pc, #88]	; (8000fb8 <HAL_I2C_MasterRxCpltCallback+0x228>)
 8000f5e:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < sizeof(i2c_rx_data)-1; i++) {
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	3301      	adds	r3, #1
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	2b1e      	cmp	r3, #30
 8000f6a:	f67f af1b 	bls.w	8000da4 <HAL_I2C_MasterRxCpltCallback+0x14>
		}
	}
	pixy_updated = 0;
 8000f6e:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <HAL_I2C_MasterRxCpltCallback+0x22c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
}
 8000f74:	bf00      	nop
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bdb0      	pop	{r4, r5, r7, pc}
 8000f7c:	f3af 8000 	nop.w
 8000f80:	54442d18 	.word	0x54442d18
 8000f84:	400921fb 	.word	0x400921fb
 8000f88:	200002c8 	.word	0x200002c8
 8000f8c:	20000294 	.word	0x20000294
 8000f90:	200002b4 	.word	0x200002b4
 8000f94:	200002b6 	.word	0x200002b6
 8000f98:	200002b8 	.word	0x200002b8
 8000f9c:	200002ba 	.word	0x200002ba
 8000fa0:	200002bc 	.word	0x200002bc
 8000fa4:	200002be 	.word	0x200002be
 8000fa8:	2000000c 	.word	0x2000000c
 8000fac:	20000008 	.word	0x20000008
 8000fb0:	40668000 	.word	0x40668000
 8000fb4:	200002c0 	.word	0x200002c0
 8000fb8:	200002c4 	.word	0x200002c4
 8000fbc:	200002fc 	.word	0x200002fc

08000fc0 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fd2:	4859      	ldr	r0, [pc, #356]	; (8001138 <HAL_UARTEx_RxEventCallback+0x178>)
 8000fd4:	f002 fc3a 	bl	800384c <HAL_GPIO_WritePin>
	for(int i=0; i<RX2_Size; i++){
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	e090      	b.n	8001100 <HAL_UARTEx_RxEventCallback+0x140>
		if(Rx2_Buff[i] == 0xAA){
 8000fde:	4a57      	ldr	r2, [pc, #348]	; (800113c <HAL_UARTEx_RxEventCallback+0x17c>)
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2baa      	cmp	r3, #170	; 0xaa
 8000fe8:	f040 8087 	bne.w	80010fa <HAL_UARTEx_RxEventCallback+0x13a>
			Heading = (int16_t)(Rx2_Buff[(i+1)%8]<<8 | Rx2_Buff[(i+2)%8])/100.00;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	425a      	negs	r2, r3
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	f002 0207 	and.w	r2, r2, #7
 8000ffa:	bf58      	it	pl
 8000ffc:	4253      	negpl	r3, r2
 8000ffe:	4a4f      	ldr	r2, [pc, #316]	; (800113c <HAL_UARTEx_RxEventCallback+0x17c>)
 8001000:	5cd3      	ldrb	r3, [r2, r3]
 8001002:	021b      	lsls	r3, r3, #8
 8001004:	b21a      	sxth	r2, r3
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	3302      	adds	r3, #2
 800100a:	4259      	negs	r1, r3
 800100c:	f003 0307 	and.w	r3, r3, #7
 8001010:	f001 0107 	and.w	r1, r1, #7
 8001014:	bf58      	it	pl
 8001016:	424b      	negpl	r3, r1
 8001018:	4948      	ldr	r1, [pc, #288]	; (800113c <HAL_UARTEx_RxEventCallback+0x17c>)
 800101a:	5ccb      	ldrb	r3, [r1, r3]
 800101c:	b21b      	sxth	r3, r3
 800101e:	4313      	orrs	r3, r2
 8001020:	b21b      	sxth	r3, r3
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff f9e6 	bl	80003f4 <__aeabi_i2d>
 8001028:	f04f 0200 	mov.w	r2, #0
 800102c:	4b44      	ldr	r3, [pc, #272]	; (8001140 <HAL_UARTEx_RxEventCallback+0x180>)
 800102e:	f7ff fb75 	bl	800071c <__aeabi_ddiv>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	4610      	mov	r0, r2
 8001038:	4619      	mov	r1, r3
 800103a:	f7ff fcf5 	bl	8000a28 <__aeabi_d2iz>
 800103e:	4603      	mov	r3, r0
 8001040:	b21a      	sxth	r2, r3
 8001042:	4b40      	ldr	r3, [pc, #256]	; (8001144 <HAL_UARTEx_RxEventCallback+0x184>)
 8001044:	801a      	strh	r2, [r3, #0]
			Pitch = (int16_t)(Rx2_Buff[(i+3)%8]<<8 | Rx2_Buff[(i+4)%8])/100.00;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	3303      	adds	r3, #3
 800104a:	425a      	negs	r2, r3
 800104c:	f003 0307 	and.w	r3, r3, #7
 8001050:	f002 0207 	and.w	r2, r2, #7
 8001054:	bf58      	it	pl
 8001056:	4253      	negpl	r3, r2
 8001058:	4a38      	ldr	r2, [pc, #224]	; (800113c <HAL_UARTEx_RxEventCallback+0x17c>)
 800105a:	5cd3      	ldrb	r3, [r2, r3]
 800105c:	021b      	lsls	r3, r3, #8
 800105e:	b21a      	sxth	r2, r3
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	3304      	adds	r3, #4
 8001064:	4259      	negs	r1, r3
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	f001 0107 	and.w	r1, r1, #7
 800106e:	bf58      	it	pl
 8001070:	424b      	negpl	r3, r1
 8001072:	4932      	ldr	r1, [pc, #200]	; (800113c <HAL_UARTEx_RxEventCallback+0x17c>)
 8001074:	5ccb      	ldrb	r3, [r1, r3]
 8001076:	b21b      	sxth	r3, r3
 8001078:	4313      	orrs	r3, r2
 800107a:	b21b      	sxth	r3, r3
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff f9b9 	bl	80003f4 <__aeabi_i2d>
 8001082:	f04f 0200 	mov.w	r2, #0
 8001086:	4b2e      	ldr	r3, [pc, #184]	; (8001140 <HAL_UARTEx_RxEventCallback+0x180>)
 8001088:	f7ff fb48 	bl	800071c <__aeabi_ddiv>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	4610      	mov	r0, r2
 8001092:	4619      	mov	r1, r3
 8001094:	f7ff fcc8 	bl	8000a28 <__aeabi_d2iz>
 8001098:	4603      	mov	r3, r0
 800109a:	b21a      	sxth	r2, r3
 800109c:	4b2a      	ldr	r3, [pc, #168]	; (8001148 <HAL_UARTEx_RxEventCallback+0x188>)
 800109e:	801a      	strh	r2, [r3, #0]
			Roll = (int16_t)(Rx2_Buff[(i+5)%8]<<8 | Rx2_Buff[(i+6)%8])/100.00;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	3305      	adds	r3, #5
 80010a4:	425a      	negs	r2, r3
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	f002 0207 	and.w	r2, r2, #7
 80010ae:	bf58      	it	pl
 80010b0:	4253      	negpl	r3, r2
 80010b2:	4a22      	ldr	r2, [pc, #136]	; (800113c <HAL_UARTEx_RxEventCallback+0x17c>)
 80010b4:	5cd3      	ldrb	r3, [r2, r3]
 80010b6:	021b      	lsls	r3, r3, #8
 80010b8:	b21a      	sxth	r2, r3
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	3306      	adds	r3, #6
 80010be:	4259      	negs	r1, r3
 80010c0:	f003 0307 	and.w	r3, r3, #7
 80010c4:	f001 0107 	and.w	r1, r1, #7
 80010c8:	bf58      	it	pl
 80010ca:	424b      	negpl	r3, r1
 80010cc:	491b      	ldr	r1, [pc, #108]	; (800113c <HAL_UARTEx_RxEventCallback+0x17c>)
 80010ce:	5ccb      	ldrb	r3, [r1, r3]
 80010d0:	b21b      	sxth	r3, r3
 80010d2:	4313      	orrs	r3, r2
 80010d4:	b21b      	sxth	r3, r3
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff f98c 	bl	80003f4 <__aeabi_i2d>
 80010dc:	f04f 0200 	mov.w	r2, #0
 80010e0:	4b17      	ldr	r3, [pc, #92]	; (8001140 <HAL_UARTEx_RxEventCallback+0x180>)
 80010e2:	f7ff fb1b 	bl	800071c <__aeabi_ddiv>
 80010e6:	4602      	mov	r2, r0
 80010e8:	460b      	mov	r3, r1
 80010ea:	4610      	mov	r0, r2
 80010ec:	4619      	mov	r1, r3
 80010ee:	f7ff fc9b 	bl	8000a28 <__aeabi_d2iz>
 80010f2:	4603      	mov	r3, r0
 80010f4:	b21a      	sxth	r2, r3
 80010f6:	4b15      	ldr	r3, [pc, #84]	; (800114c <HAL_UARTEx_RxEventCallback+0x18c>)
 80010f8:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<RX2_Size; i++){
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	3301      	adds	r3, #1
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	2b07      	cmp	r3, #7
 8001104:	f77f af6b 	ble.w	8000fde <HAL_UARTEx_RxEventCallback+0x1e>
		}
	}
	HAL_UART_Transmit(&huart1, GY_Request_Command, 2, PHY_FULLDUPLEX_10M);
 8001108:	f44f 7380 	mov.w	r3, #256	; 0x100
 800110c:	2202      	movs	r2, #2
 800110e:	4910      	ldr	r1, [pc, #64]	; (8001150 <HAL_UARTEx_RxEventCallback+0x190>)
 8001110:	4810      	ldr	r0, [pc, #64]	; (8001154 <HAL_UARTEx_RxEventCallback+0x194>)
 8001112:	f006 f89e 	bl	8007252 <HAL_UART_Transmit>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, Rx2_Buff, RX2_Size);
 8001116:	2208      	movs	r2, #8
 8001118:	4908      	ldr	r1, [pc, #32]	; (800113c <HAL_UARTEx_RxEventCallback+0x17c>)
 800111a:	480e      	ldr	r0, [pc, #56]	; (8001154 <HAL_UARTEx_RxEventCallback+0x194>)
 800111c:	f006 f91c 	bl	8007358 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001120:	4b0d      	ldr	r3, [pc, #52]	; (8001158 <HAL_UARTEx_RxEventCallback+0x198>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <HAL_UARTEx_RxEventCallback+0x198>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f022 0204 	bic.w	r2, r2, #4
 800112e:	601a      	str	r2, [r3, #0]
}
 8001130:	bf00      	nop
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40011000 	.word	0x40011000
 800113c:	20000320 	.word	0x20000320
 8001140:	40590000 	.word	0x40590000
 8001144:	20000304 	.word	0x20000304
 8001148:	20000300 	.word	0x20000300
 800114c:	20000302 	.word	0x20000302
 8001150:	20000020 	.word	0x20000020
 8001154:	20000208 	.word	0x20000208
 8001158:	20000250 	.word	0x20000250

0800115c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001162:	f001 f93d 	bl	80023e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001166:	f000 f901 	bl	800136c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800116a:	f000 fb79 	bl	8001860 <MX_GPIO_Init>
  MX_TIM1_Init();
 800116e:	f000 fa33 	bl	80015d8 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001172:	f000 fab5 	bl	80016e0 <MX_TIM4_Init>
  MX_I2C2_Init();
 8001176:	f000 fa01 	bl	800157c <MX_I2C2_Init>
  MX_DMA_Init();
 800117a:	f000 fb4b 	bl	8001814 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800117e:	f000 fb1f 	bl	80017c0 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001182:	f000 f94b 	bl	800141c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001186:	2100      	movs	r1, #0
 8001188:	4855      	ldr	r0, [pc, #340]	; (80012e0 <main+0x184>)
 800118a:	f005 fbf1 	bl	8006970 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800118e:	2108      	movs	r1, #8
 8001190:	4854      	ldr	r0, [pc, #336]	; (80012e4 <main+0x188>)
 8001192:	f005 fbed 	bl	8006970 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001196:	2104      	movs	r1, #4
 8001198:	4852      	ldr	r0, [pc, #328]	; (80012e4 <main+0x188>)
 800119a:	f005 fbe9 	bl	8006970 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800119e:	2100      	movs	r1, #0
 80011a0:	4850      	ldr	r0, [pc, #320]	; (80012e4 <main+0x188>)
 80011a2:	f005 fbe5 	bl	8006970 <HAL_TIM_PWM_Start>
   HAL_Delay(2000);
 80011a6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80011aa:	f001 f97b 	bl	80024a4 <HAL_Delay>
   SSD1306_Init();
 80011ae:	f000 fbcb 	bl	8001948 <SSD1306_Init>

   initGY();
 80011b2:	f7ff fc61 	bl	8000a78 <initGY>

   HAL_ADC_Start(&hadc1);
 80011b6:	484c      	ldr	r0, [pc, #304]	; (80012e8 <main+0x18c>)
 80011b8:	f001 fa70 	bl	800269c <HAL_ADC_Start>
   kf_set = 900;
 80011bc:	4b4b      	ldr	r3, [pc, #300]	; (80012ec <main+0x190>)
 80011be:	f44f 7261 	mov.w	r2, #900	; 0x384
 80011c2:	601a      	str	r2, [r3, #0]
   kr_set = 1300;
 80011c4:	4b4a      	ldr	r3, [pc, #296]	; (80012f0 <main+0x194>)
 80011c6:	f240 5214 	movw	r2, #1300	; 0x514
 80011ca:	601a      	str	r2, [r3, #0]
   kb_set = 250;
 80011cc:	4b49      	ldr	r3, [pc, #292]	; (80012f4 <main+0x198>)
 80011ce:	22fa      	movs	r2, #250	; 0xfa
 80011d0:	601a      	str	r2, [r3, #0]
   kl_set = 500;
 80011d2:	4b49      	ldr	r3, [pc, #292]	; (80012f8 <main+0x19c>)
 80011d4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80011d8:	601a      	str	r2, [r3, #0]
   i2c_tx_data[0] = 0x54;
 80011da:	4b48      	ldr	r3, [pc, #288]	; (80012fc <main+0x1a0>)
 80011dc:	2254      	movs	r2, #84	; 0x54
 80011de:	701a      	strb	r2, [r3, #0]
   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80011e0:	2201      	movs	r2, #1
 80011e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011e6:	4846      	ldr	r0, [pc, #280]	; (8001300 <main+0x1a4>)
 80011e8:	f002 fb30 	bl	800384c <HAL_GPIO_WritePin>
   HAL_Delay(500);
 80011ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011f0:	f001 f958 	bl	80024a4 <HAL_Delay>
   HAL_UART_Transmit(&huart1, GY_Request_Command, 2, PHY_FULLDUPLEX_10M);
 80011f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011f8:	2202      	movs	r2, #2
 80011fa:	4942      	ldr	r1, [pc, #264]	; (8001304 <main+0x1a8>)
 80011fc:	4842      	ldr	r0, [pc, #264]	; (8001308 <main+0x1ac>)
 80011fe:	f006 f828 	bl	8007252 <HAL_UART_Transmit>
   HAL_UARTEx_ReceiveToIdle_DMA(&huart1, Rx2_Buff, RX2_Size);
 8001202:	2208      	movs	r2, #8
 8001204:	4941      	ldr	r1, [pc, #260]	; (800130c <main+0x1b0>)
 8001206:	4840      	ldr	r0, [pc, #256]	; (8001308 <main+0x1ac>)
 8001208:	f006 f8a6 	bl	8007358 <HAL_UARTEx_ReceiveToIdle_DMA>
   __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800120c:	4b40      	ldr	r3, [pc, #256]	; (8001310 <main+0x1b4>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	4b3f      	ldr	r3, [pc, #252]	; (8001310 <main+0x1b4>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f022 0204 	bic.w	r2, r2, #4
 800121a:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_result, 9);
 800121c:	2209      	movs	r2, #9
 800121e:	493d      	ldr	r1, [pc, #244]	; (8001314 <main+0x1b8>)
 8001220:	4831      	ldr	r0, [pc, #196]	; (80012e8 <main+0x18c>)
 8001222:	f001 fae9 	bl	80027f8 <HAL_ADC_Start_DMA>
	if(pixy_updated == 0) {
 8001226:	4b3c      	ldr	r3, [pc, #240]	; (8001318 <main+0x1bc>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d110      	bne.n	8001250 <main+0xf4>
		HAL_I2C_Master_Transmit(&hi2c2, 0x54 << 1, i2c_tx_data, sizeof(i2c_tx_data), 100);
 800122e:	2364      	movs	r3, #100	; 0x64
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	2301      	movs	r3, #1
 8001234:	4a31      	ldr	r2, [pc, #196]	; (80012fc <main+0x1a0>)
 8001236:	21a8      	movs	r1, #168	; 0xa8
 8001238:	4838      	ldr	r0, [pc, #224]	; (800131c <main+0x1c0>)
 800123a:	f002 fc77 	bl	8003b2c <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive_IT(&hi2c2, 0x54 << 1, i2c_rx_data, sizeof(i2c_rx_data));
 800123e:	2320      	movs	r3, #32
 8001240:	4a37      	ldr	r2, [pc, #220]	; (8001320 <main+0x1c4>)
 8001242:	21a8      	movs	r1, #168	; 0xa8
 8001244:	4835      	ldr	r0, [pc, #212]	; (800131c <main+0x1c0>)
 8001246:	f002 fd6f 	bl	8003d28 <HAL_I2C_Master_Receive_IT>
		pixy_updated = 1;
 800124a:	4b33      	ldr	r3, [pc, #204]	; (8001318 <main+0x1bc>)
 800124c:	2201      	movs	r2, #1
 800124e:	601a      	str	r2, [r3, #0]
	}
//	OUT();
//	shift();
	print_num("SI:", signature,  5, 10);
 8001250:	4b34      	ldr	r3, [pc, #208]	; (8001324 <main+0x1c8>)
 8001252:	881b      	ldrh	r3, [r3, #0]
 8001254:	4619      	mov	r1, r3
 8001256:	230a      	movs	r3, #10
 8001258:	2205      	movs	r2, #5
 800125a:	4833      	ldr	r0, [pc, #204]	; (8001328 <main+0x1cc>)
 800125c:	f7ff fc4a 	bl	8000af4 <print_num>
	print_num("XB:", x_ball,     5, 20);
 8001260:	4b32      	ldr	r3, [pc, #200]	; (800132c <main+0x1d0>)
 8001262:	881b      	ldrh	r3, [r3, #0]
 8001264:	4619      	mov	r1, r3
 8001266:	2314      	movs	r3, #20
 8001268:	2205      	movs	r2, #5
 800126a:	4831      	ldr	r0, [pc, #196]	; (8001330 <main+0x1d4>)
 800126c:	f7ff fc42 	bl	8000af4 <print_num>
	print_num("YB:", y_ball,     5, 30);
 8001270:	4b30      	ldr	r3, [pc, #192]	; (8001334 <main+0x1d8>)
 8001272:	881b      	ldrh	r3, [r3, #0]
 8001274:	4619      	mov	r1, r3
 8001276:	231e      	movs	r3, #30
 8001278:	2205      	movs	r2, #5
 800127a:	482f      	ldr	r0, [pc, #188]	; (8001338 <main+0x1dc>)
 800127c:	f7ff fc3a 	bl	8000af4 <print_num>
	print_num("BA:", ball_angle, 5, 40);
 8001280:	4b2e      	ldr	r3, [pc, #184]	; (800133c <main+0x1e0>)
 8001282:	6819      	ldr	r1, [r3, #0]
 8001284:	2328      	movs	r3, #40	; 0x28
 8001286:	2205      	movs	r2, #5
 8001288:	482d      	ldr	r0, [pc, #180]	; (8001340 <main+0x1e4>)
 800128a:	f7ff fc33 	bl	8000af4 <print_num>
	print_num("GY:", Heading,    5, 50);
 800128e:	4b2d      	ldr	r3, [pc, #180]	; (8001344 <main+0x1e8>)
 8001290:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001294:	4619      	mov	r1, r3
 8001296:	2332      	movs	r3, #50	; 0x32
 8001298:	2205      	movs	r2, #5
 800129a:	482b      	ldr	r0, [pc, #172]	; (8001348 <main+0x1ec>)
 800129c:	f7ff fc2a 	bl	8000af4 <print_num>
	print_num("KF:", kf,	    64, 10);
 80012a0:	4b2a      	ldr	r3, [pc, #168]	; (800134c <main+0x1f0>)
 80012a2:	6819      	ldr	r1, [r3, #0]
 80012a4:	230a      	movs	r3, #10
 80012a6:	2240      	movs	r2, #64	; 0x40
 80012a8:	4829      	ldr	r0, [pc, #164]	; (8001350 <main+0x1f4>)
 80012aa:	f7ff fc23 	bl	8000af4 <print_num>
	print_num("KL:", kl,	    64, 20);
 80012ae:	4b29      	ldr	r3, [pc, #164]	; (8001354 <main+0x1f8>)
 80012b0:	6819      	ldr	r1, [r3, #0]
 80012b2:	2314      	movs	r3, #20
 80012b4:	2240      	movs	r2, #64	; 0x40
 80012b6:	4828      	ldr	r0, [pc, #160]	; (8001358 <main+0x1fc>)
 80012b8:	f7ff fc1c 	bl	8000af4 <print_num>
	print_num("KR:", kr,	    64, 30);
 80012bc:	4b27      	ldr	r3, [pc, #156]	; (800135c <main+0x200>)
 80012be:	6819      	ldr	r1, [r3, #0]
 80012c0:	231e      	movs	r3, #30
 80012c2:	2240      	movs	r2, #64	; 0x40
 80012c4:	4826      	ldr	r0, [pc, #152]	; (8001360 <main+0x204>)
 80012c6:	f7ff fc15 	bl	8000af4 <print_num>
	print_num("KB:", kb,	    64, 40);
 80012ca:	4b26      	ldr	r3, [pc, #152]	; (8001364 <main+0x208>)
 80012cc:	6819      	ldr	r1, [r3, #0]
 80012ce:	2328      	movs	r3, #40	; 0x28
 80012d0:	2240      	movs	r2, #64	; 0x40
 80012d2:	4825      	ldr	r0, [pc, #148]	; (8001368 <main+0x20c>)
 80012d4:	f7ff fc0e 	bl	8000af4 <print_num>


	SSD1306_UpdateScreen();
 80012d8:	f000 fbfa 	bl	8001ad0 <SSD1306_UpdateScreen>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_result, 9);
 80012dc:	e79e      	b.n	800121c <main+0xc0>
 80012de:	bf00      	nop
 80012e0:	20000178 	.word	0x20000178
 80012e4:	200001c0 	.word	0x200001c0
 80012e8:	200000b0 	.word	0x200000b0
 80012ec:	200002ec 	.word	0x200002ec
 80012f0:	200002f0 	.word	0x200002f0
 80012f4:	200002f4 	.word	0x200002f4
 80012f8:	200002f8 	.word	0x200002f8
 80012fc:	2000031c 	.word	0x2000031c
 8001300:	40011000 	.word	0x40011000
 8001304:	20000020 	.word	0x20000020
 8001308:	20000208 	.word	0x20000208
 800130c:	20000320 	.word	0x20000320
 8001310:	20000250 	.word	0x20000250
 8001314:	20000308 	.word	0x20000308
 8001318:	200002fc 	.word	0x200002fc
 800131c:	20000124 	.word	0x20000124
 8001320:	20000294 	.word	0x20000294
 8001324:	200002b6 	.word	0x200002b6
 8001328:	08009580 	.word	0x08009580
 800132c:	200002b8 	.word	0x200002b8
 8001330:	08009584 	.word	0x08009584
 8001334:	200002ba 	.word	0x200002ba
 8001338:	08009588 	.word	0x08009588
 800133c:	200002c0 	.word	0x200002c0
 8001340:	0800958c 	.word	0x0800958c
 8001344:	20000304 	.word	0x20000304
 8001348:	08009590 	.word	0x08009590
 800134c:	200002d8 	.word	0x200002d8
 8001350:	08009594 	.word	0x08009594
 8001354:	200002e4 	.word	0x200002e4
 8001358:	08009598 	.word	0x08009598
 800135c:	200002dc 	.word	0x200002dc
 8001360:	0800959c 	.word	0x0800959c
 8001364:	200002e0 	.word	0x200002e0
 8001368:	080095a0 	.word	0x080095a0

0800136c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b094      	sub	sp, #80	; 0x50
 8001370:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001372:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001376:	2228      	movs	r2, #40	; 0x28
 8001378:	2100      	movs	r1, #0
 800137a:	4618      	mov	r0, r3
 800137c:	f006 ff80 	bl	8008280 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001390:	1d3b      	adds	r3, r7, #4
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800139c:	2302      	movs	r3, #2
 800139e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013a0:	2301      	movs	r3, #1
 80013a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013a4:	2310      	movs	r3, #16
 80013a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013a8:	2302      	movs	r3, #2
 80013aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80013ac:	2300      	movs	r3, #0
 80013ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80013b0:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80013b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ba:	4618      	mov	r0, r3
 80013bc:	f004 fdc2 	bl	8005f44 <HAL_RCC_OscConfig>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80013c6:	f000 fab9 	bl	800193c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ca:	230f      	movs	r3, #15
 80013cc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ce:	2302      	movs	r3, #2
 80013d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013da:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013dc:	2300      	movs	r3, #0
 80013de:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	2102      	movs	r1, #2
 80013e6:	4618      	mov	r0, r3
 80013e8:	f005 f82e 	bl	8006448 <HAL_RCC_ClockConfig>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80013f2:	f000 faa3 	bl	800193c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013f6:	2302      	movs	r3, #2
 80013f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80013fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013fe:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	4618      	mov	r0, r3
 8001404:	f005 f9ae 	bl	8006764 <HAL_RCCEx_PeriphCLKConfig>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800140e:	f000 fa95 	bl	800193c <Error_Handler>
  }
}
 8001412:	bf00      	nop
 8001414:	3750      	adds	r7, #80	; 0x50
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001422:	1d3b      	adds	r3, r7, #4
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800142c:	4b51      	ldr	r3, [pc, #324]	; (8001574 <MX_ADC1_Init+0x158>)
 800142e:	4a52      	ldr	r2, [pc, #328]	; (8001578 <MX_ADC1_Init+0x15c>)
 8001430:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001432:	4b50      	ldr	r3, [pc, #320]	; (8001574 <MX_ADC1_Init+0x158>)
 8001434:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001438:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800143a:	4b4e      	ldr	r3, [pc, #312]	; (8001574 <MX_ADC1_Init+0x158>)
 800143c:	2200      	movs	r2, #0
 800143e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001440:	4b4c      	ldr	r3, [pc, #304]	; (8001574 <MX_ADC1_Init+0x158>)
 8001442:	2200      	movs	r2, #0
 8001444:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001446:	4b4b      	ldr	r3, [pc, #300]	; (8001574 <MX_ADC1_Init+0x158>)
 8001448:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800144c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800144e:	4b49      	ldr	r3, [pc, #292]	; (8001574 <MX_ADC1_Init+0x158>)
 8001450:	2200      	movs	r2, #0
 8001452:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 9;
 8001454:	4b47      	ldr	r3, [pc, #284]	; (8001574 <MX_ADC1_Init+0x158>)
 8001456:	2209      	movs	r2, #9
 8001458:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800145a:	4846      	ldr	r0, [pc, #280]	; (8001574 <MX_ADC1_Init+0x158>)
 800145c:	f001 f846 	bl	80024ec <HAL_ADC_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001466:	f000 fa69 	bl	800193c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800146e:	2301      	movs	r3, #1
 8001470:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	4619      	mov	r1, r3
 800147a:	483e      	ldr	r0, [pc, #248]	; (8001574 <MX_ADC1_Init+0x158>)
 800147c:	f001 faac 	bl	80029d8 <HAL_ADC_ConfigChannel>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001486:	f000 fa59 	bl	800193c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800148a:	2301      	movs	r3, #1
 800148c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800148e:	2302      	movs	r3, #2
 8001490:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001492:	1d3b      	adds	r3, r7, #4
 8001494:	4619      	mov	r1, r3
 8001496:	4837      	ldr	r0, [pc, #220]	; (8001574 <MX_ADC1_Init+0x158>)
 8001498:	f001 fa9e 	bl	80029d8 <HAL_ADC_ConfigChannel>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80014a2:	f000 fa4b 	bl	800193c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80014a6:	2302      	movs	r3, #2
 80014a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80014aa:	2303      	movs	r3, #3
 80014ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	4619      	mov	r1, r3
 80014b2:	4830      	ldr	r0, [pc, #192]	; (8001574 <MX_ADC1_Init+0x158>)
 80014b4:	f001 fa90 	bl	80029d8 <HAL_ADC_ConfigChannel>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80014be:	f000 fa3d 	bl	800193c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80014c2:	2303      	movs	r3, #3
 80014c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80014c6:	2304      	movs	r3, #4
 80014c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014ca:	1d3b      	adds	r3, r7, #4
 80014cc:	4619      	mov	r1, r3
 80014ce:	4829      	ldr	r0, [pc, #164]	; (8001574 <MX_ADC1_Init+0x158>)
 80014d0:	f001 fa82 	bl	80029d8 <HAL_ADC_ConfigChannel>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80014da:	f000 fa2f 	bl	800193c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80014de:	2304      	movs	r3, #4
 80014e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80014e2:	2305      	movs	r3, #5
 80014e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	4619      	mov	r1, r3
 80014ea:	4822      	ldr	r0, [pc, #136]	; (8001574 <MX_ADC1_Init+0x158>)
 80014ec:	f001 fa74 	bl	80029d8 <HAL_ADC_ConfigChannel>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80014f6:	f000 fa21 	bl	800193c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80014fa:	2305      	movs	r3, #5
 80014fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80014fe:	2306      	movs	r3, #6
 8001500:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	4619      	mov	r1, r3
 8001506:	481b      	ldr	r0, [pc, #108]	; (8001574 <MX_ADC1_Init+0x158>)
 8001508:	f001 fa66 	bl	80029d8 <HAL_ADC_ConfigChannel>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001512:	f000 fa13 	bl	800193c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001516:	2306      	movs	r3, #6
 8001518:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800151a:	2307      	movs	r3, #7
 800151c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	4619      	mov	r1, r3
 8001522:	4814      	ldr	r0, [pc, #80]	; (8001574 <MX_ADC1_Init+0x158>)
 8001524:	f001 fa58 	bl	80029d8 <HAL_ADC_ConfigChannel>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800152e:	f000 fa05 	bl	800193c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001532:	2307      	movs	r3, #7
 8001534:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001536:	2308      	movs	r3, #8
 8001538:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	4619      	mov	r1, r3
 800153e:	480d      	ldr	r0, [pc, #52]	; (8001574 <MX_ADC1_Init+0x158>)
 8001540:	f001 fa4a 	bl	80029d8 <HAL_ADC_ConfigChannel>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 800154a:	f000 f9f7 	bl	800193c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800154e:	2308      	movs	r3, #8
 8001550:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001552:	2309      	movs	r3, #9
 8001554:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	4619      	mov	r1, r3
 800155a:	4806      	ldr	r0, [pc, #24]	; (8001574 <MX_ADC1_Init+0x158>)
 800155c:	f001 fa3c 	bl	80029d8 <HAL_ADC_ConfigChannel>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 8001566:	f000 f9e9 	bl	800193c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200000b0 	.word	0x200000b0
 8001578:	40012400 	.word	0x40012400

0800157c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <MX_I2C2_Init+0x50>)
 8001582:	4a13      	ldr	r2, [pc, #76]	; (80015d0 <MX_I2C2_Init+0x54>)
 8001584:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001586:	4b11      	ldr	r3, [pc, #68]	; (80015cc <MX_I2C2_Init+0x50>)
 8001588:	4a12      	ldr	r2, [pc, #72]	; (80015d4 <MX_I2C2_Init+0x58>)
 800158a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800158c:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <MX_I2C2_Init+0x50>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001592:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <MX_I2C2_Init+0x50>)
 8001594:	2200      	movs	r2, #0
 8001596:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001598:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <MX_I2C2_Init+0x50>)
 800159a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800159e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015a0:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <MX_I2C2_Init+0x50>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <MX_I2C2_Init+0x50>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015ac:	4b07      	ldr	r3, [pc, #28]	; (80015cc <MX_I2C2_Init+0x50>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015b2:	4b06      	ldr	r3, [pc, #24]	; (80015cc <MX_I2C2_Init+0x50>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80015b8:	4804      	ldr	r0, [pc, #16]	; (80015cc <MX_I2C2_Init+0x50>)
 80015ba:	f002 f95f 	bl	800387c <HAL_I2C_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80015c4:	f000 f9ba 	bl	800193c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000124 	.word	0x20000124
 80015d0:	40005800 	.word	0x40005800
 80015d4:	00061a80 	.word	0x00061a80

080015d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b092      	sub	sp, #72	; 0x48
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
 80015f8:	615a      	str	r2, [r3, #20]
 80015fa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	2220      	movs	r2, #32
 8001600:	2100      	movs	r1, #0
 8001602:	4618      	mov	r0, r3
 8001604:	f006 fe3c 	bl	8008280 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001608:	4b33      	ldr	r3, [pc, #204]	; (80016d8 <MX_TIM1_Init+0x100>)
 800160a:	4a34      	ldr	r2, [pc, #208]	; (80016dc <MX_TIM1_Init+0x104>)
 800160c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800160e:	4b32      	ldr	r3, [pc, #200]	; (80016d8 <MX_TIM1_Init+0x100>)
 8001610:	2200      	movs	r2, #0
 8001612:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001614:	4b30      	ldr	r3, [pc, #192]	; (80016d8 <MX_TIM1_Init+0x100>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800161a:	4b2f      	ldr	r3, [pc, #188]	; (80016d8 <MX_TIM1_Init+0x100>)
 800161c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001620:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001622:	4b2d      	ldr	r3, [pc, #180]	; (80016d8 <MX_TIM1_Init+0x100>)
 8001624:	2200      	movs	r2, #0
 8001626:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001628:	4b2b      	ldr	r3, [pc, #172]	; (80016d8 <MX_TIM1_Init+0x100>)
 800162a:	2200      	movs	r2, #0
 800162c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800162e:	4b2a      	ldr	r3, [pc, #168]	; (80016d8 <MX_TIM1_Init+0x100>)
 8001630:	2200      	movs	r2, #0
 8001632:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001634:	4828      	ldr	r0, [pc, #160]	; (80016d8 <MX_TIM1_Init+0x100>)
 8001636:	f005 f94b 	bl	80068d0 <HAL_TIM_PWM_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001640:	f000 f97c 	bl	800193c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001644:	2300      	movs	r3, #0
 8001646:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001648:	2300      	movs	r3, #0
 800164a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800164c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001650:	4619      	mov	r1, r3
 8001652:	4821      	ldr	r0, [pc, #132]	; (80016d8 <MX_TIM1_Init+0x100>)
 8001654:	f005 fcfe 	bl	8007054 <HAL_TIMEx_MasterConfigSynchronization>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800165e:	f000 f96d 	bl	800193c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001662:	2360      	movs	r3, #96	; 0x60
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800166a:	2300      	movs	r3, #0
 800166c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800166e:	2300      	movs	r3, #0
 8001670:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001672:	2300      	movs	r3, #0
 8001674:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001676:	2300      	movs	r3, #0
 8001678:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800167a:	2300      	movs	r3, #0
 800167c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800167e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001682:	2200      	movs	r2, #0
 8001684:	4619      	mov	r1, r3
 8001686:	4814      	ldr	r0, [pc, #80]	; (80016d8 <MX_TIM1_Init+0x100>)
 8001688:	f005 fa14 	bl	8006ab4 <HAL_TIM_PWM_ConfigChannel>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001692:	f000 f953 	bl	800193c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001696:	2300      	movs	r3, #0
 8001698:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800169a:	2300      	movs	r3, #0
 800169c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016ae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	4619      	mov	r1, r3
 80016b8:	4807      	ldr	r0, [pc, #28]	; (80016d8 <MX_TIM1_Init+0x100>)
 80016ba:	f005 fd29 	bl	8007110 <HAL_TIMEx_ConfigBreakDeadTime>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80016c4:	f000 f93a 	bl	800193c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80016c8:	4803      	ldr	r0, [pc, #12]	; (80016d8 <MX_TIM1_Init+0x100>)
 80016ca:	f000 fd2d 	bl	8002128 <HAL_TIM_MspPostInit>

}
 80016ce:	bf00      	nop
 80016d0:	3748      	adds	r7, #72	; 0x48
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000178 	.word	0x20000178
 80016dc:	40012c00 	.word	0x40012c00

080016e0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08a      	sub	sp, #40	; 0x28
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e6:	f107 0320 	add.w	r3, r7, #32
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016f0:	1d3b      	adds	r3, r7, #4
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	605a      	str	r2, [r3, #4]
 80016f8:	609a      	str	r2, [r3, #8]
 80016fa:	60da      	str	r2, [r3, #12]
 80016fc:	611a      	str	r2, [r3, #16]
 80016fe:	615a      	str	r2, [r3, #20]
 8001700:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001702:	4b2d      	ldr	r3, [pc, #180]	; (80017b8 <MX_TIM4_Init+0xd8>)
 8001704:	4a2d      	ldr	r2, [pc, #180]	; (80017bc <MX_TIM4_Init+0xdc>)
 8001706:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001708:	4b2b      	ldr	r3, [pc, #172]	; (80017b8 <MX_TIM4_Init+0xd8>)
 800170a:	2200      	movs	r2, #0
 800170c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800170e:	4b2a      	ldr	r3, [pc, #168]	; (80017b8 <MX_TIM4_Init+0xd8>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001714:	4b28      	ldr	r3, [pc, #160]	; (80017b8 <MX_TIM4_Init+0xd8>)
 8001716:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800171a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800171c:	4b26      	ldr	r3, [pc, #152]	; (80017b8 <MX_TIM4_Init+0xd8>)
 800171e:	2200      	movs	r2, #0
 8001720:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001722:	4b25      	ldr	r3, [pc, #148]	; (80017b8 <MX_TIM4_Init+0xd8>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001728:	4823      	ldr	r0, [pc, #140]	; (80017b8 <MX_TIM4_Init+0xd8>)
 800172a:	f005 f8d1 	bl	80068d0 <HAL_TIM_PWM_Init>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001734:	f000 f902 	bl	800193c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001738:	2300      	movs	r3, #0
 800173a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800173c:	2300      	movs	r3, #0
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001740:	f107 0320 	add.w	r3, r7, #32
 8001744:	4619      	mov	r1, r3
 8001746:	481c      	ldr	r0, [pc, #112]	; (80017b8 <MX_TIM4_Init+0xd8>)
 8001748:	f005 fc84 	bl	8007054 <HAL_TIMEx_MasterConfigSynchronization>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001752:	f000 f8f3 	bl	800193c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001756:	2360      	movs	r3, #96	; 0x60
 8001758:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800175a:	2300      	movs	r3, #0
 800175c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001766:	1d3b      	adds	r3, r7, #4
 8001768:	2200      	movs	r2, #0
 800176a:	4619      	mov	r1, r3
 800176c:	4812      	ldr	r0, [pc, #72]	; (80017b8 <MX_TIM4_Init+0xd8>)
 800176e:	f005 f9a1 	bl	8006ab4 <HAL_TIM_PWM_ConfigChannel>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001778:	f000 f8e0 	bl	800193c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800177c:	1d3b      	adds	r3, r7, #4
 800177e:	2204      	movs	r2, #4
 8001780:	4619      	mov	r1, r3
 8001782:	480d      	ldr	r0, [pc, #52]	; (80017b8 <MX_TIM4_Init+0xd8>)
 8001784:	f005 f996 	bl	8006ab4 <HAL_TIM_PWM_ConfigChannel>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800178e:	f000 f8d5 	bl	800193c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001792:	1d3b      	adds	r3, r7, #4
 8001794:	2208      	movs	r2, #8
 8001796:	4619      	mov	r1, r3
 8001798:	4807      	ldr	r0, [pc, #28]	; (80017b8 <MX_TIM4_Init+0xd8>)
 800179a:	f005 f98b 	bl	8006ab4 <HAL_TIM_PWM_ConfigChannel>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 80017a4:	f000 f8ca 	bl	800193c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80017a8:	4803      	ldr	r0, [pc, #12]	; (80017b8 <MX_TIM4_Init+0xd8>)
 80017aa:	f000 fcbd 	bl	8002128 <HAL_TIM_MspPostInit>

}
 80017ae:	bf00      	nop
 80017b0:	3728      	adds	r7, #40	; 0x28
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	200001c0 	.word	0x200001c0
 80017bc:	40000800 	.word	0x40000800

080017c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017c4:	4b11      	ldr	r3, [pc, #68]	; (800180c <MX_USART1_UART_Init+0x4c>)
 80017c6:	4a12      	ldr	r2, [pc, #72]	; (8001810 <MX_USART1_UART_Init+0x50>)
 80017c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017ca:	4b10      	ldr	r3, [pc, #64]	; (800180c <MX_USART1_UART_Init+0x4c>)
 80017cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017d2:	4b0e      	ldr	r3, [pc, #56]	; (800180c <MX_USART1_UART_Init+0x4c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <MX_USART1_UART_Init+0x4c>)
 80017da:	2200      	movs	r2, #0
 80017dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017de:	4b0b      	ldr	r3, [pc, #44]	; (800180c <MX_USART1_UART_Init+0x4c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017e4:	4b09      	ldr	r3, [pc, #36]	; (800180c <MX_USART1_UART_Init+0x4c>)
 80017e6:	220c      	movs	r2, #12
 80017e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ea:	4b08      	ldr	r3, [pc, #32]	; (800180c <MX_USART1_UART_Init+0x4c>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <MX_USART1_UART_Init+0x4c>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017f6:	4805      	ldr	r0, [pc, #20]	; (800180c <MX_USART1_UART_Init+0x4c>)
 80017f8:	f005 fcdb 	bl	80071b2 <HAL_UART_Init>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001802:	f000 f89b 	bl	800193c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000208 	.word	0x20000208
 8001810:	40013800 	.word	0x40013800

08001814 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800181a:	4b10      	ldr	r3, [pc, #64]	; (800185c <MX_DMA_Init+0x48>)
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	4a0f      	ldr	r2, [pc, #60]	; (800185c <MX_DMA_Init+0x48>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6153      	str	r3, [r2, #20]
 8001826:	4b0d      	ldr	r3, [pc, #52]	; (800185c <MX_DMA_Init+0x48>)
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	607b      	str	r3, [r7, #4]
 8001830:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001832:	2200      	movs	r2, #0
 8001834:	2100      	movs	r1, #0
 8001836:	200b      	movs	r0, #11
 8001838:	f001 fb9f 	bl	8002f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800183c:	200b      	movs	r0, #11
 800183e:	f001 fbb8 	bl	8002fb2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001842:	2200      	movs	r2, #0
 8001844:	2100      	movs	r1, #0
 8001846:	200f      	movs	r0, #15
 8001848:	f001 fb97 	bl	8002f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800184c:	200f      	movs	r0, #15
 800184e:	f001 fbb0 	bl	8002fb2 <HAL_NVIC_EnableIRQ>

}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40021000 	.word	0x40021000

08001860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b088      	sub	sp, #32
 8001864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001866:	f107 0310 	add.w	r3, r7, #16
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]
 8001870:	609a      	str	r2, [r3, #8]
 8001872:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001874:	4b2e      	ldr	r3, [pc, #184]	; (8001930 <MX_GPIO_Init+0xd0>)
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	4a2d      	ldr	r2, [pc, #180]	; (8001930 <MX_GPIO_Init+0xd0>)
 800187a:	f043 0310 	orr.w	r3, r3, #16
 800187e:	6193      	str	r3, [r2, #24]
 8001880:	4b2b      	ldr	r3, [pc, #172]	; (8001930 <MX_GPIO_Init+0xd0>)
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	f003 0310 	and.w	r3, r3, #16
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800188c:	4b28      	ldr	r3, [pc, #160]	; (8001930 <MX_GPIO_Init+0xd0>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	4a27      	ldr	r2, [pc, #156]	; (8001930 <MX_GPIO_Init+0xd0>)
 8001892:	f043 0320 	orr.w	r3, r3, #32
 8001896:	6193      	str	r3, [r2, #24]
 8001898:	4b25      	ldr	r3, [pc, #148]	; (8001930 <MX_GPIO_Init+0xd0>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	f003 0320 	and.w	r3, r3, #32
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a4:	4b22      	ldr	r3, [pc, #136]	; (8001930 <MX_GPIO_Init+0xd0>)
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	4a21      	ldr	r2, [pc, #132]	; (8001930 <MX_GPIO_Init+0xd0>)
 80018aa:	f043 0304 	orr.w	r3, r3, #4
 80018ae:	6193      	str	r3, [r2, #24]
 80018b0:	4b1f      	ldr	r3, [pc, #124]	; (8001930 <MX_GPIO_Init+0xd0>)
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	607b      	str	r3, [r7, #4]
 80018ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018bc:	4b1c      	ldr	r3, [pc, #112]	; (8001930 <MX_GPIO_Init+0xd0>)
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	4a1b      	ldr	r2, [pc, #108]	; (8001930 <MX_GPIO_Init+0xd0>)
 80018c2:	f043 0308 	orr.w	r3, r3, #8
 80018c6:	6193      	str	r3, [r2, #24]
 80018c8:	4b19      	ldr	r3, [pc, #100]	; (8001930 <MX_GPIO_Init+0xd0>)
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	f003 0308 	and.w	r3, r3, #8
 80018d0:	603b      	str	r3, [r7, #0]
 80018d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80018d4:	2200      	movs	r2, #0
 80018d6:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80018da:	4816      	ldr	r0, [pc, #88]	; (8001934 <MX_GPIO_Init+0xd4>)
 80018dc:	f001 ffb6 	bl	800384c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80018e0:	2200      	movs	r2, #0
 80018e2:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80018e6:	4814      	ldr	r0, [pc, #80]	; (8001938 <MX_GPIO_Init+0xd8>)
 80018e8:	f001 ffb0 	bl	800384c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80018ec:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80018f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f2:	2301      	movs	r3, #1
 80018f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fa:	2302      	movs	r3, #2
 80018fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018fe:	f107 0310 	add.w	r3, r7, #16
 8001902:	4619      	mov	r1, r3
 8001904:	480b      	ldr	r0, [pc, #44]	; (8001934 <MX_GPIO_Init+0xd4>)
 8001906:	f001 fe1d 	bl	8003544 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800190a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800190e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001910:	2301      	movs	r3, #1
 8001912:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001918:	2302      	movs	r3, #2
 800191a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191c:	f107 0310 	add.w	r3, r7, #16
 8001920:	4619      	mov	r1, r3
 8001922:	4805      	ldr	r0, [pc, #20]	; (8001938 <MX_GPIO_Init+0xd8>)
 8001924:	f001 fe0e 	bl	8003544 <HAL_GPIO_Init>

}
 8001928:	bf00      	nop
 800192a:	3720      	adds	r7, #32
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40021000 	.word	0x40021000
 8001934:	40011000 	.word	0x40011000
 8001938:	40010c00 	.word	0x40010c00

0800193c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001940:	b672      	cpsid	i
}
 8001942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001944:	e7fe      	b.n	8001944 <Error_Handler+0x8>
	...

08001948 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800194e:	f000 fa1f 	bl	8001d90 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001952:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001956:	2201      	movs	r2, #1
 8001958:	2178      	movs	r1, #120	; 0x78
 800195a:	485b      	ldr	r0, [pc, #364]	; (8001ac8 <SSD1306_Init+0x180>)
 800195c:	f002 fa8c 	bl	8003e78 <HAL_I2C_IsDeviceReady>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001966:	2300      	movs	r3, #0
 8001968:	e0a9      	b.n	8001abe <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800196a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800196e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001970:	e002      	b.n	8001978 <SSD1306_Init+0x30>
		p--;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	3b01      	subs	r3, #1
 8001976:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1f9      	bne.n	8001972 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800197e:	22ae      	movs	r2, #174	; 0xae
 8001980:	2100      	movs	r1, #0
 8001982:	2078      	movs	r0, #120	; 0x78
 8001984:	f000 fa7e 	bl	8001e84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001988:	2220      	movs	r2, #32
 800198a:	2100      	movs	r1, #0
 800198c:	2078      	movs	r0, #120	; 0x78
 800198e:	f000 fa79 	bl	8001e84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001992:	2210      	movs	r2, #16
 8001994:	2100      	movs	r1, #0
 8001996:	2078      	movs	r0, #120	; 0x78
 8001998:	f000 fa74 	bl	8001e84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800199c:	22b0      	movs	r2, #176	; 0xb0
 800199e:	2100      	movs	r1, #0
 80019a0:	2078      	movs	r0, #120	; 0x78
 80019a2:	f000 fa6f 	bl	8001e84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80019a6:	22c8      	movs	r2, #200	; 0xc8
 80019a8:	2100      	movs	r1, #0
 80019aa:	2078      	movs	r0, #120	; 0x78
 80019ac:	f000 fa6a 	bl	8001e84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80019b0:	2200      	movs	r2, #0
 80019b2:	2100      	movs	r1, #0
 80019b4:	2078      	movs	r0, #120	; 0x78
 80019b6:	f000 fa65 	bl	8001e84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80019ba:	2210      	movs	r2, #16
 80019bc:	2100      	movs	r1, #0
 80019be:	2078      	movs	r0, #120	; 0x78
 80019c0:	f000 fa60 	bl	8001e84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80019c4:	2240      	movs	r2, #64	; 0x40
 80019c6:	2100      	movs	r1, #0
 80019c8:	2078      	movs	r0, #120	; 0x78
 80019ca:	f000 fa5b 	bl	8001e84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80019ce:	2281      	movs	r2, #129	; 0x81
 80019d0:	2100      	movs	r1, #0
 80019d2:	2078      	movs	r0, #120	; 0x78
 80019d4:	f000 fa56 	bl	8001e84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80019d8:	22ff      	movs	r2, #255	; 0xff
 80019da:	2100      	movs	r1, #0
 80019dc:	2078      	movs	r0, #120	; 0x78
 80019de:	f000 fa51 	bl	8001e84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80019e2:	22a1      	movs	r2, #161	; 0xa1
 80019e4:	2100      	movs	r1, #0
 80019e6:	2078      	movs	r0, #120	; 0x78
 80019e8:	f000 fa4c 	bl	8001e84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80019ec:	22a6      	movs	r2, #166	; 0xa6
 80019ee:	2100      	movs	r1, #0
 80019f0:	2078      	movs	r0, #120	; 0x78
 80019f2:	f000 fa47 	bl	8001e84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80019f6:	22a8      	movs	r2, #168	; 0xa8
 80019f8:	2100      	movs	r1, #0
 80019fa:	2078      	movs	r0, #120	; 0x78
 80019fc:	f000 fa42 	bl	8001e84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001a00:	223f      	movs	r2, #63	; 0x3f
 8001a02:	2100      	movs	r1, #0
 8001a04:	2078      	movs	r0, #120	; 0x78
 8001a06:	f000 fa3d 	bl	8001e84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001a0a:	22a4      	movs	r2, #164	; 0xa4
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	2078      	movs	r0, #120	; 0x78
 8001a10:	f000 fa38 	bl	8001e84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001a14:	22d3      	movs	r2, #211	; 0xd3
 8001a16:	2100      	movs	r1, #0
 8001a18:	2078      	movs	r0, #120	; 0x78
 8001a1a:	f000 fa33 	bl	8001e84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2100      	movs	r1, #0
 8001a22:	2078      	movs	r0, #120	; 0x78
 8001a24:	f000 fa2e 	bl	8001e84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001a28:	22d5      	movs	r2, #213	; 0xd5
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	2078      	movs	r0, #120	; 0x78
 8001a2e:	f000 fa29 	bl	8001e84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001a32:	22f0      	movs	r2, #240	; 0xf0
 8001a34:	2100      	movs	r1, #0
 8001a36:	2078      	movs	r0, #120	; 0x78
 8001a38:	f000 fa24 	bl	8001e84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001a3c:	22d9      	movs	r2, #217	; 0xd9
 8001a3e:	2100      	movs	r1, #0
 8001a40:	2078      	movs	r0, #120	; 0x78
 8001a42:	f000 fa1f 	bl	8001e84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001a46:	2222      	movs	r2, #34	; 0x22
 8001a48:	2100      	movs	r1, #0
 8001a4a:	2078      	movs	r0, #120	; 0x78
 8001a4c:	f000 fa1a 	bl	8001e84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001a50:	22da      	movs	r2, #218	; 0xda
 8001a52:	2100      	movs	r1, #0
 8001a54:	2078      	movs	r0, #120	; 0x78
 8001a56:	f000 fa15 	bl	8001e84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001a5a:	2212      	movs	r2, #18
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	2078      	movs	r0, #120	; 0x78
 8001a60:	f000 fa10 	bl	8001e84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001a64:	22db      	movs	r2, #219	; 0xdb
 8001a66:	2100      	movs	r1, #0
 8001a68:	2078      	movs	r0, #120	; 0x78
 8001a6a:	f000 fa0b 	bl	8001e84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001a6e:	2220      	movs	r2, #32
 8001a70:	2100      	movs	r1, #0
 8001a72:	2078      	movs	r0, #120	; 0x78
 8001a74:	f000 fa06 	bl	8001e84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001a78:	228d      	movs	r2, #141	; 0x8d
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	2078      	movs	r0, #120	; 0x78
 8001a7e:	f000 fa01 	bl	8001e84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001a82:	2214      	movs	r2, #20
 8001a84:	2100      	movs	r1, #0
 8001a86:	2078      	movs	r0, #120	; 0x78
 8001a88:	f000 f9fc 	bl	8001e84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001a8c:	22af      	movs	r2, #175	; 0xaf
 8001a8e:	2100      	movs	r1, #0
 8001a90:	2078      	movs	r0, #120	; 0x78
 8001a92:	f000 f9f7 	bl	8001e84 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001a96:	222e      	movs	r2, #46	; 0x2e
 8001a98:	2100      	movs	r1, #0
 8001a9a:	2078      	movs	r0, #120	; 0x78
 8001a9c:	f000 f9f2 	bl	8001e84 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	f000 f843 	bl	8001b2c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001aa6:	f000 f813 	bl	8001ad0 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001aaa:	4b08      	ldr	r3, [pc, #32]	; (8001acc <SSD1306_Init+0x184>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <SSD1306_Init+0x184>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001ab6:	4b05      	ldr	r3, [pc, #20]	; (8001acc <SSD1306_Init+0x184>)
 8001ab8:	2201      	movs	r2, #1
 8001aba:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001abc:	2301      	movs	r3, #1
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000124 	.word	0x20000124
 8001acc:	20000728 	.word	0x20000728

08001ad0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	71fb      	strb	r3, [r7, #7]
 8001ada:	e01d      	b.n	8001b18 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001adc:	79fb      	ldrb	r3, [r7, #7]
 8001ade:	3b50      	subs	r3, #80	; 0x50
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	2078      	movs	r0, #120	; 0x78
 8001ae8:	f000 f9cc 	bl	8001e84 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001aec:	2200      	movs	r2, #0
 8001aee:	2100      	movs	r1, #0
 8001af0:	2078      	movs	r0, #120	; 0x78
 8001af2:	f000 f9c7 	bl	8001e84 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001af6:	2210      	movs	r2, #16
 8001af8:	2100      	movs	r1, #0
 8001afa:	2078      	movs	r0, #120	; 0x78
 8001afc:	f000 f9c2 	bl	8001e84 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	01db      	lsls	r3, r3, #7
 8001b04:	4a08      	ldr	r2, [pc, #32]	; (8001b28 <SSD1306_UpdateScreen+0x58>)
 8001b06:	441a      	add	r2, r3
 8001b08:	2380      	movs	r3, #128	; 0x80
 8001b0a:	2140      	movs	r1, #64	; 0x40
 8001b0c:	2078      	movs	r0, #120	; 0x78
 8001b0e:	f000 f953 	bl	8001db8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	3301      	adds	r3, #1
 8001b16:	71fb      	strb	r3, [r7, #7]
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	2b07      	cmp	r3, #7
 8001b1c:	d9de      	bls.n	8001adc <SSD1306_UpdateScreen+0xc>
	}
}
 8001b1e:	bf00      	nop
 8001b20:	bf00      	nop
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	20000328 	.word	0x20000328

08001b2c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d101      	bne.n	8001b40 <SSD1306_Fill+0x14>
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	e000      	b.n	8001b42 <SSD1306_Fill+0x16>
 8001b40:	23ff      	movs	r3, #255	; 0xff
 8001b42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b46:	4619      	mov	r1, r3
 8001b48:	4803      	ldr	r0, [pc, #12]	; (8001b58 <SSD1306_Fill+0x2c>)
 8001b4a:	f006 fb99 	bl	8008280 <memset>
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000328 	.word	0x20000328

08001b5c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	80fb      	strh	r3, [r7, #6]
 8001b66:	460b      	mov	r3, r1
 8001b68:	80bb      	strh	r3, [r7, #4]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	70fb      	strb	r3, [r7, #3]
	if (
 8001b6e:	88fb      	ldrh	r3, [r7, #6]
 8001b70:	2b7f      	cmp	r3, #127	; 0x7f
 8001b72:	d848      	bhi.n	8001c06 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001b74:	88bb      	ldrh	r3, [r7, #4]
 8001b76:	2b3f      	cmp	r3, #63	; 0x3f
 8001b78:	d845      	bhi.n	8001c06 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001b7a:	4b25      	ldr	r3, [pc, #148]	; (8001c10 <SSD1306_DrawPixel+0xb4>)
 8001b7c:	791b      	ldrb	r3, [r3, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d006      	beq.n	8001b90 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001b82:	78fb      	ldrb	r3, [r7, #3]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	bf0c      	ite	eq
 8001b88:	2301      	moveq	r3, #1
 8001b8a:	2300      	movne	r3, #0
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001b90:	78fb      	ldrb	r3, [r7, #3]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d11a      	bne.n	8001bcc <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001b96:	88fa      	ldrh	r2, [r7, #6]
 8001b98:	88bb      	ldrh	r3, [r7, #4]
 8001b9a:	08db      	lsrs	r3, r3, #3
 8001b9c:	b298      	uxth	r0, r3
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	01db      	lsls	r3, r3, #7
 8001ba2:	4413      	add	r3, r2
 8001ba4:	4a1b      	ldr	r2, [pc, #108]	; (8001c14 <SSD1306_DrawPixel+0xb8>)
 8001ba6:	5cd3      	ldrb	r3, [r2, r3]
 8001ba8:	b25a      	sxtb	r2, r3
 8001baa:	88bb      	ldrh	r3, [r7, #4]
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb6:	b25b      	sxtb	r3, r3
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	b259      	sxtb	r1, r3
 8001bbc:	88fa      	ldrh	r2, [r7, #6]
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	01db      	lsls	r3, r3, #7
 8001bc2:	4413      	add	r3, r2
 8001bc4:	b2c9      	uxtb	r1, r1
 8001bc6:	4a13      	ldr	r2, [pc, #76]	; (8001c14 <SSD1306_DrawPixel+0xb8>)
 8001bc8:	54d1      	strb	r1, [r2, r3]
 8001bca:	e01d      	b.n	8001c08 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001bcc:	88fa      	ldrh	r2, [r7, #6]
 8001bce:	88bb      	ldrh	r3, [r7, #4]
 8001bd0:	08db      	lsrs	r3, r3, #3
 8001bd2:	b298      	uxth	r0, r3
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	01db      	lsls	r3, r3, #7
 8001bd8:	4413      	add	r3, r2
 8001bda:	4a0e      	ldr	r2, [pc, #56]	; (8001c14 <SSD1306_DrawPixel+0xb8>)
 8001bdc:	5cd3      	ldrb	r3, [r2, r3]
 8001bde:	b25a      	sxtb	r2, r3
 8001be0:	88bb      	ldrh	r3, [r7, #4]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	2101      	movs	r1, #1
 8001be8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bec:	b25b      	sxtb	r3, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	b25b      	sxtb	r3, r3
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	b259      	sxtb	r1, r3
 8001bf6:	88fa      	ldrh	r2, [r7, #6]
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	01db      	lsls	r3, r3, #7
 8001bfc:	4413      	add	r3, r2
 8001bfe:	b2c9      	uxtb	r1, r1
 8001c00:	4a04      	ldr	r2, [pc, #16]	; (8001c14 <SSD1306_DrawPixel+0xb8>)
 8001c02:	54d1      	strb	r1, [r2, r3]
 8001c04:	e000      	b.n	8001c08 <SSD1306_DrawPixel+0xac>
		return;
 8001c06:	bf00      	nop
	}
}
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr
 8001c10:	20000728 	.word	0x20000728
 8001c14:	20000328 	.word	0x20000328

08001c18 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	460a      	mov	r2, r1
 8001c22:	80fb      	strh	r3, [r7, #6]
 8001c24:	4613      	mov	r3, r2
 8001c26:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001c28:	4a05      	ldr	r2, [pc, #20]	; (8001c40 <SSD1306_GotoXY+0x28>)
 8001c2a:	88fb      	ldrh	r3, [r7, #6]
 8001c2c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001c2e:	4a04      	ldr	r2, [pc, #16]	; (8001c40 <SSD1306_GotoXY+0x28>)
 8001c30:	88bb      	ldrh	r3, [r7, #4]
 8001c32:	8053      	strh	r3, [r2, #2]
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	20000728 	.word	0x20000728

08001c44 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	6039      	str	r1, [r7, #0]
 8001c4e:	71fb      	strb	r3, [r7, #7]
 8001c50:	4613      	mov	r3, r2
 8001c52:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001c54:	4b3a      	ldr	r3, [pc, #232]	; (8001d40 <SSD1306_Putc+0xfc>)
 8001c56:	881b      	ldrh	r3, [r3, #0]
 8001c58:	461a      	mov	r2, r3
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	4413      	add	r3, r2
	if (
 8001c60:	2b7f      	cmp	r3, #127	; 0x7f
 8001c62:	dc07      	bgt.n	8001c74 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001c64:	4b36      	ldr	r3, [pc, #216]	; (8001d40 <SSD1306_Putc+0xfc>)
 8001c66:	885b      	ldrh	r3, [r3, #2]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	785b      	ldrb	r3, [r3, #1]
 8001c6e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001c70:	2b3f      	cmp	r3, #63	; 0x3f
 8001c72:	dd01      	ble.n	8001c78 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	e05e      	b.n	8001d36 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
 8001c7c:	e04b      	b.n	8001d16 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685a      	ldr	r2, [r3, #4]
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	3b20      	subs	r3, #32
 8001c86:	6839      	ldr	r1, [r7, #0]
 8001c88:	7849      	ldrb	r1, [r1, #1]
 8001c8a:	fb01 f303 	mul.w	r3, r1, r3
 8001c8e:	4619      	mov	r1, r3
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	440b      	add	r3, r1
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	4413      	add	r3, r2
 8001c98:	881b      	ldrh	r3, [r3, #0]
 8001c9a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	613b      	str	r3, [r7, #16]
 8001ca0:	e030      	b.n	8001d04 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d010      	beq.n	8001cd4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001cb2:	4b23      	ldr	r3, [pc, #140]	; (8001d40 <SSD1306_Putc+0xfc>)
 8001cb4:	881a      	ldrh	r2, [r3, #0]
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	4413      	add	r3, r2
 8001cbc:	b298      	uxth	r0, r3
 8001cbe:	4b20      	ldr	r3, [pc, #128]	; (8001d40 <SSD1306_Putc+0xfc>)
 8001cc0:	885a      	ldrh	r2, [r3, #2]
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	4413      	add	r3, r2
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	79ba      	ldrb	r2, [r7, #6]
 8001ccc:	4619      	mov	r1, r3
 8001cce:	f7ff ff45 	bl	8001b5c <SSD1306_DrawPixel>
 8001cd2:	e014      	b.n	8001cfe <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001cd4:	4b1a      	ldr	r3, [pc, #104]	; (8001d40 <SSD1306_Putc+0xfc>)
 8001cd6:	881a      	ldrh	r2, [r3, #0]
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	4413      	add	r3, r2
 8001cde:	b298      	uxth	r0, r3
 8001ce0:	4b17      	ldr	r3, [pc, #92]	; (8001d40 <SSD1306_Putc+0xfc>)
 8001ce2:	885a      	ldrh	r2, [r3, #2]
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	4413      	add	r3, r2
 8001cea:	b299      	uxth	r1, r3
 8001cec:	79bb      	ldrb	r3, [r7, #6]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	bf0c      	ite	eq
 8001cf2:	2301      	moveq	r3, #1
 8001cf4:	2300      	movne	r3, #0
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	f7ff ff2f 	bl	8001b5c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	3301      	adds	r3, #1
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d3c8      	bcc.n	8001ca2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	3301      	adds	r3, #1
 8001d14:	617b      	str	r3, [r7, #20]
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	785b      	ldrb	r3, [r3, #1]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d3ad      	bcc.n	8001c7e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001d22:	4b07      	ldr	r3, [pc, #28]	; (8001d40 <SSD1306_Putc+0xfc>)
 8001d24:	881a      	ldrh	r2, [r3, #0]
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	4413      	add	r3, r2
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	4b03      	ldr	r3, [pc, #12]	; (8001d40 <SSD1306_Putc+0xfc>)
 8001d32:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001d34:	79fb      	ldrb	r3, [r7, #7]
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20000728 	.word	0x20000728

08001d44 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001d52:	e012      	b.n	8001d7a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	79fa      	ldrb	r2, [r7, #7]
 8001d5a:	68b9      	ldr	r1, [r7, #8]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff ff71 	bl	8001c44 <SSD1306_Putc>
 8001d62:	4603      	mov	r3, r0
 8001d64:	461a      	mov	r2, r3
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d002      	beq.n	8001d74 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	e008      	b.n	8001d86 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	3301      	adds	r3, #1
 8001d78:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1e8      	bne.n	8001d54 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	781b      	ldrb	r3, [r3, #0]
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
	...

08001d90 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001d96:	4b07      	ldr	r3, [pc, #28]	; (8001db4 <ssd1306_I2C_Init+0x24>)
 8001d98:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001d9a:	e002      	b.n	8001da2 <ssd1306_I2C_Init+0x12>
		p--;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1f9      	bne.n	8001d9c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001da8:	bf00      	nop
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr
 8001db4:	0003d090 	.word	0x0003d090

08001db8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001db8:	b590      	push	{r4, r7, lr}
 8001dba:	b0c7      	sub	sp, #284	; 0x11c
 8001dbc:	af02      	add	r7, sp, #8
 8001dbe:	4604      	mov	r4, r0
 8001dc0:	4608      	mov	r0, r1
 8001dc2:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001dc6:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001dca:	600a      	str	r2, [r1, #0]
 8001dcc:	4619      	mov	r1, r3
 8001dce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001dd2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001dd6:	4622      	mov	r2, r4
 8001dd8:	701a      	strb	r2, [r3, #0]
 8001dda:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001dde:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001de2:	4602      	mov	r2, r0
 8001de4:	701a      	strb	r2, [r3, #0]
 8001de6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001dea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001dee:	460a      	mov	r2, r1
 8001df0:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001df2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001df6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001dfa:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001dfe:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001e02:	7812      	ldrb	r2, [r2, #0]
 8001e04:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001e06:	2300      	movs	r3, #0
 8001e08:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001e0c:	e015      	b.n	8001e3a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001e0e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001e12:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001e16:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001e1a:	6812      	ldr	r2, [r2, #0]
 8001e1c:	441a      	add	r2, r3
 8001e1e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001e22:	3301      	adds	r3, #1
 8001e24:	7811      	ldrb	r1, [r2, #0]
 8001e26:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001e2a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001e2e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001e30:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001e34:	3301      	adds	r3, #1
 8001e36:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001e3a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001e44:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001e48:	8812      	ldrh	r2, [r2, #0]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d8df      	bhi.n	8001e0e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c2, address, dt, count+1, 10);
 8001e4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001e52:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	b299      	uxth	r1, r3
 8001e5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001e5e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001e62:	881b      	ldrh	r3, [r3, #0]
 8001e64:	3301      	adds	r3, #1
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	f107 020c 	add.w	r2, r7, #12
 8001e6c:	200a      	movs	r0, #10
 8001e6e:	9000      	str	r0, [sp, #0]
 8001e70:	4803      	ldr	r0, [pc, #12]	; (8001e80 <ssd1306_I2C_WriteMulti+0xc8>)
 8001e72:	f001 fe5b 	bl	8003b2c <HAL_I2C_Master_Transmit>
}
 8001e76:	bf00      	nop
 8001e78:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd90      	pop	{r4, r7, pc}
 8001e80:	20000124 	.word	0x20000124

08001e84 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af02      	add	r7, sp, #8
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	71fb      	strb	r3, [r7, #7]
 8001e8e:	460b      	mov	r3, r1
 8001e90:	71bb      	strb	r3, [r7, #6]
 8001e92:	4613      	mov	r3, r2
 8001e94:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001e96:	79bb      	ldrb	r3, [r7, #6]
 8001e98:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001e9a:	797b      	ldrb	r3, [r7, #5]
 8001e9c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	b299      	uxth	r1, r3
 8001ea2:	f107 020c 	add.w	r2, r7, #12
 8001ea6:	230a      	movs	r3, #10
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	2302      	movs	r3, #2
 8001eac:	4803      	ldr	r0, [pc, #12]	; (8001ebc <ssd1306_I2C_Write+0x38>)
 8001eae:	f001 fe3d 	bl	8003b2c <HAL_I2C_Master_Transmit>
}
 8001eb2:	bf00      	nop
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20000124 	.word	0x20000124

08001ec0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ec6:	4b15      	ldr	r3, [pc, #84]	; (8001f1c <HAL_MspInit+0x5c>)
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	4a14      	ldr	r2, [pc, #80]	; (8001f1c <HAL_MspInit+0x5c>)
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	6193      	str	r3, [r2, #24]
 8001ed2:	4b12      	ldr	r3, [pc, #72]	; (8001f1c <HAL_MspInit+0x5c>)
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	60bb      	str	r3, [r7, #8]
 8001edc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ede:	4b0f      	ldr	r3, [pc, #60]	; (8001f1c <HAL_MspInit+0x5c>)
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	4a0e      	ldr	r2, [pc, #56]	; (8001f1c <HAL_MspInit+0x5c>)
 8001ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee8:	61d3      	str	r3, [r2, #28]
 8001eea:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <HAL_MspInit+0x5c>)
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef2:	607b      	str	r3, [r7, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ef6:	4b0a      	ldr	r3, [pc, #40]	; (8001f20 <HAL_MspInit+0x60>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	4a04      	ldr	r2, [pc, #16]	; (8001f20 <HAL_MspInit+0x60>)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f12:	bf00      	nop
 8001f14:	3714      	adds	r7, #20
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40010000 	.word	0x40010000

08001f24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08a      	sub	sp, #40	; 0x28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2c:	f107 0318 	add.w	r3, r7, #24
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a33      	ldr	r2, [pc, #204]	; (800200c <HAL_ADC_MspInit+0xe8>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d15f      	bne.n	8002004 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f44:	4b32      	ldr	r3, [pc, #200]	; (8002010 <HAL_ADC_MspInit+0xec>)
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	4a31      	ldr	r2, [pc, #196]	; (8002010 <HAL_ADC_MspInit+0xec>)
 8001f4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f4e:	6193      	str	r3, [r2, #24]
 8001f50:	4b2f      	ldr	r3, [pc, #188]	; (8002010 <HAL_ADC_MspInit+0xec>)
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f58:	617b      	str	r3, [r7, #20]
 8001f5a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5c:	4b2c      	ldr	r3, [pc, #176]	; (8002010 <HAL_ADC_MspInit+0xec>)
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	4a2b      	ldr	r2, [pc, #172]	; (8002010 <HAL_ADC_MspInit+0xec>)
 8001f62:	f043 0304 	orr.w	r3, r3, #4
 8001f66:	6193      	str	r3, [r2, #24]
 8001f68:	4b29      	ldr	r3, [pc, #164]	; (8002010 <HAL_ADC_MspInit+0xec>)
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	613b      	str	r3, [r7, #16]
 8001f72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f74:	4b26      	ldr	r3, [pc, #152]	; (8002010 <HAL_ADC_MspInit+0xec>)
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	4a25      	ldr	r2, [pc, #148]	; (8002010 <HAL_ADC_MspInit+0xec>)
 8001f7a:	f043 0308 	orr.w	r3, r3, #8
 8001f7e:	6193      	str	r3, [r2, #24]
 8001f80:	4b23      	ldr	r3, [pc, #140]	; (8002010 <HAL_ADC_MspInit+0xec>)
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	f003 0308 	and.w	r3, r3, #8
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001f8c:	23ff      	movs	r3, #255	; 0xff
 8001f8e:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f90:	2303      	movs	r3, #3
 8001f92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f94:	f107 0318 	add.w	r3, r7, #24
 8001f98:	4619      	mov	r1, r3
 8001f9a:	481e      	ldr	r0, [pc, #120]	; (8002014 <HAL_ADC_MspInit+0xf0>)
 8001f9c:	f001 fad2 	bl	8003544 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa8:	f107 0318 	add.w	r3, r7, #24
 8001fac:	4619      	mov	r1, r3
 8001fae:	481a      	ldr	r0, [pc, #104]	; (8002018 <HAL_ADC_MspInit+0xf4>)
 8001fb0:	f001 fac8 	bl	8003544 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001fb4:	4b19      	ldr	r3, [pc, #100]	; (800201c <HAL_ADC_MspInit+0xf8>)
 8001fb6:	4a1a      	ldr	r2, [pc, #104]	; (8002020 <HAL_ADC_MspInit+0xfc>)
 8001fb8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fba:	4b18      	ldr	r3, [pc, #96]	; (800201c <HAL_ADC_MspInit+0xf8>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fc0:	4b16      	ldr	r3, [pc, #88]	; (800201c <HAL_ADC_MspInit+0xf8>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001fc6:	4b15      	ldr	r3, [pc, #84]	; (800201c <HAL_ADC_MspInit+0xf8>)
 8001fc8:	2280      	movs	r2, #128	; 0x80
 8001fca:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fcc:	4b13      	ldr	r3, [pc, #76]	; (800201c <HAL_ADC_MspInit+0xf8>)
 8001fce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fd2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001fd4:	4b11      	ldr	r3, [pc, #68]	; (800201c <HAL_ADC_MspInit+0xf8>)
 8001fd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fda:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001fdc:	4b0f      	ldr	r3, [pc, #60]	; (800201c <HAL_ADC_MspInit+0xf8>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001fe2:	4b0e      	ldr	r3, [pc, #56]	; (800201c <HAL_ADC_MspInit+0xf8>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001fe8:	480c      	ldr	r0, [pc, #48]	; (800201c <HAL_ADC_MspInit+0xf8>)
 8001fea:	f000 fffd 	bl	8002fe8 <HAL_DMA_Init>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8001ff4:	f7ff fca2 	bl	800193c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a08      	ldr	r2, [pc, #32]	; (800201c <HAL_ADC_MspInit+0xf8>)
 8001ffc:	621a      	str	r2, [r3, #32]
 8001ffe:	4a07      	ldr	r2, [pc, #28]	; (800201c <HAL_ADC_MspInit+0xf8>)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002004:	bf00      	nop
 8002006:	3728      	adds	r7, #40	; 0x28
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40012400 	.word	0x40012400
 8002010:	40021000 	.word	0x40021000
 8002014:	40010800 	.word	0x40010800
 8002018:	40010c00 	.word	0x40010c00
 800201c:	200000e0 	.word	0x200000e0
 8002020:	40020008 	.word	0x40020008

08002024 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b088      	sub	sp, #32
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202c:	f107 0310 	add.w	r3, r7, #16
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a1e      	ldr	r2, [pc, #120]	; (80020b8 <HAL_I2C_MspInit+0x94>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d134      	bne.n	80020ae <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002044:	4b1d      	ldr	r3, [pc, #116]	; (80020bc <HAL_I2C_MspInit+0x98>)
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	4a1c      	ldr	r2, [pc, #112]	; (80020bc <HAL_I2C_MspInit+0x98>)
 800204a:	f043 0308 	orr.w	r3, r3, #8
 800204e:	6193      	str	r3, [r2, #24]
 8002050:	4b1a      	ldr	r3, [pc, #104]	; (80020bc <HAL_I2C_MspInit+0x98>)
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	f003 0308 	and.w	r3, r3, #8
 8002058:	60fb      	str	r3, [r7, #12]
 800205a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800205c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002060:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002062:	2312      	movs	r3, #18
 8002064:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002066:	2303      	movs	r3, #3
 8002068:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800206a:	f107 0310 	add.w	r3, r7, #16
 800206e:	4619      	mov	r1, r3
 8002070:	4813      	ldr	r0, [pc, #76]	; (80020c0 <HAL_I2C_MspInit+0x9c>)
 8002072:	f001 fa67 	bl	8003544 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002076:	4b11      	ldr	r3, [pc, #68]	; (80020bc <HAL_I2C_MspInit+0x98>)
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	4a10      	ldr	r2, [pc, #64]	; (80020bc <HAL_I2C_MspInit+0x98>)
 800207c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002080:	61d3      	str	r3, [r2, #28]
 8002082:	4b0e      	ldr	r3, [pc, #56]	; (80020bc <HAL_I2C_MspInit+0x98>)
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800208a:	60bb      	str	r3, [r7, #8]
 800208c:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800208e:	2200      	movs	r2, #0
 8002090:	2100      	movs	r1, #0
 8002092:	2021      	movs	r0, #33	; 0x21
 8002094:	f000 ff71 	bl	8002f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002098:	2021      	movs	r0, #33	; 0x21
 800209a:	f000 ff8a 	bl	8002fb2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800209e:	2200      	movs	r2, #0
 80020a0:	2100      	movs	r1, #0
 80020a2:	2022      	movs	r0, #34	; 0x22
 80020a4:	f000 ff69 	bl	8002f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80020a8:	2022      	movs	r0, #34	; 0x22
 80020aa:	f000 ff82 	bl	8002fb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80020ae:	bf00      	nop
 80020b0:	3720      	adds	r7, #32
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40005800 	.word	0x40005800
 80020bc:	40021000 	.word	0x40021000
 80020c0:	40010c00 	.word	0x40010c00

080020c4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a12      	ldr	r2, [pc, #72]	; (800211c <HAL_TIM_PWM_MspInit+0x58>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d10c      	bne.n	80020f0 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020d6:	4b12      	ldr	r3, [pc, #72]	; (8002120 <HAL_TIM_PWM_MspInit+0x5c>)
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	4a11      	ldr	r2, [pc, #68]	; (8002120 <HAL_TIM_PWM_MspInit+0x5c>)
 80020dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020e0:	6193      	str	r3, [r2, #24]
 80020e2:	4b0f      	ldr	r3, [pc, #60]	; (8002120 <HAL_TIM_PWM_MspInit+0x5c>)
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80020ee:	e010      	b.n	8002112 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a0b      	ldr	r2, [pc, #44]	; (8002124 <HAL_TIM_PWM_MspInit+0x60>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d10b      	bne.n	8002112 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020fa:	4b09      	ldr	r3, [pc, #36]	; (8002120 <HAL_TIM_PWM_MspInit+0x5c>)
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	4a08      	ldr	r2, [pc, #32]	; (8002120 <HAL_TIM_PWM_MspInit+0x5c>)
 8002100:	f043 0304 	orr.w	r3, r3, #4
 8002104:	61d3      	str	r3, [r2, #28]
 8002106:	4b06      	ldr	r3, [pc, #24]	; (8002120 <HAL_TIM_PWM_MspInit+0x5c>)
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	f003 0304 	and.w	r3, r3, #4
 800210e:	60bb      	str	r3, [r7, #8]
 8002110:	68bb      	ldr	r3, [r7, #8]
}
 8002112:	bf00      	nop
 8002114:	3714      	adds	r7, #20
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr
 800211c:	40012c00 	.word	0x40012c00
 8002120:	40021000 	.word	0x40021000
 8002124:	40000800 	.word	0x40000800

08002128 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b088      	sub	sp, #32
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002130:	f107 0310 	add.w	r3, r7, #16
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a1f      	ldr	r2, [pc, #124]	; (80021c0 <HAL_TIM_MspPostInit+0x98>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d119      	bne.n	800217c <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002148:	4b1e      	ldr	r3, [pc, #120]	; (80021c4 <HAL_TIM_MspPostInit+0x9c>)
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	4a1d      	ldr	r2, [pc, #116]	; (80021c4 <HAL_TIM_MspPostInit+0x9c>)
 800214e:	f043 0304 	orr.w	r3, r3, #4
 8002152:	6193      	str	r3, [r2, #24]
 8002154:	4b1b      	ldr	r3, [pc, #108]	; (80021c4 <HAL_TIM_MspPostInit+0x9c>)
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002160:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002164:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002166:	2302      	movs	r3, #2
 8002168:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216a:	2302      	movs	r3, #2
 800216c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800216e:	f107 0310 	add.w	r3, r7, #16
 8002172:	4619      	mov	r1, r3
 8002174:	4814      	ldr	r0, [pc, #80]	; (80021c8 <HAL_TIM_MspPostInit+0xa0>)
 8002176:	f001 f9e5 	bl	8003544 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800217a:	e01d      	b.n	80021b8 <HAL_TIM_MspPostInit+0x90>
  else if(htim->Instance==TIM4)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a12      	ldr	r2, [pc, #72]	; (80021cc <HAL_TIM_MspPostInit+0xa4>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d118      	bne.n	80021b8 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002186:	4b0f      	ldr	r3, [pc, #60]	; (80021c4 <HAL_TIM_MspPostInit+0x9c>)
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	4a0e      	ldr	r2, [pc, #56]	; (80021c4 <HAL_TIM_MspPostInit+0x9c>)
 800218c:	f043 0308 	orr.w	r3, r3, #8
 8002190:	6193      	str	r3, [r2, #24]
 8002192:	4b0c      	ldr	r3, [pc, #48]	; (80021c4 <HAL_TIM_MspPostInit+0x9c>)
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	f003 0308 	and.w	r3, r3, #8
 800219a:	60bb      	str	r3, [r7, #8]
 800219c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800219e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80021a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a4:	2302      	movs	r3, #2
 80021a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a8:	2302      	movs	r3, #2
 80021aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ac:	f107 0310 	add.w	r3, r7, #16
 80021b0:	4619      	mov	r1, r3
 80021b2:	4807      	ldr	r0, [pc, #28]	; (80021d0 <HAL_TIM_MspPostInit+0xa8>)
 80021b4:	f001 f9c6 	bl	8003544 <HAL_GPIO_Init>
}
 80021b8:	bf00      	nop
 80021ba:	3720      	adds	r7, #32
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40012c00 	.word	0x40012c00
 80021c4:	40021000 	.word	0x40021000
 80021c8:	40010800 	.word	0x40010800
 80021cc:	40000800 	.word	0x40000800
 80021d0:	40010c00 	.word	0x40010c00

080021d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b088      	sub	sp, #32
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021dc:	f107 0310 	add.w	r3, r7, #16
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a34      	ldr	r2, [pc, #208]	; (80022c0 <HAL_UART_MspInit+0xec>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d160      	bne.n	80022b6 <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021f4:	4b33      	ldr	r3, [pc, #204]	; (80022c4 <HAL_UART_MspInit+0xf0>)
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	4a32      	ldr	r2, [pc, #200]	; (80022c4 <HAL_UART_MspInit+0xf0>)
 80021fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021fe:	6193      	str	r3, [r2, #24]
 8002200:	4b30      	ldr	r3, [pc, #192]	; (80022c4 <HAL_UART_MspInit+0xf0>)
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800220c:	4b2d      	ldr	r3, [pc, #180]	; (80022c4 <HAL_UART_MspInit+0xf0>)
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	4a2c      	ldr	r2, [pc, #176]	; (80022c4 <HAL_UART_MspInit+0xf0>)
 8002212:	f043 0304 	orr.w	r3, r3, #4
 8002216:	6193      	str	r3, [r2, #24]
 8002218:	4b2a      	ldr	r3, [pc, #168]	; (80022c4 <HAL_UART_MspInit+0xf0>)
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	f003 0304 	and.w	r3, r3, #4
 8002220:	60bb      	str	r3, [r7, #8]
 8002222:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002224:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002228:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222a:	2302      	movs	r3, #2
 800222c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800222e:	2303      	movs	r3, #3
 8002230:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002232:	f107 0310 	add.w	r3, r7, #16
 8002236:	4619      	mov	r1, r3
 8002238:	4823      	ldr	r0, [pc, #140]	; (80022c8 <HAL_UART_MspInit+0xf4>)
 800223a:	f001 f983 	bl	8003544 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800223e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002242:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002248:	2300      	movs	r3, #0
 800224a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800224c:	f107 0310 	add.w	r3, r7, #16
 8002250:	4619      	mov	r1, r3
 8002252:	481d      	ldr	r0, [pc, #116]	; (80022c8 <HAL_UART_MspInit+0xf4>)
 8002254:	f001 f976 	bl	8003544 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002258:	4b1c      	ldr	r3, [pc, #112]	; (80022cc <HAL_UART_MspInit+0xf8>)
 800225a:	4a1d      	ldr	r2, [pc, #116]	; (80022d0 <HAL_UART_MspInit+0xfc>)
 800225c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800225e:	4b1b      	ldr	r3, [pc, #108]	; (80022cc <HAL_UART_MspInit+0xf8>)
 8002260:	2200      	movs	r2, #0
 8002262:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002264:	4b19      	ldr	r3, [pc, #100]	; (80022cc <HAL_UART_MspInit+0xf8>)
 8002266:	2200      	movs	r2, #0
 8002268:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800226a:	4b18      	ldr	r3, [pc, #96]	; (80022cc <HAL_UART_MspInit+0xf8>)
 800226c:	2280      	movs	r2, #128	; 0x80
 800226e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002270:	4b16      	ldr	r3, [pc, #88]	; (80022cc <HAL_UART_MspInit+0xf8>)
 8002272:	2200      	movs	r2, #0
 8002274:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002276:	4b15      	ldr	r3, [pc, #84]	; (80022cc <HAL_UART_MspInit+0xf8>)
 8002278:	2200      	movs	r2, #0
 800227a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800227c:	4b13      	ldr	r3, [pc, #76]	; (80022cc <HAL_UART_MspInit+0xf8>)
 800227e:	2200      	movs	r2, #0
 8002280:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002282:	4b12      	ldr	r3, [pc, #72]	; (80022cc <HAL_UART_MspInit+0xf8>)
 8002284:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002288:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800228a:	4810      	ldr	r0, [pc, #64]	; (80022cc <HAL_UART_MspInit+0xf8>)
 800228c:	f000 feac 	bl	8002fe8 <HAL_DMA_Init>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8002296:	f7ff fb51 	bl	800193c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a0b      	ldr	r2, [pc, #44]	; (80022cc <HAL_UART_MspInit+0xf8>)
 800229e:	63da      	str	r2, [r3, #60]	; 0x3c
 80022a0:	4a0a      	ldr	r2, [pc, #40]	; (80022cc <HAL_UART_MspInit+0xf8>)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80022a6:	2200      	movs	r2, #0
 80022a8:	2100      	movs	r1, #0
 80022aa:	2025      	movs	r0, #37	; 0x25
 80022ac:	f000 fe65 	bl	8002f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022b0:	2025      	movs	r0, #37	; 0x25
 80022b2:	f000 fe7e 	bl	8002fb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80022b6:	bf00      	nop
 80022b8:	3720      	adds	r7, #32
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40013800 	.word	0x40013800
 80022c4:	40021000 	.word	0x40021000
 80022c8:	40010800 	.word	0x40010800
 80022cc:	20000250 	.word	0x20000250
 80022d0:	40020058 	.word	0x40020058

080022d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022d8:	e7fe      	b.n	80022d8 <NMI_Handler+0x4>

080022da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022da:	b480      	push	{r7}
 80022dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022de:	e7fe      	b.n	80022de <HardFault_Handler+0x4>

080022e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022e4:	e7fe      	b.n	80022e4 <MemManage_Handler+0x4>

080022e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022e6:	b480      	push	{r7}
 80022e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022ea:	e7fe      	b.n	80022ea <BusFault_Handler+0x4>

080022ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022f0:	e7fe      	b.n	80022f0 <UsageFault_Handler+0x4>

080022f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022f2:	b480      	push	{r7}
 80022f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bc80      	pop	{r7}
 80022fc:	4770      	bx	lr

080022fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022fe:	b480      	push	{r7}
 8002300:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002302:	bf00      	nop
 8002304:	46bd      	mov	sp, r7
 8002306:	bc80      	pop	{r7}
 8002308:	4770      	bx	lr

0800230a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800230a:	b480      	push	{r7}
 800230c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	46bd      	mov	sp, r7
 8002312:	bc80      	pop	{r7}
 8002314:	4770      	bx	lr

08002316 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800231a:	f000 f8a7 	bl	800246c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
	...

08002324 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002328:	4802      	ldr	r0, [pc, #8]	; (8002334 <DMA1_Channel1_IRQHandler+0x10>)
 800232a:	f000 ffcb 	bl	80032c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	200000e0 	.word	0x200000e0

08002338 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800233c:	4802      	ldr	r0, [pc, #8]	; (8002348 <DMA1_Channel5_IRQHandler+0x10>)
 800233e:	f000 ffc1 	bl	80032c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	20000250 	.word	0x20000250

0800234c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002350:	4802      	ldr	r0, [pc, #8]	; (800235c <I2C2_EV_IRQHandler+0x10>)
 8002352:	f001 febf 	bl	80040d4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002356:	bf00      	nop
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	20000124 	.word	0x20000124

08002360 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002364:	4802      	ldr	r0, [pc, #8]	; (8002370 <I2C2_ER_IRQHandler+0x10>)
 8002366:	f002 f826 	bl	80043b6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	20000124 	.word	0x20000124

08002374 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002378:	4802      	ldr	r0, [pc, #8]	; (8002384 <USART1_IRQHandler+0x10>)
 800237a:	f005 f84b 	bl	8007414 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
//  HAL_UART_RxCpltCallback(&huart1);
  /* USER CODE END USART1_IRQn 1 */
}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000208 	.word	0x20000208

08002388 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800238c:	bf00      	nop
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr

08002394 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
     bl  SystemInit
 8002394:	f7ff fff8 	bl	8002388 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002398:	480b      	ldr	r0, [pc, #44]	; (80023c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800239a:	490c      	ldr	r1, [pc, #48]	; (80023cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800239c:	4a0c      	ldr	r2, [pc, #48]	; (80023d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800239e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023a0:	e002      	b.n	80023a8 <LoopCopyDataInit>

080023a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023a6:	3304      	adds	r3, #4

080023a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023ac:	d3f9      	bcc.n	80023a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ae:	4a09      	ldr	r2, [pc, #36]	; (80023d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80023b0:	4c09      	ldr	r4, [pc, #36]	; (80023d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023b4:	e001      	b.n	80023ba <LoopFillZerobss>

080023b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023b8:	3204      	adds	r2, #4

080023ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023bc:	d3fb      	bcc.n	80023b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023be:	f005 ff3b 	bl	8008238 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80023c2:	f7fe fecb 	bl	800115c <main>
  bx lr
 80023c6:	4770      	bx	lr
  ldr r0, =_sdata
 80023c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023cc:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80023d0:	08009de8 	.word	0x08009de8
  ldr r2, =_sbss
 80023d4:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80023d8:	20000734 	.word	0x20000734

080023dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80023dc:	e7fe      	b.n	80023dc <ADC1_2_IRQHandler>
	...

080023e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023e4:	4b08      	ldr	r3, [pc, #32]	; (8002408 <HAL_Init+0x28>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a07      	ldr	r2, [pc, #28]	; (8002408 <HAL_Init+0x28>)
 80023ea:	f043 0310 	orr.w	r3, r3, #16
 80023ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023f0:	2003      	movs	r0, #3
 80023f2:	f000 fdb7 	bl	8002f64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023f6:	200f      	movs	r0, #15
 80023f8:	f000 f808 	bl	800240c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023fc:	f7ff fd60 	bl	8001ec0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	40022000 	.word	0x40022000

0800240c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002414:	4b12      	ldr	r3, [pc, #72]	; (8002460 <HAL_InitTick+0x54>)
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	4b12      	ldr	r3, [pc, #72]	; (8002464 <HAL_InitTick+0x58>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	4619      	mov	r1, r3
 800241e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002422:	fbb3 f3f1 	udiv	r3, r3, r1
 8002426:	fbb2 f3f3 	udiv	r3, r2, r3
 800242a:	4618      	mov	r0, r3
 800242c:	f000 fdcf 	bl	8002fce <HAL_SYSTICK_Config>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e00e      	b.n	8002458 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2b0f      	cmp	r3, #15
 800243e:	d80a      	bhi.n	8002456 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002440:	2200      	movs	r2, #0
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	f04f 30ff 	mov.w	r0, #4294967295
 8002448:	f000 fd97 	bl	8002f7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800244c:	4a06      	ldr	r2, [pc, #24]	; (8002468 <HAL_InitTick+0x5c>)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002452:	2300      	movs	r3, #0
 8002454:	e000      	b.n	8002458 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
}
 8002458:	4618      	mov	r0, r3
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	20000024 	.word	0x20000024
 8002464:	2000002c 	.word	0x2000002c
 8002468:	20000028 	.word	0x20000028

0800246c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002470:	4b05      	ldr	r3, [pc, #20]	; (8002488 <HAL_IncTick+0x1c>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	461a      	mov	r2, r3
 8002476:	4b05      	ldr	r3, [pc, #20]	; (800248c <HAL_IncTick+0x20>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4413      	add	r3, r2
 800247c:	4a03      	ldr	r2, [pc, #12]	; (800248c <HAL_IncTick+0x20>)
 800247e:	6013      	str	r3, [r2, #0]
}
 8002480:	bf00      	nop
 8002482:	46bd      	mov	sp, r7
 8002484:	bc80      	pop	{r7}
 8002486:	4770      	bx	lr
 8002488:	2000002c 	.word	0x2000002c
 800248c:	20000730 	.word	0x20000730

08002490 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  return uwTick;
 8002494:	4b02      	ldr	r3, [pc, #8]	; (80024a0 <HAL_GetTick+0x10>)
 8002496:	681b      	ldr	r3, [r3, #0]
}
 8002498:	4618      	mov	r0, r3
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr
 80024a0:	20000730 	.word	0x20000730

080024a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024ac:	f7ff fff0 	bl	8002490 <HAL_GetTick>
 80024b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024bc:	d005      	beq.n	80024ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024be:	4b0a      	ldr	r3, [pc, #40]	; (80024e8 <HAL_Delay+0x44>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	461a      	mov	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	4413      	add	r3, r2
 80024c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024ca:	bf00      	nop
 80024cc:	f7ff ffe0 	bl	8002490 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d8f7      	bhi.n	80024cc <HAL_Delay+0x28>
  {
  }
}
 80024dc:	bf00      	nop
 80024de:	bf00      	nop
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	2000002c 	.word	0x2000002c

080024ec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024f4:	2300      	movs	r3, #0
 80024f6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002500:	2300      	movs	r3, #0
 8002502:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e0be      	b.n	800268c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002518:	2b00      	cmp	r3, #0
 800251a:	d109      	bne.n	8002530 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7ff fcfa 	bl	8001f24 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 fba3 	bl	8002c7c <ADC_ConversionStop_Disable>
 8002536:	4603      	mov	r3, r0
 8002538:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253e:	f003 0310 	and.w	r3, r3, #16
 8002542:	2b00      	cmp	r3, #0
 8002544:	f040 8099 	bne.w	800267a <HAL_ADC_Init+0x18e>
 8002548:	7dfb      	ldrb	r3, [r7, #23]
 800254a:	2b00      	cmp	r3, #0
 800254c:	f040 8095 	bne.w	800267a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002554:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002558:	f023 0302 	bic.w	r3, r3, #2
 800255c:	f043 0202 	orr.w	r2, r3, #2
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800256c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	7b1b      	ldrb	r3, [r3, #12]
 8002572:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002574:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002576:	68ba      	ldr	r2, [r7, #8]
 8002578:	4313      	orrs	r3, r2
 800257a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002584:	d003      	beq.n	800258e <HAL_ADC_Init+0xa2>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d102      	bne.n	8002594 <HAL_ADC_Init+0xa8>
 800258e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002592:	e000      	b.n	8002596 <HAL_ADC_Init+0xaa>
 8002594:	2300      	movs	r3, #0
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	4313      	orrs	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	7d1b      	ldrb	r3, [r3, #20]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d119      	bne.n	80025d8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	7b1b      	ldrb	r3, [r3, #12]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d109      	bne.n	80025c0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	3b01      	subs	r3, #1
 80025b2:	035a      	lsls	r2, r3, #13
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025bc:	613b      	str	r3, [r7, #16]
 80025be:	e00b      	b.n	80025d8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c4:	f043 0220 	orr.w	r2, r3, #32
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d0:	f043 0201 	orr.w	r2, r3, #1
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	430a      	orrs	r2, r1
 80025ea:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689a      	ldr	r2, [r3, #8]
 80025f2:	4b28      	ldr	r3, [pc, #160]	; (8002694 <HAL_ADC_Init+0x1a8>)
 80025f4:	4013      	ands	r3, r2
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	6812      	ldr	r2, [r2, #0]
 80025fa:	68b9      	ldr	r1, [r7, #8]
 80025fc:	430b      	orrs	r3, r1
 80025fe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002608:	d003      	beq.n	8002612 <HAL_ADC_Init+0x126>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d104      	bne.n	800261c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	3b01      	subs	r3, #1
 8002618:	051b      	lsls	r3, r3, #20
 800261a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002622:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	430a      	orrs	r2, r1
 800262e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689a      	ldr	r2, [r3, #8]
 8002636:	4b18      	ldr	r3, [pc, #96]	; (8002698 <HAL_ADC_Init+0x1ac>)
 8002638:	4013      	ands	r3, r2
 800263a:	68ba      	ldr	r2, [r7, #8]
 800263c:	429a      	cmp	r2, r3
 800263e:	d10b      	bne.n	8002658 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264a:	f023 0303 	bic.w	r3, r3, #3
 800264e:	f043 0201 	orr.w	r2, r3, #1
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002656:	e018      	b.n	800268a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265c:	f023 0312 	bic.w	r3, r3, #18
 8002660:	f043 0210 	orr.w	r2, r3, #16
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266c:	f043 0201 	orr.w	r2, r3, #1
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002678:	e007      	b.n	800268a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267e:	f043 0210 	orr.w	r2, r3, #16
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800268a:	7dfb      	ldrb	r3, [r7, #23]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3718      	adds	r7, #24
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	ffe1f7fd 	.word	0xffe1f7fd
 8002698:	ff1f0efe 	.word	0xff1f0efe

0800269c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026a4:	2300      	movs	r3, #0
 80026a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d101      	bne.n	80026b6 <HAL_ADC_Start+0x1a>
 80026b2:	2302      	movs	r3, #2
 80026b4:	e098      	b.n	80027e8 <HAL_ADC_Start+0x14c>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 fa82 	bl	8002bc8 <ADC_Enable>
 80026c4:	4603      	mov	r3, r0
 80026c6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f040 8087 	bne.w	80027de <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026d8:	f023 0301 	bic.w	r3, r3, #1
 80026dc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a41      	ldr	r2, [pc, #260]	; (80027f0 <HAL_ADC_Start+0x154>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d105      	bne.n	80026fa <HAL_ADC_Start+0x5e>
 80026ee:	4b41      	ldr	r3, [pc, #260]	; (80027f4 <HAL_ADC_Start+0x158>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d115      	bne.n	8002726 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002710:	2b00      	cmp	r3, #0
 8002712:	d026      	beq.n	8002762 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002718:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800271c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002724:	e01d      	b.n	8002762 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a2f      	ldr	r2, [pc, #188]	; (80027f4 <HAL_ADC_Start+0x158>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d004      	beq.n	8002746 <HAL_ADC_Start+0xaa>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a2b      	ldr	r2, [pc, #172]	; (80027f0 <HAL_ADC_Start+0x154>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d10d      	bne.n	8002762 <HAL_ADC_Start+0xc6>
 8002746:	4b2b      	ldr	r3, [pc, #172]	; (80027f4 <HAL_ADC_Start+0x158>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800274e:	2b00      	cmp	r3, #0
 8002750:	d007      	beq.n	8002762 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002756:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800275a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002766:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d006      	beq.n	800277c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002772:	f023 0206 	bic.w	r2, r3, #6
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	62da      	str	r2, [r3, #44]	; 0x2c
 800277a:	e002      	b.n	8002782 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f06f 0202 	mvn.w	r2, #2
 8002792:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800279e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80027a2:	d113      	bne.n	80027cc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80027a8:	4a11      	ldr	r2, [pc, #68]	; (80027f0 <HAL_ADC_Start+0x154>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d105      	bne.n	80027ba <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80027ae:	4b11      	ldr	r3, [pc, #68]	; (80027f4 <HAL_ADC_Start+0x158>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d108      	bne.n	80027cc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80027c8:	609a      	str	r2, [r3, #8]
 80027ca:	e00c      	b.n	80027e6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	689a      	ldr	r2, [r3, #8]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80027da:	609a      	str	r2, [r3, #8]
 80027dc:	e003      	b.n	80027e6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40012800 	.word	0x40012800
 80027f4:	40012400 	.word	0x40012400

080027f8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002804:	2300      	movs	r3, #0
 8002806:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a64      	ldr	r2, [pc, #400]	; (80029a0 <HAL_ADC_Start_DMA+0x1a8>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d004      	beq.n	800281c <HAL_ADC_Start_DMA+0x24>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a63      	ldr	r2, [pc, #396]	; (80029a4 <HAL_ADC_Start_DMA+0x1ac>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d106      	bne.n	800282a <HAL_ADC_Start_DMA+0x32>
 800281c:	4b60      	ldr	r3, [pc, #384]	; (80029a0 <HAL_ADC_Start_DMA+0x1a8>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002824:	2b00      	cmp	r3, #0
 8002826:	f040 80b3 	bne.w	8002990 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002830:	2b01      	cmp	r3, #1
 8002832:	d101      	bne.n	8002838 <HAL_ADC_Start_DMA+0x40>
 8002834:	2302      	movs	r3, #2
 8002836:	e0ae      	b.n	8002996 <HAL_ADC_Start_DMA+0x19e>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f000 f9c1 	bl	8002bc8 <ADC_Enable>
 8002846:	4603      	mov	r3, r0
 8002848:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800284a:	7dfb      	ldrb	r3, [r7, #23]
 800284c:	2b00      	cmp	r3, #0
 800284e:	f040 809a 	bne.w	8002986 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002856:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800285a:	f023 0301 	bic.w	r3, r3, #1
 800285e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a4e      	ldr	r2, [pc, #312]	; (80029a4 <HAL_ADC_Start_DMA+0x1ac>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d105      	bne.n	800287c <HAL_ADC_Start_DMA+0x84>
 8002870:	4b4b      	ldr	r3, [pc, #300]	; (80029a0 <HAL_ADC_Start_DMA+0x1a8>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d115      	bne.n	80028a8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002880:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002892:	2b00      	cmp	r3, #0
 8002894:	d026      	beq.n	80028e4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800289e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80028a6:	e01d      	b.n	80028e4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ac:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a39      	ldr	r2, [pc, #228]	; (80029a0 <HAL_ADC_Start_DMA+0x1a8>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d004      	beq.n	80028c8 <HAL_ADC_Start_DMA+0xd0>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a38      	ldr	r2, [pc, #224]	; (80029a4 <HAL_ADC_Start_DMA+0x1ac>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d10d      	bne.n	80028e4 <HAL_ADC_Start_DMA+0xec>
 80028c8:	4b35      	ldr	r3, [pc, #212]	; (80029a0 <HAL_ADC_Start_DMA+0x1a8>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d007      	beq.n	80028e4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028dc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d006      	beq.n	80028fe <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f4:	f023 0206 	bic.w	r2, r3, #6
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80028fc:	e002      	b.n	8002904 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	4a25      	ldr	r2, [pc, #148]	; (80029a8 <HAL_ADC_Start_DMA+0x1b0>)
 8002912:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	4a24      	ldr	r2, [pc, #144]	; (80029ac <HAL_ADC_Start_DMA+0x1b4>)
 800291a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	4a23      	ldr	r2, [pc, #140]	; (80029b0 <HAL_ADC_Start_DMA+0x1b8>)
 8002922:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f06f 0202 	mvn.w	r2, #2
 800292c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800293c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6a18      	ldr	r0, [r3, #32]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	334c      	adds	r3, #76	; 0x4c
 8002948:	4619      	mov	r1, r3
 800294a:	68ba      	ldr	r2, [r7, #8]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f000 fba5 	bl	800309c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800295c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002960:	d108      	bne.n	8002974 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002970:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002972:	e00f      	b.n	8002994 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689a      	ldr	r2, [r3, #8]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002982:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002984:	e006      	b.n	8002994 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800298e:	e001      	b.n	8002994 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002994:	7dfb      	ldrb	r3, [r7, #23]
}
 8002996:	4618      	mov	r0, r3
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40012400 	.word	0x40012400
 80029a4:	40012800 	.word	0x40012800
 80029a8:	08002cff 	.word	0x08002cff
 80029ac:	08002d7b 	.word	0x08002d7b
 80029b0:	08002d97 	.word	0x08002d97

080029b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bc80      	pop	{r7}
 80029c4:	4770      	bx	lr

080029c6 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b083      	sub	sp, #12
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr

080029d8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029e2:	2300      	movs	r3, #0
 80029e4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80029e6:	2300      	movs	r3, #0
 80029e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d101      	bne.n	80029f8 <HAL_ADC_ConfigChannel+0x20>
 80029f4:	2302      	movs	r3, #2
 80029f6:	e0dc      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x1da>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2b06      	cmp	r3, #6
 8002a06:	d81c      	bhi.n	8002a42 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685a      	ldr	r2, [r3, #4]
 8002a12:	4613      	mov	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4413      	add	r3, r2
 8002a18:	3b05      	subs	r3, #5
 8002a1a:	221f      	movs	r2, #31
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	43db      	mvns	r3, r3
 8002a22:	4019      	ands	r1, r3
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	6818      	ldr	r0, [r3, #0]
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4413      	add	r3, r2
 8002a32:	3b05      	subs	r3, #5
 8002a34:	fa00 f203 	lsl.w	r2, r0, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	635a      	str	r2, [r3, #52]	; 0x34
 8002a40:	e03c      	b.n	8002abc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b0c      	cmp	r3, #12
 8002a48:	d81c      	bhi.n	8002a84 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685a      	ldr	r2, [r3, #4]
 8002a54:	4613      	mov	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	3b23      	subs	r3, #35	; 0x23
 8002a5c:	221f      	movs	r2, #31
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	43db      	mvns	r3, r3
 8002a64:	4019      	ands	r1, r3
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	6818      	ldr	r0, [r3, #0]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4413      	add	r3, r2
 8002a74:	3b23      	subs	r3, #35	; 0x23
 8002a76:	fa00 f203 	lsl.w	r2, r0, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	631a      	str	r2, [r3, #48]	; 0x30
 8002a82:	e01b      	b.n	8002abc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4413      	add	r3, r2
 8002a94:	3b41      	subs	r3, #65	; 0x41
 8002a96:	221f      	movs	r2, #31
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	4019      	ands	r1, r3
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	6818      	ldr	r0, [r3, #0]
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	3b41      	subs	r3, #65	; 0x41
 8002ab0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2b09      	cmp	r3, #9
 8002ac2:	d91c      	bls.n	8002afe <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68d9      	ldr	r1, [r3, #12]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	4413      	add	r3, r2
 8002ad4:	3b1e      	subs	r3, #30
 8002ad6:	2207      	movs	r2, #7
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	43db      	mvns	r3, r3
 8002ade:	4019      	ands	r1, r3
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	6898      	ldr	r0, [r3, #8]
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	4413      	add	r3, r2
 8002aee:	3b1e      	subs	r3, #30
 8002af0:	fa00 f203 	lsl.w	r2, r0, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	430a      	orrs	r2, r1
 8002afa:	60da      	str	r2, [r3, #12]
 8002afc:	e019      	b.n	8002b32 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6919      	ldr	r1, [r3, #16]
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	4413      	add	r3, r2
 8002b0e:	2207      	movs	r2, #7
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	43db      	mvns	r3, r3
 8002b16:	4019      	ands	r1, r3
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	6898      	ldr	r0, [r3, #8]
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	4613      	mov	r3, r2
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	4413      	add	r3, r2
 8002b26:	fa00 f203 	lsl.w	r2, r0, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2b10      	cmp	r3, #16
 8002b38:	d003      	beq.n	8002b42 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b3e:	2b11      	cmp	r3, #17
 8002b40:	d132      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a1d      	ldr	r2, [pc, #116]	; (8002bbc <HAL_ADC_ConfigChannel+0x1e4>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d125      	bne.n	8002b98 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d126      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002b68:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2b10      	cmp	r3, #16
 8002b70:	d11a      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b72:	4b13      	ldr	r3, [pc, #76]	; (8002bc0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a13      	ldr	r2, [pc, #76]	; (8002bc4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002b78:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7c:	0c9a      	lsrs	r2, r3, #18
 8002b7e:	4613      	mov	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4413      	add	r3, r2
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b88:	e002      	b.n	8002b90 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f9      	bne.n	8002b8a <HAL_ADC_ConfigChannel+0x1b2>
 8002b96:	e007      	b.n	8002ba8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9c:	f043 0220 	orr.w	r2, r3, #32
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bc80      	pop	{r7}
 8002bba:	4770      	bx	lr
 8002bbc:	40012400 	.word	0x40012400
 8002bc0:	20000024 	.word	0x20000024
 8002bc4:	431bde83 	.word	0x431bde83

08002bc8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d040      	beq.n	8002c68 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f042 0201 	orr.w	r2, r2, #1
 8002bf4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002bf6:	4b1f      	ldr	r3, [pc, #124]	; (8002c74 <ADC_Enable+0xac>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a1f      	ldr	r2, [pc, #124]	; (8002c78 <ADC_Enable+0xb0>)
 8002bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002c00:	0c9b      	lsrs	r3, r3, #18
 8002c02:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c04:	e002      	b.n	8002c0c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1f9      	bne.n	8002c06 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c12:	f7ff fc3d 	bl	8002490 <HAL_GetTick>
 8002c16:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c18:	e01f      	b.n	8002c5a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c1a:	f7ff fc39 	bl	8002490 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d918      	bls.n	8002c5a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d011      	beq.n	8002c5a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3a:	f043 0210 	orr.w	r2, r3, #16
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c46:	f043 0201 	orr.w	r2, r3, #1
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e007      	b.n	8002c6a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d1d8      	bne.n	8002c1a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	20000024 	.word	0x20000024
 8002c78:	431bde83 	.word	0x431bde83

08002c7c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c84:	2300      	movs	r3, #0
 8002c86:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d12e      	bne.n	8002cf4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 0201 	bic.w	r2, r2, #1
 8002ca4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ca6:	f7ff fbf3 	bl	8002490 <HAL_GetTick>
 8002caa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002cac:	e01b      	b.n	8002ce6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002cae:	f7ff fbef 	bl	8002490 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d914      	bls.n	8002ce6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d10d      	bne.n	8002ce6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cce:	f043 0210 	orr.w	r2, r3, #16
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cda:	f043 0201 	orr.w	r2, r3, #1
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e007      	b.n	8002cf6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d0dc      	beq.n	8002cae <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b084      	sub	sp, #16
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d10:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d127      	bne.n	8002d68 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002d2e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002d32:	d115      	bne.n	8002d60 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d111      	bne.n	8002d60 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d105      	bne.n	8002d60 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d58:	f043 0201 	orr.w	r2, r3, #1
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f7fd ffbb 	bl	8000cdc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002d66:	e004      	b.n	8002d72 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	4798      	blx	r3
}
 8002d72:	bf00      	nop
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b084      	sub	sp, #16
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d86:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f7ff fe13 	bl	80029b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d8e:	bf00      	nop
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b084      	sub	sp, #16
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db4:	f043 0204 	orr.w	r2, r3, #4
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f7ff fe02 	bl	80029c6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002dc2:	bf00      	nop
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
	...

08002dcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f003 0307 	and.w	r3, r3, #7
 8002dda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ddc:	4b0c      	ldr	r3, [pc, #48]	; (8002e10 <__NVIC_SetPriorityGrouping+0x44>)
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002de8:	4013      	ands	r3, r2
 8002dea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002df4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dfe:	4a04      	ldr	r2, [pc, #16]	; (8002e10 <__NVIC_SetPriorityGrouping+0x44>)
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	60d3      	str	r3, [r2, #12]
}
 8002e04:	bf00      	nop
 8002e06:	3714      	adds	r7, #20
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bc80      	pop	{r7}
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	e000ed00 	.word	0xe000ed00

08002e14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e18:	4b04      	ldr	r3, [pc, #16]	; (8002e2c <__NVIC_GetPriorityGrouping+0x18>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	0a1b      	lsrs	r3, r3, #8
 8002e1e:	f003 0307 	and.w	r3, r3, #7
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bc80      	pop	{r7}
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	e000ed00 	.word	0xe000ed00

08002e30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	4603      	mov	r3, r0
 8002e38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	db0b      	blt.n	8002e5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e42:	79fb      	ldrb	r3, [r7, #7]
 8002e44:	f003 021f 	and.w	r2, r3, #31
 8002e48:	4906      	ldr	r1, [pc, #24]	; (8002e64 <__NVIC_EnableIRQ+0x34>)
 8002e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4e:	095b      	lsrs	r3, r3, #5
 8002e50:	2001      	movs	r0, #1
 8002e52:	fa00 f202 	lsl.w	r2, r0, r2
 8002e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bc80      	pop	{r7}
 8002e62:	4770      	bx	lr
 8002e64:	e000e100 	.word	0xe000e100

08002e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	4603      	mov	r3, r0
 8002e70:	6039      	str	r1, [r7, #0]
 8002e72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	db0a      	blt.n	8002e92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	b2da      	uxtb	r2, r3
 8002e80:	490c      	ldr	r1, [pc, #48]	; (8002eb4 <__NVIC_SetPriority+0x4c>)
 8002e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e86:	0112      	lsls	r2, r2, #4
 8002e88:	b2d2      	uxtb	r2, r2
 8002e8a:	440b      	add	r3, r1
 8002e8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e90:	e00a      	b.n	8002ea8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	4908      	ldr	r1, [pc, #32]	; (8002eb8 <__NVIC_SetPriority+0x50>)
 8002e98:	79fb      	ldrb	r3, [r7, #7]
 8002e9a:	f003 030f 	and.w	r3, r3, #15
 8002e9e:	3b04      	subs	r3, #4
 8002ea0:	0112      	lsls	r2, r2, #4
 8002ea2:	b2d2      	uxtb	r2, r2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	761a      	strb	r2, [r3, #24]
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bc80      	pop	{r7}
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	e000e100 	.word	0xe000e100
 8002eb8:	e000ed00 	.word	0xe000ed00

08002ebc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b089      	sub	sp, #36	; 0x24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f003 0307 	and.w	r3, r3, #7
 8002ece:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	f1c3 0307 	rsb	r3, r3, #7
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	bf28      	it	cs
 8002eda:	2304      	movcs	r3, #4
 8002edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	3304      	adds	r3, #4
 8002ee2:	2b06      	cmp	r3, #6
 8002ee4:	d902      	bls.n	8002eec <NVIC_EncodePriority+0x30>
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	3b03      	subs	r3, #3
 8002eea:	e000      	b.n	8002eee <NVIC_EncodePriority+0x32>
 8002eec:	2300      	movs	r3, #0
 8002eee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8002efa:	43da      	mvns	r2, r3
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	401a      	ands	r2, r3
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f04:	f04f 31ff 	mov.w	r1, #4294967295
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0e:	43d9      	mvns	r1, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f14:	4313      	orrs	r3, r2
         );
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3724      	adds	r7, #36	; 0x24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bc80      	pop	{r7}
 8002f1e:	4770      	bx	lr

08002f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f30:	d301      	bcc.n	8002f36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f32:	2301      	movs	r3, #1
 8002f34:	e00f      	b.n	8002f56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f36:	4a0a      	ldr	r2, [pc, #40]	; (8002f60 <SysTick_Config+0x40>)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f3e:	210f      	movs	r1, #15
 8002f40:	f04f 30ff 	mov.w	r0, #4294967295
 8002f44:	f7ff ff90 	bl	8002e68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f48:	4b05      	ldr	r3, [pc, #20]	; (8002f60 <SysTick_Config+0x40>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f4e:	4b04      	ldr	r3, [pc, #16]	; (8002f60 <SysTick_Config+0x40>)
 8002f50:	2207      	movs	r2, #7
 8002f52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	e000e010 	.word	0xe000e010

08002f64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f7ff ff2d 	bl	8002dcc <__NVIC_SetPriorityGrouping>
}
 8002f72:	bf00      	nop
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b086      	sub	sp, #24
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	4603      	mov	r3, r0
 8002f82:	60b9      	str	r1, [r7, #8]
 8002f84:	607a      	str	r2, [r7, #4]
 8002f86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f8c:	f7ff ff42 	bl	8002e14 <__NVIC_GetPriorityGrouping>
 8002f90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	68b9      	ldr	r1, [r7, #8]
 8002f96:	6978      	ldr	r0, [r7, #20]
 8002f98:	f7ff ff90 	bl	8002ebc <NVIC_EncodePriority>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff ff5f 	bl	8002e68 <__NVIC_SetPriority>
}
 8002faa:	bf00      	nop
 8002fac:	3718      	adds	r7, #24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b082      	sub	sp, #8
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	4603      	mov	r3, r0
 8002fba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff ff35 	bl	8002e30 <__NVIC_EnableIRQ>
}
 8002fc6:	bf00      	nop
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b082      	sub	sp, #8
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7ff ffa2 	bl	8002f20 <SysTick_Config>
 8002fdc:	4603      	mov	r3, r0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
	...

08002fe8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e043      	b.n	8003086 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	461a      	mov	r2, r3
 8003004:	4b22      	ldr	r3, [pc, #136]	; (8003090 <HAL_DMA_Init+0xa8>)
 8003006:	4413      	add	r3, r2
 8003008:	4a22      	ldr	r2, [pc, #136]	; (8003094 <HAL_DMA_Init+0xac>)
 800300a:	fba2 2303 	umull	r2, r3, r2, r3
 800300e:	091b      	lsrs	r3, r3, #4
 8003010:	009a      	lsls	r2, r3, #2
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a1f      	ldr	r2, [pc, #124]	; (8003098 <HAL_DMA_Init+0xb0>)
 800301a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2202      	movs	r2, #2
 8003020:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003032:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003036:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003040:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800304c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003058:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	4313      	orrs	r3, r2
 8003064:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3714      	adds	r7, #20
 800308a:	46bd      	mov	sp, r7
 800308c:	bc80      	pop	{r7}
 800308e:	4770      	bx	lr
 8003090:	bffdfff8 	.word	0xbffdfff8
 8003094:	cccccccd 	.word	0xcccccccd
 8003098:	40020000 	.word	0x40020000

0800309c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
 80030a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030aa:	2300      	movs	r3, #0
 80030ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d101      	bne.n	80030bc <HAL_DMA_Start_IT+0x20>
 80030b8:	2302      	movs	r3, #2
 80030ba:	e04b      	b.n	8003154 <HAL_DMA_Start_IT+0xb8>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d13a      	bne.n	8003146 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2202      	movs	r2, #2
 80030d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 0201 	bic.w	r2, r2, #1
 80030ec:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	68b9      	ldr	r1, [r7, #8]
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f000 f9f8 	bl	80034ea <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d008      	beq.n	8003114 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f042 020e 	orr.w	r2, r2, #14
 8003110:	601a      	str	r2, [r3, #0]
 8003112:	e00f      	b.n	8003134 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0204 	bic.w	r2, r2, #4
 8003122:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f042 020a 	orr.w	r2, r2, #10
 8003132:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0201 	orr.w	r2, r2, #1
 8003142:	601a      	str	r2, [r3, #0]
 8003144:	e005      	b.n	8003152 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800314e:	2302      	movs	r3, #2
 8003150:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003152:	7dfb      	ldrb	r3, [r7, #23]
}
 8003154:	4618      	mov	r0, r3
 8003156:	3718      	adds	r7, #24
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003164:	2300      	movs	r3, #0
 8003166:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d008      	beq.n	8003186 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2204      	movs	r2, #4
 8003178:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e020      	b.n	80031c8 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 020e 	bic.w	r2, r2, #14
 8003194:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0201 	bic.w	r2, r2, #1
 80031a4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ae:	2101      	movs	r1, #1
 80031b0:	fa01 f202 	lsl.w	r2, r1, r2
 80031b4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80031c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3714      	adds	r7, #20
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bc80      	pop	{r7}
 80031d0:	4770      	bx	lr
	...

080031d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031dc:	2300      	movs	r3, #0
 80031de:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d005      	beq.n	80031f8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2204      	movs	r2, #4
 80031f0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	73fb      	strb	r3, [r7, #15]
 80031f6:	e051      	b.n	800329c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f022 020e 	bic.w	r2, r2, #14
 8003206:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0201 	bic.w	r2, r2, #1
 8003216:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a22      	ldr	r2, [pc, #136]	; (80032a8 <HAL_DMA_Abort_IT+0xd4>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d029      	beq.n	8003276 <HAL_DMA_Abort_IT+0xa2>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a21      	ldr	r2, [pc, #132]	; (80032ac <HAL_DMA_Abort_IT+0xd8>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d022      	beq.n	8003272 <HAL_DMA_Abort_IT+0x9e>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a1f      	ldr	r2, [pc, #124]	; (80032b0 <HAL_DMA_Abort_IT+0xdc>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d01a      	beq.n	800326c <HAL_DMA_Abort_IT+0x98>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a1e      	ldr	r2, [pc, #120]	; (80032b4 <HAL_DMA_Abort_IT+0xe0>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d012      	beq.n	8003266 <HAL_DMA_Abort_IT+0x92>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a1c      	ldr	r2, [pc, #112]	; (80032b8 <HAL_DMA_Abort_IT+0xe4>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d00a      	beq.n	8003260 <HAL_DMA_Abort_IT+0x8c>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a1b      	ldr	r2, [pc, #108]	; (80032bc <HAL_DMA_Abort_IT+0xe8>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d102      	bne.n	800325a <HAL_DMA_Abort_IT+0x86>
 8003254:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003258:	e00e      	b.n	8003278 <HAL_DMA_Abort_IT+0xa4>
 800325a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800325e:	e00b      	b.n	8003278 <HAL_DMA_Abort_IT+0xa4>
 8003260:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003264:	e008      	b.n	8003278 <HAL_DMA_Abort_IT+0xa4>
 8003266:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800326a:	e005      	b.n	8003278 <HAL_DMA_Abort_IT+0xa4>
 800326c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003270:	e002      	b.n	8003278 <HAL_DMA_Abort_IT+0xa4>
 8003272:	2310      	movs	r3, #16
 8003274:	e000      	b.n	8003278 <HAL_DMA_Abort_IT+0xa4>
 8003276:	2301      	movs	r3, #1
 8003278:	4a11      	ldr	r2, [pc, #68]	; (80032c0 <HAL_DMA_Abort_IT+0xec>)
 800327a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003290:	2b00      	cmp	r3, #0
 8003292:	d003      	beq.n	800329c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	4798      	blx	r3
    } 
  }
  return status;
 800329c:	7bfb      	ldrb	r3, [r7, #15]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40020008 	.word	0x40020008
 80032ac:	4002001c 	.word	0x4002001c
 80032b0:	40020030 	.word	0x40020030
 80032b4:	40020044 	.word	0x40020044
 80032b8:	40020058 	.word	0x40020058
 80032bc:	4002006c 	.word	0x4002006c
 80032c0:	40020000 	.word	0x40020000

080032c4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e0:	2204      	movs	r2, #4
 80032e2:	409a      	lsls	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4013      	ands	r3, r2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d04f      	beq.n	800338c <HAL_DMA_IRQHandler+0xc8>
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	f003 0304 	and.w	r3, r3, #4
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d04a      	beq.n	800338c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0320 	and.w	r3, r3, #32
 8003300:	2b00      	cmp	r3, #0
 8003302:	d107      	bne.n	8003314 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 0204 	bic.w	r2, r2, #4
 8003312:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a66      	ldr	r2, [pc, #408]	; (80034b4 <HAL_DMA_IRQHandler+0x1f0>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d029      	beq.n	8003372 <HAL_DMA_IRQHandler+0xae>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a65      	ldr	r2, [pc, #404]	; (80034b8 <HAL_DMA_IRQHandler+0x1f4>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d022      	beq.n	800336e <HAL_DMA_IRQHandler+0xaa>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a63      	ldr	r2, [pc, #396]	; (80034bc <HAL_DMA_IRQHandler+0x1f8>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d01a      	beq.n	8003368 <HAL_DMA_IRQHandler+0xa4>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a62      	ldr	r2, [pc, #392]	; (80034c0 <HAL_DMA_IRQHandler+0x1fc>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d012      	beq.n	8003362 <HAL_DMA_IRQHandler+0x9e>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a60      	ldr	r2, [pc, #384]	; (80034c4 <HAL_DMA_IRQHandler+0x200>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d00a      	beq.n	800335c <HAL_DMA_IRQHandler+0x98>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a5f      	ldr	r2, [pc, #380]	; (80034c8 <HAL_DMA_IRQHandler+0x204>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d102      	bne.n	8003356 <HAL_DMA_IRQHandler+0x92>
 8003350:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003354:	e00e      	b.n	8003374 <HAL_DMA_IRQHandler+0xb0>
 8003356:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800335a:	e00b      	b.n	8003374 <HAL_DMA_IRQHandler+0xb0>
 800335c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003360:	e008      	b.n	8003374 <HAL_DMA_IRQHandler+0xb0>
 8003362:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003366:	e005      	b.n	8003374 <HAL_DMA_IRQHandler+0xb0>
 8003368:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800336c:	e002      	b.n	8003374 <HAL_DMA_IRQHandler+0xb0>
 800336e:	2340      	movs	r3, #64	; 0x40
 8003370:	e000      	b.n	8003374 <HAL_DMA_IRQHandler+0xb0>
 8003372:	2304      	movs	r3, #4
 8003374:	4a55      	ldr	r2, [pc, #340]	; (80034cc <HAL_DMA_IRQHandler+0x208>)
 8003376:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 8094 	beq.w	80034aa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800338a:	e08e      	b.n	80034aa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003390:	2202      	movs	r2, #2
 8003392:	409a      	lsls	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4013      	ands	r3, r2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d056      	beq.n	800344a <HAL_DMA_IRQHandler+0x186>
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d051      	beq.n	800344a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0320 	and.w	r3, r3, #32
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d10b      	bne.n	80033cc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 020a 	bic.w	r2, r2, #10
 80033c2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a38      	ldr	r2, [pc, #224]	; (80034b4 <HAL_DMA_IRQHandler+0x1f0>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d029      	beq.n	800342a <HAL_DMA_IRQHandler+0x166>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a37      	ldr	r2, [pc, #220]	; (80034b8 <HAL_DMA_IRQHandler+0x1f4>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d022      	beq.n	8003426 <HAL_DMA_IRQHandler+0x162>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a35      	ldr	r2, [pc, #212]	; (80034bc <HAL_DMA_IRQHandler+0x1f8>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d01a      	beq.n	8003420 <HAL_DMA_IRQHandler+0x15c>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a34      	ldr	r2, [pc, #208]	; (80034c0 <HAL_DMA_IRQHandler+0x1fc>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d012      	beq.n	800341a <HAL_DMA_IRQHandler+0x156>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a32      	ldr	r2, [pc, #200]	; (80034c4 <HAL_DMA_IRQHandler+0x200>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d00a      	beq.n	8003414 <HAL_DMA_IRQHandler+0x150>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a31      	ldr	r2, [pc, #196]	; (80034c8 <HAL_DMA_IRQHandler+0x204>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d102      	bne.n	800340e <HAL_DMA_IRQHandler+0x14a>
 8003408:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800340c:	e00e      	b.n	800342c <HAL_DMA_IRQHandler+0x168>
 800340e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003412:	e00b      	b.n	800342c <HAL_DMA_IRQHandler+0x168>
 8003414:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003418:	e008      	b.n	800342c <HAL_DMA_IRQHandler+0x168>
 800341a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800341e:	e005      	b.n	800342c <HAL_DMA_IRQHandler+0x168>
 8003420:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003424:	e002      	b.n	800342c <HAL_DMA_IRQHandler+0x168>
 8003426:	2320      	movs	r3, #32
 8003428:	e000      	b.n	800342c <HAL_DMA_IRQHandler+0x168>
 800342a:	2302      	movs	r3, #2
 800342c:	4a27      	ldr	r2, [pc, #156]	; (80034cc <HAL_DMA_IRQHandler+0x208>)
 800342e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343c:	2b00      	cmp	r3, #0
 800343e:	d034      	beq.n	80034aa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003448:	e02f      	b.n	80034aa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	2208      	movs	r2, #8
 8003450:	409a      	lsls	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	4013      	ands	r3, r2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d028      	beq.n	80034ac <HAL_DMA_IRQHandler+0x1e8>
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	f003 0308 	and.w	r3, r3, #8
 8003460:	2b00      	cmp	r3, #0
 8003462:	d023      	beq.n	80034ac <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 020e 	bic.w	r2, r2, #14
 8003472:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800347c:	2101      	movs	r1, #1
 800347e:	fa01 f202 	lsl.w	r2, r1, r2
 8003482:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d004      	beq.n	80034ac <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	4798      	blx	r3
    }
  }
  return;
 80034aa:	bf00      	nop
 80034ac:	bf00      	nop
}
 80034ae:	3710      	adds	r7, #16
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	40020008 	.word	0x40020008
 80034b8:	4002001c 	.word	0x4002001c
 80034bc:	40020030 	.word	0x40020030
 80034c0:	40020044 	.word	0x40020044
 80034c4:	40020058 	.word	0x40020058
 80034c8:	4002006c 	.word	0x4002006c
 80034cc:	40020000 	.word	0x40020000

080034d0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80034de:	b2db      	uxtb	r3, r3
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bc80      	pop	{r7}
 80034e8:	4770      	bx	lr

080034ea <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034ea:	b480      	push	{r7}
 80034ec:	b085      	sub	sp, #20
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	60f8      	str	r0, [r7, #12]
 80034f2:	60b9      	str	r1, [r7, #8]
 80034f4:	607a      	str	r2, [r7, #4]
 80034f6:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003500:	2101      	movs	r1, #1
 8003502:	fa01 f202 	lsl.w	r2, r1, r2
 8003506:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	2b10      	cmp	r3, #16
 8003516:	d108      	bne.n	800352a <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68ba      	ldr	r2, [r7, #8]
 8003526:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003528:	e007      	b.n	800353a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	60da      	str	r2, [r3, #12]
}
 800353a:	bf00      	nop
 800353c:	3714      	adds	r7, #20
 800353e:	46bd      	mov	sp, r7
 8003540:	bc80      	pop	{r7}
 8003542:	4770      	bx	lr

08003544 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003544:	b480      	push	{r7}
 8003546:	b08b      	sub	sp, #44	; 0x2c
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800354e:	2300      	movs	r3, #0
 8003550:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003552:	2300      	movs	r3, #0
 8003554:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003556:	e169      	b.n	800382c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003558:	2201      	movs	r2, #1
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	69fa      	ldr	r2, [r7, #28]
 8003568:	4013      	ands	r3, r2
 800356a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	429a      	cmp	r2, r3
 8003572:	f040 8158 	bne.w	8003826 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	4a9a      	ldr	r2, [pc, #616]	; (80037e4 <HAL_GPIO_Init+0x2a0>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d05e      	beq.n	800363e <HAL_GPIO_Init+0xfa>
 8003580:	4a98      	ldr	r2, [pc, #608]	; (80037e4 <HAL_GPIO_Init+0x2a0>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d875      	bhi.n	8003672 <HAL_GPIO_Init+0x12e>
 8003586:	4a98      	ldr	r2, [pc, #608]	; (80037e8 <HAL_GPIO_Init+0x2a4>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d058      	beq.n	800363e <HAL_GPIO_Init+0xfa>
 800358c:	4a96      	ldr	r2, [pc, #600]	; (80037e8 <HAL_GPIO_Init+0x2a4>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d86f      	bhi.n	8003672 <HAL_GPIO_Init+0x12e>
 8003592:	4a96      	ldr	r2, [pc, #600]	; (80037ec <HAL_GPIO_Init+0x2a8>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d052      	beq.n	800363e <HAL_GPIO_Init+0xfa>
 8003598:	4a94      	ldr	r2, [pc, #592]	; (80037ec <HAL_GPIO_Init+0x2a8>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d869      	bhi.n	8003672 <HAL_GPIO_Init+0x12e>
 800359e:	4a94      	ldr	r2, [pc, #592]	; (80037f0 <HAL_GPIO_Init+0x2ac>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d04c      	beq.n	800363e <HAL_GPIO_Init+0xfa>
 80035a4:	4a92      	ldr	r2, [pc, #584]	; (80037f0 <HAL_GPIO_Init+0x2ac>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d863      	bhi.n	8003672 <HAL_GPIO_Init+0x12e>
 80035aa:	4a92      	ldr	r2, [pc, #584]	; (80037f4 <HAL_GPIO_Init+0x2b0>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d046      	beq.n	800363e <HAL_GPIO_Init+0xfa>
 80035b0:	4a90      	ldr	r2, [pc, #576]	; (80037f4 <HAL_GPIO_Init+0x2b0>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d85d      	bhi.n	8003672 <HAL_GPIO_Init+0x12e>
 80035b6:	2b12      	cmp	r3, #18
 80035b8:	d82a      	bhi.n	8003610 <HAL_GPIO_Init+0xcc>
 80035ba:	2b12      	cmp	r3, #18
 80035bc:	d859      	bhi.n	8003672 <HAL_GPIO_Init+0x12e>
 80035be:	a201      	add	r2, pc, #4	; (adr r2, 80035c4 <HAL_GPIO_Init+0x80>)
 80035c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c4:	0800363f 	.word	0x0800363f
 80035c8:	08003619 	.word	0x08003619
 80035cc:	0800362b 	.word	0x0800362b
 80035d0:	0800366d 	.word	0x0800366d
 80035d4:	08003673 	.word	0x08003673
 80035d8:	08003673 	.word	0x08003673
 80035dc:	08003673 	.word	0x08003673
 80035e0:	08003673 	.word	0x08003673
 80035e4:	08003673 	.word	0x08003673
 80035e8:	08003673 	.word	0x08003673
 80035ec:	08003673 	.word	0x08003673
 80035f0:	08003673 	.word	0x08003673
 80035f4:	08003673 	.word	0x08003673
 80035f8:	08003673 	.word	0x08003673
 80035fc:	08003673 	.word	0x08003673
 8003600:	08003673 	.word	0x08003673
 8003604:	08003673 	.word	0x08003673
 8003608:	08003621 	.word	0x08003621
 800360c:	08003635 	.word	0x08003635
 8003610:	4a79      	ldr	r2, [pc, #484]	; (80037f8 <HAL_GPIO_Init+0x2b4>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d013      	beq.n	800363e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003616:	e02c      	b.n	8003672 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	623b      	str	r3, [r7, #32]
          break;
 800361e:	e029      	b.n	8003674 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	3304      	adds	r3, #4
 8003626:	623b      	str	r3, [r7, #32]
          break;
 8003628:	e024      	b.n	8003674 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	3308      	adds	r3, #8
 8003630:	623b      	str	r3, [r7, #32]
          break;
 8003632:	e01f      	b.n	8003674 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	330c      	adds	r3, #12
 800363a:	623b      	str	r3, [r7, #32]
          break;
 800363c:	e01a      	b.n	8003674 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d102      	bne.n	800364c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003646:	2304      	movs	r3, #4
 8003648:	623b      	str	r3, [r7, #32]
          break;
 800364a:	e013      	b.n	8003674 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d105      	bne.n	8003660 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003654:	2308      	movs	r3, #8
 8003656:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	69fa      	ldr	r2, [r7, #28]
 800365c:	611a      	str	r2, [r3, #16]
          break;
 800365e:	e009      	b.n	8003674 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003660:	2308      	movs	r3, #8
 8003662:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	69fa      	ldr	r2, [r7, #28]
 8003668:	615a      	str	r2, [r3, #20]
          break;
 800366a:	e003      	b.n	8003674 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800366c:	2300      	movs	r3, #0
 800366e:	623b      	str	r3, [r7, #32]
          break;
 8003670:	e000      	b.n	8003674 <HAL_GPIO_Init+0x130>
          break;
 8003672:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	2bff      	cmp	r3, #255	; 0xff
 8003678:	d801      	bhi.n	800367e <HAL_GPIO_Init+0x13a>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	e001      	b.n	8003682 <HAL_GPIO_Init+0x13e>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	3304      	adds	r3, #4
 8003682:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	2bff      	cmp	r3, #255	; 0xff
 8003688:	d802      	bhi.n	8003690 <HAL_GPIO_Init+0x14c>
 800368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	e002      	b.n	8003696 <HAL_GPIO_Init+0x152>
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	3b08      	subs	r3, #8
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	210f      	movs	r1, #15
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	fa01 f303 	lsl.w	r3, r1, r3
 80036a4:	43db      	mvns	r3, r3
 80036a6:	401a      	ands	r2, r3
 80036a8:	6a39      	ldr	r1, [r7, #32]
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	fa01 f303 	lsl.w	r3, r1, r3
 80036b0:	431a      	orrs	r2, r3
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f000 80b1 	beq.w	8003826 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80036c4:	4b4d      	ldr	r3, [pc, #308]	; (80037fc <HAL_GPIO_Init+0x2b8>)
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	4a4c      	ldr	r2, [pc, #304]	; (80037fc <HAL_GPIO_Init+0x2b8>)
 80036ca:	f043 0301 	orr.w	r3, r3, #1
 80036ce:	6193      	str	r3, [r2, #24]
 80036d0:	4b4a      	ldr	r3, [pc, #296]	; (80037fc <HAL_GPIO_Init+0x2b8>)
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	60bb      	str	r3, [r7, #8]
 80036da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80036dc:	4a48      	ldr	r2, [pc, #288]	; (8003800 <HAL_GPIO_Init+0x2bc>)
 80036de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e0:	089b      	lsrs	r3, r3, #2
 80036e2:	3302      	adds	r3, #2
 80036e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	f003 0303 	and.w	r3, r3, #3
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	220f      	movs	r2, #15
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	43db      	mvns	r3, r3
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	4013      	ands	r3, r2
 80036fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a40      	ldr	r2, [pc, #256]	; (8003804 <HAL_GPIO_Init+0x2c0>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d013      	beq.n	8003730 <HAL_GPIO_Init+0x1ec>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a3f      	ldr	r2, [pc, #252]	; (8003808 <HAL_GPIO_Init+0x2c4>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d00d      	beq.n	800372c <HAL_GPIO_Init+0x1e8>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a3e      	ldr	r2, [pc, #248]	; (800380c <HAL_GPIO_Init+0x2c8>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d007      	beq.n	8003728 <HAL_GPIO_Init+0x1e4>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a3d      	ldr	r2, [pc, #244]	; (8003810 <HAL_GPIO_Init+0x2cc>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d101      	bne.n	8003724 <HAL_GPIO_Init+0x1e0>
 8003720:	2303      	movs	r3, #3
 8003722:	e006      	b.n	8003732 <HAL_GPIO_Init+0x1ee>
 8003724:	2304      	movs	r3, #4
 8003726:	e004      	b.n	8003732 <HAL_GPIO_Init+0x1ee>
 8003728:	2302      	movs	r3, #2
 800372a:	e002      	b.n	8003732 <HAL_GPIO_Init+0x1ee>
 800372c:	2301      	movs	r3, #1
 800372e:	e000      	b.n	8003732 <HAL_GPIO_Init+0x1ee>
 8003730:	2300      	movs	r3, #0
 8003732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003734:	f002 0203 	and.w	r2, r2, #3
 8003738:	0092      	lsls	r2, r2, #2
 800373a:	4093      	lsls	r3, r2
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	4313      	orrs	r3, r2
 8003740:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003742:	492f      	ldr	r1, [pc, #188]	; (8003800 <HAL_GPIO_Init+0x2bc>)
 8003744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003746:	089b      	lsrs	r3, r3, #2
 8003748:	3302      	adds	r3, #2
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d006      	beq.n	800376a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800375c:	4b2d      	ldr	r3, [pc, #180]	; (8003814 <HAL_GPIO_Init+0x2d0>)
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	492c      	ldr	r1, [pc, #176]	; (8003814 <HAL_GPIO_Init+0x2d0>)
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	4313      	orrs	r3, r2
 8003766:	608b      	str	r3, [r1, #8]
 8003768:	e006      	b.n	8003778 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800376a:	4b2a      	ldr	r3, [pc, #168]	; (8003814 <HAL_GPIO_Init+0x2d0>)
 800376c:	689a      	ldr	r2, [r3, #8]
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	43db      	mvns	r3, r3
 8003772:	4928      	ldr	r1, [pc, #160]	; (8003814 <HAL_GPIO_Init+0x2d0>)
 8003774:	4013      	ands	r3, r2
 8003776:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d006      	beq.n	8003792 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003784:	4b23      	ldr	r3, [pc, #140]	; (8003814 <HAL_GPIO_Init+0x2d0>)
 8003786:	68da      	ldr	r2, [r3, #12]
 8003788:	4922      	ldr	r1, [pc, #136]	; (8003814 <HAL_GPIO_Init+0x2d0>)
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	4313      	orrs	r3, r2
 800378e:	60cb      	str	r3, [r1, #12]
 8003790:	e006      	b.n	80037a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003792:	4b20      	ldr	r3, [pc, #128]	; (8003814 <HAL_GPIO_Init+0x2d0>)
 8003794:	68da      	ldr	r2, [r3, #12]
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	43db      	mvns	r3, r3
 800379a:	491e      	ldr	r1, [pc, #120]	; (8003814 <HAL_GPIO_Init+0x2d0>)
 800379c:	4013      	ands	r3, r2
 800379e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d006      	beq.n	80037ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80037ac:	4b19      	ldr	r3, [pc, #100]	; (8003814 <HAL_GPIO_Init+0x2d0>)
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	4918      	ldr	r1, [pc, #96]	; (8003814 <HAL_GPIO_Init+0x2d0>)
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	604b      	str	r3, [r1, #4]
 80037b8:	e006      	b.n	80037c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80037ba:	4b16      	ldr	r3, [pc, #88]	; (8003814 <HAL_GPIO_Init+0x2d0>)
 80037bc:	685a      	ldr	r2, [r3, #4]
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	43db      	mvns	r3, r3
 80037c2:	4914      	ldr	r1, [pc, #80]	; (8003814 <HAL_GPIO_Init+0x2d0>)
 80037c4:	4013      	ands	r3, r2
 80037c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d021      	beq.n	8003818 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80037d4:	4b0f      	ldr	r3, [pc, #60]	; (8003814 <HAL_GPIO_Init+0x2d0>)
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	490e      	ldr	r1, [pc, #56]	; (8003814 <HAL_GPIO_Init+0x2d0>)
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	4313      	orrs	r3, r2
 80037de:	600b      	str	r3, [r1, #0]
 80037e0:	e021      	b.n	8003826 <HAL_GPIO_Init+0x2e2>
 80037e2:	bf00      	nop
 80037e4:	10320000 	.word	0x10320000
 80037e8:	10310000 	.word	0x10310000
 80037ec:	10220000 	.word	0x10220000
 80037f0:	10210000 	.word	0x10210000
 80037f4:	10120000 	.word	0x10120000
 80037f8:	10110000 	.word	0x10110000
 80037fc:	40021000 	.word	0x40021000
 8003800:	40010000 	.word	0x40010000
 8003804:	40010800 	.word	0x40010800
 8003808:	40010c00 	.word	0x40010c00
 800380c:	40011000 	.word	0x40011000
 8003810:	40011400 	.word	0x40011400
 8003814:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003818:	4b0b      	ldr	r3, [pc, #44]	; (8003848 <HAL_GPIO_Init+0x304>)
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	43db      	mvns	r3, r3
 8003820:	4909      	ldr	r1, [pc, #36]	; (8003848 <HAL_GPIO_Init+0x304>)
 8003822:	4013      	ands	r3, r2
 8003824:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003828:	3301      	adds	r3, #1
 800382a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003832:	fa22 f303 	lsr.w	r3, r2, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	f47f ae8e 	bne.w	8003558 <HAL_GPIO_Init+0x14>
  }
}
 800383c:	bf00      	nop
 800383e:	bf00      	nop
 8003840:	372c      	adds	r7, #44	; 0x2c
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr
 8003848:	40010400 	.word	0x40010400

0800384c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	460b      	mov	r3, r1
 8003856:	807b      	strh	r3, [r7, #2]
 8003858:	4613      	mov	r3, r2
 800385a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800385c:	787b      	ldrb	r3, [r7, #1]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003862:	887a      	ldrh	r2, [r7, #2]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003868:	e003      	b.n	8003872 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800386a:	887b      	ldrh	r3, [r7, #2]
 800386c:	041a      	lsls	r2, r3, #16
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	611a      	str	r2, [r3, #16]
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	bc80      	pop	{r7}
 800387a:	4770      	bx	lr

0800387c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e12b      	b.n	8003ae6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d106      	bne.n	80038a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7fe fbbe 	bl	8002024 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2224      	movs	r2, #36	; 0x24
 80038ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 0201 	bic.w	r2, r2, #1
 80038be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038e0:	f002 fefa 	bl	80066d8 <HAL_RCC_GetPCLK1Freq>
 80038e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	4a81      	ldr	r2, [pc, #516]	; (8003af0 <HAL_I2C_Init+0x274>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d807      	bhi.n	8003900 <HAL_I2C_Init+0x84>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	4a80      	ldr	r2, [pc, #512]	; (8003af4 <HAL_I2C_Init+0x278>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	bf94      	ite	ls
 80038f8:	2301      	movls	r3, #1
 80038fa:	2300      	movhi	r3, #0
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	e006      	b.n	800390e <HAL_I2C_Init+0x92>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	4a7d      	ldr	r2, [pc, #500]	; (8003af8 <HAL_I2C_Init+0x27c>)
 8003904:	4293      	cmp	r3, r2
 8003906:	bf94      	ite	ls
 8003908:	2301      	movls	r3, #1
 800390a:	2300      	movhi	r3, #0
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e0e7      	b.n	8003ae6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	4a78      	ldr	r2, [pc, #480]	; (8003afc <HAL_I2C_Init+0x280>)
 800391a:	fba2 2303 	umull	r2, r3, r2, r3
 800391e:	0c9b      	lsrs	r3, r3, #18
 8003920:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	430a      	orrs	r2, r1
 8003934:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	4a6a      	ldr	r2, [pc, #424]	; (8003af0 <HAL_I2C_Init+0x274>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d802      	bhi.n	8003950 <HAL_I2C_Init+0xd4>
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	3301      	adds	r3, #1
 800394e:	e009      	b.n	8003964 <HAL_I2C_Init+0xe8>
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003956:	fb02 f303 	mul.w	r3, r2, r3
 800395a:	4a69      	ldr	r2, [pc, #420]	; (8003b00 <HAL_I2C_Init+0x284>)
 800395c:	fba2 2303 	umull	r2, r3, r2, r3
 8003960:	099b      	lsrs	r3, r3, #6
 8003962:	3301      	adds	r3, #1
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	6812      	ldr	r2, [r2, #0]
 8003968:	430b      	orrs	r3, r1
 800396a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003976:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	495c      	ldr	r1, [pc, #368]	; (8003af0 <HAL_I2C_Init+0x274>)
 8003980:	428b      	cmp	r3, r1
 8003982:	d819      	bhi.n	80039b8 <HAL_I2C_Init+0x13c>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	1e59      	subs	r1, r3, #1
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003992:	1c59      	adds	r1, r3, #1
 8003994:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003998:	400b      	ands	r3, r1
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00a      	beq.n	80039b4 <HAL_I2C_Init+0x138>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	1e59      	subs	r1, r3, #1
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80039ac:	3301      	adds	r3, #1
 80039ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039b2:	e051      	b.n	8003a58 <HAL_I2C_Init+0x1dc>
 80039b4:	2304      	movs	r3, #4
 80039b6:	e04f      	b.n	8003a58 <HAL_I2C_Init+0x1dc>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d111      	bne.n	80039e4 <HAL_I2C_Init+0x168>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	1e58      	subs	r0, r3, #1
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6859      	ldr	r1, [r3, #4]
 80039c8:	460b      	mov	r3, r1
 80039ca:	005b      	lsls	r3, r3, #1
 80039cc:	440b      	add	r3, r1
 80039ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80039d2:	3301      	adds	r3, #1
 80039d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039d8:	2b00      	cmp	r3, #0
 80039da:	bf0c      	ite	eq
 80039dc:	2301      	moveq	r3, #1
 80039de:	2300      	movne	r3, #0
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	e012      	b.n	8003a0a <HAL_I2C_Init+0x18e>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	1e58      	subs	r0, r3, #1
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6859      	ldr	r1, [r3, #4]
 80039ec:	460b      	mov	r3, r1
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	440b      	add	r3, r1
 80039f2:	0099      	lsls	r1, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80039fa:	3301      	adds	r3, #1
 80039fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	bf0c      	ite	eq
 8003a04:	2301      	moveq	r3, #1
 8003a06:	2300      	movne	r3, #0
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <HAL_I2C_Init+0x196>
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e022      	b.n	8003a58 <HAL_I2C_Init+0x1dc>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10e      	bne.n	8003a38 <HAL_I2C_Init+0x1bc>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	1e58      	subs	r0, r3, #1
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6859      	ldr	r1, [r3, #4]
 8003a22:	460b      	mov	r3, r1
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	440b      	add	r3, r1
 8003a28:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a36:	e00f      	b.n	8003a58 <HAL_I2C_Init+0x1dc>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	1e58      	subs	r0, r3, #1
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6859      	ldr	r1, [r3, #4]
 8003a40:	460b      	mov	r3, r1
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	440b      	add	r3, r1
 8003a46:	0099      	lsls	r1, r3, #2
 8003a48:	440b      	add	r3, r1
 8003a4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a4e:	3301      	adds	r3, #1
 8003a50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a58:	6879      	ldr	r1, [r7, #4]
 8003a5a:	6809      	ldr	r1, [r1, #0]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	69da      	ldr	r2, [r3, #28]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	431a      	orrs	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	6911      	ldr	r1, [r2, #16]
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	68d2      	ldr	r2, [r2, #12]
 8003a92:	4311      	orrs	r1, r2
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	6812      	ldr	r2, [r2, #0]
 8003a98:	430b      	orrs	r3, r1
 8003a9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	695a      	ldr	r2, [r3, #20]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 0201 	orr.w	r2, r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2220      	movs	r2, #32
 8003ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	000186a0 	.word	0x000186a0
 8003af4:	001e847f 	.word	0x001e847f
 8003af8:	003d08ff 	.word	0x003d08ff
 8003afc:	431bde83 	.word	0x431bde83
 8003b00:	10624dd3 	.word	0x10624dd3

08003b04 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b16:	2b80      	cmp	r3, #128	; 0x80
 8003b18:	d103      	bne.n	8003b22 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	611a      	str	r2, [r3, #16]
  }
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr

08003b2c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b088      	sub	sp, #32
 8003b30:	af02      	add	r7, sp, #8
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	607a      	str	r2, [r7, #4]
 8003b36:	461a      	mov	r2, r3
 8003b38:	460b      	mov	r3, r1
 8003b3a:	817b      	strh	r3, [r7, #10]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b40:	f7fe fca6 	bl	8002490 <HAL_GetTick>
 8003b44:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b20      	cmp	r3, #32
 8003b50:	f040 80e0 	bne.w	8003d14 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	9300      	str	r3, [sp, #0]
 8003b58:	2319      	movs	r3, #25
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	4970      	ldr	r1, [pc, #448]	; (8003d20 <HAL_I2C_Master_Transmit+0x1f4>)
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f001 ffcc 	bl	8005afc <I2C_WaitOnFlagUntilTimeout>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	e0d3      	b.n	8003d16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d101      	bne.n	8003b7c <HAL_I2C_Master_Transmit+0x50>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	e0cc      	b.n	8003d16 <HAL_I2C_Master_Transmit+0x1ea>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d007      	beq.n	8003ba2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f042 0201 	orr.w	r2, r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bb0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2221      	movs	r2, #33	; 0x21
 8003bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2210      	movs	r2, #16
 8003bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	893a      	ldrh	r2, [r7, #8]
 8003bd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	4a50      	ldr	r2, [pc, #320]	; (8003d24 <HAL_I2C_Master_Transmit+0x1f8>)
 8003be2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003be4:	8979      	ldrh	r1, [r7, #10]
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	6a3a      	ldr	r2, [r7, #32]
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f001 fe5c 	bl	80058a8 <I2C_MasterRequestWrite>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e08d      	b.n	8003d16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	613b      	str	r3, [r7, #16]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	613b      	str	r3, [r7, #16]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	613b      	str	r3, [r7, #16]
 8003c0e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003c10:	e066      	b.n	8003ce0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	6a39      	ldr	r1, [r7, #32]
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	f002 f88a 	bl	8005d30 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00d      	beq.n	8003c3e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d107      	bne.n	8003c3a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e06b      	b.n	8003d16 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	781a      	ldrb	r2, [r3, #0]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4e:	1c5a      	adds	r2, r3, #1
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c66:	3b01      	subs	r3, #1
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	f003 0304 	and.w	r3, r3, #4
 8003c78:	2b04      	cmp	r3, #4
 8003c7a:	d11b      	bne.n	8003cb4 <HAL_I2C_Master_Transmit+0x188>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d017      	beq.n	8003cb4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c88:	781a      	ldrb	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c94:	1c5a      	adds	r2, r3, #1
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	b29a      	uxth	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cac:	3b01      	subs	r3, #1
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	6a39      	ldr	r1, [r7, #32]
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f002 f881 	bl	8005dc0 <I2C_WaitOnBTFFlagUntilTimeout>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00d      	beq.n	8003ce0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc8:	2b04      	cmp	r3, #4
 8003cca:	d107      	bne.n	8003cdc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cda:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e01a      	b.n	8003d16 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d194      	bne.n	8003c12 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d10:	2300      	movs	r3, #0
 8003d12:	e000      	b.n	8003d16 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003d14:	2302      	movs	r3, #2
  }
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3718      	adds	r7, #24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	00100002 	.word	0x00100002
 8003d24:	ffff0000 	.word	0xffff0000

08003d28 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b087      	sub	sp, #28
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	607a      	str	r2, [r7, #4]
 8003d32:	461a      	mov	r2, r3
 8003d34:	460b      	mov	r3, r1
 8003d36:	817b      	strh	r3, [r7, #10]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b20      	cmp	r3, #32
 8003d4a:	f040 8089 	bne.w	8003e60 <HAL_I2C_Master_Receive_IT+0x138>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003d4e:	4b47      	ldr	r3, [pc, #284]	; (8003e6c <HAL_I2C_Master_Receive_IT+0x144>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	08db      	lsrs	r3, r3, #3
 8003d54:	4a46      	ldr	r2, [pc, #280]	; (8003e70 <HAL_I2C_Master_Receive_IT+0x148>)
 8003d56:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5a:	0a1a      	lsrs	r2, r3, #8
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	4413      	add	r3, r2
 8003d62:	009a      	lsls	r2, r3, #2
 8003d64:	4413      	add	r3, r2
 8003d66:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d112      	bne.n	8003d9a <HAL_I2C_Master_Receive_IT+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	f043 0220 	orr.w	r2, r3, #32
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	641a      	str	r2, [r3, #64]	; 0x40

        return HAL_BUSY;
 8003d96:	2302      	movs	r3, #2
 8003d98:	e063      	b.n	8003e62 <HAL_I2C_Master_Receive_IT+0x13a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d0df      	beq.n	8003d68 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d101      	bne.n	8003db6 <HAL_I2C_Master_Receive_IT+0x8e>
 8003db2:	2302      	movs	r3, #2
 8003db4:	e055      	b.n	8003e62 <HAL_I2C_Master_Receive_IT+0x13a>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d007      	beq.n	8003ddc <HAL_I2C_Master_Receive_IT+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f042 0201 	orr.w	r2, r2, #1
 8003dda:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2222      	movs	r2, #34	; 0x22
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2210      	movs	r2, #16
 8003df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	893a      	ldrh	r2, [r7, #8]
 8003e0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	4a16      	ldr	r2, [pc, #88]	; (8003e74 <HAL_I2C_Master_Receive_IT+0x14c>)
 8003e1c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003e1e:	897a      	ldrh	r2, [r7, #10]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	685a      	ldr	r2, [r3, #4]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003e3a:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e4a:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e5a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	e000      	b.n	8003e62 <HAL_I2C_Master_Receive_IT+0x13a>
  }
  else
  {
    return HAL_BUSY;
 8003e60:	2302      	movs	r3, #2
  }
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	371c      	adds	r7, #28
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bc80      	pop	{r7}
 8003e6a:	4770      	bx	lr
 8003e6c:	20000024 	.word	0x20000024
 8003e70:	14f8b589 	.word	0x14f8b589
 8003e74:	ffff0000 	.word	0xffff0000

08003e78 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b08a      	sub	sp, #40	; 0x28
 8003e7c:	af02      	add	r7, sp, #8
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	607a      	str	r2, [r7, #4]
 8003e82:	603b      	str	r3, [r7, #0]
 8003e84:	460b      	mov	r3, r1
 8003e86:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003e88:	f7fe fb02 	bl	8002490 <HAL_GetTick>
 8003e8c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b20      	cmp	r3, #32
 8003e9c:	f040 8111 	bne.w	80040c2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	9300      	str	r3, [sp, #0]
 8003ea4:	2319      	movs	r3, #25
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	4988      	ldr	r1, [pc, #544]	; (80040cc <HAL_I2C_IsDeviceReady+0x254>)
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f001 fe26 	bl	8005afc <I2C_WaitOnFlagUntilTimeout>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	e104      	b.n	80040c4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d101      	bne.n	8003ec8 <HAL_I2C_IsDeviceReady+0x50>
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	e0fd      	b.n	80040c4 <HAL_I2C_IsDeviceReady+0x24c>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d007      	beq.n	8003eee <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f042 0201 	orr.w	r2, r2, #1
 8003eec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003efc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2224      	movs	r2, #36	; 0x24
 8003f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4a70      	ldr	r2, [pc, #448]	; (80040d0 <HAL_I2C_IsDeviceReady+0x258>)
 8003f10:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f20:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f001 fde4 	bl	8005afc <I2C_WaitOnFlagUntilTimeout>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00d      	beq.n	8003f56 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f48:	d103      	bne.n	8003f52 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f50:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e0b6      	b.n	80040c4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f56:	897b      	ldrh	r3, [r7, #10]
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f64:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003f66:	f7fe fa93 	bl	8002490 <HAL_GetTick>
 8003f6a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	bf0c      	ite	eq
 8003f7a:	2301      	moveq	r3, #1
 8003f7c:	2300      	movne	r3, #0
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f90:	bf0c      	ite	eq
 8003f92:	2301      	moveq	r3, #1
 8003f94:	2300      	movne	r3, #0
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003f9a:	e025      	b.n	8003fe8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f9c:	f7fe fa78 	bl	8002490 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d302      	bcc.n	8003fb2 <HAL_I2C_IsDeviceReady+0x13a>
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d103      	bne.n	8003fba <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	22a0      	movs	r2, #160	; 0xa0
 8003fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	695b      	ldr	r3, [r3, #20]
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	bf0c      	ite	eq
 8003fc8:	2301      	moveq	r3, #1
 8003fca:	2300      	movne	r3, #0
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fde:	bf0c      	ite	eq
 8003fe0:	2301      	moveq	r3, #1
 8003fe2:	2300      	movne	r3, #0
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	2ba0      	cmp	r3, #160	; 0xa0
 8003ff2:	d005      	beq.n	8004000 <HAL_I2C_IsDeviceReady+0x188>
 8003ff4:	7dfb      	ldrb	r3, [r7, #23]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d102      	bne.n	8004000 <HAL_I2C_IsDeviceReady+0x188>
 8003ffa:	7dbb      	ldrb	r3, [r7, #22]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d0cd      	beq.n	8003f9c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2220      	movs	r2, #32
 8004004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b02      	cmp	r3, #2
 8004014:	d129      	bne.n	800406a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004024:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004026:	2300      	movs	r3, #0
 8004028:	613b      	str	r3, [r7, #16]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	695b      	ldr	r3, [r3, #20]
 8004030:	613b      	str	r3, [r7, #16]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	613b      	str	r3, [r7, #16]
 800403a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	9300      	str	r3, [sp, #0]
 8004040:	2319      	movs	r3, #25
 8004042:	2201      	movs	r2, #1
 8004044:	4921      	ldr	r1, [pc, #132]	; (80040cc <HAL_I2C_IsDeviceReady+0x254>)
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f001 fd58 	bl	8005afc <I2C_WaitOnFlagUntilTimeout>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e036      	b.n	80040c4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2220      	movs	r2, #32
 800405a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004066:	2300      	movs	r3, #0
 8004068:	e02c      	b.n	80040c4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004078:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004082:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	9300      	str	r3, [sp, #0]
 8004088:	2319      	movs	r3, #25
 800408a:	2201      	movs	r2, #1
 800408c:	490f      	ldr	r1, [pc, #60]	; (80040cc <HAL_I2C_IsDeviceReady+0x254>)
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f001 fd34 	bl	8005afc <I2C_WaitOnFlagUntilTimeout>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e012      	b.n	80040c4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	3301      	adds	r3, #1
 80040a2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	f4ff af32 	bcc.w	8003f12 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2220      	movs	r2, #32
 80040b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e000      	b.n	80040c4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80040c2:	2302      	movs	r3, #2
  }
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3720      	adds	r7, #32
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	00100002 	.word	0x00100002
 80040d0:	ffff0000 	.word	0xffff0000

080040d4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b088      	sub	sp, #32
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80040dc:	2300      	movs	r3, #0
 80040de:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ec:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040f4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040fc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80040fe:	7bfb      	ldrb	r3, [r7, #15]
 8004100:	2b10      	cmp	r3, #16
 8004102:	d003      	beq.n	800410c <HAL_I2C_EV_IRQHandler+0x38>
 8004104:	7bfb      	ldrb	r3, [r7, #15]
 8004106:	2b40      	cmp	r3, #64	; 0x40
 8004108:	f040 80c1 	bne.w	800428e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10d      	bne.n	8004142 <HAL_I2C_EV_IRQHandler+0x6e>
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800412c:	d003      	beq.n	8004136 <HAL_I2C_EV_IRQHandler+0x62>
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004134:	d101      	bne.n	800413a <HAL_I2C_EV_IRQHandler+0x66>
 8004136:	2301      	movs	r3, #1
 8004138:	e000      	b.n	800413c <HAL_I2C_EV_IRQHandler+0x68>
 800413a:	2300      	movs	r3, #0
 800413c:	2b01      	cmp	r3, #1
 800413e:	f000 8132 	beq.w	80043a6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00c      	beq.n	8004166 <HAL_I2C_EV_IRQHandler+0x92>
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	0a5b      	lsrs	r3, r3, #9
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	2b00      	cmp	r3, #0
 8004156:	d006      	beq.n	8004166 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f001 fed9 	bl	8005f10 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 fd7c 	bl	8004c5c <I2C_Master_SB>
 8004164:	e092      	b.n	800428c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	08db      	lsrs	r3, r3, #3
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	d009      	beq.n	8004186 <HAL_I2C_EV_IRQHandler+0xb2>
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	0a5b      	lsrs	r3, r3, #9
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 fdf1 	bl	8004d66 <I2C_Master_ADD10>
 8004184:	e082      	b.n	800428c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	085b      	lsrs	r3, r3, #1
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b00      	cmp	r3, #0
 8004190:	d009      	beq.n	80041a6 <HAL_I2C_EV_IRQHandler+0xd2>
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	0a5b      	lsrs	r3, r3, #9
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 fe0a 	bl	8004db8 <I2C_Master_ADDR>
 80041a4:	e072      	b.n	800428c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	089b      	lsrs	r3, r3, #2
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d03b      	beq.n	800422a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041c0:	f000 80f3 	beq.w	80043aa <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	09db      	lsrs	r3, r3, #7
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00f      	beq.n	80041f0 <HAL_I2C_EV_IRQHandler+0x11c>
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	0a9b      	lsrs	r3, r3, #10
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d009      	beq.n	80041f0 <HAL_I2C_EV_IRQHandler+0x11c>
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	089b      	lsrs	r3, r3, #2
 80041e0:	f003 0301 	and.w	r3, r3, #1
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d103      	bne.n	80041f0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 f9e8 	bl	80045be <I2C_MasterTransmit_TXE>
 80041ee:	e04d      	b.n	800428c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	089b      	lsrs	r3, r3, #2
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f000 80d6 	beq.w	80043aa <HAL_I2C_EV_IRQHandler+0x2d6>
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	0a5b      	lsrs	r3, r3, #9
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b00      	cmp	r3, #0
 8004208:	f000 80cf 	beq.w	80043aa <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800420c:	7bbb      	ldrb	r3, [r7, #14]
 800420e:	2b21      	cmp	r3, #33	; 0x21
 8004210:	d103      	bne.n	800421a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 fa6f 	bl	80046f6 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004218:	e0c7      	b.n	80043aa <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800421a:	7bfb      	ldrb	r3, [r7, #15]
 800421c:	2b40      	cmp	r3, #64	; 0x40
 800421e:	f040 80c4 	bne.w	80043aa <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 fadd 	bl	80047e2 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004228:	e0bf      	b.n	80043aa <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004234:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004238:	f000 80b7 	beq.w	80043aa <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	099b      	lsrs	r3, r3, #6
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00f      	beq.n	8004268 <HAL_I2C_EV_IRQHandler+0x194>
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	0a9b      	lsrs	r3, r3, #10
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	2b00      	cmp	r3, #0
 8004252:	d009      	beq.n	8004268 <HAL_I2C_EV_IRQHandler+0x194>
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	089b      	lsrs	r3, r3, #2
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	2b00      	cmp	r3, #0
 800425e:	d103      	bne.n	8004268 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 fb56 	bl	8004912 <I2C_MasterReceive_RXNE>
 8004266:	e011      	b.n	800428c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	089b      	lsrs	r3, r3, #2
 800426c:	f003 0301 	and.w	r3, r3, #1
 8004270:	2b00      	cmp	r3, #0
 8004272:	f000 809a 	beq.w	80043aa <HAL_I2C_EV_IRQHandler+0x2d6>
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	0a5b      	lsrs	r3, r3, #9
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b00      	cmp	r3, #0
 8004280:	f000 8093 	beq.w	80043aa <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 fbff 	bl	8004a88 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800428a:	e08e      	b.n	80043aa <HAL_I2C_EV_IRQHandler+0x2d6>
 800428c:	e08d      	b.n	80043aa <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	2b00      	cmp	r3, #0
 8004294:	d004      	beq.n	80042a0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	695b      	ldr	r3, [r3, #20]
 800429c:	61fb      	str	r3, [r7, #28]
 800429e:	e007      	b.n	80042b0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	085b      	lsrs	r3, r3, #1
 80042b4:	f003 0301 	and.w	r3, r3, #1
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d012      	beq.n	80042e2 <HAL_I2C_EV_IRQHandler+0x20e>
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	0a5b      	lsrs	r3, r3, #9
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00c      	beq.n	80042e2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d003      	beq.n	80042d8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80042d8:	69b9      	ldr	r1, [r7, #24]
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 ffc3 	bl	8005266 <I2C_Slave_ADDR>
 80042e0:	e066      	b.n	80043b0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	091b      	lsrs	r3, r3, #4
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d009      	beq.n	8004302 <HAL_I2C_EV_IRQHandler+0x22e>
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	0a5b      	lsrs	r3, r3, #9
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 fffe 	bl	80052fc <I2C_Slave_STOPF>
 8004300:	e056      	b.n	80043b0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004302:	7bbb      	ldrb	r3, [r7, #14]
 8004304:	2b21      	cmp	r3, #33	; 0x21
 8004306:	d002      	beq.n	800430e <HAL_I2C_EV_IRQHandler+0x23a>
 8004308:	7bbb      	ldrb	r3, [r7, #14]
 800430a:	2b29      	cmp	r3, #41	; 0x29
 800430c:	d125      	bne.n	800435a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	09db      	lsrs	r3, r3, #7
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00f      	beq.n	800433a <HAL_I2C_EV_IRQHandler+0x266>
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	0a9b      	lsrs	r3, r3, #10
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b00      	cmp	r3, #0
 8004324:	d009      	beq.n	800433a <HAL_I2C_EV_IRQHandler+0x266>
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	089b      	lsrs	r3, r3, #2
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b00      	cmp	r3, #0
 8004330:	d103      	bne.n	800433a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 fedb 	bl	80050ee <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004338:	e039      	b.n	80043ae <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	089b      	lsrs	r3, r3, #2
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	2b00      	cmp	r3, #0
 8004344:	d033      	beq.n	80043ae <HAL_I2C_EV_IRQHandler+0x2da>
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	0a5b      	lsrs	r3, r3, #9
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	2b00      	cmp	r3, #0
 8004350:	d02d      	beq.n	80043ae <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 ff08 	bl	8005168 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004358:	e029      	b.n	80043ae <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	099b      	lsrs	r3, r3, #6
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00f      	beq.n	8004386 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	0a9b      	lsrs	r3, r3, #10
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b00      	cmp	r3, #0
 8004370:	d009      	beq.n	8004386 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	089b      	lsrs	r3, r3, #2
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b00      	cmp	r3, #0
 800437c:	d103      	bne.n	8004386 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 ff12 	bl	80051a8 <I2C_SlaveReceive_RXNE>
 8004384:	e014      	b.n	80043b0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	089b      	lsrs	r3, r3, #2
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00e      	beq.n	80043b0 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	0a5b      	lsrs	r3, r3, #9
 8004396:	f003 0301 	and.w	r3, r3, #1
 800439a:	2b00      	cmp	r3, #0
 800439c:	d008      	beq.n	80043b0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 ff40 	bl	8005224 <I2C_SlaveReceive_BTF>
 80043a4:	e004      	b.n	80043b0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80043a6:	bf00      	nop
 80043a8:	e002      	b.n	80043b0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043aa:	bf00      	nop
 80043ac:	e000      	b.n	80043b0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80043ae:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80043b0:	3720      	adds	r7, #32
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b08a      	sub	sp, #40	; 0x28
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80043ce:	2300      	movs	r3, #0
 80043d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043d8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80043da:	6a3b      	ldr	r3, [r7, #32]
 80043dc:	0a1b      	lsrs	r3, r3, #8
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d016      	beq.n	8004414 <HAL_I2C_ER_IRQHandler+0x5e>
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	0a1b      	lsrs	r3, r3, #8
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d010      	beq.n	8004414 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80043f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f4:	f043 0301 	orr.w	r3, r3, #1
 80043f8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004402:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004412:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004414:	6a3b      	ldr	r3, [r7, #32]
 8004416:	0a5b      	lsrs	r3, r3, #9
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00e      	beq.n	800443e <HAL_I2C_ER_IRQHandler+0x88>
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	0a1b      	lsrs	r3, r3, #8
 8004424:	f003 0301 	and.w	r3, r3, #1
 8004428:	2b00      	cmp	r3, #0
 800442a:	d008      	beq.n	800443e <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800442c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442e:	f043 0302 	orr.w	r3, r3, #2
 8004432:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800443c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800443e:	6a3b      	ldr	r3, [r7, #32]
 8004440:	0a9b      	lsrs	r3, r3, #10
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b00      	cmp	r3, #0
 8004448:	d03f      	beq.n	80044ca <HAL_I2C_ER_IRQHandler+0x114>
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	0a1b      	lsrs	r3, r3, #8
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	d039      	beq.n	80044ca <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8004456:	7efb      	ldrb	r3, [r7, #27]
 8004458:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800445e:	b29b      	uxth	r3, r3
 8004460:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004468:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004470:	7ebb      	ldrb	r3, [r7, #26]
 8004472:	2b20      	cmp	r3, #32
 8004474:	d112      	bne.n	800449c <HAL_I2C_ER_IRQHandler+0xe6>
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10f      	bne.n	800449c <HAL_I2C_ER_IRQHandler+0xe6>
 800447c:	7cfb      	ldrb	r3, [r7, #19]
 800447e:	2b21      	cmp	r3, #33	; 0x21
 8004480:	d008      	beq.n	8004494 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004482:	7cfb      	ldrb	r3, [r7, #19]
 8004484:	2b29      	cmp	r3, #41	; 0x29
 8004486:	d005      	beq.n	8004494 <HAL_I2C_ER_IRQHandler+0xde>
 8004488:	7cfb      	ldrb	r3, [r7, #19]
 800448a:	2b28      	cmp	r3, #40	; 0x28
 800448c:	d106      	bne.n	800449c <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2b21      	cmp	r3, #33	; 0x21
 8004492:	d103      	bne.n	800449c <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f001 f861 	bl	800555c <I2C_Slave_AF>
 800449a:	e016      	b.n	80044ca <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044a4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80044a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a8:	f043 0304 	orr.w	r3, r3, #4
 80044ac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80044ae:	7efb      	ldrb	r3, [r7, #27]
 80044b0:	2b10      	cmp	r3, #16
 80044b2:	d002      	beq.n	80044ba <HAL_I2C_ER_IRQHandler+0x104>
 80044b4:	7efb      	ldrb	r3, [r7, #27]
 80044b6:	2b40      	cmp	r3, #64	; 0x40
 80044b8:	d107      	bne.n	80044ca <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044c8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80044ca:	6a3b      	ldr	r3, [r7, #32]
 80044cc:	0adb      	lsrs	r3, r3, #11
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00e      	beq.n	80044f4 <HAL_I2C_ER_IRQHandler+0x13e>
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	0a1b      	lsrs	r3, r3, #8
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d008      	beq.n	80044f4 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80044e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e4:	f043 0308 	orr.w	r3, r3, #8
 80044e8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80044f2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80044f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d008      	beq.n	800450c <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004500:	431a      	orrs	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f001 f89c 	bl	8005644 <I2C_ITError>
  }
}
 800450c:	bf00      	nop
 800450e:	3728      	adds	r7, #40	; 0x28
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	bc80      	pop	{r7}
 8004524:	4770      	bx	lr

08004526 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004526:	b480      	push	{r7}
 8004528:	b083      	sub	sp, #12
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800452e:	bf00      	nop
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	bc80      	pop	{r7}
 8004536:	4770      	bx	lr

08004538 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	bc80      	pop	{r7}
 8004548:	4770      	bx	lr

0800454a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800454a:	b480      	push	{r7}
 800454c:	b083      	sub	sp, #12
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
 8004552:	460b      	mov	r3, r1
 8004554:	70fb      	strb	r3, [r7, #3]
 8004556:	4613      	mov	r3, r2
 8004558:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800455a:	bf00      	nop
 800455c:	370c      	adds	r7, #12
 800455e:	46bd      	mov	sp, r7
 8004560:	bc80      	pop	{r7}
 8004562:	4770      	bx	lr

08004564 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	bc80      	pop	{r7}
 8004574:	4770      	bx	lr

08004576 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004576:	b480      	push	{r7}
 8004578:	b083      	sub	sp, #12
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800457e:	bf00      	nop
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	bc80      	pop	{r7}
 8004586:	4770      	bx	lr

08004588 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	bc80      	pop	{r7}
 8004598:	4770      	bx	lr

0800459a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800459a:	b480      	push	{r7}
 800459c:	b083      	sub	sp, #12
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80045a2:	bf00      	nop
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bc80      	pop	{r7}
 80045aa:	4770      	bx	lr

080045ac <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bc80      	pop	{r7}
 80045bc:	4770      	bx	lr

080045be <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b084      	sub	sp, #16
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045cc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045d4:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045da:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d150      	bne.n	8004686 <I2C_MasterTransmit_TXE+0xc8>
 80045e4:	7bfb      	ldrb	r3, [r7, #15]
 80045e6:	2b21      	cmp	r3, #33	; 0x21
 80045e8:	d14d      	bne.n	8004686 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	2b08      	cmp	r3, #8
 80045ee:	d01d      	beq.n	800462c <I2C_MasterTransmit_TXE+0x6e>
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	2b20      	cmp	r3, #32
 80045f4:	d01a      	beq.n	800462c <I2C_MasterTransmit_TXE+0x6e>
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045fc:	d016      	beq.n	800462c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	685a      	ldr	r2, [r3, #4]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800460c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2211      	movs	r2, #17
 8004612:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2220      	movs	r2, #32
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f7ff ff75 	bl	8004514 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800462a:	e060      	b.n	80046ee <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	685a      	ldr	r2, [r3, #4]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800463a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800464a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2220      	movs	r2, #32
 8004656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b40      	cmp	r3, #64	; 0x40
 8004664:	d107      	bne.n	8004676 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f7ff ff81 	bl	8004576 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004674:	e03b      	b.n	80046ee <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f7ff ff48 	bl	8004514 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004684:	e033      	b.n	80046ee <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004686:	7bfb      	ldrb	r3, [r7, #15]
 8004688:	2b21      	cmp	r3, #33	; 0x21
 800468a:	d005      	beq.n	8004698 <I2C_MasterTransmit_TXE+0xda>
 800468c:	7bbb      	ldrb	r3, [r7, #14]
 800468e:	2b40      	cmp	r3, #64	; 0x40
 8004690:	d12d      	bne.n	80046ee <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004692:	7bfb      	ldrb	r3, [r7, #15]
 8004694:	2b22      	cmp	r3, #34	; 0x22
 8004696:	d12a      	bne.n	80046ee <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800469c:	b29b      	uxth	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d108      	bne.n	80046b4 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046b0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80046b2:	e01c      	b.n	80046ee <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	2b40      	cmp	r3, #64	; 0x40
 80046be:	d103      	bne.n	80046c8 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 f88e 	bl	80047e2 <I2C_MemoryTransmit_TXE_BTF>
}
 80046c6:	e012      	b.n	80046ee <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046cc:	781a      	ldrb	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d8:	1c5a      	adds	r2, r3, #1
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	3b01      	subs	r3, #1
 80046e6:	b29a      	uxth	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80046ec:	e7ff      	b.n	80046ee <I2C_MasterTransmit_TXE+0x130>
 80046ee:	bf00      	nop
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b084      	sub	sp, #16
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004702:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2b21      	cmp	r3, #33	; 0x21
 800470e:	d164      	bne.n	80047da <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004714:	b29b      	uxth	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d012      	beq.n	8004740 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471e:	781a      	ldrb	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472a:	1c5a      	adds	r2, r3, #1
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004734:	b29b      	uxth	r3, r3
 8004736:	3b01      	subs	r3, #1
 8004738:	b29a      	uxth	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800473e:	e04c      	b.n	80047da <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2b08      	cmp	r3, #8
 8004744:	d01d      	beq.n	8004782 <I2C_MasterTransmit_BTF+0x8c>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2b20      	cmp	r3, #32
 800474a:	d01a      	beq.n	8004782 <I2C_MasterTransmit_BTF+0x8c>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004752:	d016      	beq.n	8004782 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	685a      	ldr	r2, [r3, #4]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004762:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2211      	movs	r2, #17
 8004768:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2220      	movs	r2, #32
 8004776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7ff feca 	bl	8004514 <HAL_I2C_MasterTxCpltCallback>
}
 8004780:	e02b      	b.n	80047da <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	685a      	ldr	r2, [r3, #4]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004790:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047a0:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2220      	movs	r2, #32
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	2b40      	cmp	r3, #64	; 0x40
 80047ba:	d107      	bne.n	80047cc <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f7ff fed6 	bl	8004576 <HAL_I2C_MemTxCpltCallback>
}
 80047ca:	e006      	b.n	80047da <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f7ff fe9d 	bl	8004514 <HAL_I2C_MasterTxCpltCallback>
}
 80047da:	bf00      	nop
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b084      	sub	sp, #16
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047f0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d11d      	bne.n	8004836 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d10b      	bne.n	800481a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004806:	b2da      	uxtb	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004812:	1c9a      	adds	r2, r3, #2
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004818:	e077      	b.n	800490a <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800481e:	b29b      	uxth	r3, r3
 8004820:	121b      	asrs	r3, r3, #8
 8004822:	b2da      	uxtb	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800482e:	1c5a      	adds	r2, r3, #1
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004834:	e069      	b.n	800490a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800483a:	2b01      	cmp	r3, #1
 800483c:	d10b      	bne.n	8004856 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004842:	b2da      	uxtb	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800484e:	1c5a      	adds	r2, r3, #1
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004854:	e059      	b.n	800490a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800485a:	2b02      	cmp	r3, #2
 800485c:	d152      	bne.n	8004904 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800485e:	7bfb      	ldrb	r3, [r7, #15]
 8004860:	2b22      	cmp	r3, #34	; 0x22
 8004862:	d10d      	bne.n	8004880 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004872:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004878:	1c5a      	adds	r2, r3, #1
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800487e:	e044      	b.n	800490a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004884:	b29b      	uxth	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d015      	beq.n	80048b6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800488a:	7bfb      	ldrb	r3, [r7, #15]
 800488c:	2b21      	cmp	r3, #33	; 0x21
 800488e:	d112      	bne.n	80048b6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004894:	781a      	ldrb	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a0:	1c5a      	adds	r2, r3, #1
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	3b01      	subs	r3, #1
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80048b4:	e029      	b.n	800490a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d124      	bne.n	800490a <I2C_MemoryTransmit_TXE_BTF+0x128>
 80048c0:	7bfb      	ldrb	r3, [r7, #15]
 80048c2:	2b21      	cmp	r3, #33	; 0x21
 80048c4:	d121      	bne.n	800490a <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048d4:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048e4:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2220      	movs	r2, #32
 80048f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f7ff fe3a 	bl	8004576 <HAL_I2C_MemTxCpltCallback>
}
 8004902:	e002      	b.n	800490a <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f7ff f8fd 	bl	8003b04 <I2C_Flush_DR>
}
 800490a:	bf00      	nop
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b084      	sub	sp, #16
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b22      	cmp	r3, #34	; 0x22
 8004924:	f040 80ac 	bne.w	8004a80 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800492c:	b29b      	uxth	r3, r3
 800492e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2b03      	cmp	r3, #3
 8004934:	d921      	bls.n	800497a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	691a      	ldr	r2, [r3, #16]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004940:	b2d2      	uxtb	r2, r2
 8004942:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004948:	1c5a      	adds	r2, r3, #1
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004952:	b29b      	uxth	r3, r3
 8004954:	3b01      	subs	r3, #1
 8004956:	b29a      	uxth	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004960:	b29b      	uxth	r3, r3
 8004962:	2b03      	cmp	r3, #3
 8004964:	f040 808c 	bne.w	8004a80 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685a      	ldr	r2, [r3, #4]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004976:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004978:	e082      	b.n	8004a80 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497e:	2b02      	cmp	r3, #2
 8004980:	d075      	beq.n	8004a6e <I2C_MasterReceive_RXNE+0x15c>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d002      	beq.n	800498e <I2C_MasterReceive_RXNE+0x7c>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d16f      	bne.n	8004a6e <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f001 fa5e 	bl	8005e50 <I2C_WaitOnSTOPRequestThroughIT>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d142      	bne.n	8004a20 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049a8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	685a      	ldr	r2, [r3, #4]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049b8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	691a      	ldr	r2, [r3, #16]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c4:	b2d2      	uxtb	r2, r2
 80049c6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049cc:	1c5a      	adds	r2, r3, #1
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	3b01      	subs	r3, #1
 80049da:	b29a      	uxth	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2220      	movs	r2, #32
 80049e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	2b40      	cmp	r3, #64	; 0x40
 80049f2:	d10a      	bne.n	8004a0a <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f7ff fdc0 	bl	8004588 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004a08:	e03a      	b.n	8004a80 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2212      	movs	r2, #18
 8004a16:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f7fc f9b9 	bl	8000d90 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004a1e:	e02f      	b.n	8004a80 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a2e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	691a      	ldr	r2, [r3, #16]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3a:	b2d2      	uxtb	r2, r2
 8004a3c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a42:	1c5a      	adds	r2, r3, #1
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f7ff fd97 	bl	800459a <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004a6c:	e008      	b.n	8004a80 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a7c:	605a      	str	r2, [r3, #4]
}
 8004a7e:	e7ff      	b.n	8004a80 <I2C_MasterReceive_RXNE+0x16e>
 8004a80:	bf00      	nop
 8004a82:	3710      	adds	r7, #16
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a94:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	2b04      	cmp	r3, #4
 8004a9e:	d11b      	bne.n	8004ad8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	685a      	ldr	r2, [r3, #4]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aae:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	691a      	ldr	r2, [r3, #16]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aba:	b2d2      	uxtb	r2, r2
 8004abc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac2:	1c5a      	adds	r2, r3, #1
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004ad6:	e0bd      	b.n	8004c54 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	2b03      	cmp	r3, #3
 8004ae0:	d129      	bne.n	8004b36 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	685a      	ldr	r2, [r3, #4]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004af0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2b04      	cmp	r3, #4
 8004af6:	d00a      	beq.n	8004b0e <I2C_MasterReceive_BTF+0x86>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d007      	beq.n	8004b0e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b0c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	691a      	ldr	r2, [r3, #16]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b18:	b2d2      	uxtb	r2, r2
 8004b1a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b20:	1c5a      	adds	r2, r3, #1
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004b34:	e08e      	b.n	8004c54 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d176      	bne.n	8004c2e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d002      	beq.n	8004b4c <I2C_MasterReceive_BTF+0xc4>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2b10      	cmp	r3, #16
 8004b4a:	d108      	bne.n	8004b5e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	e019      	b.n	8004b92 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2b04      	cmp	r3, #4
 8004b62:	d002      	beq.n	8004b6a <I2C_MasterReceive_BTF+0xe2>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d108      	bne.n	8004b7c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b78:	601a      	str	r2, [r3, #0]
 8004b7a:	e00a      	b.n	8004b92 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2b10      	cmp	r3, #16
 8004b80:	d007      	beq.n	8004b92 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b90:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	691a      	ldr	r2, [r3, #16]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9c:	b2d2      	uxtb	r2, r2
 8004b9e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba4:	1c5a      	adds	r2, r3, #1
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	691a      	ldr	r2, [r3, #16]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc2:	b2d2      	uxtb	r2, r2
 8004bc4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bca:	1c5a      	adds	r2, r3, #1
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	685a      	ldr	r2, [r3, #4]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004bec:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b40      	cmp	r3, #64	; 0x40
 8004c00:	d10a      	bne.n	8004c18 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f7ff fcb9 	bl	8004588 <HAL_I2C_MemRxCpltCallback>
}
 8004c16:	e01d      	b.n	8004c54 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2212      	movs	r2, #18
 8004c24:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f7fc f8b2 	bl	8000d90 <HAL_I2C_MasterRxCpltCallback>
}
 8004c2c:	e012      	b.n	8004c54 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	691a      	ldr	r2, [r3, #16]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c38:	b2d2      	uxtb	r2, r2
 8004c3a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c40:	1c5a      	adds	r2, r3, #1
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004c54:	bf00      	nop
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b40      	cmp	r3, #64	; 0x40
 8004c6e:	d117      	bne.n	8004ca0 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d109      	bne.n	8004c8c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	461a      	mov	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c88:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004c8a:	e067      	b.n	8004d5c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	f043 0301 	orr.w	r3, r3, #1
 8004c96:	b2da      	uxtb	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	611a      	str	r2, [r3, #16]
}
 8004c9e:	e05d      	b.n	8004d5c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ca8:	d133      	bne.n	8004d12 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b21      	cmp	r3, #33	; 0x21
 8004cb4:	d109      	bne.n	8004cca <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004cc6:	611a      	str	r2, [r3, #16]
 8004cc8:	e008      	b.n	8004cdc <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	f043 0301 	orr.w	r3, r3, #1
 8004cd4:	b2da      	uxtb	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d004      	beq.n	8004cee <I2C_Master_SB+0x92>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d108      	bne.n	8004d00 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d032      	beq.n	8004d5c <I2C_Master_SB+0x100>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d02d      	beq.n	8004d5c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	685a      	ldr	r2, [r3, #4]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d0e:	605a      	str	r2, [r3, #4]
}
 8004d10:	e024      	b.n	8004d5c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10e      	bne.n	8004d38 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	11db      	asrs	r3, r3, #7
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	f003 0306 	and.w	r3, r3, #6
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	f063 030f 	orn	r3, r3, #15
 8004d2e:	b2da      	uxtb	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	611a      	str	r2, [r3, #16]
}
 8004d36:	e011      	b.n	8004d5c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d10d      	bne.n	8004d5c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	11db      	asrs	r3, r3, #7
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	f003 0306 	and.w	r3, r3, #6
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	f063 030e 	orn	r3, r3, #14
 8004d54:	b2da      	uxtb	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	611a      	str	r2, [r3, #16]
}
 8004d5c:	bf00      	nop
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bc80      	pop	{r7}
 8004d64:	4770      	bx	lr

08004d66 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004d66:	b480      	push	{r7}
 8004d68:	b083      	sub	sp, #12
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d72:	b2da      	uxtb	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d004      	beq.n	8004d8c <I2C_Master_ADD10+0x26>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d108      	bne.n	8004d9e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00c      	beq.n	8004dae <I2C_Master_ADD10+0x48>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d007      	beq.n	8004dae <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685a      	ldr	r2, [r3, #4]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dac:	605a      	str	r2, [r3, #4]
  }
}
 8004dae:	bf00      	nop
 8004db0:	370c      	adds	r7, #12
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bc80      	pop	{r7}
 8004db6:	4770      	bx	lr

08004db8 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b091      	sub	sp, #68	; 0x44
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dc6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dce:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd4:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b22      	cmp	r3, #34	; 0x22
 8004de0:	f040 8174 	bne.w	80050cc <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d10f      	bne.n	8004e0c <I2C_Master_ADDR+0x54>
 8004dec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004df0:	2b40      	cmp	r3, #64	; 0x40
 8004df2:	d10b      	bne.n	8004e0c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004df4:	2300      	movs	r3, #0
 8004df6:	633b      	str	r3, [r7, #48]	; 0x30
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	633b      	str	r3, [r7, #48]	; 0x30
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	633b      	str	r3, [r7, #48]	; 0x30
 8004e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0a:	e16b      	b.n	80050e4 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d11d      	bne.n	8004e50 <I2C_Master_ADDR+0x98>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004e1c:	d118      	bne.n	8004e50 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e1e:	2300      	movs	r3, #0
 8004e20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	695b      	ldr	r3, [r3, #20]
 8004e28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e42:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e48:	1c5a      	adds	r2, r3, #1
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	651a      	str	r2, [r3, #80]	; 0x50
 8004e4e:	e149      	b.n	80050e4 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d113      	bne.n	8004e82 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	695b      	ldr	r3, [r3, #20]
 8004e64:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e7e:	601a      	str	r2, [r3, #0]
 8004e80:	e120      	b.n	80050c4 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	f040 808a 	bne.w	8004fa2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e90:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e94:	d137      	bne.n	8004f06 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ea4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004eb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eb4:	d113      	bne.n	8004ede <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ec4:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8004eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004edc:	e0f2      	b.n	80050c4 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ede:	2300      	movs	r3, #0
 8004ee0:	623b      	str	r3, [r7, #32]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	623b      	str	r3, [r7, #32]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	623b      	str	r3, [r7, #32]
 8004ef2:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f02:	601a      	str	r2, [r3, #0]
 8004f04:	e0de      	b.n	80050c4 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f08:	2b08      	cmp	r3, #8
 8004f0a:	d02e      	beq.n	8004f6a <I2C_Master_ADDR+0x1b2>
 8004f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f0e:	2b20      	cmp	r3, #32
 8004f10:	d02b      	beq.n	8004f6a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f14:	2b12      	cmp	r3, #18
 8004f16:	d102      	bne.n	8004f1e <I2C_Master_ADDR+0x166>
 8004f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d125      	bne.n	8004f6a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f20:	2b04      	cmp	r3, #4
 8004f22:	d00e      	beq.n	8004f42 <I2C_Master_ADDR+0x18a>
 8004f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d00b      	beq.n	8004f42 <I2C_Master_ADDR+0x18a>
 8004f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f2c:	2b10      	cmp	r3, #16
 8004f2e:	d008      	beq.n	8004f42 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f3e:	601a      	str	r2, [r3, #0]
 8004f40:	e007      	b.n	8004f52 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f50:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f52:	2300      	movs	r3, #0
 8004f54:	61fb      	str	r3, [r7, #28]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	61fb      	str	r3, [r7, #28]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	61fb      	str	r3, [r7, #28]
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	e0ac      	b.n	80050c4 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f78:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	61bb      	str	r3, [r7, #24]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	61bb      	str	r3, [r7, #24]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	61bb      	str	r3, [r7, #24]
 8004f8e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f9e:	601a      	str	r2, [r3, #0]
 8004fa0:	e090      	b.n	80050c4 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d158      	bne.n	800505e <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fae:	2b04      	cmp	r3, #4
 8004fb0:	d021      	beq.n	8004ff6 <I2C_Master_ADDR+0x23e>
 8004fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d01e      	beq.n	8004ff6 <I2C_Master_ADDR+0x23e>
 8004fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fba:	2b10      	cmp	r3, #16
 8004fbc:	d01b      	beq.n	8004ff6 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fcc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fce:	2300      	movs	r3, #0
 8004fd0:	617b      	str	r3, [r7, #20]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	695b      	ldr	r3, [r3, #20]
 8004fd8:	617b      	str	r3, [r7, #20]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	699b      	ldr	r3, [r3, #24]
 8004fe0:	617b      	str	r3, [r7, #20]
 8004fe2:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ff2:	601a      	str	r2, [r3, #0]
 8004ff4:	e012      	b.n	800501c <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005004:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005006:	2300      	movs	r3, #0
 8005008:	613b      	str	r3, [r7, #16]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	695b      	ldr	r3, [r3, #20]
 8005010:	613b      	str	r3, [r7, #16]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	613b      	str	r3, [r7, #16]
 800501a:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005026:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800502a:	d14b      	bne.n	80050c4 <I2C_Master_ADDR+0x30c>
 800502c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005032:	d00b      	beq.n	800504c <I2C_Master_ADDR+0x294>
 8005034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005036:	2b01      	cmp	r3, #1
 8005038:	d008      	beq.n	800504c <I2C_Master_ADDR+0x294>
 800503a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800503c:	2b08      	cmp	r3, #8
 800503e:	d005      	beq.n	800504c <I2C_Master_ADDR+0x294>
 8005040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005042:	2b10      	cmp	r3, #16
 8005044:	d002      	beq.n	800504c <I2C_Master_ADDR+0x294>
 8005046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005048:	2b20      	cmp	r3, #32
 800504a:	d13b      	bne.n	80050c4 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	685a      	ldr	r2, [r3, #4]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800505a:	605a      	str	r2, [r3, #4]
 800505c:	e032      	b.n	80050c4 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800506c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005078:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800507c:	d117      	bne.n	80050ae <I2C_Master_ADDR+0x2f6>
 800507e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005080:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005084:	d00b      	beq.n	800509e <I2C_Master_ADDR+0x2e6>
 8005086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005088:	2b01      	cmp	r3, #1
 800508a:	d008      	beq.n	800509e <I2C_Master_ADDR+0x2e6>
 800508c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508e:	2b08      	cmp	r3, #8
 8005090:	d005      	beq.n	800509e <I2C_Master_ADDR+0x2e6>
 8005092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005094:	2b10      	cmp	r3, #16
 8005096:	d002      	beq.n	800509e <I2C_Master_ADDR+0x2e6>
 8005098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800509a:	2b20      	cmp	r3, #32
 800509c:	d107      	bne.n	80050ae <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80050ac:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050ae:	2300      	movs	r3, #0
 80050b0:	60fb      	str	r3, [r7, #12]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	695b      	ldr	r3, [r3, #20]
 80050b8:	60fb      	str	r3, [r7, #12]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	60fb      	str	r3, [r7, #12]
 80050c2:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80050ca:	e00b      	b.n	80050e4 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050cc:	2300      	movs	r3, #0
 80050ce:	60bb      	str	r3, [r7, #8]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	60bb      	str	r3, [r7, #8]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	60bb      	str	r3, [r7, #8]
 80050e0:	68bb      	ldr	r3, [r7, #8]
}
 80050e2:	e7ff      	b.n	80050e4 <I2C_Master_ADDR+0x32c>
 80050e4:	bf00      	nop
 80050e6:	3744      	adds	r7, #68	; 0x44
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bc80      	pop	{r7}
 80050ec:	4770      	bx	lr

080050ee <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b084      	sub	sp, #16
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050fc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005102:	b29b      	uxth	r3, r3
 8005104:	2b00      	cmp	r3, #0
 8005106:	d02b      	beq.n	8005160 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	781a      	ldrb	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005118:	1c5a      	adds	r2, r3, #1
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005122:	b29b      	uxth	r3, r3
 8005124:	3b01      	subs	r3, #1
 8005126:	b29a      	uxth	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005130:	b29b      	uxth	r3, r3
 8005132:	2b00      	cmp	r3, #0
 8005134:	d114      	bne.n	8005160 <I2C_SlaveTransmit_TXE+0x72>
 8005136:	7bfb      	ldrb	r3, [r7, #15]
 8005138:	2b29      	cmp	r3, #41	; 0x29
 800513a:	d111      	bne.n	8005160 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800514a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2221      	movs	r2, #33	; 0x21
 8005150:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2228      	movs	r2, #40	; 0x28
 8005156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f7ff f9e3 	bl	8004526 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005160:	bf00      	nop
 8005162:	3710      	adds	r7, #16
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005174:	b29b      	uxth	r3, r3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d011      	beq.n	800519e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517e:	781a      	ldrb	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518a:	1c5a      	adds	r2, r3, #1
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005194:	b29b      	uxth	r3, r3
 8005196:	3b01      	subs	r3, #1
 8005198:	b29a      	uxth	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800519e:	bf00      	nop
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bc80      	pop	{r7}
 80051a6:	4770      	bx	lr

080051a8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051b6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051bc:	b29b      	uxth	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d02c      	beq.n	800521c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	691a      	ldr	r2, [r3, #16]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051cc:	b2d2      	uxtb	r2, r2
 80051ce:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d4:	1c5a      	adds	r2, r3, #1
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051de:	b29b      	uxth	r3, r3
 80051e0:	3b01      	subs	r3, #1
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d114      	bne.n	800521c <I2C_SlaveReceive_RXNE+0x74>
 80051f2:	7bfb      	ldrb	r3, [r7, #15]
 80051f4:	2b2a      	cmp	r3, #42	; 0x2a
 80051f6:	d111      	bne.n	800521c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	685a      	ldr	r2, [r3, #4]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005206:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2222      	movs	r2, #34	; 0x22
 800520c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2228      	movs	r2, #40	; 0x28
 8005212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f7ff f98e 	bl	8004538 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800521c:	bf00      	nop
 800521e:	3710      	adds	r7, #16
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005230:	b29b      	uxth	r3, r3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d012      	beq.n	800525c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	691a      	ldr	r2, [r3, #16]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005240:	b2d2      	uxtb	r2, r2
 8005242:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005248:	1c5a      	adds	r2, r3, #1
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005252:	b29b      	uxth	r3, r3
 8005254:	3b01      	subs	r3, #1
 8005256:	b29a      	uxth	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	bc80      	pop	{r7}
 8005264:	4770      	bx	lr

08005266 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b084      	sub	sp, #16
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
 800526e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005270:	2300      	movs	r3, #0
 8005272:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800527a:	b2db      	uxtb	r3, r3
 800527c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005280:	2b28      	cmp	r3, #40	; 0x28
 8005282:	d127      	bne.n	80052d4 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	685a      	ldr	r2, [r3, #4]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005292:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	089b      	lsrs	r3, r3, #2
 8005298:	f003 0301 	and.w	r3, r3, #1
 800529c:	2b00      	cmp	r3, #0
 800529e:	d101      	bne.n	80052a4 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80052a0:	2301      	movs	r3, #1
 80052a2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	09db      	lsrs	r3, r3, #7
 80052a8:	f003 0301 	and.w	r3, r3, #1
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d103      	bne.n	80052b8 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	81bb      	strh	r3, [r7, #12]
 80052b6:	e002      	b.n	80052be <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80052c6:	89ba      	ldrh	r2, [r7, #12]
 80052c8:	7bfb      	ldrb	r3, [r7, #15]
 80052ca:	4619      	mov	r1, r3
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f7ff f93c 	bl	800454a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80052d2:	e00e      	b.n	80052f2 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052d4:	2300      	movs	r3, #0
 80052d6:	60bb      	str	r3, [r7, #8]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	60bb      	str	r3, [r7, #8]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	60bb      	str	r3, [r7, #8]
 80052e8:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80052f2:	bf00      	nop
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
	...

080052fc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800530a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	685a      	ldr	r2, [r3, #4]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800531a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800531c:	2300      	movs	r3, #0
 800531e:	60bb      	str	r3, [r7, #8]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	60bb      	str	r3, [r7, #8]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f042 0201 	orr.w	r2, r2, #1
 8005336:	601a      	str	r2, [r3, #0]
 8005338:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005348:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005354:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005358:	d172      	bne.n	8005440 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800535a:	7bfb      	ldrb	r3, [r7, #15]
 800535c:	2b22      	cmp	r3, #34	; 0x22
 800535e:	d002      	beq.n	8005366 <I2C_Slave_STOPF+0x6a>
 8005360:	7bfb      	ldrb	r3, [r7, #15]
 8005362:	2b2a      	cmp	r3, #42	; 0x2a
 8005364:	d135      	bne.n	80053d2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	b29a      	uxth	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005378:	b29b      	uxth	r3, r3
 800537a:	2b00      	cmp	r3, #0
 800537c:	d005      	beq.n	800538a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005382:	f043 0204 	orr.w	r2, r3, #4
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	685a      	ldr	r2, [r3, #4]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005398:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539e:	4618      	mov	r0, r3
 80053a0:	f7fe f896 	bl	80034d0 <HAL_DMA_GetState>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d049      	beq.n	800543e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ae:	4a69      	ldr	r2, [pc, #420]	; (8005554 <I2C_Slave_STOPF+0x258>)
 80053b0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7fd ff0c 	bl	80031d4 <HAL_DMA_Abort_IT>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d03d      	beq.n	800543e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80053cc:	4610      	mov	r0, r2
 80053ce:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80053d0:	e035      	b.n	800543e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	b29a      	uxth	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d005      	beq.n	80053f6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ee:	f043 0204 	orr.w	r2, r3, #4
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	685a      	ldr	r2, [r3, #4]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005404:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800540a:	4618      	mov	r0, r3
 800540c:	f7fe f860 	bl	80034d0 <HAL_DMA_GetState>
 8005410:	4603      	mov	r3, r0
 8005412:	2b01      	cmp	r3, #1
 8005414:	d014      	beq.n	8005440 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800541a:	4a4e      	ldr	r2, [pc, #312]	; (8005554 <I2C_Slave_STOPF+0x258>)
 800541c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005422:	4618      	mov	r0, r3
 8005424:	f7fd fed6 	bl	80031d4 <HAL_DMA_Abort_IT>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d008      	beq.n	8005440 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005438:	4610      	mov	r0, r2
 800543a:	4798      	blx	r3
 800543c:	e000      	b.n	8005440 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800543e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005444:	b29b      	uxth	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d03e      	beq.n	80054c8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	695b      	ldr	r3, [r3, #20]
 8005450:	f003 0304 	and.w	r3, r3, #4
 8005454:	2b04      	cmp	r3, #4
 8005456:	d112      	bne.n	800547e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	691a      	ldr	r2, [r3, #16]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005462:	b2d2      	uxtb	r2, r2
 8005464:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546a:	1c5a      	adds	r2, r3, #1
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005474:	b29b      	uxth	r3, r3
 8005476:	3b01      	subs	r3, #1
 8005478:	b29a      	uxth	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	695b      	ldr	r3, [r3, #20]
 8005484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005488:	2b40      	cmp	r3, #64	; 0x40
 800548a:	d112      	bne.n	80054b2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	691a      	ldr	r2, [r3, #16]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005496:	b2d2      	uxtb	r2, r2
 8005498:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549e:	1c5a      	adds	r2, r3, #1
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	3b01      	subs	r3, #1
 80054ac:	b29a      	uxth	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d005      	beq.n	80054c8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c0:	f043 0204 	orr.w	r2, r3, #4
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d003      	beq.n	80054d8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 f8b7 	bl	8005644 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80054d6:	e039      	b.n	800554c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80054d8:	7bfb      	ldrb	r3, [r7, #15]
 80054da:	2b2a      	cmp	r3, #42	; 0x2a
 80054dc:	d109      	bne.n	80054f2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2228      	movs	r2, #40	; 0x28
 80054e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f7ff f823 	bl	8004538 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	2b28      	cmp	r3, #40	; 0x28
 80054fc:	d111      	bne.n	8005522 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a15      	ldr	r2, [pc, #84]	; (8005558 <I2C_Slave_STOPF+0x25c>)
 8005502:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2220      	movs	r2, #32
 800550e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f7ff f822 	bl	8004564 <HAL_I2C_ListenCpltCallback>
}
 8005520:	e014      	b.n	800554c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005526:	2b22      	cmp	r3, #34	; 0x22
 8005528:	d002      	beq.n	8005530 <I2C_Slave_STOPF+0x234>
 800552a:	7bfb      	ldrb	r3, [r7, #15]
 800552c:	2b22      	cmp	r3, #34	; 0x22
 800552e:	d10d      	bne.n	800554c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2220      	movs	r2, #32
 800553a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f7fe fff6 	bl	8004538 <HAL_I2C_SlaveRxCpltCallback>
}
 800554c:	bf00      	nop
 800554e:	3710      	adds	r7, #16
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}
 8005554:	080059ad 	.word	0x080059ad
 8005558:	ffff0000 	.word	0xffff0000

0800555c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800556a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005570:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	2b08      	cmp	r3, #8
 8005576:	d002      	beq.n	800557e <I2C_Slave_AF+0x22>
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	2b20      	cmp	r3, #32
 800557c:	d129      	bne.n	80055d2 <I2C_Slave_AF+0x76>
 800557e:	7bfb      	ldrb	r3, [r7, #15]
 8005580:	2b28      	cmp	r3, #40	; 0x28
 8005582:	d126      	bne.n	80055d2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a2e      	ldr	r2, [pc, #184]	; (8005640 <I2C_Slave_AF+0xe4>)
 8005588:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	685a      	ldr	r2, [r3, #4]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005598:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80055a2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055b2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2220      	movs	r2, #32
 80055be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f7fe ffca 	bl	8004564 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80055d0:	e031      	b.n	8005636 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80055d2:	7bfb      	ldrb	r3, [r7, #15]
 80055d4:	2b21      	cmp	r3, #33	; 0x21
 80055d6:	d129      	bne.n	800562c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a19      	ldr	r2, [pc, #100]	; (8005640 <I2C_Slave_AF+0xe4>)
 80055dc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2221      	movs	r2, #33	; 0x21
 80055e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2220      	movs	r2, #32
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	685a      	ldr	r2, [r3, #4]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005602:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800560c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800561c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f7fe fa70 	bl	8003b04 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f7fe ff7e 	bl	8004526 <HAL_I2C_SlaveTxCpltCallback>
}
 800562a:	e004      	b.n	8005636 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005634:	615a      	str	r2, [r3, #20]
}
 8005636:	bf00      	nop
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	ffff0000 	.word	0xffff0000

08005644 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005652:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800565a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800565c:	7bbb      	ldrb	r3, [r7, #14]
 800565e:	2b10      	cmp	r3, #16
 8005660:	d002      	beq.n	8005668 <I2C_ITError+0x24>
 8005662:	7bbb      	ldrb	r3, [r7, #14]
 8005664:	2b40      	cmp	r3, #64	; 0x40
 8005666:	d10a      	bne.n	800567e <I2C_ITError+0x3a>
 8005668:	7bfb      	ldrb	r3, [r7, #15]
 800566a:	2b22      	cmp	r3, #34	; 0x22
 800566c:	d107      	bne.n	800567e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800567c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800567e:	7bfb      	ldrb	r3, [r7, #15]
 8005680:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005684:	2b28      	cmp	r3, #40	; 0x28
 8005686:	d107      	bne.n	8005698 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2228      	movs	r2, #40	; 0x28
 8005692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005696:	e015      	b.n	80056c4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056a6:	d00a      	beq.n	80056be <I2C_ITError+0x7a>
 80056a8:	7bfb      	ldrb	r3, [r7, #15]
 80056aa:	2b60      	cmp	r3, #96	; 0x60
 80056ac:	d007      	beq.n	80056be <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2220      	movs	r2, #32
 80056b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056d2:	d162      	bne.n	800579a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	685a      	ldr	r2, [r3, #4]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056e2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056e8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d020      	beq.n	8005734 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f6:	4a6a      	ldr	r2, [pc, #424]	; (80058a0 <I2C_ITError+0x25c>)
 80056f8:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056fe:	4618      	mov	r0, r3
 8005700:	f7fd fd68 	bl	80031d4 <HAL_DMA_Abort_IT>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	f000 8089 	beq.w	800581e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f022 0201 	bic.w	r2, r2, #1
 800571a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2220      	movs	r2, #32
 8005720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800572e:	4610      	mov	r0, r2
 8005730:	4798      	blx	r3
 8005732:	e074      	b.n	800581e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005738:	4a59      	ldr	r2, [pc, #356]	; (80058a0 <I2C_ITError+0x25c>)
 800573a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005740:	4618      	mov	r0, r3
 8005742:	f7fd fd47 	bl	80031d4 <HAL_DMA_Abort_IT>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d068      	beq.n	800581e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005756:	2b40      	cmp	r3, #64	; 0x40
 8005758:	d10b      	bne.n	8005772 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	691a      	ldr	r2, [r3, #16]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005764:	b2d2      	uxtb	r2, r2
 8005766:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576c:	1c5a      	adds	r2, r3, #1
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f022 0201 	bic.w	r2, r2, #1
 8005780:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2220      	movs	r2, #32
 8005786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005794:	4610      	mov	r0, r2
 8005796:	4798      	blx	r3
 8005798:	e041      	b.n	800581e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b60      	cmp	r3, #96	; 0x60
 80057a4:	d125      	bne.n	80057f2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2220      	movs	r2, #32
 80057aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	695b      	ldr	r3, [r3, #20]
 80057ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057be:	2b40      	cmp	r3, #64	; 0x40
 80057c0:	d10b      	bne.n	80057da <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	691a      	ldr	r2, [r3, #16]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057cc:	b2d2      	uxtb	r2, r2
 80057ce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d4:	1c5a      	adds	r2, r3, #1
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f022 0201 	bic.w	r2, r2, #1
 80057e8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f7fe fede 	bl	80045ac <HAL_I2C_AbortCpltCallback>
 80057f0:	e015      	b.n	800581e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	695b      	ldr	r3, [r3, #20]
 80057f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057fc:	2b40      	cmp	r3, #64	; 0x40
 80057fe:	d10b      	bne.n	8005818 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	691a      	ldr	r2, [r3, #16]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580a:	b2d2      	uxtb	r2, r2
 800580c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005812:	1c5a      	adds	r2, r3, #1
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f7fe febe 	bl	800459a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005822:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	2b00      	cmp	r3, #0
 800582c:	d10e      	bne.n	800584c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005834:	2b00      	cmp	r3, #0
 8005836:	d109      	bne.n	800584c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800583e:	2b00      	cmp	r3, #0
 8005840:	d104      	bne.n	800584c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005848:	2b00      	cmp	r3, #0
 800584a:	d007      	beq.n	800585c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	685a      	ldr	r2, [r3, #4]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800585a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005862:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005868:	f003 0304 	and.w	r3, r3, #4
 800586c:	2b04      	cmp	r3, #4
 800586e:	d113      	bne.n	8005898 <I2C_ITError+0x254>
 8005870:	7bfb      	ldrb	r3, [r7, #15]
 8005872:	2b28      	cmp	r3, #40	; 0x28
 8005874:	d110      	bne.n	8005898 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a0a      	ldr	r2, [pc, #40]	; (80058a4 <I2C_ITError+0x260>)
 800587a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2220      	movs	r2, #32
 8005886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f7fe fe66 	bl	8004564 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005898:	bf00      	nop
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	080059ad 	.word	0x080059ad
 80058a4:	ffff0000 	.word	0xffff0000

080058a8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b088      	sub	sp, #32
 80058ac:	af02      	add	r7, sp, #8
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	607a      	str	r2, [r7, #4]
 80058b2:	603b      	str	r3, [r7, #0]
 80058b4:	460b      	mov	r3, r1
 80058b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058bc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	2b08      	cmp	r3, #8
 80058c2:	d006      	beq.n	80058d2 <I2C_MasterRequestWrite+0x2a>
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d003      	beq.n	80058d2 <I2C_MasterRequestWrite+0x2a>
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80058d0:	d108      	bne.n	80058e4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058e0:	601a      	str	r2, [r3, #0]
 80058e2:	e00b      	b.n	80058fc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e8:	2b12      	cmp	r3, #18
 80058ea:	d107      	bne.n	80058fc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	9300      	str	r3, [sp, #0]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f000 f8f7 	bl	8005afc <I2C_WaitOnFlagUntilTimeout>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00d      	beq.n	8005930 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800591e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005922:	d103      	bne.n	800592c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f44f 7200 	mov.w	r2, #512	; 0x200
 800592a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e035      	b.n	800599c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005938:	d108      	bne.n	800594c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800593a:	897b      	ldrh	r3, [r7, #10]
 800593c:	b2db      	uxtb	r3, r3
 800593e:	461a      	mov	r2, r3
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005948:	611a      	str	r2, [r3, #16]
 800594a:	e01b      	b.n	8005984 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800594c:	897b      	ldrh	r3, [r7, #10]
 800594e:	11db      	asrs	r3, r3, #7
 8005950:	b2db      	uxtb	r3, r3
 8005952:	f003 0306 	and.w	r3, r3, #6
 8005956:	b2db      	uxtb	r3, r3
 8005958:	f063 030f 	orn	r3, r3, #15
 800595c:	b2da      	uxtb	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	490e      	ldr	r1, [pc, #56]	; (80059a4 <I2C_MasterRequestWrite+0xfc>)
 800596a:	68f8      	ldr	r0, [r7, #12]
 800596c:	f000 f940 	bl	8005bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d001      	beq.n	800597a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e010      	b.n	800599c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800597a:	897b      	ldrh	r3, [r7, #10]
 800597c:	b2da      	uxtb	r2, r3
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	4907      	ldr	r1, [pc, #28]	; (80059a8 <I2C_MasterRequestWrite+0x100>)
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f000 f930 	bl	8005bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d001      	beq.n	800599a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e000      	b.n	800599c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3718      	adds	r7, #24
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	00010008 	.word	0x00010008
 80059a8:	00010002 	.word	0x00010002

080059ac <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b086      	sub	sp, #24
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059b4:	2300      	movs	r3, #0
 80059b6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059bc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059c4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80059c6:	4b4b      	ldr	r3, [pc, #300]	; (8005af4 <I2C_DMAAbort+0x148>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	08db      	lsrs	r3, r3, #3
 80059cc:	4a4a      	ldr	r2, [pc, #296]	; (8005af8 <I2C_DMAAbort+0x14c>)
 80059ce:	fba2 2303 	umull	r2, r3, r2, r3
 80059d2:	0a1a      	lsrs	r2, r3, #8
 80059d4:	4613      	mov	r3, r2
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	4413      	add	r3, r2
 80059da:	00da      	lsls	r2, r3, #3
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d106      	bne.n	80059f4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ea:	f043 0220 	orr.w	r2, r3, #32
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80059f2:	e00a      	b.n	8005a0a <I2C_DMAAbort+0x5e>
    }
    count--;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	3b01      	subs	r3, #1
 80059f8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a08:	d0ea      	beq.n	80059e0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d003      	beq.n	8005a1a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a16:	2200      	movs	r2, #0
 8005a18:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d003      	beq.n	8005a2a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a26:	2200      	movs	r2, #0
 8005a28:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a38:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d003      	beq.n	8005a50 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d003      	beq.n	8005a60 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f022 0201 	bic.w	r2, r2, #1
 8005a6e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	2b60      	cmp	r3, #96	; 0x60
 8005a7a:	d10e      	bne.n	8005a9a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	2220      	movs	r2, #32
 8005a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005a92:	6978      	ldr	r0, [r7, #20]
 8005a94:	f7fe fd8a 	bl	80045ac <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005a98:	e027      	b.n	8005aea <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a9a:	7cfb      	ldrb	r3, [r7, #19]
 8005a9c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005aa0:	2b28      	cmp	r3, #40	; 0x28
 8005aa2:	d117      	bne.n	8005ad4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f042 0201 	orr.w	r2, r2, #1
 8005ab2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ac2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	2228      	movs	r2, #40	; 0x28
 8005ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005ad2:	e007      	b.n	8005ae4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	2220      	movs	r2, #32
 8005ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005ae4:	6978      	ldr	r0, [r7, #20]
 8005ae6:	f7fe fd58 	bl	800459a <HAL_I2C_ErrorCallback>
}
 8005aea:	bf00      	nop
 8005aec:	3718      	adds	r7, #24
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	20000024 	.word	0x20000024
 8005af8:	14f8b589 	.word	0x14f8b589

08005afc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	603b      	str	r3, [r7, #0]
 8005b08:	4613      	mov	r3, r2
 8005b0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b0c:	e048      	b.n	8005ba0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b14:	d044      	beq.n	8005ba0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b16:	f7fc fcbb 	bl	8002490 <HAL_GetTick>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	683a      	ldr	r2, [r7, #0]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d302      	bcc.n	8005b2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d139      	bne.n	8005ba0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	0c1b      	lsrs	r3, r3, #16
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d10d      	bne.n	8005b52 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	695b      	ldr	r3, [r3, #20]
 8005b3c:	43da      	mvns	r2, r3
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	4013      	ands	r3, r2
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	bf0c      	ite	eq
 8005b48:	2301      	moveq	r3, #1
 8005b4a:	2300      	movne	r3, #0
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	461a      	mov	r2, r3
 8005b50:	e00c      	b.n	8005b6c <I2C_WaitOnFlagUntilTimeout+0x70>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	699b      	ldr	r3, [r3, #24]
 8005b58:	43da      	mvns	r2, r3
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	bf0c      	ite	eq
 8005b64:	2301      	moveq	r3, #1
 8005b66:	2300      	movne	r3, #0
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	79fb      	ldrb	r3, [r7, #7]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d116      	bne.n	8005ba0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2200      	movs	r2, #0
 8005b76:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2220      	movs	r2, #32
 8005b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8c:	f043 0220 	orr.w	r2, r3, #32
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e023      	b.n	8005be8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	0c1b      	lsrs	r3, r3, #16
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d10d      	bne.n	8005bc6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	695b      	ldr	r3, [r3, #20]
 8005bb0:	43da      	mvns	r2, r3
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	bf0c      	ite	eq
 8005bbc:	2301      	moveq	r3, #1
 8005bbe:	2300      	movne	r3, #0
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	e00c      	b.n	8005be0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	699b      	ldr	r3, [r3, #24]
 8005bcc:	43da      	mvns	r2, r3
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	bf0c      	ite	eq
 8005bd8:	2301      	moveq	r3, #1
 8005bda:	2300      	movne	r3, #0
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	461a      	mov	r2, r3
 8005be0:	79fb      	ldrb	r3, [r7, #7]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d093      	beq.n	8005b0e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3710      	adds	r7, #16
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]
 8005bfc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005bfe:	e071      	b.n	8005ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c0e:	d123      	bne.n	8005c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c1e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2220      	movs	r2, #32
 8005c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c44:	f043 0204 	orr.w	r2, r3, #4
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e067      	b.n	8005d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c5e:	d041      	beq.n	8005ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c60:	f7fc fc16 	bl	8002490 <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d302      	bcc.n	8005c76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d136      	bne.n	8005ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	0c1b      	lsrs	r3, r3, #16
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d10c      	bne.n	8005c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	43da      	mvns	r2, r3
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	bf14      	ite	ne
 8005c92:	2301      	movne	r3, #1
 8005c94:	2300      	moveq	r3, #0
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	e00b      	b.n	8005cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	699b      	ldr	r3, [r3, #24]
 8005ca0:	43da      	mvns	r2, r3
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	bf14      	ite	ne
 8005cac:	2301      	movne	r3, #1
 8005cae:	2300      	moveq	r3, #0
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d016      	beq.n	8005ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2220      	movs	r2, #32
 8005cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd0:	f043 0220 	orr.w	r2, r3, #32
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e021      	b.n	8005d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	0c1b      	lsrs	r3, r3, #16
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d10c      	bne.n	8005d08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	695b      	ldr	r3, [r3, #20]
 8005cf4:	43da      	mvns	r2, r3
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	bf14      	ite	ne
 8005d00:	2301      	movne	r3, #1
 8005d02:	2300      	moveq	r3, #0
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	e00b      	b.n	8005d20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	43da      	mvns	r2, r3
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	4013      	ands	r3, r2
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	bf14      	ite	ne
 8005d1a:	2301      	movne	r3, #1
 8005d1c:	2300      	moveq	r3, #0
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f47f af6d 	bne.w	8005c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3710      	adds	r7, #16
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d3c:	e034      	b.n	8005da8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	f000 f8b8 	bl	8005eb4 <I2C_IsAcknowledgeFailed>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d001      	beq.n	8005d4e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e034      	b.n	8005db8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d54:	d028      	beq.n	8005da8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d56:	f7fc fb9b 	bl	8002490 <HAL_GetTick>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d302      	bcc.n	8005d6c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d11d      	bne.n	8005da8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	695b      	ldr	r3, [r3, #20]
 8005d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d76:	2b80      	cmp	r3, #128	; 0x80
 8005d78:	d016      	beq.n	8005da8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2220      	movs	r2, #32
 8005d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d94:	f043 0220 	orr.w	r2, r3, #32
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	e007      	b.n	8005db8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	695b      	ldr	r3, [r3, #20]
 8005dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005db2:	2b80      	cmp	r3, #128	; 0x80
 8005db4:	d1c3      	bne.n	8005d3e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005dcc:	e034      	b.n	8005e38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f000 f870 	bl	8005eb4 <I2C_IsAcknowledgeFailed>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d001      	beq.n	8005dde <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e034      	b.n	8005e48 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005de4:	d028      	beq.n	8005e38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005de6:	f7fc fb53 	bl	8002490 <HAL_GetTick>
 8005dea:	4602      	mov	r2, r0
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	68ba      	ldr	r2, [r7, #8]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d302      	bcc.n	8005dfc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d11d      	bne.n	8005e38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	f003 0304 	and.w	r3, r3, #4
 8005e06:	2b04      	cmp	r3, #4
 8005e08:	d016      	beq.n	8005e38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2220      	movs	r2, #32
 8005e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e24:	f043 0220 	orr.w	r2, r3, #32
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e007      	b.n	8005e48 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	f003 0304 	and.w	r3, r3, #4
 8005e42:	2b04      	cmp	r3, #4
 8005e44:	d1c3      	bne.n	8005dce <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3710      	adds	r7, #16
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005e5c:	4b13      	ldr	r3, [pc, #76]	; (8005eac <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	08db      	lsrs	r3, r3, #3
 8005e62:	4a13      	ldr	r2, [pc, #76]	; (8005eb0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005e64:	fba2 2303 	umull	r2, r3, r2, r3
 8005e68:	0a1a      	lsrs	r2, r3, #8
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	4413      	add	r3, r2
 8005e70:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	3b01      	subs	r3, #1
 8005e76:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d107      	bne.n	8005e8e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e82:	f043 0220 	orr.w	r2, r3, #32
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e008      	b.n	8005ea0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e9c:	d0e9      	beq.n	8005e72 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3714      	adds	r7, #20
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bc80      	pop	{r7}
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	20000024 	.word	0x20000024
 8005eb0:	14f8b589 	.word	0x14f8b589

08005eb4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	695b      	ldr	r3, [r3, #20]
 8005ec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eca:	d11b      	bne.n	8005f04 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ed4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2220      	movs	r2, #32
 8005ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef0:	f043 0204 	orr.w	r2, r3, #4
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	e000      	b.n	8005f06 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	370c      	adds	r7, #12
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bc80      	pop	{r7}
 8005f0e:	4770      	bx	lr

08005f10 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f1c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005f20:	d103      	bne.n	8005f2a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2201      	movs	r2, #1
 8005f26:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005f28:	e007      	b.n	8005f3a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f2e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005f32:	d102      	bne.n	8005f3a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2208      	movs	r2, #8
 8005f38:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005f3a:	bf00      	nop
 8005f3c:	370c      	adds	r7, #12
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bc80      	pop	{r7}
 8005f42:	4770      	bx	lr

08005f44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b086      	sub	sp, #24
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d101      	bne.n	8005f56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e272      	b.n	800643c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f000 8087 	beq.w	8006072 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005f64:	4b92      	ldr	r3, [pc, #584]	; (80061b0 <HAL_RCC_OscConfig+0x26c>)
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	f003 030c 	and.w	r3, r3, #12
 8005f6c:	2b04      	cmp	r3, #4
 8005f6e:	d00c      	beq.n	8005f8a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005f70:	4b8f      	ldr	r3, [pc, #572]	; (80061b0 <HAL_RCC_OscConfig+0x26c>)
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	f003 030c 	and.w	r3, r3, #12
 8005f78:	2b08      	cmp	r3, #8
 8005f7a:	d112      	bne.n	8005fa2 <HAL_RCC_OscConfig+0x5e>
 8005f7c:	4b8c      	ldr	r3, [pc, #560]	; (80061b0 <HAL_RCC_OscConfig+0x26c>)
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f88:	d10b      	bne.n	8005fa2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f8a:	4b89      	ldr	r3, [pc, #548]	; (80061b0 <HAL_RCC_OscConfig+0x26c>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d06c      	beq.n	8006070 <HAL_RCC_OscConfig+0x12c>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d168      	bne.n	8006070 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e24c      	b.n	800643c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005faa:	d106      	bne.n	8005fba <HAL_RCC_OscConfig+0x76>
 8005fac:	4b80      	ldr	r3, [pc, #512]	; (80061b0 <HAL_RCC_OscConfig+0x26c>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a7f      	ldr	r2, [pc, #508]	; (80061b0 <HAL_RCC_OscConfig+0x26c>)
 8005fb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fb6:	6013      	str	r3, [r2, #0]
 8005fb8:	e02e      	b.n	8006018 <HAL_RCC_OscConfig+0xd4>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d10c      	bne.n	8005fdc <HAL_RCC_OscConfig+0x98>
 8005fc2:	4b7b      	ldr	r3, [pc, #492]	; (80061b0 <HAL_RCC_OscConfig+0x26c>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a7a      	ldr	r2, [pc, #488]	; (80061b0 <HAL_RCC_OscConfig+0x26c>)
 8005fc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fcc:	6013      	str	r3, [r2, #0]
 8005fce:	4b78      	ldr	r3, [pc, #480]	; (80061b0 <HAL_RCC_OscConfig+0x26c>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a77      	ldr	r2, [pc, #476]	; (80061b0 <HAL_RCC_OscConfig+0x26c>)
 8005fd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fd8:	6013      	str	r3, [r2, #0]
 8005fda:	e01d      	b.n	8006018 <HAL_RCC_OscConfig+0xd4>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fe4:	d10c      	bne.n	8006000 <HAL_RCC_OscConfig+0xbc>
 8005fe6:	4b72      	ldr	r3, [pc, #456]	; (80061b0 <HAL_RCC_OscConfig+0x26c>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a71      	ldr	r2, [pc, #452]	; (80061b0 <HAL_RCC_OscConfig+0x26c>)
 8005fec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ff0:	6013      	str	r3, [r2, #0]
 8005ff2:	4b6f      	ldr	r3, [pc, #444]	; (80061b0 <HAL_RCC_OscConfig+0x26c>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a6e      	ldr	r2, [pc, #440]	; (80061b0 <HAL_RCC_OscConfig+0x26c>)
 8005ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ffc:	6013      	str	r3, [r2, #0]
 8005ffe:	e00b      	b.n	8006018 <HAL_RCC_OscConfig+0xd4>
 8006000:	4b6b      	ldr	r3, [pc, #428]	; (80061b0 <HAL_RCC_OscConfig+0x26c>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a6a      	ldr	r2, [pc, #424]	; (80061b0 <HAL_RCC_OscConfig+0x26c>)
 8006006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800600a:	6013      	str	r3, [r2, #0]
 800600c:	4b68      	ldr	r3, [pc, #416]	; (80061b0 <HAL_RCC_OscConfig+0x26c>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a67      	ldr	r2, [pc, #412]	; (80061b0 <HAL_RCC_OscConfig+0x26c>)
 8006012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006016:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d013      	beq.n	8006048 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006020:	f7fc fa36 	bl	8002490 <HAL_GetTick>
 8006024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006026:	e008      	b.n	800603a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006028:	f7fc fa32 	bl	8002490 <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	2b64      	cmp	r3, #100	; 0x64
 8006034:	d901      	bls.n	800603a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e200      	b.n	800643c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800603a:	4b5d      	ldr	r3, [pc, #372]	; (80061b0 <HAL_RCC_OscConfig+0x26c>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d0f0      	beq.n	8006028 <HAL_RCC_OscConfig+0xe4>
 8006046:	e014      	b.n	8006072 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006048:	f7fc fa22 	bl	8002490 <HAL_GetTick>
 800604c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800604e:	e008      	b.n	8006062 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006050:	f7fc fa1e 	bl	8002490 <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	2b64      	cmp	r3, #100	; 0x64
 800605c:	d901      	bls.n	8006062 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e1ec      	b.n	800643c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006062:	4b53      	ldr	r3, [pc, #332]	; (80061b0 <HAL_RCC_OscConfig+0x26c>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1f0      	bne.n	8006050 <HAL_RCC_OscConfig+0x10c>
 800606e:	e000      	b.n	8006072 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0302 	and.w	r3, r3, #2
 800607a:	2b00      	cmp	r3, #0
 800607c:	d063      	beq.n	8006146 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800607e:	4b4c      	ldr	r3, [pc, #304]	; (80061b0 <HAL_RCC_OscConfig+0x26c>)
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	f003 030c 	and.w	r3, r3, #12
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00b      	beq.n	80060a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800608a:	4b49      	ldr	r3, [pc, #292]	; (80061b0 <HAL_RCC_OscConfig+0x26c>)
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	f003 030c 	and.w	r3, r3, #12
 8006092:	2b08      	cmp	r3, #8
 8006094:	d11c      	bne.n	80060d0 <HAL_RCC_OscConfig+0x18c>
 8006096:	4b46      	ldr	r3, [pc, #280]	; (80061b0 <HAL_RCC_OscConfig+0x26c>)
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d116      	bne.n	80060d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060a2:	4b43      	ldr	r3, [pc, #268]	; (80061b0 <HAL_RCC_OscConfig+0x26c>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0302 	and.w	r3, r3, #2
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d005      	beq.n	80060ba <HAL_RCC_OscConfig+0x176>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d001      	beq.n	80060ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e1c0      	b.n	800643c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060ba:	4b3d      	ldr	r3, [pc, #244]	; (80061b0 <HAL_RCC_OscConfig+0x26c>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	695b      	ldr	r3, [r3, #20]
 80060c6:	00db      	lsls	r3, r3, #3
 80060c8:	4939      	ldr	r1, [pc, #228]	; (80061b0 <HAL_RCC_OscConfig+0x26c>)
 80060ca:	4313      	orrs	r3, r2
 80060cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060ce:	e03a      	b.n	8006146 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d020      	beq.n	800611a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060d8:	4b36      	ldr	r3, [pc, #216]	; (80061b4 <HAL_RCC_OscConfig+0x270>)
 80060da:	2201      	movs	r2, #1
 80060dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060de:	f7fc f9d7 	bl	8002490 <HAL_GetTick>
 80060e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060e4:	e008      	b.n	80060f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060e6:	f7fc f9d3 	bl	8002490 <HAL_GetTick>
 80060ea:	4602      	mov	r2, r0
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	1ad3      	subs	r3, r2, r3
 80060f0:	2b02      	cmp	r3, #2
 80060f2:	d901      	bls.n	80060f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80060f4:	2303      	movs	r3, #3
 80060f6:	e1a1      	b.n	800643c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060f8:	4b2d      	ldr	r3, [pc, #180]	; (80061b0 <HAL_RCC_OscConfig+0x26c>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0302 	and.w	r3, r3, #2
 8006100:	2b00      	cmp	r3, #0
 8006102:	d0f0      	beq.n	80060e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006104:	4b2a      	ldr	r3, [pc, #168]	; (80061b0 <HAL_RCC_OscConfig+0x26c>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	695b      	ldr	r3, [r3, #20]
 8006110:	00db      	lsls	r3, r3, #3
 8006112:	4927      	ldr	r1, [pc, #156]	; (80061b0 <HAL_RCC_OscConfig+0x26c>)
 8006114:	4313      	orrs	r3, r2
 8006116:	600b      	str	r3, [r1, #0]
 8006118:	e015      	b.n	8006146 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800611a:	4b26      	ldr	r3, [pc, #152]	; (80061b4 <HAL_RCC_OscConfig+0x270>)
 800611c:	2200      	movs	r2, #0
 800611e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006120:	f7fc f9b6 	bl	8002490 <HAL_GetTick>
 8006124:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006126:	e008      	b.n	800613a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006128:	f7fc f9b2 	bl	8002490 <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	2b02      	cmp	r3, #2
 8006134:	d901      	bls.n	800613a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e180      	b.n	800643c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800613a:	4b1d      	ldr	r3, [pc, #116]	; (80061b0 <HAL_RCC_OscConfig+0x26c>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 0302 	and.w	r3, r3, #2
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1f0      	bne.n	8006128 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0308 	and.w	r3, r3, #8
 800614e:	2b00      	cmp	r3, #0
 8006150:	d03a      	beq.n	80061c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	699b      	ldr	r3, [r3, #24]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d019      	beq.n	800618e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800615a:	4b17      	ldr	r3, [pc, #92]	; (80061b8 <HAL_RCC_OscConfig+0x274>)
 800615c:	2201      	movs	r2, #1
 800615e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006160:	f7fc f996 	bl	8002490 <HAL_GetTick>
 8006164:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006166:	e008      	b.n	800617a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006168:	f7fc f992 	bl	8002490 <HAL_GetTick>
 800616c:	4602      	mov	r2, r0
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	1ad3      	subs	r3, r2, r3
 8006172:	2b02      	cmp	r3, #2
 8006174:	d901      	bls.n	800617a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e160      	b.n	800643c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800617a:	4b0d      	ldr	r3, [pc, #52]	; (80061b0 <HAL_RCC_OscConfig+0x26c>)
 800617c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617e:	f003 0302 	and.w	r3, r3, #2
 8006182:	2b00      	cmp	r3, #0
 8006184:	d0f0      	beq.n	8006168 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006186:	2001      	movs	r0, #1
 8006188:	f000 face 	bl	8006728 <RCC_Delay>
 800618c:	e01c      	b.n	80061c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800618e:	4b0a      	ldr	r3, [pc, #40]	; (80061b8 <HAL_RCC_OscConfig+0x274>)
 8006190:	2200      	movs	r2, #0
 8006192:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006194:	f7fc f97c 	bl	8002490 <HAL_GetTick>
 8006198:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800619a:	e00f      	b.n	80061bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800619c:	f7fc f978 	bl	8002490 <HAL_GetTick>
 80061a0:	4602      	mov	r2, r0
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d908      	bls.n	80061bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80061aa:	2303      	movs	r3, #3
 80061ac:	e146      	b.n	800643c <HAL_RCC_OscConfig+0x4f8>
 80061ae:	bf00      	nop
 80061b0:	40021000 	.word	0x40021000
 80061b4:	42420000 	.word	0x42420000
 80061b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061bc:	4b92      	ldr	r3, [pc, #584]	; (8006408 <HAL_RCC_OscConfig+0x4c4>)
 80061be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c0:	f003 0302 	and.w	r3, r3, #2
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1e9      	bne.n	800619c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0304 	and.w	r3, r3, #4
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	f000 80a6 	beq.w	8006322 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061d6:	2300      	movs	r3, #0
 80061d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061da:	4b8b      	ldr	r3, [pc, #556]	; (8006408 <HAL_RCC_OscConfig+0x4c4>)
 80061dc:	69db      	ldr	r3, [r3, #28]
 80061de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d10d      	bne.n	8006202 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061e6:	4b88      	ldr	r3, [pc, #544]	; (8006408 <HAL_RCC_OscConfig+0x4c4>)
 80061e8:	69db      	ldr	r3, [r3, #28]
 80061ea:	4a87      	ldr	r2, [pc, #540]	; (8006408 <HAL_RCC_OscConfig+0x4c4>)
 80061ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061f0:	61d3      	str	r3, [r2, #28]
 80061f2:	4b85      	ldr	r3, [pc, #532]	; (8006408 <HAL_RCC_OscConfig+0x4c4>)
 80061f4:	69db      	ldr	r3, [r3, #28]
 80061f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061fa:	60bb      	str	r3, [r7, #8]
 80061fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061fe:	2301      	movs	r3, #1
 8006200:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006202:	4b82      	ldr	r3, [pc, #520]	; (800640c <HAL_RCC_OscConfig+0x4c8>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800620a:	2b00      	cmp	r3, #0
 800620c:	d118      	bne.n	8006240 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800620e:	4b7f      	ldr	r3, [pc, #508]	; (800640c <HAL_RCC_OscConfig+0x4c8>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a7e      	ldr	r2, [pc, #504]	; (800640c <HAL_RCC_OscConfig+0x4c8>)
 8006214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006218:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800621a:	f7fc f939 	bl	8002490 <HAL_GetTick>
 800621e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006220:	e008      	b.n	8006234 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006222:	f7fc f935 	bl	8002490 <HAL_GetTick>
 8006226:	4602      	mov	r2, r0
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	2b64      	cmp	r3, #100	; 0x64
 800622e:	d901      	bls.n	8006234 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006230:	2303      	movs	r3, #3
 8006232:	e103      	b.n	800643c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006234:	4b75      	ldr	r3, [pc, #468]	; (800640c <HAL_RCC_OscConfig+0x4c8>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800623c:	2b00      	cmp	r3, #0
 800623e:	d0f0      	beq.n	8006222 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d106      	bne.n	8006256 <HAL_RCC_OscConfig+0x312>
 8006248:	4b6f      	ldr	r3, [pc, #444]	; (8006408 <HAL_RCC_OscConfig+0x4c4>)
 800624a:	6a1b      	ldr	r3, [r3, #32]
 800624c:	4a6e      	ldr	r2, [pc, #440]	; (8006408 <HAL_RCC_OscConfig+0x4c4>)
 800624e:	f043 0301 	orr.w	r3, r3, #1
 8006252:	6213      	str	r3, [r2, #32]
 8006254:	e02d      	b.n	80062b2 <HAL_RCC_OscConfig+0x36e>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10c      	bne.n	8006278 <HAL_RCC_OscConfig+0x334>
 800625e:	4b6a      	ldr	r3, [pc, #424]	; (8006408 <HAL_RCC_OscConfig+0x4c4>)
 8006260:	6a1b      	ldr	r3, [r3, #32]
 8006262:	4a69      	ldr	r2, [pc, #420]	; (8006408 <HAL_RCC_OscConfig+0x4c4>)
 8006264:	f023 0301 	bic.w	r3, r3, #1
 8006268:	6213      	str	r3, [r2, #32]
 800626a:	4b67      	ldr	r3, [pc, #412]	; (8006408 <HAL_RCC_OscConfig+0x4c4>)
 800626c:	6a1b      	ldr	r3, [r3, #32]
 800626e:	4a66      	ldr	r2, [pc, #408]	; (8006408 <HAL_RCC_OscConfig+0x4c4>)
 8006270:	f023 0304 	bic.w	r3, r3, #4
 8006274:	6213      	str	r3, [r2, #32]
 8006276:	e01c      	b.n	80062b2 <HAL_RCC_OscConfig+0x36e>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	2b05      	cmp	r3, #5
 800627e:	d10c      	bne.n	800629a <HAL_RCC_OscConfig+0x356>
 8006280:	4b61      	ldr	r3, [pc, #388]	; (8006408 <HAL_RCC_OscConfig+0x4c4>)
 8006282:	6a1b      	ldr	r3, [r3, #32]
 8006284:	4a60      	ldr	r2, [pc, #384]	; (8006408 <HAL_RCC_OscConfig+0x4c4>)
 8006286:	f043 0304 	orr.w	r3, r3, #4
 800628a:	6213      	str	r3, [r2, #32]
 800628c:	4b5e      	ldr	r3, [pc, #376]	; (8006408 <HAL_RCC_OscConfig+0x4c4>)
 800628e:	6a1b      	ldr	r3, [r3, #32]
 8006290:	4a5d      	ldr	r2, [pc, #372]	; (8006408 <HAL_RCC_OscConfig+0x4c4>)
 8006292:	f043 0301 	orr.w	r3, r3, #1
 8006296:	6213      	str	r3, [r2, #32]
 8006298:	e00b      	b.n	80062b2 <HAL_RCC_OscConfig+0x36e>
 800629a:	4b5b      	ldr	r3, [pc, #364]	; (8006408 <HAL_RCC_OscConfig+0x4c4>)
 800629c:	6a1b      	ldr	r3, [r3, #32]
 800629e:	4a5a      	ldr	r2, [pc, #360]	; (8006408 <HAL_RCC_OscConfig+0x4c4>)
 80062a0:	f023 0301 	bic.w	r3, r3, #1
 80062a4:	6213      	str	r3, [r2, #32]
 80062a6:	4b58      	ldr	r3, [pc, #352]	; (8006408 <HAL_RCC_OscConfig+0x4c4>)
 80062a8:	6a1b      	ldr	r3, [r3, #32]
 80062aa:	4a57      	ldr	r2, [pc, #348]	; (8006408 <HAL_RCC_OscConfig+0x4c4>)
 80062ac:	f023 0304 	bic.w	r3, r3, #4
 80062b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d015      	beq.n	80062e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062ba:	f7fc f8e9 	bl	8002490 <HAL_GetTick>
 80062be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062c0:	e00a      	b.n	80062d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062c2:	f7fc f8e5 	bl	8002490 <HAL_GetTick>
 80062c6:	4602      	mov	r2, r0
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d901      	bls.n	80062d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e0b1      	b.n	800643c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062d8:	4b4b      	ldr	r3, [pc, #300]	; (8006408 <HAL_RCC_OscConfig+0x4c4>)
 80062da:	6a1b      	ldr	r3, [r3, #32]
 80062dc:	f003 0302 	and.w	r3, r3, #2
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d0ee      	beq.n	80062c2 <HAL_RCC_OscConfig+0x37e>
 80062e4:	e014      	b.n	8006310 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062e6:	f7fc f8d3 	bl	8002490 <HAL_GetTick>
 80062ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062ec:	e00a      	b.n	8006304 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062ee:	f7fc f8cf 	bl	8002490 <HAL_GetTick>
 80062f2:	4602      	mov	r2, r0
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	1ad3      	subs	r3, r2, r3
 80062f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d901      	bls.n	8006304 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e09b      	b.n	800643c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006304:	4b40      	ldr	r3, [pc, #256]	; (8006408 <HAL_RCC_OscConfig+0x4c4>)
 8006306:	6a1b      	ldr	r3, [r3, #32]
 8006308:	f003 0302 	and.w	r3, r3, #2
 800630c:	2b00      	cmp	r3, #0
 800630e:	d1ee      	bne.n	80062ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006310:	7dfb      	ldrb	r3, [r7, #23]
 8006312:	2b01      	cmp	r3, #1
 8006314:	d105      	bne.n	8006322 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006316:	4b3c      	ldr	r3, [pc, #240]	; (8006408 <HAL_RCC_OscConfig+0x4c4>)
 8006318:	69db      	ldr	r3, [r3, #28]
 800631a:	4a3b      	ldr	r2, [pc, #236]	; (8006408 <HAL_RCC_OscConfig+0x4c4>)
 800631c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006320:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	69db      	ldr	r3, [r3, #28]
 8006326:	2b00      	cmp	r3, #0
 8006328:	f000 8087 	beq.w	800643a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800632c:	4b36      	ldr	r3, [pc, #216]	; (8006408 <HAL_RCC_OscConfig+0x4c4>)
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	f003 030c 	and.w	r3, r3, #12
 8006334:	2b08      	cmp	r3, #8
 8006336:	d061      	beq.n	80063fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	69db      	ldr	r3, [r3, #28]
 800633c:	2b02      	cmp	r3, #2
 800633e:	d146      	bne.n	80063ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006340:	4b33      	ldr	r3, [pc, #204]	; (8006410 <HAL_RCC_OscConfig+0x4cc>)
 8006342:	2200      	movs	r2, #0
 8006344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006346:	f7fc f8a3 	bl	8002490 <HAL_GetTick>
 800634a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800634c:	e008      	b.n	8006360 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800634e:	f7fc f89f 	bl	8002490 <HAL_GetTick>
 8006352:	4602      	mov	r2, r0
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	2b02      	cmp	r3, #2
 800635a:	d901      	bls.n	8006360 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	e06d      	b.n	800643c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006360:	4b29      	ldr	r3, [pc, #164]	; (8006408 <HAL_RCC_OscConfig+0x4c4>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1f0      	bne.n	800634e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a1b      	ldr	r3, [r3, #32]
 8006370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006374:	d108      	bne.n	8006388 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006376:	4b24      	ldr	r3, [pc, #144]	; (8006408 <HAL_RCC_OscConfig+0x4c4>)
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	4921      	ldr	r1, [pc, #132]	; (8006408 <HAL_RCC_OscConfig+0x4c4>)
 8006384:	4313      	orrs	r3, r2
 8006386:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006388:	4b1f      	ldr	r3, [pc, #124]	; (8006408 <HAL_RCC_OscConfig+0x4c4>)
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6a19      	ldr	r1, [r3, #32]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006398:	430b      	orrs	r3, r1
 800639a:	491b      	ldr	r1, [pc, #108]	; (8006408 <HAL_RCC_OscConfig+0x4c4>)
 800639c:	4313      	orrs	r3, r2
 800639e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063a0:	4b1b      	ldr	r3, [pc, #108]	; (8006410 <HAL_RCC_OscConfig+0x4cc>)
 80063a2:	2201      	movs	r2, #1
 80063a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063a6:	f7fc f873 	bl	8002490 <HAL_GetTick>
 80063aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80063ac:	e008      	b.n	80063c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063ae:	f7fc f86f 	bl	8002490 <HAL_GetTick>
 80063b2:	4602      	mov	r2, r0
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d901      	bls.n	80063c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e03d      	b.n	800643c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80063c0:	4b11      	ldr	r3, [pc, #68]	; (8006408 <HAL_RCC_OscConfig+0x4c4>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d0f0      	beq.n	80063ae <HAL_RCC_OscConfig+0x46a>
 80063cc:	e035      	b.n	800643a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063ce:	4b10      	ldr	r3, [pc, #64]	; (8006410 <HAL_RCC_OscConfig+0x4cc>)
 80063d0:	2200      	movs	r2, #0
 80063d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063d4:	f7fc f85c 	bl	8002490 <HAL_GetTick>
 80063d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80063da:	e008      	b.n	80063ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063dc:	f7fc f858 	bl	8002490 <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d901      	bls.n	80063ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e026      	b.n	800643c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80063ee:	4b06      	ldr	r3, [pc, #24]	; (8006408 <HAL_RCC_OscConfig+0x4c4>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1f0      	bne.n	80063dc <HAL_RCC_OscConfig+0x498>
 80063fa:	e01e      	b.n	800643a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	69db      	ldr	r3, [r3, #28]
 8006400:	2b01      	cmp	r3, #1
 8006402:	d107      	bne.n	8006414 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e019      	b.n	800643c <HAL_RCC_OscConfig+0x4f8>
 8006408:	40021000 	.word	0x40021000
 800640c:	40007000 	.word	0x40007000
 8006410:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006414:	4b0b      	ldr	r3, [pc, #44]	; (8006444 <HAL_RCC_OscConfig+0x500>)
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6a1b      	ldr	r3, [r3, #32]
 8006424:	429a      	cmp	r2, r3
 8006426:	d106      	bne.n	8006436 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006432:	429a      	cmp	r2, r3
 8006434:	d001      	beq.n	800643a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e000      	b.n	800643c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3718      	adds	r7, #24
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}
 8006444:	40021000 	.word	0x40021000

08006448 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d101      	bne.n	800645c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e0d0      	b.n	80065fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800645c:	4b6a      	ldr	r3, [pc, #424]	; (8006608 <HAL_RCC_ClockConfig+0x1c0>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0307 	and.w	r3, r3, #7
 8006464:	683a      	ldr	r2, [r7, #0]
 8006466:	429a      	cmp	r2, r3
 8006468:	d910      	bls.n	800648c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800646a:	4b67      	ldr	r3, [pc, #412]	; (8006608 <HAL_RCC_ClockConfig+0x1c0>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f023 0207 	bic.w	r2, r3, #7
 8006472:	4965      	ldr	r1, [pc, #404]	; (8006608 <HAL_RCC_ClockConfig+0x1c0>)
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	4313      	orrs	r3, r2
 8006478:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800647a:	4b63      	ldr	r3, [pc, #396]	; (8006608 <HAL_RCC_ClockConfig+0x1c0>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 0307 	and.w	r3, r3, #7
 8006482:	683a      	ldr	r2, [r7, #0]
 8006484:	429a      	cmp	r2, r3
 8006486:	d001      	beq.n	800648c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	e0b8      	b.n	80065fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f003 0302 	and.w	r3, r3, #2
 8006494:	2b00      	cmp	r3, #0
 8006496:	d020      	beq.n	80064da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0304 	and.w	r3, r3, #4
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d005      	beq.n	80064b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064a4:	4b59      	ldr	r3, [pc, #356]	; (800660c <HAL_RCC_ClockConfig+0x1c4>)
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	4a58      	ldr	r2, [pc, #352]	; (800660c <HAL_RCC_ClockConfig+0x1c4>)
 80064aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80064ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 0308 	and.w	r3, r3, #8
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d005      	beq.n	80064c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80064bc:	4b53      	ldr	r3, [pc, #332]	; (800660c <HAL_RCC_ClockConfig+0x1c4>)
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	4a52      	ldr	r2, [pc, #328]	; (800660c <HAL_RCC_ClockConfig+0x1c4>)
 80064c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80064c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064c8:	4b50      	ldr	r3, [pc, #320]	; (800660c <HAL_RCC_ClockConfig+0x1c4>)
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	494d      	ldr	r1, [pc, #308]	; (800660c <HAL_RCC_ClockConfig+0x1c4>)
 80064d6:	4313      	orrs	r3, r2
 80064d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 0301 	and.w	r3, r3, #1
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d040      	beq.n	8006568 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d107      	bne.n	80064fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064ee:	4b47      	ldr	r3, [pc, #284]	; (800660c <HAL_RCC_ClockConfig+0x1c4>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d115      	bne.n	8006526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e07f      	b.n	80065fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	2b02      	cmp	r3, #2
 8006504:	d107      	bne.n	8006516 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006506:	4b41      	ldr	r3, [pc, #260]	; (800660c <HAL_RCC_ClockConfig+0x1c4>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d109      	bne.n	8006526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e073      	b.n	80065fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006516:	4b3d      	ldr	r3, [pc, #244]	; (800660c <HAL_RCC_ClockConfig+0x1c4>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 0302 	and.w	r3, r3, #2
 800651e:	2b00      	cmp	r3, #0
 8006520:	d101      	bne.n	8006526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e06b      	b.n	80065fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006526:	4b39      	ldr	r3, [pc, #228]	; (800660c <HAL_RCC_ClockConfig+0x1c4>)
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	f023 0203 	bic.w	r2, r3, #3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	4936      	ldr	r1, [pc, #216]	; (800660c <HAL_RCC_ClockConfig+0x1c4>)
 8006534:	4313      	orrs	r3, r2
 8006536:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006538:	f7fb ffaa 	bl	8002490 <HAL_GetTick>
 800653c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800653e:	e00a      	b.n	8006556 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006540:	f7fb ffa6 	bl	8002490 <HAL_GetTick>
 8006544:	4602      	mov	r2, r0
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	f241 3288 	movw	r2, #5000	; 0x1388
 800654e:	4293      	cmp	r3, r2
 8006550:	d901      	bls.n	8006556 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006552:	2303      	movs	r3, #3
 8006554:	e053      	b.n	80065fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006556:	4b2d      	ldr	r3, [pc, #180]	; (800660c <HAL_RCC_ClockConfig+0x1c4>)
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	f003 020c 	and.w	r2, r3, #12
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	429a      	cmp	r2, r3
 8006566:	d1eb      	bne.n	8006540 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006568:	4b27      	ldr	r3, [pc, #156]	; (8006608 <HAL_RCC_ClockConfig+0x1c0>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0307 	and.w	r3, r3, #7
 8006570:	683a      	ldr	r2, [r7, #0]
 8006572:	429a      	cmp	r2, r3
 8006574:	d210      	bcs.n	8006598 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006576:	4b24      	ldr	r3, [pc, #144]	; (8006608 <HAL_RCC_ClockConfig+0x1c0>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f023 0207 	bic.w	r2, r3, #7
 800657e:	4922      	ldr	r1, [pc, #136]	; (8006608 <HAL_RCC_ClockConfig+0x1c0>)
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	4313      	orrs	r3, r2
 8006584:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006586:	4b20      	ldr	r3, [pc, #128]	; (8006608 <HAL_RCC_ClockConfig+0x1c0>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 0307 	and.w	r3, r3, #7
 800658e:	683a      	ldr	r2, [r7, #0]
 8006590:	429a      	cmp	r2, r3
 8006592:	d001      	beq.n	8006598 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e032      	b.n	80065fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 0304 	and.w	r3, r3, #4
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d008      	beq.n	80065b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065a4:	4b19      	ldr	r3, [pc, #100]	; (800660c <HAL_RCC_ClockConfig+0x1c4>)
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	4916      	ldr	r1, [pc, #88]	; (800660c <HAL_RCC_ClockConfig+0x1c4>)
 80065b2:	4313      	orrs	r3, r2
 80065b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 0308 	and.w	r3, r3, #8
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d009      	beq.n	80065d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80065c2:	4b12      	ldr	r3, [pc, #72]	; (800660c <HAL_RCC_ClockConfig+0x1c4>)
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	00db      	lsls	r3, r3, #3
 80065d0:	490e      	ldr	r1, [pc, #56]	; (800660c <HAL_RCC_ClockConfig+0x1c4>)
 80065d2:	4313      	orrs	r3, r2
 80065d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80065d6:	f000 f821 	bl	800661c <HAL_RCC_GetSysClockFreq>
 80065da:	4602      	mov	r2, r0
 80065dc:	4b0b      	ldr	r3, [pc, #44]	; (800660c <HAL_RCC_ClockConfig+0x1c4>)
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	091b      	lsrs	r3, r3, #4
 80065e2:	f003 030f 	and.w	r3, r3, #15
 80065e6:	490a      	ldr	r1, [pc, #40]	; (8006610 <HAL_RCC_ClockConfig+0x1c8>)
 80065e8:	5ccb      	ldrb	r3, [r1, r3]
 80065ea:	fa22 f303 	lsr.w	r3, r2, r3
 80065ee:	4a09      	ldr	r2, [pc, #36]	; (8006614 <HAL_RCC_ClockConfig+0x1cc>)
 80065f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80065f2:	4b09      	ldr	r3, [pc, #36]	; (8006618 <HAL_RCC_ClockConfig+0x1d0>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4618      	mov	r0, r3
 80065f8:	f7fb ff08 	bl	800240c <HAL_InitTick>

  return HAL_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3710      	adds	r7, #16
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	40022000 	.word	0x40022000
 800660c:	40021000 	.word	0x40021000
 8006610:	08009d10 	.word	0x08009d10
 8006614:	20000024 	.word	0x20000024
 8006618:	20000028 	.word	0x20000028

0800661c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800661c:	b480      	push	{r7}
 800661e:	b087      	sub	sp, #28
 8006620:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006622:	2300      	movs	r3, #0
 8006624:	60fb      	str	r3, [r7, #12]
 8006626:	2300      	movs	r3, #0
 8006628:	60bb      	str	r3, [r7, #8]
 800662a:	2300      	movs	r3, #0
 800662c:	617b      	str	r3, [r7, #20]
 800662e:	2300      	movs	r3, #0
 8006630:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006632:	2300      	movs	r3, #0
 8006634:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006636:	4b1e      	ldr	r3, [pc, #120]	; (80066b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f003 030c 	and.w	r3, r3, #12
 8006642:	2b04      	cmp	r3, #4
 8006644:	d002      	beq.n	800664c <HAL_RCC_GetSysClockFreq+0x30>
 8006646:	2b08      	cmp	r3, #8
 8006648:	d003      	beq.n	8006652 <HAL_RCC_GetSysClockFreq+0x36>
 800664a:	e027      	b.n	800669c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800664c:	4b19      	ldr	r3, [pc, #100]	; (80066b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800664e:	613b      	str	r3, [r7, #16]
      break;
 8006650:	e027      	b.n	80066a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	0c9b      	lsrs	r3, r3, #18
 8006656:	f003 030f 	and.w	r3, r3, #15
 800665a:	4a17      	ldr	r2, [pc, #92]	; (80066b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800665c:	5cd3      	ldrb	r3, [r2, r3]
 800665e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006666:	2b00      	cmp	r3, #0
 8006668:	d010      	beq.n	800668c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800666a:	4b11      	ldr	r3, [pc, #68]	; (80066b0 <HAL_RCC_GetSysClockFreq+0x94>)
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	0c5b      	lsrs	r3, r3, #17
 8006670:	f003 0301 	and.w	r3, r3, #1
 8006674:	4a11      	ldr	r2, [pc, #68]	; (80066bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8006676:	5cd3      	ldrb	r3, [r2, r3]
 8006678:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a0d      	ldr	r2, [pc, #52]	; (80066b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800667e:	fb03 f202 	mul.w	r2, r3, r2
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	fbb2 f3f3 	udiv	r3, r2, r3
 8006688:	617b      	str	r3, [r7, #20]
 800668a:	e004      	b.n	8006696 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a0c      	ldr	r2, [pc, #48]	; (80066c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006690:	fb02 f303 	mul.w	r3, r2, r3
 8006694:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	613b      	str	r3, [r7, #16]
      break;
 800669a:	e002      	b.n	80066a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800669c:	4b05      	ldr	r3, [pc, #20]	; (80066b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800669e:	613b      	str	r3, [r7, #16]
      break;
 80066a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80066a2:	693b      	ldr	r3, [r7, #16]
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	371c      	adds	r7, #28
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bc80      	pop	{r7}
 80066ac:	4770      	bx	lr
 80066ae:	bf00      	nop
 80066b0:	40021000 	.word	0x40021000
 80066b4:	007a1200 	.word	0x007a1200
 80066b8:	08009d28 	.word	0x08009d28
 80066bc:	08009d38 	.word	0x08009d38
 80066c0:	003d0900 	.word	0x003d0900

080066c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066c4:	b480      	push	{r7}
 80066c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066c8:	4b02      	ldr	r3, [pc, #8]	; (80066d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80066ca:	681b      	ldr	r3, [r3, #0]
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bc80      	pop	{r7}
 80066d2:	4770      	bx	lr
 80066d4:	20000024 	.word	0x20000024

080066d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80066dc:	f7ff fff2 	bl	80066c4 <HAL_RCC_GetHCLKFreq>
 80066e0:	4602      	mov	r2, r0
 80066e2:	4b05      	ldr	r3, [pc, #20]	; (80066f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	0a1b      	lsrs	r3, r3, #8
 80066e8:	f003 0307 	and.w	r3, r3, #7
 80066ec:	4903      	ldr	r1, [pc, #12]	; (80066fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80066ee:	5ccb      	ldrb	r3, [r1, r3]
 80066f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	40021000 	.word	0x40021000
 80066fc:	08009d20 	.word	0x08009d20

08006700 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006704:	f7ff ffde 	bl	80066c4 <HAL_RCC_GetHCLKFreq>
 8006708:	4602      	mov	r2, r0
 800670a:	4b05      	ldr	r3, [pc, #20]	; (8006720 <HAL_RCC_GetPCLK2Freq+0x20>)
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	0adb      	lsrs	r3, r3, #11
 8006710:	f003 0307 	and.w	r3, r3, #7
 8006714:	4903      	ldr	r1, [pc, #12]	; (8006724 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006716:	5ccb      	ldrb	r3, [r1, r3]
 8006718:	fa22 f303 	lsr.w	r3, r2, r3
}
 800671c:	4618      	mov	r0, r3
 800671e:	bd80      	pop	{r7, pc}
 8006720:	40021000 	.word	0x40021000
 8006724:	08009d20 	.word	0x08009d20

08006728 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006730:	4b0a      	ldr	r3, [pc, #40]	; (800675c <RCC_Delay+0x34>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a0a      	ldr	r2, [pc, #40]	; (8006760 <RCC_Delay+0x38>)
 8006736:	fba2 2303 	umull	r2, r3, r2, r3
 800673a:	0a5b      	lsrs	r3, r3, #9
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	fb02 f303 	mul.w	r3, r2, r3
 8006742:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006744:	bf00      	nop
  }
  while (Delay --);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	1e5a      	subs	r2, r3, #1
 800674a:	60fa      	str	r2, [r7, #12]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d1f9      	bne.n	8006744 <RCC_Delay+0x1c>
}
 8006750:	bf00      	nop
 8006752:	bf00      	nop
 8006754:	3714      	adds	r7, #20
 8006756:	46bd      	mov	sp, r7
 8006758:	bc80      	pop	{r7}
 800675a:	4770      	bx	lr
 800675c:	20000024 	.word	0x20000024
 8006760:	10624dd3 	.word	0x10624dd3

08006764 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b086      	sub	sp, #24
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800676c:	2300      	movs	r3, #0
 800676e:	613b      	str	r3, [r7, #16]
 8006770:	2300      	movs	r3, #0
 8006772:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0301 	and.w	r3, r3, #1
 800677c:	2b00      	cmp	r3, #0
 800677e:	d07d      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006780:	2300      	movs	r3, #0
 8006782:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006784:	4b4f      	ldr	r3, [pc, #316]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006786:	69db      	ldr	r3, [r3, #28]
 8006788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800678c:	2b00      	cmp	r3, #0
 800678e:	d10d      	bne.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006790:	4b4c      	ldr	r3, [pc, #304]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006792:	69db      	ldr	r3, [r3, #28]
 8006794:	4a4b      	ldr	r2, [pc, #300]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800679a:	61d3      	str	r3, [r2, #28]
 800679c:	4b49      	ldr	r3, [pc, #292]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800679e:	69db      	ldr	r3, [r3, #28]
 80067a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067a4:	60bb      	str	r3, [r7, #8]
 80067a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067a8:	2301      	movs	r3, #1
 80067aa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067ac:	4b46      	ldr	r3, [pc, #280]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d118      	bne.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80067b8:	4b43      	ldr	r3, [pc, #268]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a42      	ldr	r2, [pc, #264]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80067be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067c4:	f7fb fe64 	bl	8002490 <HAL_GetTick>
 80067c8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067ca:	e008      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067cc:	f7fb fe60 	bl	8002490 <HAL_GetTick>
 80067d0:	4602      	mov	r2, r0
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	2b64      	cmp	r3, #100	; 0x64
 80067d8:	d901      	bls.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80067da:	2303      	movs	r3, #3
 80067dc:	e06d      	b.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067de:	4b3a      	ldr	r3, [pc, #232]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d0f0      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80067ea:	4b36      	ldr	r3, [pc, #216]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067f2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d02e      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	429a      	cmp	r2, r3
 8006806:	d027      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006808:	4b2e      	ldr	r3, [pc, #184]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800680a:	6a1b      	ldr	r3, [r3, #32]
 800680c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006810:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006812:	4b2e      	ldr	r3, [pc, #184]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006814:	2201      	movs	r2, #1
 8006816:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006818:	4b2c      	ldr	r3, [pc, #176]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800681a:	2200      	movs	r2, #0
 800681c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800681e:	4a29      	ldr	r2, [pc, #164]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f003 0301 	and.w	r3, r3, #1
 800682a:	2b00      	cmp	r3, #0
 800682c:	d014      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800682e:	f7fb fe2f 	bl	8002490 <HAL_GetTick>
 8006832:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006834:	e00a      	b.n	800684c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006836:	f7fb fe2b 	bl	8002490 <HAL_GetTick>
 800683a:	4602      	mov	r2, r0
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	f241 3288 	movw	r2, #5000	; 0x1388
 8006844:	4293      	cmp	r3, r2
 8006846:	d901      	bls.n	800684c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006848:	2303      	movs	r3, #3
 800684a:	e036      	b.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800684c:	4b1d      	ldr	r3, [pc, #116]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800684e:	6a1b      	ldr	r3, [r3, #32]
 8006850:	f003 0302 	and.w	r3, r3, #2
 8006854:	2b00      	cmp	r3, #0
 8006856:	d0ee      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006858:	4b1a      	ldr	r3, [pc, #104]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800685a:	6a1b      	ldr	r3, [r3, #32]
 800685c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	4917      	ldr	r1, [pc, #92]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006866:	4313      	orrs	r3, r2
 8006868:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800686a:	7dfb      	ldrb	r3, [r7, #23]
 800686c:	2b01      	cmp	r3, #1
 800686e:	d105      	bne.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006870:	4b14      	ldr	r3, [pc, #80]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006872:	69db      	ldr	r3, [r3, #28]
 8006874:	4a13      	ldr	r2, [pc, #76]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006876:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800687a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0302 	and.w	r3, r3, #2
 8006884:	2b00      	cmp	r3, #0
 8006886:	d008      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006888:	4b0e      	ldr	r3, [pc, #56]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	490b      	ldr	r1, [pc, #44]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006896:	4313      	orrs	r3, r2
 8006898:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 0310 	and.w	r3, r3, #16
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d008      	beq.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80068a6:	4b07      	ldr	r3, [pc, #28]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	4904      	ldr	r1, [pc, #16]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068b4:	4313      	orrs	r3, r2
 80068b6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3718      	adds	r7, #24
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	40021000 	.word	0x40021000
 80068c8:	40007000 	.word	0x40007000
 80068cc:	42420440 	.word	0x42420440

080068d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d101      	bne.n	80068e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e041      	b.n	8006966 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d106      	bne.n	80068fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f7fb fbe4 	bl	80020c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2202      	movs	r2, #2
 8006900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	3304      	adds	r3, #4
 800690c:	4619      	mov	r1, r3
 800690e:	4610      	mov	r0, r2
 8006910:	f000 f992 	bl	8006c38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	3708      	adds	r7, #8
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
	...

08006970 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d109      	bne.n	8006994 <HAL_TIM_PWM_Start+0x24>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006986:	b2db      	uxtb	r3, r3
 8006988:	2b01      	cmp	r3, #1
 800698a:	bf14      	ite	ne
 800698c:	2301      	movne	r3, #1
 800698e:	2300      	moveq	r3, #0
 8006990:	b2db      	uxtb	r3, r3
 8006992:	e022      	b.n	80069da <HAL_TIM_PWM_Start+0x6a>
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	2b04      	cmp	r3, #4
 8006998:	d109      	bne.n	80069ae <HAL_TIM_PWM_Start+0x3e>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	bf14      	ite	ne
 80069a6:	2301      	movne	r3, #1
 80069a8:	2300      	moveq	r3, #0
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	e015      	b.n	80069da <HAL_TIM_PWM_Start+0x6a>
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	2b08      	cmp	r3, #8
 80069b2:	d109      	bne.n	80069c8 <HAL_TIM_PWM_Start+0x58>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	2b01      	cmp	r3, #1
 80069be:	bf14      	ite	ne
 80069c0:	2301      	movne	r3, #1
 80069c2:	2300      	moveq	r3, #0
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	e008      	b.n	80069da <HAL_TIM_PWM_Start+0x6a>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	bf14      	ite	ne
 80069d4:	2301      	movne	r3, #1
 80069d6:	2300      	moveq	r3, #0
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d001      	beq.n	80069e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e05e      	b.n	8006aa0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d104      	bne.n	80069f2 <HAL_TIM_PWM_Start+0x82>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2202      	movs	r2, #2
 80069ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069f0:	e013      	b.n	8006a1a <HAL_TIM_PWM_Start+0xaa>
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	2b04      	cmp	r3, #4
 80069f6:	d104      	bne.n	8006a02 <HAL_TIM_PWM_Start+0x92>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2202      	movs	r2, #2
 80069fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a00:	e00b      	b.n	8006a1a <HAL_TIM_PWM_Start+0xaa>
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	2b08      	cmp	r3, #8
 8006a06:	d104      	bne.n	8006a12 <HAL_TIM_PWM_Start+0xa2>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2202      	movs	r2, #2
 8006a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a10:	e003      	b.n	8006a1a <HAL_TIM_PWM_Start+0xaa>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2202      	movs	r2, #2
 8006a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	6839      	ldr	r1, [r7, #0]
 8006a22:	4618      	mov	r0, r3
 8006a24:	f000 faf2 	bl	800700c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a1e      	ldr	r2, [pc, #120]	; (8006aa8 <HAL_TIM_PWM_Start+0x138>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d107      	bne.n	8006a42 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a18      	ldr	r2, [pc, #96]	; (8006aa8 <HAL_TIM_PWM_Start+0x138>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d00e      	beq.n	8006a6a <HAL_TIM_PWM_Start+0xfa>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a54:	d009      	beq.n	8006a6a <HAL_TIM_PWM_Start+0xfa>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a14      	ldr	r2, [pc, #80]	; (8006aac <HAL_TIM_PWM_Start+0x13c>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d004      	beq.n	8006a6a <HAL_TIM_PWM_Start+0xfa>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a12      	ldr	r2, [pc, #72]	; (8006ab0 <HAL_TIM_PWM_Start+0x140>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d111      	bne.n	8006a8e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	f003 0307 	and.w	r3, r3, #7
 8006a74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2b06      	cmp	r3, #6
 8006a7a:	d010      	beq.n	8006a9e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f042 0201 	orr.w	r2, r2, #1
 8006a8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a8c:	e007      	b.n	8006a9e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f042 0201 	orr.w	r2, r2, #1
 8006a9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3710      	adds	r7, #16
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	40012c00 	.word	0x40012c00
 8006aac:	40000400 	.word	0x40000400
 8006ab0:	40000800 	.word	0x40000800

08006ab4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b086      	sub	sp, #24
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d101      	bne.n	8006ad2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006ace:	2302      	movs	r3, #2
 8006ad0:	e0ae      	b.n	8006c30 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2b0c      	cmp	r3, #12
 8006ade:	f200 809f 	bhi.w	8006c20 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006ae2:	a201      	add	r2, pc, #4	; (adr r2, 8006ae8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae8:	08006b1d 	.word	0x08006b1d
 8006aec:	08006c21 	.word	0x08006c21
 8006af0:	08006c21 	.word	0x08006c21
 8006af4:	08006c21 	.word	0x08006c21
 8006af8:	08006b5d 	.word	0x08006b5d
 8006afc:	08006c21 	.word	0x08006c21
 8006b00:	08006c21 	.word	0x08006c21
 8006b04:	08006c21 	.word	0x08006c21
 8006b08:	08006b9f 	.word	0x08006b9f
 8006b0c:	08006c21 	.word	0x08006c21
 8006b10:	08006c21 	.word	0x08006c21
 8006b14:	08006c21 	.word	0x08006c21
 8006b18:	08006bdf 	.word	0x08006bdf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68b9      	ldr	r1, [r7, #8]
 8006b22:	4618      	mov	r0, r3
 8006b24:	f000 f8ea 	bl	8006cfc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	699a      	ldr	r2, [r3, #24]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f042 0208 	orr.w	r2, r2, #8
 8006b36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	699a      	ldr	r2, [r3, #24]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f022 0204 	bic.w	r2, r2, #4
 8006b46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	6999      	ldr	r1, [r3, #24]
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	691a      	ldr	r2, [r3, #16]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	430a      	orrs	r2, r1
 8006b58:	619a      	str	r2, [r3, #24]
      break;
 8006b5a:	e064      	b.n	8006c26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	68b9      	ldr	r1, [r7, #8]
 8006b62:	4618      	mov	r0, r3
 8006b64:	f000 f930 	bl	8006dc8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	699a      	ldr	r2, [r3, #24]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	699a      	ldr	r2, [r3, #24]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	6999      	ldr	r1, [r3, #24]
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	021a      	lsls	r2, r3, #8
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	430a      	orrs	r2, r1
 8006b9a:	619a      	str	r2, [r3, #24]
      break;
 8006b9c:	e043      	b.n	8006c26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68b9      	ldr	r1, [r7, #8]
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f000 f979 	bl	8006e9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	69da      	ldr	r2, [r3, #28]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f042 0208 	orr.w	r2, r2, #8
 8006bb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	69da      	ldr	r2, [r3, #28]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f022 0204 	bic.w	r2, r2, #4
 8006bc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	69d9      	ldr	r1, [r3, #28]
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	691a      	ldr	r2, [r3, #16]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	430a      	orrs	r2, r1
 8006bda:	61da      	str	r2, [r3, #28]
      break;
 8006bdc:	e023      	b.n	8006c26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68b9      	ldr	r1, [r7, #8]
 8006be4:	4618      	mov	r0, r3
 8006be6:	f000 f9c3 	bl	8006f70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	69da      	ldr	r2, [r3, #28]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	69da      	ldr	r2, [r3, #28]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	69d9      	ldr	r1, [r3, #28]
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	021a      	lsls	r2, r3, #8
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	430a      	orrs	r2, r1
 8006c1c:	61da      	str	r2, [r3, #28]
      break;
 8006c1e:	e002      	b.n	8006c26 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	75fb      	strb	r3, [r7, #23]
      break;
 8006c24:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3718      	adds	r7, #24
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b085      	sub	sp, #20
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4a29      	ldr	r2, [pc, #164]	; (8006cf0 <TIM_Base_SetConfig+0xb8>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d00b      	beq.n	8006c68 <TIM_Base_SetConfig+0x30>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c56:	d007      	beq.n	8006c68 <TIM_Base_SetConfig+0x30>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4a26      	ldr	r2, [pc, #152]	; (8006cf4 <TIM_Base_SetConfig+0xbc>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d003      	beq.n	8006c68 <TIM_Base_SetConfig+0x30>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a25      	ldr	r2, [pc, #148]	; (8006cf8 <TIM_Base_SetConfig+0xc0>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d108      	bne.n	8006c7a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a1c      	ldr	r2, [pc, #112]	; (8006cf0 <TIM_Base_SetConfig+0xb8>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d00b      	beq.n	8006c9a <TIM_Base_SetConfig+0x62>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c88:	d007      	beq.n	8006c9a <TIM_Base_SetConfig+0x62>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a19      	ldr	r2, [pc, #100]	; (8006cf4 <TIM_Base_SetConfig+0xbc>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d003      	beq.n	8006c9a <TIM_Base_SetConfig+0x62>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4a18      	ldr	r2, [pc, #96]	; (8006cf8 <TIM_Base_SetConfig+0xc0>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d108      	bne.n	8006cac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ca0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	68fa      	ldr	r2, [r7, #12]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	695b      	ldr	r3, [r3, #20]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	689a      	ldr	r2, [r3, #8]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a07      	ldr	r2, [pc, #28]	; (8006cf0 <TIM_Base_SetConfig+0xb8>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d103      	bne.n	8006ce0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	691a      	ldr	r2, [r3, #16]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	615a      	str	r2, [r3, #20]
}
 8006ce6:	bf00      	nop
 8006ce8:	3714      	adds	r7, #20
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bc80      	pop	{r7}
 8006cee:	4770      	bx	lr
 8006cf0:	40012c00 	.word	0x40012c00
 8006cf4:	40000400 	.word	0x40000400
 8006cf8:	40000800 	.word	0x40000800

08006cfc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b087      	sub	sp, #28
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6a1b      	ldr	r3, [r3, #32]
 8006d0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6a1b      	ldr	r3, [r3, #32]
 8006d10:	f023 0201 	bic.w	r2, r3, #1
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	699b      	ldr	r3, [r3, #24]
 8006d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f023 0303 	bic.w	r3, r3, #3
 8006d32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	f023 0302 	bic.w	r3, r3, #2
 8006d44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	697a      	ldr	r2, [r7, #20]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4a1c      	ldr	r2, [pc, #112]	; (8006dc4 <TIM_OC1_SetConfig+0xc8>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d10c      	bne.n	8006d72 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	f023 0308 	bic.w	r3, r3, #8
 8006d5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	697a      	ldr	r2, [r7, #20]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	f023 0304 	bic.w	r3, r3, #4
 8006d70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a13      	ldr	r2, [pc, #76]	; (8006dc4 <TIM_OC1_SetConfig+0xc8>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d111      	bne.n	8006d9e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	693a      	ldr	r2, [r7, #16]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	699b      	ldr	r3, [r3, #24]
 8006d98:	693a      	ldr	r2, [r7, #16]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	693a      	ldr	r2, [r7, #16]
 8006da2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	68fa      	ldr	r2, [r7, #12]
 8006da8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	685a      	ldr	r2, [r3, #4]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	697a      	ldr	r2, [r7, #20]
 8006db6:	621a      	str	r2, [r3, #32]
}
 8006db8:	bf00      	nop
 8006dba:	371c      	adds	r7, #28
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bc80      	pop	{r7}
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop
 8006dc4:	40012c00 	.word	0x40012c00

08006dc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b087      	sub	sp, #28
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a1b      	ldr	r3, [r3, #32]
 8006dd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a1b      	ldr	r3, [r3, #32]
 8006ddc:	f023 0210 	bic.w	r2, r3, #16
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	699b      	ldr	r3, [r3, #24]
 8006dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	021b      	lsls	r3, r3, #8
 8006e06:	68fa      	ldr	r2, [r7, #12]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	f023 0320 	bic.w	r3, r3, #32
 8006e12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	011b      	lsls	r3, r3, #4
 8006e1a:	697a      	ldr	r2, [r7, #20]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a1d      	ldr	r2, [pc, #116]	; (8006e98 <TIM_OC2_SetConfig+0xd0>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d10d      	bne.n	8006e44 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	011b      	lsls	r3, r3, #4
 8006e36:	697a      	ldr	r2, [r7, #20]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e42:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a14      	ldr	r2, [pc, #80]	; (8006e98 <TIM_OC2_SetConfig+0xd0>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d113      	bne.n	8006e74 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	695b      	ldr	r3, [r3, #20]
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	693a      	ldr	r2, [r7, #16]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	699b      	ldr	r3, [r3, #24]
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	693a      	ldr	r2, [r7, #16]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	693a      	ldr	r2, [r7, #16]
 8006e78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	68fa      	ldr	r2, [r7, #12]
 8006e7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	685a      	ldr	r2, [r3, #4]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	697a      	ldr	r2, [r7, #20]
 8006e8c:	621a      	str	r2, [r3, #32]
}
 8006e8e:	bf00      	nop
 8006e90:	371c      	adds	r7, #28
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bc80      	pop	{r7}
 8006e96:	4770      	bx	lr
 8006e98:	40012c00 	.word	0x40012c00

08006e9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b087      	sub	sp, #28
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a1b      	ldr	r3, [r3, #32]
 8006eaa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6a1b      	ldr	r3, [r3, #32]
 8006eb0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	69db      	ldr	r3, [r3, #28]
 8006ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f023 0303 	bic.w	r3, r3, #3
 8006ed2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ee4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	021b      	lsls	r3, r3, #8
 8006eec:	697a      	ldr	r2, [r7, #20]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a1d      	ldr	r2, [pc, #116]	; (8006f6c <TIM_OC3_SetConfig+0xd0>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d10d      	bne.n	8006f16 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	021b      	lsls	r3, r3, #8
 8006f08:	697a      	ldr	r2, [r7, #20]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4a14      	ldr	r2, [pc, #80]	; (8006f6c <TIM_OC3_SetConfig+0xd0>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d113      	bne.n	8006f46 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	695b      	ldr	r3, [r3, #20]
 8006f32:	011b      	lsls	r3, r3, #4
 8006f34:	693a      	ldr	r2, [r7, #16]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	699b      	ldr	r3, [r3, #24]
 8006f3e:	011b      	lsls	r3, r3, #4
 8006f40:	693a      	ldr	r2, [r7, #16]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	693a      	ldr	r2, [r7, #16]
 8006f4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	685a      	ldr	r2, [r3, #4]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	697a      	ldr	r2, [r7, #20]
 8006f5e:	621a      	str	r2, [r3, #32]
}
 8006f60:	bf00      	nop
 8006f62:	371c      	adds	r7, #28
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bc80      	pop	{r7}
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	40012c00 	.word	0x40012c00

08006f70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b087      	sub	sp, #28
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a1b      	ldr	r3, [r3, #32]
 8006f7e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6a1b      	ldr	r3, [r3, #32]
 8006f84:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	69db      	ldr	r3, [r3, #28]
 8006f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	021b      	lsls	r3, r3, #8
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	031b      	lsls	r3, r3, #12
 8006fc2:	693a      	ldr	r2, [r7, #16]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a0f      	ldr	r2, [pc, #60]	; (8007008 <TIM_OC4_SetConfig+0x98>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d109      	bne.n	8006fe4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fd6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	695b      	ldr	r3, [r3, #20]
 8006fdc:	019b      	lsls	r3, r3, #6
 8006fde:	697a      	ldr	r2, [r7, #20]
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	697a      	ldr	r2, [r7, #20]
 8006fe8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	685a      	ldr	r2, [r3, #4]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	693a      	ldr	r2, [r7, #16]
 8006ffc:	621a      	str	r2, [r3, #32]
}
 8006ffe:	bf00      	nop
 8007000:	371c      	adds	r7, #28
 8007002:	46bd      	mov	sp, r7
 8007004:	bc80      	pop	{r7}
 8007006:	4770      	bx	lr
 8007008:	40012c00 	.word	0x40012c00

0800700c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800700c:	b480      	push	{r7}
 800700e:	b087      	sub	sp, #28
 8007010:	af00      	add	r7, sp, #0
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	f003 031f 	and.w	r3, r3, #31
 800701e:	2201      	movs	r2, #1
 8007020:	fa02 f303 	lsl.w	r3, r2, r3
 8007024:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6a1a      	ldr	r2, [r3, #32]
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	43db      	mvns	r3, r3
 800702e:	401a      	ands	r2, r3
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6a1a      	ldr	r2, [r3, #32]
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	f003 031f 	and.w	r3, r3, #31
 800703e:	6879      	ldr	r1, [r7, #4]
 8007040:	fa01 f303 	lsl.w	r3, r1, r3
 8007044:	431a      	orrs	r2, r3
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	621a      	str	r2, [r3, #32]
}
 800704a:	bf00      	nop
 800704c:	371c      	adds	r7, #28
 800704e:	46bd      	mov	sp, r7
 8007050:	bc80      	pop	{r7}
 8007052:	4770      	bx	lr

08007054 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007064:	2b01      	cmp	r3, #1
 8007066:	d101      	bne.n	800706c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007068:	2302      	movs	r3, #2
 800706a:	e046      	b.n	80070fa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2202      	movs	r2, #2
 8007078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007092:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	4313      	orrs	r3, r2
 800709c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a16      	ldr	r2, [pc, #88]	; (8007104 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d00e      	beq.n	80070ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070b8:	d009      	beq.n	80070ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a12      	ldr	r2, [pc, #72]	; (8007108 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d004      	beq.n	80070ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a10      	ldr	r2, [pc, #64]	; (800710c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d10c      	bne.n	80070e8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	68ba      	ldr	r2, [r7, #8]
 80070dc:	4313      	orrs	r3, r2
 80070de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	68ba      	ldr	r2, [r7, #8]
 80070e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3714      	adds	r7, #20
 80070fe:	46bd      	mov	sp, r7
 8007100:	bc80      	pop	{r7}
 8007102:	4770      	bx	lr
 8007104:	40012c00 	.word	0x40012c00
 8007108:	40000400 	.word	0x40000400
 800710c:	40000800 	.word	0x40000800

08007110 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007110:	b480      	push	{r7}
 8007112:	b085      	sub	sp, #20
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800711a:	2300      	movs	r3, #0
 800711c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007124:	2b01      	cmp	r3, #1
 8007126:	d101      	bne.n	800712c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007128:	2302      	movs	r3, #2
 800712a:	e03d      	b.n	80071a8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	4313      	orrs	r3, r2
 8007140:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	4313      	orrs	r3, r2
 800714e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	4313      	orrs	r3, r2
 800715c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4313      	orrs	r3, r2
 800716a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	691b      	ldr	r3, [r3, #16]
 8007176:	4313      	orrs	r3, r2
 8007178:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	695b      	ldr	r3, [r3, #20]
 8007184:	4313      	orrs	r3, r2
 8007186:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	69db      	ldr	r3, [r3, #28]
 8007192:	4313      	orrs	r3, r2
 8007194:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	68fa      	ldr	r2, [r7, #12]
 800719c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071a6:	2300      	movs	r3, #0
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3714      	adds	r7, #20
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bc80      	pop	{r7}
 80071b0:	4770      	bx	lr

080071b2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b082      	sub	sp, #8
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d101      	bne.n	80071c4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	e042      	b.n	800724a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d106      	bne.n	80071de <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f7fa fffb 	bl	80021d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2224      	movs	r2, #36	; 0x24
 80071e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	68da      	ldr	r2, [r3, #12]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80071f4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 ff8a 	bl	8008110 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	691a      	ldr	r2, [r3, #16]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800720a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	695a      	ldr	r2, [r3, #20]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800721a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	68da      	ldr	r2, [r3, #12]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800722a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2220      	movs	r2, #32
 8007236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2220      	movs	r2, #32
 800723e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3708      	adds	r7, #8
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007252:	b580      	push	{r7, lr}
 8007254:	b08a      	sub	sp, #40	; 0x28
 8007256:	af02      	add	r7, sp, #8
 8007258:	60f8      	str	r0, [r7, #12]
 800725a:	60b9      	str	r1, [r7, #8]
 800725c:	603b      	str	r3, [r7, #0]
 800725e:	4613      	mov	r3, r2
 8007260:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007262:	2300      	movs	r3, #0
 8007264:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800726c:	b2db      	uxtb	r3, r3
 800726e:	2b20      	cmp	r3, #32
 8007270:	d16d      	bne.n	800734e <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d002      	beq.n	800727e <HAL_UART_Transmit+0x2c>
 8007278:	88fb      	ldrh	r3, [r7, #6]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d101      	bne.n	8007282 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	e066      	b.n	8007350 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2200      	movs	r2, #0
 8007286:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2221      	movs	r2, #33	; 0x21
 800728c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007290:	f7fb f8fe 	bl	8002490 <HAL_GetTick>
 8007294:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	88fa      	ldrh	r2, [r7, #6]
 800729a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	88fa      	ldrh	r2, [r7, #6]
 80072a0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072aa:	d108      	bne.n	80072be <HAL_UART_Transmit+0x6c>
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	691b      	ldr	r3, [r3, #16]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d104      	bne.n	80072be <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80072b4:	2300      	movs	r3, #0
 80072b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	61bb      	str	r3, [r7, #24]
 80072bc:	e003      	b.n	80072c6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072c2:	2300      	movs	r3, #0
 80072c4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80072c6:	e02a      	b.n	800731e <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	9300      	str	r3, [sp, #0]
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	2200      	movs	r2, #0
 80072d0:	2180      	movs	r1, #128	; 0x80
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	f000 fc52 	bl	8007b7c <UART_WaitOnFlagUntilTimeout>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d001      	beq.n	80072e2 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80072de:	2303      	movs	r3, #3
 80072e0:	e036      	b.n	8007350 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80072e2:	69fb      	ldr	r3, [r7, #28]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d10b      	bne.n	8007300 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	881b      	ldrh	r3, [r3, #0]
 80072ec:	461a      	mov	r2, r3
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072f6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	3302      	adds	r3, #2
 80072fc:	61bb      	str	r3, [r7, #24]
 80072fe:	e007      	b.n	8007310 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007300:	69fb      	ldr	r3, [r7, #28]
 8007302:	781a      	ldrb	r2, [r3, #0]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	3301      	adds	r3, #1
 800730e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007314:	b29b      	uxth	r3, r3
 8007316:	3b01      	subs	r3, #1
 8007318:	b29a      	uxth	r2, r3
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007322:	b29b      	uxth	r3, r3
 8007324:	2b00      	cmp	r3, #0
 8007326:	d1cf      	bne.n	80072c8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	9300      	str	r3, [sp, #0]
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	2200      	movs	r2, #0
 8007330:	2140      	movs	r1, #64	; 0x40
 8007332:	68f8      	ldr	r0, [r7, #12]
 8007334:	f000 fc22 	bl	8007b7c <UART_WaitOnFlagUntilTimeout>
 8007338:	4603      	mov	r3, r0
 800733a:	2b00      	cmp	r3, #0
 800733c:	d001      	beq.n	8007342 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800733e:	2303      	movs	r3, #3
 8007340:	e006      	b.n	8007350 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2220      	movs	r2, #32
 8007346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800734a:	2300      	movs	r3, #0
 800734c:	e000      	b.n	8007350 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800734e:	2302      	movs	r3, #2
  }
}
 8007350:	4618      	mov	r0, r3
 8007352:	3720      	adds	r7, #32
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b08c      	sub	sp, #48	; 0x30
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	4613      	mov	r3, r2
 8007364:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800736c:	b2db      	uxtb	r3, r3
 800736e:	2b20      	cmp	r3, #32
 8007370:	d14a      	bne.n	8007408 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d002      	beq.n	800737e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8007378:	88fb      	ldrh	r3, [r7, #6]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d101      	bne.n	8007382 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	e043      	b.n	800740a <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2201      	movs	r2, #1
 8007386:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2200      	movs	r2, #0
 800738c:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800738e:	88fb      	ldrh	r3, [r7, #6]
 8007390:	461a      	mov	r2, r3
 8007392:	68b9      	ldr	r1, [r7, #8]
 8007394:	68f8      	ldr	r0, [r7, #12]
 8007396:	f000 fc5f 	bl	8007c58 <UART_Start_Receive_DMA>
 800739a:	4603      	mov	r3, r0
 800739c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80073a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d12c      	bne.n	8007402 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d125      	bne.n	80073fc <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80073b0:	2300      	movs	r3, #0
 80073b2:	613b      	str	r3, [r7, #16]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	613b      	str	r3, [r7, #16]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	613b      	str	r3, [r7, #16]
 80073c4:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	330c      	adds	r3, #12
 80073cc:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ce:	69bb      	ldr	r3, [r7, #24]
 80073d0:	e853 3f00 	ldrex	r3, [r3]
 80073d4:	617b      	str	r3, [r7, #20]
   return(result);
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	f043 0310 	orr.w	r3, r3, #16
 80073dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	330c      	adds	r3, #12
 80073e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073e6:	627a      	str	r2, [r7, #36]	; 0x24
 80073e8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ea:	6a39      	ldr	r1, [r7, #32]
 80073ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073ee:	e841 2300 	strex	r3, r2, [r1]
 80073f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d1e5      	bne.n	80073c6 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 80073fa:	e002      	b.n	8007402 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8007402:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007406:	e000      	b.n	800740a <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8007408:	2302      	movs	r3, #2
  }
}
 800740a:	4618      	mov	r0, r3
 800740c:	3730      	adds	r7, #48	; 0x30
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
	...

08007414 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b0ba      	sub	sp, #232	; 0xe8
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	695b      	ldr	r3, [r3, #20]
 8007436:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800743a:	2300      	movs	r3, #0
 800743c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007440:	2300      	movs	r3, #0
 8007442:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800744a:	f003 030f 	and.w	r3, r3, #15
 800744e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007452:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007456:	2b00      	cmp	r3, #0
 8007458:	d10f      	bne.n	800747a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800745a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800745e:	f003 0320 	and.w	r3, r3, #32
 8007462:	2b00      	cmp	r3, #0
 8007464:	d009      	beq.n	800747a <HAL_UART_IRQHandler+0x66>
 8007466:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800746a:	f003 0320 	and.w	r3, r3, #32
 800746e:	2b00      	cmp	r3, #0
 8007470:	d003      	beq.n	800747a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 fd8e 	bl	8007f94 <UART_Receive_IT>
      return;
 8007478:	e25b      	b.n	8007932 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800747a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800747e:	2b00      	cmp	r3, #0
 8007480:	f000 80de 	beq.w	8007640 <HAL_UART_IRQHandler+0x22c>
 8007484:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007488:	f003 0301 	and.w	r3, r3, #1
 800748c:	2b00      	cmp	r3, #0
 800748e:	d106      	bne.n	800749e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007494:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007498:	2b00      	cmp	r3, #0
 800749a:	f000 80d1 	beq.w	8007640 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800749e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074a2:	f003 0301 	and.w	r3, r3, #1
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00b      	beq.n	80074c2 <HAL_UART_IRQHandler+0xae>
 80074aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d005      	beq.n	80074c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074ba:	f043 0201 	orr.w	r2, r3, #1
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80074c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074c6:	f003 0304 	and.w	r3, r3, #4
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d00b      	beq.n	80074e6 <HAL_UART_IRQHandler+0xd2>
 80074ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074d2:	f003 0301 	and.w	r3, r3, #1
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d005      	beq.n	80074e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074de:	f043 0202 	orr.w	r2, r3, #2
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80074e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074ea:	f003 0302 	and.w	r3, r3, #2
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d00b      	beq.n	800750a <HAL_UART_IRQHandler+0xf6>
 80074f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074f6:	f003 0301 	and.w	r3, r3, #1
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d005      	beq.n	800750a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007502:	f043 0204 	orr.w	r2, r3, #4
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800750a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800750e:	f003 0308 	and.w	r3, r3, #8
 8007512:	2b00      	cmp	r3, #0
 8007514:	d011      	beq.n	800753a <HAL_UART_IRQHandler+0x126>
 8007516:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800751a:	f003 0320 	and.w	r3, r3, #32
 800751e:	2b00      	cmp	r3, #0
 8007520:	d105      	bne.n	800752e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007522:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007526:	f003 0301 	and.w	r3, r3, #1
 800752a:	2b00      	cmp	r3, #0
 800752c:	d005      	beq.n	800753a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007532:	f043 0208 	orr.w	r2, r3, #8
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800753e:	2b00      	cmp	r3, #0
 8007540:	f000 81f2 	beq.w	8007928 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007548:	f003 0320 	and.w	r3, r3, #32
 800754c:	2b00      	cmp	r3, #0
 800754e:	d008      	beq.n	8007562 <HAL_UART_IRQHandler+0x14e>
 8007550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007554:	f003 0320 	and.w	r3, r3, #32
 8007558:	2b00      	cmp	r3, #0
 800755a:	d002      	beq.n	8007562 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 fd19 	bl	8007f94 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	695b      	ldr	r3, [r3, #20]
 8007568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800756c:	2b00      	cmp	r3, #0
 800756e:	bf14      	ite	ne
 8007570:	2301      	movne	r3, #1
 8007572:	2300      	moveq	r3, #0
 8007574:	b2db      	uxtb	r3, r3
 8007576:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800757e:	f003 0308 	and.w	r3, r3, #8
 8007582:	2b00      	cmp	r3, #0
 8007584:	d103      	bne.n	800758e <HAL_UART_IRQHandler+0x17a>
 8007586:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800758a:	2b00      	cmp	r3, #0
 800758c:	d04f      	beq.n	800762e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 fc23 	bl	8007dda <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	695b      	ldr	r3, [r3, #20]
 800759a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d041      	beq.n	8007626 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	3314      	adds	r3, #20
 80075a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80075b0:	e853 3f00 	ldrex	r3, [r3]
 80075b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80075b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	3314      	adds	r3, #20
 80075ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80075ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80075d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80075da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80075de:	e841 2300 	strex	r3, r2, [r1]
 80075e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80075e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d1d9      	bne.n	80075a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d013      	beq.n	800761e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075fa:	4a7e      	ldr	r2, [pc, #504]	; (80077f4 <HAL_UART_IRQHandler+0x3e0>)
 80075fc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007602:	4618      	mov	r0, r3
 8007604:	f7fb fde6 	bl	80031d4 <HAL_DMA_Abort_IT>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d016      	beq.n	800763c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007618:	4610      	mov	r0, r2
 800761a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800761c:	e00e      	b.n	800763c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 f9a5 	bl	800796e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007624:	e00a      	b.n	800763c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 f9a1 	bl	800796e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800762c:	e006      	b.n	800763c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 f99d 	bl	800796e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800763a:	e175      	b.n	8007928 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800763c:	bf00      	nop
    return;
 800763e:	e173      	b.n	8007928 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007644:	2b01      	cmp	r3, #1
 8007646:	f040 814f 	bne.w	80078e8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800764a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800764e:	f003 0310 	and.w	r3, r3, #16
 8007652:	2b00      	cmp	r3, #0
 8007654:	f000 8148 	beq.w	80078e8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800765c:	f003 0310 	and.w	r3, r3, #16
 8007660:	2b00      	cmp	r3, #0
 8007662:	f000 8141 	beq.w	80078e8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007666:	2300      	movs	r3, #0
 8007668:	60bb      	str	r3, [r7, #8]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	60bb      	str	r3, [r7, #8]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	60bb      	str	r3, [r7, #8]
 800767a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	695b      	ldr	r3, [r3, #20]
 8007682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007686:	2b00      	cmp	r3, #0
 8007688:	f000 80b6 	beq.w	80077f8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007698:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800769c:	2b00      	cmp	r3, #0
 800769e:	f000 8145 	beq.w	800792c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80076a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80076aa:	429a      	cmp	r2, r3
 80076ac:	f080 813e 	bcs.w	800792c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80076b6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076bc:	699b      	ldr	r3, [r3, #24]
 80076be:	2b20      	cmp	r3, #32
 80076c0:	f000 8088 	beq.w	80077d4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	330c      	adds	r3, #12
 80076ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80076d2:	e853 3f00 	ldrex	r3, [r3]
 80076d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80076da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80076de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	330c      	adds	r3, #12
 80076ec:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80076f0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80076f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80076fc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007700:	e841 2300 	strex	r3, r2, [r1]
 8007704:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007708:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800770c:	2b00      	cmp	r3, #0
 800770e:	d1d9      	bne.n	80076c4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	3314      	adds	r3, #20
 8007716:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007718:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800771a:	e853 3f00 	ldrex	r3, [r3]
 800771e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007720:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007722:	f023 0301 	bic.w	r3, r3, #1
 8007726:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	3314      	adds	r3, #20
 8007730:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007734:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007738:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800773a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800773c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007740:	e841 2300 	strex	r3, r2, [r1]
 8007744:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007746:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007748:	2b00      	cmp	r3, #0
 800774a:	d1e1      	bne.n	8007710 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	3314      	adds	r3, #20
 8007752:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007754:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007756:	e853 3f00 	ldrex	r3, [r3]
 800775a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800775c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800775e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007762:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	3314      	adds	r3, #20
 800776c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007770:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007772:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007774:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007776:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007778:	e841 2300 	strex	r3, r2, [r1]
 800777c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800777e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007780:	2b00      	cmp	r3, #0
 8007782:	d1e3      	bne.n	800774c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2220      	movs	r2, #32
 8007788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	330c      	adds	r3, #12
 8007798:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800779c:	e853 3f00 	ldrex	r3, [r3]
 80077a0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80077a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077a4:	f023 0310 	bic.w	r3, r3, #16
 80077a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	330c      	adds	r3, #12
 80077b2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80077b6:	65ba      	str	r2, [r7, #88]	; 0x58
 80077b8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80077bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80077be:	e841 2300 	strex	r3, r2, [r1]
 80077c2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80077c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d1e3      	bne.n	8007792 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7fb fcc4 	bl	800315c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2202      	movs	r2, #2
 80077d8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	1ad3      	subs	r3, r2, r3
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	4619      	mov	r1, r3
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f7f9 fbe8 	bl	8000fc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80077f0:	e09c      	b.n	800792c <HAL_UART_IRQHandler+0x518>
 80077f2:	bf00      	nop
 80077f4:	08007e9f 	.word	0x08007e9f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007800:	b29b      	uxth	r3, r3
 8007802:	1ad3      	subs	r3, r2, r3
 8007804:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800780c:	b29b      	uxth	r3, r3
 800780e:	2b00      	cmp	r3, #0
 8007810:	f000 808e 	beq.w	8007930 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007814:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007818:	2b00      	cmp	r3, #0
 800781a:	f000 8089 	beq.w	8007930 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	330c      	adds	r3, #12
 8007824:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007828:	e853 3f00 	ldrex	r3, [r3]
 800782c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800782e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007830:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007834:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	330c      	adds	r3, #12
 800783e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007842:	647a      	str	r2, [r7, #68]	; 0x44
 8007844:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007846:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007848:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800784a:	e841 2300 	strex	r3, r2, [r1]
 800784e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007852:	2b00      	cmp	r3, #0
 8007854:	d1e3      	bne.n	800781e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	3314      	adds	r3, #20
 800785c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007860:	e853 3f00 	ldrex	r3, [r3]
 8007864:	623b      	str	r3, [r7, #32]
   return(result);
 8007866:	6a3b      	ldr	r3, [r7, #32]
 8007868:	f023 0301 	bic.w	r3, r3, #1
 800786c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	3314      	adds	r3, #20
 8007876:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800787a:	633a      	str	r2, [r7, #48]	; 0x30
 800787c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007880:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007882:	e841 2300 	strex	r3, r2, [r1]
 8007886:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788a:	2b00      	cmp	r3, #0
 800788c:	d1e3      	bne.n	8007856 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2220      	movs	r2, #32
 8007892:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	330c      	adds	r3, #12
 80078a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	e853 3f00 	ldrex	r3, [r3]
 80078aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f023 0310 	bic.w	r3, r3, #16
 80078b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	330c      	adds	r3, #12
 80078bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80078c0:	61fa      	str	r2, [r7, #28]
 80078c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c4:	69b9      	ldr	r1, [r7, #24]
 80078c6:	69fa      	ldr	r2, [r7, #28]
 80078c8:	e841 2300 	strex	r3, r2, [r1]
 80078cc:	617b      	str	r3, [r7, #20]
   return(result);
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d1e3      	bne.n	800789c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2202      	movs	r2, #2
 80078d8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80078da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80078de:	4619      	mov	r1, r3
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f7f9 fb6d 	bl	8000fc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80078e6:	e023      	b.n	8007930 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80078e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d009      	beq.n	8007908 <HAL_UART_IRQHandler+0x4f4>
 80078f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d003      	beq.n	8007908 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 fae0 	bl	8007ec6 <UART_Transmit_IT>
    return;
 8007906:	e014      	b.n	8007932 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800790c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00e      	beq.n	8007932 <HAL_UART_IRQHandler+0x51e>
 8007914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800791c:	2b00      	cmp	r3, #0
 800791e:	d008      	beq.n	8007932 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 fb1f 	bl	8007f64 <UART_EndTransmit_IT>
    return;
 8007926:	e004      	b.n	8007932 <HAL_UART_IRQHandler+0x51e>
    return;
 8007928:	bf00      	nop
 800792a:	e002      	b.n	8007932 <HAL_UART_IRQHandler+0x51e>
      return;
 800792c:	bf00      	nop
 800792e:	e000      	b.n	8007932 <HAL_UART_IRQHandler+0x51e>
      return;
 8007930:	bf00      	nop
  }
}
 8007932:	37e8      	adds	r7, #232	; 0xe8
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007940:	bf00      	nop
 8007942:	370c      	adds	r7, #12
 8007944:	46bd      	mov	sp, r7
 8007946:	bc80      	pop	{r7}
 8007948:	4770      	bx	lr

0800794a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800794a:	b480      	push	{r7}
 800794c:	b083      	sub	sp, #12
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007952:	bf00      	nop
 8007954:	370c      	adds	r7, #12
 8007956:	46bd      	mov	sp, r7
 8007958:	bc80      	pop	{r7}
 800795a:	4770      	bx	lr

0800795c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007964:	bf00      	nop
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	bc80      	pop	{r7}
 800796c:	4770      	bx	lr

0800796e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800796e:	b480      	push	{r7}
 8007970:	b083      	sub	sp, #12
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007976:	bf00      	nop
 8007978:	370c      	adds	r7, #12
 800797a:	46bd      	mov	sp, r7
 800797c:	bc80      	pop	{r7}
 800797e:	4770      	bx	lr

08007980 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b09c      	sub	sp, #112	; 0x70
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f003 0320 	and.w	r3, r3, #32
 8007998:	2b00      	cmp	r3, #0
 800799a:	d172      	bne.n	8007a82 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800799c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800799e:	2200      	movs	r2, #0
 80079a0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	330c      	adds	r3, #12
 80079a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079ac:	e853 3f00 	ldrex	r3, [r3]
 80079b0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80079b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80079ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	330c      	adds	r3, #12
 80079c0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80079c2:	65ba      	str	r2, [r7, #88]	; 0x58
 80079c4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80079c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80079ca:	e841 2300 	strex	r3, r2, [r1]
 80079ce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80079d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d1e5      	bne.n	80079a2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	3314      	adds	r3, #20
 80079dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e0:	e853 3f00 	ldrex	r3, [r3]
 80079e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80079e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079e8:	f023 0301 	bic.w	r3, r3, #1
 80079ec:	667b      	str	r3, [r7, #100]	; 0x64
 80079ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	3314      	adds	r3, #20
 80079f4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80079f6:	647a      	str	r2, [r7, #68]	; 0x44
 80079f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80079fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079fe:	e841 2300 	strex	r3, r2, [r1]
 8007a02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d1e5      	bne.n	80079d6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	3314      	adds	r3, #20
 8007a10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a14:	e853 3f00 	ldrex	r3, [r3]
 8007a18:	623b      	str	r3, [r7, #32]
   return(result);
 8007a1a:	6a3b      	ldr	r3, [r7, #32]
 8007a1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a20:	663b      	str	r3, [r7, #96]	; 0x60
 8007a22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	3314      	adds	r3, #20
 8007a28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007a2a:	633a      	str	r2, [r7, #48]	; 0x30
 8007a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a32:	e841 2300 	strex	r3, r2, [r1]
 8007a36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d1e5      	bne.n	8007a0a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007a3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a40:	2220      	movs	r2, #32
 8007a42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d119      	bne.n	8007a82 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	330c      	adds	r3, #12
 8007a54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	e853 3f00 	ldrex	r3, [r3]
 8007a5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f023 0310 	bic.w	r3, r3, #16
 8007a64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	330c      	adds	r3, #12
 8007a6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007a6e:	61fa      	str	r2, [r7, #28]
 8007a70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a72:	69b9      	ldr	r1, [r7, #24]
 8007a74:	69fa      	ldr	r2, [r7, #28]
 8007a76:	e841 2300 	strex	r3, r2, [r1]
 8007a7a:	617b      	str	r3, [r7, #20]
   return(result);
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d1e5      	bne.n	8007a4e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a84:	2200      	movs	r2, #0
 8007a86:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d106      	bne.n	8007a9e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a92:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a94:	4619      	mov	r1, r3
 8007a96:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007a98:	f7f9 fa92 	bl	8000fc0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007a9c:	e002      	b.n	8007aa4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007a9e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007aa0:	f7ff ff53 	bl	800794a <HAL_UART_RxCpltCallback>
}
 8007aa4:	bf00      	nop
 8007aa6:	3770      	adds	r7, #112	; 0x70
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2201      	movs	r2, #1
 8007abe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d108      	bne.n	8007ada <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007acc:	085b      	lsrs	r3, r3, #1
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	68f8      	ldr	r0, [r7, #12]
 8007ad4:	f7f9 fa74 	bl	8000fc0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007ad8:	e002      	b.n	8007ae0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007ada:	68f8      	ldr	r0, [r7, #12]
 8007adc:	f7ff ff3e 	bl	800795c <HAL_UART_RxHalfCpltCallback>
}
 8007ae0:	bf00      	nop
 8007ae2:	3710      	adds	r7, #16
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007af0:	2300      	movs	r3, #0
 8007af2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	695b      	ldr	r3, [r3, #20]
 8007b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	bf14      	ite	ne
 8007b08:	2301      	movne	r3, #1
 8007b0a:	2300      	moveq	r3, #0
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	2b21      	cmp	r3, #33	; 0x21
 8007b1a:	d108      	bne.n	8007b2e <UART_DMAError+0x46>
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d005      	beq.n	8007b2e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	2200      	movs	r2, #0
 8007b26:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007b28:	68b8      	ldr	r0, [r7, #8]
 8007b2a:	f000 f92f 	bl	8007d8c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	695b      	ldr	r3, [r3, #20]
 8007b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	bf14      	ite	ne
 8007b3c:	2301      	movne	r3, #1
 8007b3e:	2300      	moveq	r3, #0
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	2b22      	cmp	r3, #34	; 0x22
 8007b4e:	d108      	bne.n	8007b62 <UART_DMAError+0x7a>
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d005      	beq.n	8007b62 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007b5c:	68b8      	ldr	r0, [r7, #8]
 8007b5e:	f000 f93c 	bl	8007dda <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b66:	f043 0210 	orr.w	r2, r3, #16
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b6e:	68b8      	ldr	r0, [r7, #8]
 8007b70:	f7ff fefd 	bl	800796e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b74:	bf00      	nop
 8007b76:	3710      	adds	r7, #16
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b090      	sub	sp, #64	; 0x40
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	603b      	str	r3, [r7, #0]
 8007b88:	4613      	mov	r3, r2
 8007b8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b8c:	e050      	b.n	8007c30 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b94:	d04c      	beq.n	8007c30 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007b96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d007      	beq.n	8007bac <UART_WaitOnFlagUntilTimeout+0x30>
 8007b9c:	f7fa fc78 	bl	8002490 <HAL_GetTick>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	1ad3      	subs	r3, r2, r3
 8007ba6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d241      	bcs.n	8007c30 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	330c      	adds	r3, #12
 8007bb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb6:	e853 3f00 	ldrex	r3, [r3]
 8007bba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bbe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	330c      	adds	r3, #12
 8007bca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007bcc:	637a      	str	r2, [r7, #52]	; 0x34
 8007bce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007bd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bd4:	e841 2300 	strex	r3, r2, [r1]
 8007bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d1e5      	bne.n	8007bac <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	3314      	adds	r3, #20
 8007be6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	e853 3f00 	ldrex	r3, [r3]
 8007bee:	613b      	str	r3, [r7, #16]
   return(result);
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	f023 0301 	bic.w	r3, r3, #1
 8007bf6:	63bb      	str	r3, [r7, #56]	; 0x38
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	3314      	adds	r3, #20
 8007bfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c00:	623a      	str	r2, [r7, #32]
 8007c02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c04:	69f9      	ldr	r1, [r7, #28]
 8007c06:	6a3a      	ldr	r2, [r7, #32]
 8007c08:	e841 2300 	strex	r3, r2, [r1]
 8007c0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c0e:	69bb      	ldr	r3, [r7, #24]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d1e5      	bne.n	8007be0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2220      	movs	r2, #32
 8007c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2220      	movs	r2, #32
 8007c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2200      	movs	r2, #0
 8007c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8007c2c:	2303      	movs	r3, #3
 8007c2e:	e00f      	b.n	8007c50 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	4013      	ands	r3, r2
 8007c3a:	68ba      	ldr	r2, [r7, #8]
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	bf0c      	ite	eq
 8007c40:	2301      	moveq	r3, #1
 8007c42:	2300      	movne	r3, #0
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	461a      	mov	r2, r3
 8007c48:	79fb      	ldrb	r3, [r7, #7]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d09f      	beq.n	8007b8e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3740      	adds	r7, #64	; 0x40
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b098      	sub	sp, #96	; 0x60
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	60b9      	str	r1, [r7, #8]
 8007c62:	4613      	mov	r3, r2
 8007c64:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007c66:	68ba      	ldr	r2, [r7, #8]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	88fa      	ldrh	r2, [r7, #6]
 8007c70:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2200      	movs	r2, #0
 8007c76:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2222      	movs	r2, #34	; 0x22
 8007c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c84:	4a3e      	ldr	r2, [pc, #248]	; (8007d80 <UART_Start_Receive_DMA+0x128>)
 8007c86:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c8c:	4a3d      	ldr	r2, [pc, #244]	; (8007d84 <UART_Start_Receive_DMA+0x12c>)
 8007c8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c94:	4a3c      	ldr	r2, [pc, #240]	; (8007d88 <UART_Start_Receive_DMA+0x130>)
 8007c96:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007ca0:	f107 0308 	add.w	r3, r7, #8
 8007ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	3304      	adds	r3, #4
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	88fb      	ldrh	r3, [r7, #6]
 8007cb8:	f7fb f9f0 	bl	800309c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	613b      	str	r3, [r7, #16]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	613b      	str	r3, [r7, #16]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	613b      	str	r3, [r7, #16]
 8007cd0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	691b      	ldr	r3, [r3, #16]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d019      	beq.n	8007d0e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	330c      	adds	r3, #12
 8007ce0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ce4:	e853 3f00 	ldrex	r3, [r3]
 8007ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cf0:	65bb      	str	r3, [r7, #88]	; 0x58
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	330c      	adds	r3, #12
 8007cf8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007cfa:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007cfc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007d00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007d02:	e841 2300 	strex	r3, r2, [r1]
 8007d06:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007d08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d1e5      	bne.n	8007cda <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	3314      	adds	r3, #20
 8007d14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d18:	e853 3f00 	ldrex	r3, [r3]
 8007d1c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d20:	f043 0301 	orr.w	r3, r3, #1
 8007d24:	657b      	str	r3, [r7, #84]	; 0x54
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	3314      	adds	r3, #20
 8007d2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007d2e:	63ba      	str	r2, [r7, #56]	; 0x38
 8007d30:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d32:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007d34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d36:	e841 2300 	strex	r3, r2, [r1]
 8007d3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d1e5      	bne.n	8007d0e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	3314      	adds	r3, #20
 8007d48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4a:	69bb      	ldr	r3, [r7, #24]
 8007d4c:	e853 3f00 	ldrex	r3, [r3]
 8007d50:	617b      	str	r3, [r7, #20]
   return(result);
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d58:	653b      	str	r3, [r7, #80]	; 0x50
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	3314      	adds	r3, #20
 8007d60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007d62:	627a      	str	r2, [r7, #36]	; 0x24
 8007d64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d66:	6a39      	ldr	r1, [r7, #32]
 8007d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d6a:	e841 2300 	strex	r3, r2, [r1]
 8007d6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d1e5      	bne.n	8007d42 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007d76:	2300      	movs	r3, #0
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3760      	adds	r7, #96	; 0x60
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}
 8007d80:	08007981 	.word	0x08007981
 8007d84:	08007aad 	.word	0x08007aad
 8007d88:	08007ae9 	.word	0x08007ae9

08007d8c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b089      	sub	sp, #36	; 0x24
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	330c      	adds	r3, #12
 8007d9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	e853 3f00 	ldrex	r3, [r3]
 8007da2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007daa:	61fb      	str	r3, [r7, #28]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	330c      	adds	r3, #12
 8007db2:	69fa      	ldr	r2, [r7, #28]
 8007db4:	61ba      	str	r2, [r7, #24]
 8007db6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db8:	6979      	ldr	r1, [r7, #20]
 8007dba:	69ba      	ldr	r2, [r7, #24]
 8007dbc:	e841 2300 	strex	r3, r2, [r1]
 8007dc0:	613b      	str	r3, [r7, #16]
   return(result);
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d1e5      	bne.n	8007d94 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2220      	movs	r2, #32
 8007dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8007dd0:	bf00      	nop
 8007dd2:	3724      	adds	r7, #36	; 0x24
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bc80      	pop	{r7}
 8007dd8:	4770      	bx	lr

08007dda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007dda:	b480      	push	{r7}
 8007ddc:	b095      	sub	sp, #84	; 0x54
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	330c      	adds	r3, #12
 8007de8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dec:	e853 3f00 	ldrex	r3, [r3]
 8007df0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007df8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	330c      	adds	r3, #12
 8007e00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e02:	643a      	str	r2, [r7, #64]	; 0x40
 8007e04:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e06:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007e08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e0a:	e841 2300 	strex	r3, r2, [r1]
 8007e0e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d1e5      	bne.n	8007de2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	3314      	adds	r3, #20
 8007e1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1e:	6a3b      	ldr	r3, [r7, #32]
 8007e20:	e853 3f00 	ldrex	r3, [r3]
 8007e24:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e26:	69fb      	ldr	r3, [r7, #28]
 8007e28:	f023 0301 	bic.w	r3, r3, #1
 8007e2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	3314      	adds	r3, #20
 8007e34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e38:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e3e:	e841 2300 	strex	r3, r2, [r1]
 8007e42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d1e5      	bne.n	8007e16 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e4e:	2b01      	cmp	r3, #1
 8007e50:	d119      	bne.n	8007e86 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	330c      	adds	r3, #12
 8007e58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	e853 3f00 	ldrex	r3, [r3]
 8007e60:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	f023 0310 	bic.w	r3, r3, #16
 8007e68:	647b      	str	r3, [r7, #68]	; 0x44
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	330c      	adds	r3, #12
 8007e70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e72:	61ba      	str	r2, [r7, #24]
 8007e74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e76:	6979      	ldr	r1, [r7, #20]
 8007e78:	69ba      	ldr	r2, [r7, #24]
 8007e7a:	e841 2300 	strex	r3, r2, [r1]
 8007e7e:	613b      	str	r3, [r7, #16]
   return(result);
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d1e5      	bne.n	8007e52 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2220      	movs	r2, #32
 8007e8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007e94:	bf00      	nop
 8007e96:	3754      	adds	r7, #84	; 0x54
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bc80      	pop	{r7}
 8007e9c:	4770      	bx	lr

08007e9e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b084      	sub	sp, #16
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eaa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007eb8:	68f8      	ldr	r0, [r7, #12]
 8007eba:	f7ff fd58 	bl	800796e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ebe:	bf00      	nop
 8007ec0:	3710      	adds	r7, #16
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007ec6:	b480      	push	{r7}
 8007ec8:	b085      	sub	sp, #20
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	2b21      	cmp	r3, #33	; 0x21
 8007ed8:	d13e      	bne.n	8007f58 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ee2:	d114      	bne.n	8007f0e <UART_Transmit_IT+0x48>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d110      	bne.n	8007f0e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6a1b      	ldr	r3, [r3, #32]
 8007ef0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	881b      	ldrh	r3, [r3, #0]
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f00:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6a1b      	ldr	r3, [r3, #32]
 8007f06:	1c9a      	adds	r2, r3, #2
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	621a      	str	r2, [r3, #32]
 8007f0c:	e008      	b.n	8007f20 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6a1b      	ldr	r3, [r3, #32]
 8007f12:	1c59      	adds	r1, r3, #1
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	6211      	str	r1, [r2, #32]
 8007f18:	781a      	ldrb	r2, [r3, #0]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	3b01      	subs	r3, #1
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d10f      	bne.n	8007f54 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	68da      	ldr	r2, [r3, #12]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f42:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	68da      	ldr	r2, [r3, #12]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f52:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007f54:	2300      	movs	r3, #0
 8007f56:	e000      	b.n	8007f5a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007f58:	2302      	movs	r3, #2
  }
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3714      	adds	r7, #20
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bc80      	pop	{r7}
 8007f62:	4770      	bx	lr

08007f64 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	68da      	ldr	r2, [r3, #12]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f7a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2220      	movs	r2, #32
 8007f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f7ff fcd7 	bl	8007938 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007f8a:	2300      	movs	r3, #0
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3708      	adds	r7, #8
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b08c      	sub	sp, #48	; 0x30
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	2b22      	cmp	r3, #34	; 0x22
 8007fa6:	f040 80ae 	bne.w	8008106 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fb2:	d117      	bne.n	8007fe4 <UART_Receive_IT+0x50>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	691b      	ldr	r3, [r3, #16]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d113      	bne.n	8007fe4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fd2:	b29a      	uxth	r2, r3
 8007fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fdc:	1c9a      	adds	r2, r3, #2
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	629a      	str	r2, [r3, #40]	; 0x28
 8007fe2:	e026      	b.n	8008032 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007fea:	2300      	movs	r3, #0
 8007fec:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ff6:	d007      	beq.n	8008008 <UART_Receive_IT+0x74>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d10a      	bne.n	8008016 <UART_Receive_IT+0x82>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	691b      	ldr	r3, [r3, #16]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d106      	bne.n	8008016 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	b2da      	uxtb	r2, r3
 8008010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008012:	701a      	strb	r2, [r3, #0]
 8008014:	e008      	b.n	8008028 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	b2db      	uxtb	r3, r3
 800801e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008022:	b2da      	uxtb	r2, r3
 8008024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008026:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800802c:	1c5a      	adds	r2, r3, #1
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008036:	b29b      	uxth	r3, r3
 8008038:	3b01      	subs	r3, #1
 800803a:	b29b      	uxth	r3, r3
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	4619      	mov	r1, r3
 8008040:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008042:	2b00      	cmp	r3, #0
 8008044:	d15d      	bne.n	8008102 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	68da      	ldr	r2, [r3, #12]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f022 0220 	bic.w	r2, r2, #32
 8008054:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	68da      	ldr	r2, [r3, #12]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008064:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	695a      	ldr	r2, [r3, #20]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f022 0201 	bic.w	r2, r2, #1
 8008074:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2220      	movs	r2, #32
 800807a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008088:	2b01      	cmp	r3, #1
 800808a:	d135      	bne.n	80080f8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	330c      	adds	r3, #12
 8008098:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	e853 3f00 	ldrex	r3, [r3]
 80080a0:	613b      	str	r3, [r7, #16]
   return(result);
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	f023 0310 	bic.w	r3, r3, #16
 80080a8:	627b      	str	r3, [r7, #36]	; 0x24
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	330c      	adds	r3, #12
 80080b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080b2:	623a      	str	r2, [r7, #32]
 80080b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b6:	69f9      	ldr	r1, [r7, #28]
 80080b8:	6a3a      	ldr	r2, [r7, #32]
 80080ba:	e841 2300 	strex	r3, r2, [r1]
 80080be:	61bb      	str	r3, [r7, #24]
   return(result);
 80080c0:	69bb      	ldr	r3, [r7, #24]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d1e5      	bne.n	8008092 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f003 0310 	and.w	r3, r3, #16
 80080d0:	2b10      	cmp	r3, #16
 80080d2:	d10a      	bne.n	80080ea <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80080d4:	2300      	movs	r3, #0
 80080d6:	60fb      	str	r3, [r7, #12]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	60fb      	str	r3, [r7, #12]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	60fb      	str	r3, [r7, #12]
 80080e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80080ee:	4619      	mov	r1, r3
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f7f8 ff65 	bl	8000fc0 <HAL_UARTEx_RxEventCallback>
 80080f6:	e002      	b.n	80080fe <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f7ff fc26 	bl	800794a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80080fe:	2300      	movs	r3, #0
 8008100:	e002      	b.n	8008108 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008102:	2300      	movs	r3, #0
 8008104:	e000      	b.n	8008108 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008106:	2302      	movs	r3, #2
  }
}
 8008108:	4618      	mov	r0, r3
 800810a:	3730      	adds	r7, #48	; 0x30
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	68da      	ldr	r2, [r3, #12]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	430a      	orrs	r2, r1
 800812c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	689a      	ldr	r2, [r3, #8]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	691b      	ldr	r3, [r3, #16]
 8008136:	431a      	orrs	r2, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	695b      	ldr	r3, [r3, #20]
 800813c:	4313      	orrs	r3, r2
 800813e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	68db      	ldr	r3, [r3, #12]
 8008146:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800814a:	f023 030c 	bic.w	r3, r3, #12
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	6812      	ldr	r2, [r2, #0]
 8008152:	68b9      	ldr	r1, [r7, #8]
 8008154:	430b      	orrs	r3, r1
 8008156:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	695b      	ldr	r3, [r3, #20]
 800815e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	699a      	ldr	r2, [r3, #24]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	430a      	orrs	r2, r1
 800816c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a2c      	ldr	r2, [pc, #176]	; (8008224 <UART_SetConfig+0x114>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d103      	bne.n	8008180 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008178:	f7fe fac2 	bl	8006700 <HAL_RCC_GetPCLK2Freq>
 800817c:	60f8      	str	r0, [r7, #12]
 800817e:	e002      	b.n	8008186 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008180:	f7fe faaa 	bl	80066d8 <HAL_RCC_GetPCLK1Freq>
 8008184:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008186:	68fa      	ldr	r2, [r7, #12]
 8008188:	4613      	mov	r3, r2
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	4413      	add	r3, r2
 800818e:	009a      	lsls	r2, r3, #2
 8008190:	441a      	add	r2, r3
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	fbb2 f3f3 	udiv	r3, r2, r3
 800819c:	4a22      	ldr	r2, [pc, #136]	; (8008228 <UART_SetConfig+0x118>)
 800819e:	fba2 2303 	umull	r2, r3, r2, r3
 80081a2:	095b      	lsrs	r3, r3, #5
 80081a4:	0119      	lsls	r1, r3, #4
 80081a6:	68fa      	ldr	r2, [r7, #12]
 80081a8:	4613      	mov	r3, r2
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	4413      	add	r3, r2
 80081ae:	009a      	lsls	r2, r3, #2
 80081b0:	441a      	add	r2, r3
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80081bc:	4b1a      	ldr	r3, [pc, #104]	; (8008228 <UART_SetConfig+0x118>)
 80081be:	fba3 0302 	umull	r0, r3, r3, r2
 80081c2:	095b      	lsrs	r3, r3, #5
 80081c4:	2064      	movs	r0, #100	; 0x64
 80081c6:	fb00 f303 	mul.w	r3, r0, r3
 80081ca:	1ad3      	subs	r3, r2, r3
 80081cc:	011b      	lsls	r3, r3, #4
 80081ce:	3332      	adds	r3, #50	; 0x32
 80081d0:	4a15      	ldr	r2, [pc, #84]	; (8008228 <UART_SetConfig+0x118>)
 80081d2:	fba2 2303 	umull	r2, r3, r2, r3
 80081d6:	095b      	lsrs	r3, r3, #5
 80081d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80081dc:	4419      	add	r1, r3
 80081de:	68fa      	ldr	r2, [r7, #12]
 80081e0:	4613      	mov	r3, r2
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	4413      	add	r3, r2
 80081e6:	009a      	lsls	r2, r3, #2
 80081e8:	441a      	add	r2, r3
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80081f4:	4b0c      	ldr	r3, [pc, #48]	; (8008228 <UART_SetConfig+0x118>)
 80081f6:	fba3 0302 	umull	r0, r3, r3, r2
 80081fa:	095b      	lsrs	r3, r3, #5
 80081fc:	2064      	movs	r0, #100	; 0x64
 80081fe:	fb00 f303 	mul.w	r3, r0, r3
 8008202:	1ad3      	subs	r3, r2, r3
 8008204:	011b      	lsls	r3, r3, #4
 8008206:	3332      	adds	r3, #50	; 0x32
 8008208:	4a07      	ldr	r2, [pc, #28]	; (8008228 <UART_SetConfig+0x118>)
 800820a:	fba2 2303 	umull	r2, r3, r2, r3
 800820e:	095b      	lsrs	r3, r3, #5
 8008210:	f003 020f 	and.w	r2, r3, #15
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	440a      	add	r2, r1
 800821a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800821c:	bf00      	nop
 800821e:	3710      	adds	r7, #16
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}
 8008224:	40013800 	.word	0x40013800
 8008228:	51eb851f 	.word	0x51eb851f

0800822c <__errno>:
 800822c:	4b01      	ldr	r3, [pc, #4]	; (8008234 <__errno+0x8>)
 800822e:	6818      	ldr	r0, [r3, #0]
 8008230:	4770      	bx	lr
 8008232:	bf00      	nop
 8008234:	20000030 	.word	0x20000030

08008238 <__libc_init_array>:
 8008238:	b570      	push	{r4, r5, r6, lr}
 800823a:	2600      	movs	r6, #0
 800823c:	4d0c      	ldr	r5, [pc, #48]	; (8008270 <__libc_init_array+0x38>)
 800823e:	4c0d      	ldr	r4, [pc, #52]	; (8008274 <__libc_init_array+0x3c>)
 8008240:	1b64      	subs	r4, r4, r5
 8008242:	10a4      	asrs	r4, r4, #2
 8008244:	42a6      	cmp	r6, r4
 8008246:	d109      	bne.n	800825c <__libc_init_array+0x24>
 8008248:	f001 f98c 	bl	8009564 <_init>
 800824c:	2600      	movs	r6, #0
 800824e:	4d0a      	ldr	r5, [pc, #40]	; (8008278 <__libc_init_array+0x40>)
 8008250:	4c0a      	ldr	r4, [pc, #40]	; (800827c <__libc_init_array+0x44>)
 8008252:	1b64      	subs	r4, r4, r5
 8008254:	10a4      	asrs	r4, r4, #2
 8008256:	42a6      	cmp	r6, r4
 8008258:	d105      	bne.n	8008266 <__libc_init_array+0x2e>
 800825a:	bd70      	pop	{r4, r5, r6, pc}
 800825c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008260:	4798      	blx	r3
 8008262:	3601      	adds	r6, #1
 8008264:	e7ee      	b.n	8008244 <__libc_init_array+0xc>
 8008266:	f855 3b04 	ldr.w	r3, [r5], #4
 800826a:	4798      	blx	r3
 800826c:	3601      	adds	r6, #1
 800826e:	e7f2      	b.n	8008256 <__libc_init_array+0x1e>
 8008270:	08009de0 	.word	0x08009de0
 8008274:	08009de0 	.word	0x08009de0
 8008278:	08009de0 	.word	0x08009de0
 800827c:	08009de4 	.word	0x08009de4

08008280 <memset>:
 8008280:	4603      	mov	r3, r0
 8008282:	4402      	add	r2, r0
 8008284:	4293      	cmp	r3, r2
 8008286:	d100      	bne.n	800828a <memset+0xa>
 8008288:	4770      	bx	lr
 800828a:	f803 1b01 	strb.w	r1, [r3], #1
 800828e:	e7f9      	b.n	8008284 <memset+0x4>

08008290 <atan2>:
 8008290:	f000 b88e 	b.w	80083b0 <__ieee754_atan2>

08008294 <pow>:
 8008294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008298:	4614      	mov	r4, r2
 800829a:	461d      	mov	r5, r3
 800829c:	4680      	mov	r8, r0
 800829e:	4689      	mov	r9, r1
 80082a0:	f000 f95a 	bl	8008558 <__ieee754_pow>
 80082a4:	4622      	mov	r2, r4
 80082a6:	4606      	mov	r6, r0
 80082a8:	460f      	mov	r7, r1
 80082aa:	462b      	mov	r3, r5
 80082ac:	4620      	mov	r0, r4
 80082ae:	4629      	mov	r1, r5
 80082b0:	f7f8 fba4 	bl	80009fc <__aeabi_dcmpun>
 80082b4:	bbc8      	cbnz	r0, 800832a <pow+0x96>
 80082b6:	2200      	movs	r2, #0
 80082b8:	2300      	movs	r3, #0
 80082ba:	4640      	mov	r0, r8
 80082bc:	4649      	mov	r1, r9
 80082be:	f7f8 fb6b 	bl	8000998 <__aeabi_dcmpeq>
 80082c2:	b1b8      	cbz	r0, 80082f4 <pow+0x60>
 80082c4:	2200      	movs	r2, #0
 80082c6:	2300      	movs	r3, #0
 80082c8:	4620      	mov	r0, r4
 80082ca:	4629      	mov	r1, r5
 80082cc:	f7f8 fb64 	bl	8000998 <__aeabi_dcmpeq>
 80082d0:	2800      	cmp	r0, #0
 80082d2:	d141      	bne.n	8008358 <pow+0xc4>
 80082d4:	4620      	mov	r0, r4
 80082d6:	4629      	mov	r1, r5
 80082d8:	f001 f8bf 	bl	800945a <finite>
 80082dc:	b328      	cbz	r0, 800832a <pow+0x96>
 80082de:	2200      	movs	r2, #0
 80082e0:	2300      	movs	r3, #0
 80082e2:	4620      	mov	r0, r4
 80082e4:	4629      	mov	r1, r5
 80082e6:	f7f8 fb61 	bl	80009ac <__aeabi_dcmplt>
 80082ea:	b1f0      	cbz	r0, 800832a <pow+0x96>
 80082ec:	f7ff ff9e 	bl	800822c <__errno>
 80082f0:	2322      	movs	r3, #34	; 0x22
 80082f2:	e019      	b.n	8008328 <pow+0x94>
 80082f4:	4630      	mov	r0, r6
 80082f6:	4639      	mov	r1, r7
 80082f8:	f001 f8af 	bl	800945a <finite>
 80082fc:	b9c8      	cbnz	r0, 8008332 <pow+0x9e>
 80082fe:	4640      	mov	r0, r8
 8008300:	4649      	mov	r1, r9
 8008302:	f001 f8aa 	bl	800945a <finite>
 8008306:	b1a0      	cbz	r0, 8008332 <pow+0x9e>
 8008308:	4620      	mov	r0, r4
 800830a:	4629      	mov	r1, r5
 800830c:	f001 f8a5 	bl	800945a <finite>
 8008310:	b178      	cbz	r0, 8008332 <pow+0x9e>
 8008312:	4632      	mov	r2, r6
 8008314:	463b      	mov	r3, r7
 8008316:	4630      	mov	r0, r6
 8008318:	4639      	mov	r1, r7
 800831a:	f7f8 fb6f 	bl	80009fc <__aeabi_dcmpun>
 800831e:	2800      	cmp	r0, #0
 8008320:	d0e4      	beq.n	80082ec <pow+0x58>
 8008322:	f7ff ff83 	bl	800822c <__errno>
 8008326:	2321      	movs	r3, #33	; 0x21
 8008328:	6003      	str	r3, [r0, #0]
 800832a:	4630      	mov	r0, r6
 800832c:	4639      	mov	r1, r7
 800832e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008332:	2200      	movs	r2, #0
 8008334:	2300      	movs	r3, #0
 8008336:	4630      	mov	r0, r6
 8008338:	4639      	mov	r1, r7
 800833a:	f7f8 fb2d 	bl	8000998 <__aeabi_dcmpeq>
 800833e:	2800      	cmp	r0, #0
 8008340:	d0f3      	beq.n	800832a <pow+0x96>
 8008342:	4640      	mov	r0, r8
 8008344:	4649      	mov	r1, r9
 8008346:	f001 f888 	bl	800945a <finite>
 800834a:	2800      	cmp	r0, #0
 800834c:	d0ed      	beq.n	800832a <pow+0x96>
 800834e:	4620      	mov	r0, r4
 8008350:	4629      	mov	r1, r5
 8008352:	f001 f882 	bl	800945a <finite>
 8008356:	e7c8      	b.n	80082ea <pow+0x56>
 8008358:	2600      	movs	r6, #0
 800835a:	4f01      	ldr	r7, [pc, #4]	; (8008360 <pow+0xcc>)
 800835c:	e7e5      	b.n	800832a <pow+0x96>
 800835e:	bf00      	nop
 8008360:	3ff00000 	.word	0x3ff00000

08008364 <sqrt>:
 8008364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008366:	4606      	mov	r6, r0
 8008368:	460f      	mov	r7, r1
 800836a:	f000 fe0b 	bl	8008f84 <__ieee754_sqrt>
 800836e:	4632      	mov	r2, r6
 8008370:	4604      	mov	r4, r0
 8008372:	460d      	mov	r5, r1
 8008374:	463b      	mov	r3, r7
 8008376:	4630      	mov	r0, r6
 8008378:	4639      	mov	r1, r7
 800837a:	f7f8 fb3f 	bl	80009fc <__aeabi_dcmpun>
 800837e:	b990      	cbnz	r0, 80083a6 <sqrt+0x42>
 8008380:	2200      	movs	r2, #0
 8008382:	2300      	movs	r3, #0
 8008384:	4630      	mov	r0, r6
 8008386:	4639      	mov	r1, r7
 8008388:	f7f8 fb10 	bl	80009ac <__aeabi_dcmplt>
 800838c:	b158      	cbz	r0, 80083a6 <sqrt+0x42>
 800838e:	f7ff ff4d 	bl	800822c <__errno>
 8008392:	2321      	movs	r3, #33	; 0x21
 8008394:	2200      	movs	r2, #0
 8008396:	6003      	str	r3, [r0, #0]
 8008398:	2300      	movs	r3, #0
 800839a:	4610      	mov	r0, r2
 800839c:	4619      	mov	r1, r3
 800839e:	f7f8 f9bd 	bl	800071c <__aeabi_ddiv>
 80083a2:	4604      	mov	r4, r0
 80083a4:	460d      	mov	r5, r1
 80083a6:	4620      	mov	r0, r4
 80083a8:	4629      	mov	r1, r5
 80083aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083ac:	0000      	movs	r0, r0
	...

080083b0 <__ieee754_atan2>:
 80083b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083b4:	4692      	mov	sl, r2
 80083b6:	4699      	mov	r9, r3
 80083b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80083bc:	461f      	mov	r7, r3
 80083be:	f1ca 0300 	rsb	r3, sl, #0
 80083c2:	f8df e184 	ldr.w	lr, [pc, #388]	; 8008548 <__ieee754_atan2+0x198>
 80083c6:	ea43 030a 	orr.w	r3, r3, sl
 80083ca:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80083ce:	4573      	cmp	r3, lr
 80083d0:	4604      	mov	r4, r0
 80083d2:	460d      	mov	r5, r1
 80083d4:	d808      	bhi.n	80083e8 <__ieee754_atan2+0x38>
 80083d6:	4246      	negs	r6, r0
 80083d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80083dc:	4306      	orrs	r6, r0
 80083de:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 80083e2:	4576      	cmp	r6, lr
 80083e4:	468c      	mov	ip, r1
 80083e6:	d908      	bls.n	80083fa <__ieee754_atan2+0x4a>
 80083e8:	4652      	mov	r2, sl
 80083ea:	464b      	mov	r3, r9
 80083ec:	4620      	mov	r0, r4
 80083ee:	4629      	mov	r1, r5
 80083f0:	f7f7 feb4 	bl	800015c <__adddf3>
 80083f4:	4604      	mov	r4, r0
 80083f6:	460d      	mov	r5, r1
 80083f8:	e019      	b.n	800842e <__ieee754_atan2+0x7e>
 80083fa:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 80083fe:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8008402:	ea56 060a 	orrs.w	r6, r6, sl
 8008406:	d103      	bne.n	8008410 <__ieee754_atan2+0x60>
 8008408:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800840c:	f000 be98 	b.w	8009140 <atan>
 8008410:	17be      	asrs	r6, r7, #30
 8008412:	f006 0602 	and.w	r6, r6, #2
 8008416:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800841a:	ea53 0100 	orrs.w	r1, r3, r0
 800841e:	d10a      	bne.n	8008436 <__ieee754_atan2+0x86>
 8008420:	2e02      	cmp	r6, #2
 8008422:	d067      	beq.n	80084f4 <__ieee754_atan2+0x144>
 8008424:	2e03      	cmp	r6, #3
 8008426:	d102      	bne.n	800842e <__ieee754_atan2+0x7e>
 8008428:	a53b      	add	r5, pc, #236	; (adr r5, 8008518 <__ieee754_atan2+0x168>)
 800842a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800842e:	4620      	mov	r0, r4
 8008430:	4629      	mov	r1, r5
 8008432:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008436:	ea52 010a 	orrs.w	r1, r2, sl
 800843a:	d106      	bne.n	800844a <__ieee754_atan2+0x9a>
 800843c:	f1bc 0f00 	cmp.w	ip, #0
 8008440:	da63      	bge.n	800850a <__ieee754_atan2+0x15a>
 8008442:	a537      	add	r5, pc, #220	; (adr r5, 8008520 <__ieee754_atan2+0x170>)
 8008444:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008448:	e7f1      	b.n	800842e <__ieee754_atan2+0x7e>
 800844a:	4572      	cmp	r2, lr
 800844c:	d10f      	bne.n	800846e <__ieee754_atan2+0xbe>
 800844e:	4293      	cmp	r3, r2
 8008450:	f106 36ff 	add.w	r6, r6, #4294967295
 8008454:	d107      	bne.n	8008466 <__ieee754_atan2+0xb6>
 8008456:	2e02      	cmp	r6, #2
 8008458:	d850      	bhi.n	80084fc <__ieee754_atan2+0x14c>
 800845a:	4b3c      	ldr	r3, [pc, #240]	; (800854c <__ieee754_atan2+0x19c>)
 800845c:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008460:	e9d6 4500 	ldrd	r4, r5, [r6]
 8008464:	e7e3      	b.n	800842e <__ieee754_atan2+0x7e>
 8008466:	2e02      	cmp	r6, #2
 8008468:	d84c      	bhi.n	8008504 <__ieee754_atan2+0x154>
 800846a:	4b39      	ldr	r3, [pc, #228]	; (8008550 <__ieee754_atan2+0x1a0>)
 800846c:	e7f6      	b.n	800845c <__ieee754_atan2+0xac>
 800846e:	4573      	cmp	r3, lr
 8008470:	d0e4      	beq.n	800843c <__ieee754_atan2+0x8c>
 8008472:	1a9b      	subs	r3, r3, r2
 8008474:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8008478:	ea4f 5223 	mov.w	r2, r3, asr #20
 800847c:	da20      	bge.n	80084c0 <__ieee754_atan2+0x110>
 800847e:	2f00      	cmp	r7, #0
 8008480:	da01      	bge.n	8008486 <__ieee754_atan2+0xd6>
 8008482:	323c      	adds	r2, #60	; 0x3c
 8008484:	db20      	blt.n	80084c8 <__ieee754_atan2+0x118>
 8008486:	4652      	mov	r2, sl
 8008488:	464b      	mov	r3, r9
 800848a:	4620      	mov	r0, r4
 800848c:	4629      	mov	r1, r5
 800848e:	f7f8 f945 	bl	800071c <__aeabi_ddiv>
 8008492:	f000 ffdf 	bl	8009454 <fabs>
 8008496:	f000 fe53 	bl	8009140 <atan>
 800849a:	4604      	mov	r4, r0
 800849c:	460d      	mov	r5, r1
 800849e:	2e01      	cmp	r6, #1
 80084a0:	d015      	beq.n	80084ce <__ieee754_atan2+0x11e>
 80084a2:	2e02      	cmp	r6, #2
 80084a4:	d017      	beq.n	80084d6 <__ieee754_atan2+0x126>
 80084a6:	2e00      	cmp	r6, #0
 80084a8:	d0c1      	beq.n	800842e <__ieee754_atan2+0x7e>
 80084aa:	a31f      	add	r3, pc, #124	; (adr r3, 8008528 <__ieee754_atan2+0x178>)
 80084ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b0:	4620      	mov	r0, r4
 80084b2:	4629      	mov	r1, r5
 80084b4:	f7f7 fe50 	bl	8000158 <__aeabi_dsub>
 80084b8:	a31d      	add	r3, pc, #116	; (adr r3, 8008530 <__ieee754_atan2+0x180>)
 80084ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084be:	e016      	b.n	80084ee <__ieee754_atan2+0x13e>
 80084c0:	a51d      	add	r5, pc, #116	; (adr r5, 8008538 <__ieee754_atan2+0x188>)
 80084c2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80084c6:	e7ea      	b.n	800849e <__ieee754_atan2+0xee>
 80084c8:	2400      	movs	r4, #0
 80084ca:	2500      	movs	r5, #0
 80084cc:	e7e7      	b.n	800849e <__ieee754_atan2+0xee>
 80084ce:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80084d2:	461d      	mov	r5, r3
 80084d4:	e7ab      	b.n	800842e <__ieee754_atan2+0x7e>
 80084d6:	a314      	add	r3, pc, #80	; (adr r3, 8008528 <__ieee754_atan2+0x178>)
 80084d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084dc:	4620      	mov	r0, r4
 80084de:	4629      	mov	r1, r5
 80084e0:	f7f7 fe3a 	bl	8000158 <__aeabi_dsub>
 80084e4:	4602      	mov	r2, r0
 80084e6:	460b      	mov	r3, r1
 80084e8:	a111      	add	r1, pc, #68	; (adr r1, 8008530 <__ieee754_atan2+0x180>)
 80084ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084ee:	f7f7 fe33 	bl	8000158 <__aeabi_dsub>
 80084f2:	e77f      	b.n	80083f4 <__ieee754_atan2+0x44>
 80084f4:	a50e      	add	r5, pc, #56	; (adr r5, 8008530 <__ieee754_atan2+0x180>)
 80084f6:	e9d5 4500 	ldrd	r4, r5, [r5]
 80084fa:	e798      	b.n	800842e <__ieee754_atan2+0x7e>
 80084fc:	a510      	add	r5, pc, #64	; (adr r5, 8008540 <__ieee754_atan2+0x190>)
 80084fe:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008502:	e794      	b.n	800842e <__ieee754_atan2+0x7e>
 8008504:	2400      	movs	r4, #0
 8008506:	2500      	movs	r5, #0
 8008508:	e791      	b.n	800842e <__ieee754_atan2+0x7e>
 800850a:	a50b      	add	r5, pc, #44	; (adr r5, 8008538 <__ieee754_atan2+0x188>)
 800850c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008510:	e78d      	b.n	800842e <__ieee754_atan2+0x7e>
 8008512:	bf00      	nop
 8008514:	f3af 8000 	nop.w
 8008518:	54442d18 	.word	0x54442d18
 800851c:	c00921fb 	.word	0xc00921fb
 8008520:	54442d18 	.word	0x54442d18
 8008524:	bff921fb 	.word	0xbff921fb
 8008528:	33145c07 	.word	0x33145c07
 800852c:	3ca1a626 	.word	0x3ca1a626
 8008530:	54442d18 	.word	0x54442d18
 8008534:	400921fb 	.word	0x400921fb
 8008538:	54442d18 	.word	0x54442d18
 800853c:	3ff921fb 	.word	0x3ff921fb
 8008540:	54442d18 	.word	0x54442d18
 8008544:	3fe921fb 	.word	0x3fe921fb
 8008548:	7ff00000 	.word	0x7ff00000
 800854c:	08009d40 	.word	0x08009d40
 8008550:	08009d58 	.word	0x08009d58
 8008554:	00000000 	.word	0x00000000

08008558 <__ieee754_pow>:
 8008558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800855c:	b093      	sub	sp, #76	; 0x4c
 800855e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008562:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8008566:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800856a:	4689      	mov	r9, r1
 800856c:	ea56 0102 	orrs.w	r1, r6, r2
 8008570:	4680      	mov	r8, r0
 8008572:	d111      	bne.n	8008598 <__ieee754_pow+0x40>
 8008574:	1803      	adds	r3, r0, r0
 8008576:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800857a:	4152      	adcs	r2, r2
 800857c:	4299      	cmp	r1, r3
 800857e:	4b82      	ldr	r3, [pc, #520]	; (8008788 <__ieee754_pow+0x230>)
 8008580:	4193      	sbcs	r3, r2
 8008582:	f080 84b9 	bcs.w	8008ef8 <__ieee754_pow+0x9a0>
 8008586:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800858a:	4640      	mov	r0, r8
 800858c:	4649      	mov	r1, r9
 800858e:	f7f7 fde5 	bl	800015c <__adddf3>
 8008592:	4683      	mov	fp, r0
 8008594:	468c      	mov	ip, r1
 8008596:	e06f      	b.n	8008678 <__ieee754_pow+0x120>
 8008598:	4b7c      	ldr	r3, [pc, #496]	; (800878c <__ieee754_pow+0x234>)
 800859a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800859e:	429c      	cmp	r4, r3
 80085a0:	464d      	mov	r5, r9
 80085a2:	4682      	mov	sl, r0
 80085a4:	dc06      	bgt.n	80085b4 <__ieee754_pow+0x5c>
 80085a6:	d101      	bne.n	80085ac <__ieee754_pow+0x54>
 80085a8:	2800      	cmp	r0, #0
 80085aa:	d1ec      	bne.n	8008586 <__ieee754_pow+0x2e>
 80085ac:	429e      	cmp	r6, r3
 80085ae:	dc01      	bgt.n	80085b4 <__ieee754_pow+0x5c>
 80085b0:	d10f      	bne.n	80085d2 <__ieee754_pow+0x7a>
 80085b2:	b172      	cbz	r2, 80085d2 <__ieee754_pow+0x7a>
 80085b4:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80085b8:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80085bc:	ea55 050a 	orrs.w	r5, r5, sl
 80085c0:	d1e1      	bne.n	8008586 <__ieee754_pow+0x2e>
 80085c2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80085c6:	18db      	adds	r3, r3, r3
 80085c8:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80085cc:	4152      	adcs	r2, r2
 80085ce:	429d      	cmp	r5, r3
 80085d0:	e7d5      	b.n	800857e <__ieee754_pow+0x26>
 80085d2:	2d00      	cmp	r5, #0
 80085d4:	da39      	bge.n	800864a <__ieee754_pow+0xf2>
 80085d6:	4b6e      	ldr	r3, [pc, #440]	; (8008790 <__ieee754_pow+0x238>)
 80085d8:	429e      	cmp	r6, r3
 80085da:	dc52      	bgt.n	8008682 <__ieee754_pow+0x12a>
 80085dc:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80085e0:	429e      	cmp	r6, r3
 80085e2:	f340 849c 	ble.w	8008f1e <__ieee754_pow+0x9c6>
 80085e6:	1533      	asrs	r3, r6, #20
 80085e8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80085ec:	2b14      	cmp	r3, #20
 80085ee:	dd0f      	ble.n	8008610 <__ieee754_pow+0xb8>
 80085f0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80085f4:	fa22 f103 	lsr.w	r1, r2, r3
 80085f8:	fa01 f303 	lsl.w	r3, r1, r3
 80085fc:	4293      	cmp	r3, r2
 80085fe:	f040 848e 	bne.w	8008f1e <__ieee754_pow+0x9c6>
 8008602:	f001 0101 	and.w	r1, r1, #1
 8008606:	f1c1 0302 	rsb	r3, r1, #2
 800860a:	9300      	str	r3, [sp, #0]
 800860c:	b182      	cbz	r2, 8008630 <__ieee754_pow+0xd8>
 800860e:	e05d      	b.n	80086cc <__ieee754_pow+0x174>
 8008610:	2a00      	cmp	r2, #0
 8008612:	d159      	bne.n	80086c8 <__ieee754_pow+0x170>
 8008614:	f1c3 0314 	rsb	r3, r3, #20
 8008618:	fa46 f103 	asr.w	r1, r6, r3
 800861c:	fa01 f303 	lsl.w	r3, r1, r3
 8008620:	42b3      	cmp	r3, r6
 8008622:	f040 8479 	bne.w	8008f18 <__ieee754_pow+0x9c0>
 8008626:	f001 0101 	and.w	r1, r1, #1
 800862a:	f1c1 0302 	rsb	r3, r1, #2
 800862e:	9300      	str	r3, [sp, #0]
 8008630:	4b58      	ldr	r3, [pc, #352]	; (8008794 <__ieee754_pow+0x23c>)
 8008632:	429e      	cmp	r6, r3
 8008634:	d132      	bne.n	800869c <__ieee754_pow+0x144>
 8008636:	2f00      	cmp	r7, #0
 8008638:	f280 846a 	bge.w	8008f10 <__ieee754_pow+0x9b8>
 800863c:	4642      	mov	r2, r8
 800863e:	464b      	mov	r3, r9
 8008640:	2000      	movs	r0, #0
 8008642:	4954      	ldr	r1, [pc, #336]	; (8008794 <__ieee754_pow+0x23c>)
 8008644:	f7f8 f86a 	bl	800071c <__aeabi_ddiv>
 8008648:	e7a3      	b.n	8008592 <__ieee754_pow+0x3a>
 800864a:	2300      	movs	r3, #0
 800864c:	9300      	str	r3, [sp, #0]
 800864e:	2a00      	cmp	r2, #0
 8008650:	d13c      	bne.n	80086cc <__ieee754_pow+0x174>
 8008652:	4b4e      	ldr	r3, [pc, #312]	; (800878c <__ieee754_pow+0x234>)
 8008654:	429e      	cmp	r6, r3
 8008656:	d1eb      	bne.n	8008630 <__ieee754_pow+0xd8>
 8008658:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800865c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008660:	ea53 030a 	orrs.w	r3, r3, sl
 8008664:	f000 8448 	beq.w	8008ef8 <__ieee754_pow+0x9a0>
 8008668:	4b4b      	ldr	r3, [pc, #300]	; (8008798 <__ieee754_pow+0x240>)
 800866a:	429c      	cmp	r4, r3
 800866c:	dd0b      	ble.n	8008686 <__ieee754_pow+0x12e>
 800866e:	2f00      	cmp	r7, #0
 8008670:	f2c0 8448 	blt.w	8008f04 <__ieee754_pow+0x9ac>
 8008674:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8008678:	4658      	mov	r0, fp
 800867a:	4661      	mov	r1, ip
 800867c:	b013      	add	sp, #76	; 0x4c
 800867e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008682:	2302      	movs	r3, #2
 8008684:	e7e2      	b.n	800864c <__ieee754_pow+0xf4>
 8008686:	2f00      	cmp	r7, #0
 8008688:	f04f 0b00 	mov.w	fp, #0
 800868c:	f04f 0c00 	mov.w	ip, #0
 8008690:	daf2      	bge.n	8008678 <__ieee754_pow+0x120>
 8008692:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8008696:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800869a:	e7ed      	b.n	8008678 <__ieee754_pow+0x120>
 800869c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80086a0:	d106      	bne.n	80086b0 <__ieee754_pow+0x158>
 80086a2:	4642      	mov	r2, r8
 80086a4:	464b      	mov	r3, r9
 80086a6:	4640      	mov	r0, r8
 80086a8:	4649      	mov	r1, r9
 80086aa:	f7f7 ff0d 	bl	80004c8 <__aeabi_dmul>
 80086ae:	e770      	b.n	8008592 <__ieee754_pow+0x3a>
 80086b0:	4b3a      	ldr	r3, [pc, #232]	; (800879c <__ieee754_pow+0x244>)
 80086b2:	429f      	cmp	r7, r3
 80086b4:	d10a      	bne.n	80086cc <__ieee754_pow+0x174>
 80086b6:	2d00      	cmp	r5, #0
 80086b8:	db08      	blt.n	80086cc <__ieee754_pow+0x174>
 80086ba:	4640      	mov	r0, r8
 80086bc:	4649      	mov	r1, r9
 80086be:	b013      	add	sp, #76	; 0x4c
 80086c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086c4:	f000 bc5e 	b.w	8008f84 <__ieee754_sqrt>
 80086c8:	2300      	movs	r3, #0
 80086ca:	9300      	str	r3, [sp, #0]
 80086cc:	4640      	mov	r0, r8
 80086ce:	4649      	mov	r1, r9
 80086d0:	f000 fec0 	bl	8009454 <fabs>
 80086d4:	4683      	mov	fp, r0
 80086d6:	468c      	mov	ip, r1
 80086d8:	f1ba 0f00 	cmp.w	sl, #0
 80086dc:	d128      	bne.n	8008730 <__ieee754_pow+0x1d8>
 80086de:	b124      	cbz	r4, 80086ea <__ieee754_pow+0x192>
 80086e0:	4b2c      	ldr	r3, [pc, #176]	; (8008794 <__ieee754_pow+0x23c>)
 80086e2:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d122      	bne.n	8008730 <__ieee754_pow+0x1d8>
 80086ea:	2f00      	cmp	r7, #0
 80086ec:	da07      	bge.n	80086fe <__ieee754_pow+0x1a6>
 80086ee:	465a      	mov	r2, fp
 80086f0:	4663      	mov	r3, ip
 80086f2:	2000      	movs	r0, #0
 80086f4:	4927      	ldr	r1, [pc, #156]	; (8008794 <__ieee754_pow+0x23c>)
 80086f6:	f7f8 f811 	bl	800071c <__aeabi_ddiv>
 80086fa:	4683      	mov	fp, r0
 80086fc:	468c      	mov	ip, r1
 80086fe:	2d00      	cmp	r5, #0
 8008700:	daba      	bge.n	8008678 <__ieee754_pow+0x120>
 8008702:	9b00      	ldr	r3, [sp, #0]
 8008704:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008708:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800870c:	4323      	orrs	r3, r4
 800870e:	d108      	bne.n	8008722 <__ieee754_pow+0x1ca>
 8008710:	465a      	mov	r2, fp
 8008712:	4663      	mov	r3, ip
 8008714:	4658      	mov	r0, fp
 8008716:	4661      	mov	r1, ip
 8008718:	f7f7 fd1e 	bl	8000158 <__aeabi_dsub>
 800871c:	4602      	mov	r2, r0
 800871e:	460b      	mov	r3, r1
 8008720:	e790      	b.n	8008644 <__ieee754_pow+0xec>
 8008722:	9b00      	ldr	r3, [sp, #0]
 8008724:	2b01      	cmp	r3, #1
 8008726:	d1a7      	bne.n	8008678 <__ieee754_pow+0x120>
 8008728:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800872c:	469c      	mov	ip, r3
 800872e:	e7a3      	b.n	8008678 <__ieee754_pow+0x120>
 8008730:	0feb      	lsrs	r3, r5, #31
 8008732:	3b01      	subs	r3, #1
 8008734:	930c      	str	r3, [sp, #48]	; 0x30
 8008736:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008738:	9b00      	ldr	r3, [sp, #0]
 800873a:	4313      	orrs	r3, r2
 800873c:	d104      	bne.n	8008748 <__ieee754_pow+0x1f0>
 800873e:	4642      	mov	r2, r8
 8008740:	464b      	mov	r3, r9
 8008742:	4640      	mov	r0, r8
 8008744:	4649      	mov	r1, r9
 8008746:	e7e7      	b.n	8008718 <__ieee754_pow+0x1c0>
 8008748:	4b15      	ldr	r3, [pc, #84]	; (80087a0 <__ieee754_pow+0x248>)
 800874a:	429e      	cmp	r6, r3
 800874c:	f340 80f6 	ble.w	800893c <__ieee754_pow+0x3e4>
 8008750:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008754:	429e      	cmp	r6, r3
 8008756:	4b10      	ldr	r3, [pc, #64]	; (8008798 <__ieee754_pow+0x240>)
 8008758:	dd09      	ble.n	800876e <__ieee754_pow+0x216>
 800875a:	429c      	cmp	r4, r3
 800875c:	dc0c      	bgt.n	8008778 <__ieee754_pow+0x220>
 800875e:	2f00      	cmp	r7, #0
 8008760:	da0c      	bge.n	800877c <__ieee754_pow+0x224>
 8008762:	2000      	movs	r0, #0
 8008764:	b013      	add	sp, #76	; 0x4c
 8008766:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800876a:	f000 bce2 	b.w	8009132 <__math_oflow>
 800876e:	429c      	cmp	r4, r3
 8008770:	dbf5      	blt.n	800875e <__ieee754_pow+0x206>
 8008772:	4b08      	ldr	r3, [pc, #32]	; (8008794 <__ieee754_pow+0x23c>)
 8008774:	429c      	cmp	r4, r3
 8008776:	dd15      	ble.n	80087a4 <__ieee754_pow+0x24c>
 8008778:	2f00      	cmp	r7, #0
 800877a:	dcf2      	bgt.n	8008762 <__ieee754_pow+0x20a>
 800877c:	2000      	movs	r0, #0
 800877e:	b013      	add	sp, #76	; 0x4c
 8008780:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008784:	f000 bcd0 	b.w	8009128 <__math_uflow>
 8008788:	fff00000 	.word	0xfff00000
 800878c:	7ff00000 	.word	0x7ff00000
 8008790:	433fffff 	.word	0x433fffff
 8008794:	3ff00000 	.word	0x3ff00000
 8008798:	3fefffff 	.word	0x3fefffff
 800879c:	3fe00000 	.word	0x3fe00000
 80087a0:	41e00000 	.word	0x41e00000
 80087a4:	4661      	mov	r1, ip
 80087a6:	2200      	movs	r2, #0
 80087a8:	4658      	mov	r0, fp
 80087aa:	4b5f      	ldr	r3, [pc, #380]	; (8008928 <__ieee754_pow+0x3d0>)
 80087ac:	f7f7 fcd4 	bl	8000158 <__aeabi_dsub>
 80087b0:	a355      	add	r3, pc, #340	; (adr r3, 8008908 <__ieee754_pow+0x3b0>)
 80087b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b6:	4604      	mov	r4, r0
 80087b8:	460d      	mov	r5, r1
 80087ba:	f7f7 fe85 	bl	80004c8 <__aeabi_dmul>
 80087be:	a354      	add	r3, pc, #336	; (adr r3, 8008910 <__ieee754_pow+0x3b8>)
 80087c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c4:	4606      	mov	r6, r0
 80087c6:	460f      	mov	r7, r1
 80087c8:	4620      	mov	r0, r4
 80087ca:	4629      	mov	r1, r5
 80087cc:	f7f7 fe7c 	bl	80004c8 <__aeabi_dmul>
 80087d0:	2200      	movs	r2, #0
 80087d2:	4682      	mov	sl, r0
 80087d4:	468b      	mov	fp, r1
 80087d6:	4620      	mov	r0, r4
 80087d8:	4629      	mov	r1, r5
 80087da:	4b54      	ldr	r3, [pc, #336]	; (800892c <__ieee754_pow+0x3d4>)
 80087dc:	f7f7 fe74 	bl	80004c8 <__aeabi_dmul>
 80087e0:	4602      	mov	r2, r0
 80087e2:	460b      	mov	r3, r1
 80087e4:	a14c      	add	r1, pc, #304	; (adr r1, 8008918 <__ieee754_pow+0x3c0>)
 80087e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087ea:	f7f7 fcb5 	bl	8000158 <__aeabi_dsub>
 80087ee:	4622      	mov	r2, r4
 80087f0:	462b      	mov	r3, r5
 80087f2:	f7f7 fe69 	bl	80004c8 <__aeabi_dmul>
 80087f6:	4602      	mov	r2, r0
 80087f8:	460b      	mov	r3, r1
 80087fa:	2000      	movs	r0, #0
 80087fc:	494c      	ldr	r1, [pc, #304]	; (8008930 <__ieee754_pow+0x3d8>)
 80087fe:	f7f7 fcab 	bl	8000158 <__aeabi_dsub>
 8008802:	4622      	mov	r2, r4
 8008804:	462b      	mov	r3, r5
 8008806:	4680      	mov	r8, r0
 8008808:	4689      	mov	r9, r1
 800880a:	4620      	mov	r0, r4
 800880c:	4629      	mov	r1, r5
 800880e:	f7f7 fe5b 	bl	80004c8 <__aeabi_dmul>
 8008812:	4602      	mov	r2, r0
 8008814:	460b      	mov	r3, r1
 8008816:	4640      	mov	r0, r8
 8008818:	4649      	mov	r1, r9
 800881a:	f7f7 fe55 	bl	80004c8 <__aeabi_dmul>
 800881e:	a340      	add	r3, pc, #256	; (adr r3, 8008920 <__ieee754_pow+0x3c8>)
 8008820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008824:	f7f7 fe50 	bl	80004c8 <__aeabi_dmul>
 8008828:	4602      	mov	r2, r0
 800882a:	460b      	mov	r3, r1
 800882c:	4650      	mov	r0, sl
 800882e:	4659      	mov	r1, fp
 8008830:	f7f7 fc92 	bl	8000158 <__aeabi_dsub>
 8008834:	f04f 0a00 	mov.w	sl, #0
 8008838:	4602      	mov	r2, r0
 800883a:	460b      	mov	r3, r1
 800883c:	4604      	mov	r4, r0
 800883e:	460d      	mov	r5, r1
 8008840:	4630      	mov	r0, r6
 8008842:	4639      	mov	r1, r7
 8008844:	f7f7 fc8a 	bl	800015c <__adddf3>
 8008848:	4632      	mov	r2, r6
 800884a:	463b      	mov	r3, r7
 800884c:	4650      	mov	r0, sl
 800884e:	468b      	mov	fp, r1
 8008850:	f7f7 fc82 	bl	8000158 <__aeabi_dsub>
 8008854:	4602      	mov	r2, r0
 8008856:	460b      	mov	r3, r1
 8008858:	4620      	mov	r0, r4
 800885a:	4629      	mov	r1, r5
 800885c:	f7f7 fc7c 	bl	8000158 <__aeabi_dsub>
 8008860:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008864:	9b00      	ldr	r3, [sp, #0]
 8008866:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008868:	3b01      	subs	r3, #1
 800886a:	4313      	orrs	r3, r2
 800886c:	f04f 0600 	mov.w	r6, #0
 8008870:	f04f 0200 	mov.w	r2, #0
 8008874:	bf0c      	ite	eq
 8008876:	4b2f      	ldreq	r3, [pc, #188]	; (8008934 <__ieee754_pow+0x3dc>)
 8008878:	4b2b      	ldrne	r3, [pc, #172]	; (8008928 <__ieee754_pow+0x3d0>)
 800887a:	4604      	mov	r4, r0
 800887c:	460d      	mov	r5, r1
 800887e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008882:	e9cd 2300 	strd	r2, r3, [sp]
 8008886:	4632      	mov	r2, r6
 8008888:	463b      	mov	r3, r7
 800888a:	f7f7 fc65 	bl	8000158 <__aeabi_dsub>
 800888e:	4652      	mov	r2, sl
 8008890:	465b      	mov	r3, fp
 8008892:	f7f7 fe19 	bl	80004c8 <__aeabi_dmul>
 8008896:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800889a:	4680      	mov	r8, r0
 800889c:	4689      	mov	r9, r1
 800889e:	4620      	mov	r0, r4
 80088a0:	4629      	mov	r1, r5
 80088a2:	f7f7 fe11 	bl	80004c8 <__aeabi_dmul>
 80088a6:	4602      	mov	r2, r0
 80088a8:	460b      	mov	r3, r1
 80088aa:	4640      	mov	r0, r8
 80088ac:	4649      	mov	r1, r9
 80088ae:	f7f7 fc55 	bl	800015c <__adddf3>
 80088b2:	4632      	mov	r2, r6
 80088b4:	463b      	mov	r3, r7
 80088b6:	4680      	mov	r8, r0
 80088b8:	4689      	mov	r9, r1
 80088ba:	4650      	mov	r0, sl
 80088bc:	4659      	mov	r1, fp
 80088be:	f7f7 fe03 	bl	80004c8 <__aeabi_dmul>
 80088c2:	4604      	mov	r4, r0
 80088c4:	460d      	mov	r5, r1
 80088c6:	460b      	mov	r3, r1
 80088c8:	4602      	mov	r2, r0
 80088ca:	4649      	mov	r1, r9
 80088cc:	4640      	mov	r0, r8
 80088ce:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80088d2:	f7f7 fc43 	bl	800015c <__adddf3>
 80088d6:	4b18      	ldr	r3, [pc, #96]	; (8008938 <__ieee754_pow+0x3e0>)
 80088d8:	4682      	mov	sl, r0
 80088da:	4299      	cmp	r1, r3
 80088dc:	460f      	mov	r7, r1
 80088de:	460e      	mov	r6, r1
 80088e0:	f340 82e5 	ble.w	8008eae <__ieee754_pow+0x956>
 80088e4:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80088e8:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80088ec:	4303      	orrs	r3, r0
 80088ee:	f000 81df 	beq.w	8008cb0 <__ieee754_pow+0x758>
 80088f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80088f6:	2200      	movs	r2, #0
 80088f8:	2300      	movs	r3, #0
 80088fa:	f7f8 f857 	bl	80009ac <__aeabi_dcmplt>
 80088fe:	3800      	subs	r0, #0
 8008900:	bf18      	it	ne
 8008902:	2001      	movne	r0, #1
 8008904:	e72e      	b.n	8008764 <__ieee754_pow+0x20c>
 8008906:	bf00      	nop
 8008908:	60000000 	.word	0x60000000
 800890c:	3ff71547 	.word	0x3ff71547
 8008910:	f85ddf44 	.word	0xf85ddf44
 8008914:	3e54ae0b 	.word	0x3e54ae0b
 8008918:	55555555 	.word	0x55555555
 800891c:	3fd55555 	.word	0x3fd55555
 8008920:	652b82fe 	.word	0x652b82fe
 8008924:	3ff71547 	.word	0x3ff71547
 8008928:	3ff00000 	.word	0x3ff00000
 800892c:	3fd00000 	.word	0x3fd00000
 8008930:	3fe00000 	.word	0x3fe00000
 8008934:	bff00000 	.word	0xbff00000
 8008938:	408fffff 	.word	0x408fffff
 800893c:	4bd2      	ldr	r3, [pc, #840]	; (8008c88 <__ieee754_pow+0x730>)
 800893e:	2200      	movs	r2, #0
 8008940:	402b      	ands	r3, r5
 8008942:	b943      	cbnz	r3, 8008956 <__ieee754_pow+0x3fe>
 8008944:	4658      	mov	r0, fp
 8008946:	4661      	mov	r1, ip
 8008948:	4bd0      	ldr	r3, [pc, #832]	; (8008c8c <__ieee754_pow+0x734>)
 800894a:	f7f7 fdbd 	bl	80004c8 <__aeabi_dmul>
 800894e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008952:	4683      	mov	fp, r0
 8008954:	460c      	mov	r4, r1
 8008956:	1523      	asrs	r3, r4, #20
 8008958:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800895c:	4413      	add	r3, r2
 800895e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008960:	4bcb      	ldr	r3, [pc, #812]	; (8008c90 <__ieee754_pow+0x738>)
 8008962:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008966:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800896a:	429c      	cmp	r4, r3
 800896c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008970:	dd08      	ble.n	8008984 <__ieee754_pow+0x42c>
 8008972:	4bc8      	ldr	r3, [pc, #800]	; (8008c94 <__ieee754_pow+0x73c>)
 8008974:	429c      	cmp	r4, r3
 8008976:	f340 8199 	ble.w	8008cac <__ieee754_pow+0x754>
 800897a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800897c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008980:	3301      	adds	r3, #1
 8008982:	930b      	str	r3, [sp, #44]	; 0x2c
 8008984:	2600      	movs	r6, #0
 8008986:	00f3      	lsls	r3, r6, #3
 8008988:	930d      	str	r3, [sp, #52]	; 0x34
 800898a:	4bc3      	ldr	r3, [pc, #780]	; (8008c98 <__ieee754_pow+0x740>)
 800898c:	4658      	mov	r0, fp
 800898e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008992:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008996:	4629      	mov	r1, r5
 8008998:	461a      	mov	r2, r3
 800899a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800899e:	4623      	mov	r3, r4
 80089a0:	f7f7 fbda 	bl	8000158 <__aeabi_dsub>
 80089a4:	46da      	mov	sl, fp
 80089a6:	462b      	mov	r3, r5
 80089a8:	4652      	mov	r2, sl
 80089aa:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80089ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80089b2:	f7f7 fbd3 	bl	800015c <__adddf3>
 80089b6:	4602      	mov	r2, r0
 80089b8:	460b      	mov	r3, r1
 80089ba:	2000      	movs	r0, #0
 80089bc:	49b7      	ldr	r1, [pc, #732]	; (8008c9c <__ieee754_pow+0x744>)
 80089be:	f7f7 fead 	bl	800071c <__aeabi_ddiv>
 80089c2:	4602      	mov	r2, r0
 80089c4:	460b      	mov	r3, r1
 80089c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80089ca:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80089ce:	f7f7 fd7b 	bl	80004c8 <__aeabi_dmul>
 80089d2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80089d6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80089da:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80089de:	2300      	movs	r3, #0
 80089e0:	2200      	movs	r2, #0
 80089e2:	46ab      	mov	fp, r5
 80089e4:	106d      	asrs	r5, r5, #1
 80089e6:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80089ea:	9304      	str	r3, [sp, #16]
 80089ec:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80089f0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80089f4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80089f8:	4640      	mov	r0, r8
 80089fa:	4649      	mov	r1, r9
 80089fc:	4614      	mov	r4, r2
 80089fe:	461d      	mov	r5, r3
 8008a00:	f7f7 fd62 	bl	80004c8 <__aeabi_dmul>
 8008a04:	4602      	mov	r2, r0
 8008a06:	460b      	mov	r3, r1
 8008a08:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008a0c:	f7f7 fba4 	bl	8000158 <__aeabi_dsub>
 8008a10:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008a14:	4606      	mov	r6, r0
 8008a16:	460f      	mov	r7, r1
 8008a18:	4620      	mov	r0, r4
 8008a1a:	4629      	mov	r1, r5
 8008a1c:	f7f7 fb9c 	bl	8000158 <__aeabi_dsub>
 8008a20:	4602      	mov	r2, r0
 8008a22:	460b      	mov	r3, r1
 8008a24:	4650      	mov	r0, sl
 8008a26:	4659      	mov	r1, fp
 8008a28:	f7f7 fb96 	bl	8000158 <__aeabi_dsub>
 8008a2c:	4642      	mov	r2, r8
 8008a2e:	464b      	mov	r3, r9
 8008a30:	f7f7 fd4a 	bl	80004c8 <__aeabi_dmul>
 8008a34:	4602      	mov	r2, r0
 8008a36:	460b      	mov	r3, r1
 8008a38:	4630      	mov	r0, r6
 8008a3a:	4639      	mov	r1, r7
 8008a3c:	f7f7 fb8c 	bl	8000158 <__aeabi_dsub>
 8008a40:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008a44:	f7f7 fd40 	bl	80004c8 <__aeabi_dmul>
 8008a48:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a4c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008a50:	4610      	mov	r0, r2
 8008a52:	4619      	mov	r1, r3
 8008a54:	f7f7 fd38 	bl	80004c8 <__aeabi_dmul>
 8008a58:	a379      	add	r3, pc, #484	; (adr r3, 8008c40 <__ieee754_pow+0x6e8>)
 8008a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a5e:	4604      	mov	r4, r0
 8008a60:	460d      	mov	r5, r1
 8008a62:	f7f7 fd31 	bl	80004c8 <__aeabi_dmul>
 8008a66:	a378      	add	r3, pc, #480	; (adr r3, 8008c48 <__ieee754_pow+0x6f0>)
 8008a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a6c:	f7f7 fb76 	bl	800015c <__adddf3>
 8008a70:	4622      	mov	r2, r4
 8008a72:	462b      	mov	r3, r5
 8008a74:	f7f7 fd28 	bl	80004c8 <__aeabi_dmul>
 8008a78:	a375      	add	r3, pc, #468	; (adr r3, 8008c50 <__ieee754_pow+0x6f8>)
 8008a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a7e:	f7f7 fb6d 	bl	800015c <__adddf3>
 8008a82:	4622      	mov	r2, r4
 8008a84:	462b      	mov	r3, r5
 8008a86:	f7f7 fd1f 	bl	80004c8 <__aeabi_dmul>
 8008a8a:	a373      	add	r3, pc, #460	; (adr r3, 8008c58 <__ieee754_pow+0x700>)
 8008a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a90:	f7f7 fb64 	bl	800015c <__adddf3>
 8008a94:	4622      	mov	r2, r4
 8008a96:	462b      	mov	r3, r5
 8008a98:	f7f7 fd16 	bl	80004c8 <__aeabi_dmul>
 8008a9c:	a370      	add	r3, pc, #448	; (adr r3, 8008c60 <__ieee754_pow+0x708>)
 8008a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa2:	f7f7 fb5b 	bl	800015c <__adddf3>
 8008aa6:	4622      	mov	r2, r4
 8008aa8:	462b      	mov	r3, r5
 8008aaa:	f7f7 fd0d 	bl	80004c8 <__aeabi_dmul>
 8008aae:	a36e      	add	r3, pc, #440	; (adr r3, 8008c68 <__ieee754_pow+0x710>)
 8008ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab4:	f7f7 fb52 	bl	800015c <__adddf3>
 8008ab8:	4622      	mov	r2, r4
 8008aba:	4606      	mov	r6, r0
 8008abc:	460f      	mov	r7, r1
 8008abe:	462b      	mov	r3, r5
 8008ac0:	4620      	mov	r0, r4
 8008ac2:	4629      	mov	r1, r5
 8008ac4:	f7f7 fd00 	bl	80004c8 <__aeabi_dmul>
 8008ac8:	4602      	mov	r2, r0
 8008aca:	460b      	mov	r3, r1
 8008acc:	4630      	mov	r0, r6
 8008ace:	4639      	mov	r1, r7
 8008ad0:	f7f7 fcfa 	bl	80004c8 <__aeabi_dmul>
 8008ad4:	4604      	mov	r4, r0
 8008ad6:	460d      	mov	r5, r1
 8008ad8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008adc:	4642      	mov	r2, r8
 8008ade:	464b      	mov	r3, r9
 8008ae0:	f7f7 fb3c 	bl	800015c <__adddf3>
 8008ae4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008ae8:	f7f7 fcee 	bl	80004c8 <__aeabi_dmul>
 8008aec:	4622      	mov	r2, r4
 8008aee:	462b      	mov	r3, r5
 8008af0:	f7f7 fb34 	bl	800015c <__adddf3>
 8008af4:	4642      	mov	r2, r8
 8008af6:	4606      	mov	r6, r0
 8008af8:	460f      	mov	r7, r1
 8008afa:	464b      	mov	r3, r9
 8008afc:	4640      	mov	r0, r8
 8008afe:	4649      	mov	r1, r9
 8008b00:	f7f7 fce2 	bl	80004c8 <__aeabi_dmul>
 8008b04:	2200      	movs	r2, #0
 8008b06:	4b66      	ldr	r3, [pc, #408]	; (8008ca0 <__ieee754_pow+0x748>)
 8008b08:	4682      	mov	sl, r0
 8008b0a:	468b      	mov	fp, r1
 8008b0c:	f7f7 fb26 	bl	800015c <__adddf3>
 8008b10:	4632      	mov	r2, r6
 8008b12:	463b      	mov	r3, r7
 8008b14:	f7f7 fb22 	bl	800015c <__adddf3>
 8008b18:	2400      	movs	r4, #0
 8008b1a:	460d      	mov	r5, r1
 8008b1c:	4622      	mov	r2, r4
 8008b1e:	460b      	mov	r3, r1
 8008b20:	4640      	mov	r0, r8
 8008b22:	4649      	mov	r1, r9
 8008b24:	f7f7 fcd0 	bl	80004c8 <__aeabi_dmul>
 8008b28:	2200      	movs	r2, #0
 8008b2a:	4680      	mov	r8, r0
 8008b2c:	4689      	mov	r9, r1
 8008b2e:	4620      	mov	r0, r4
 8008b30:	4629      	mov	r1, r5
 8008b32:	4b5b      	ldr	r3, [pc, #364]	; (8008ca0 <__ieee754_pow+0x748>)
 8008b34:	f7f7 fb10 	bl	8000158 <__aeabi_dsub>
 8008b38:	4652      	mov	r2, sl
 8008b3a:	465b      	mov	r3, fp
 8008b3c:	f7f7 fb0c 	bl	8000158 <__aeabi_dsub>
 8008b40:	4602      	mov	r2, r0
 8008b42:	460b      	mov	r3, r1
 8008b44:	4630      	mov	r0, r6
 8008b46:	4639      	mov	r1, r7
 8008b48:	f7f7 fb06 	bl	8000158 <__aeabi_dsub>
 8008b4c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008b50:	f7f7 fcba 	bl	80004c8 <__aeabi_dmul>
 8008b54:	4622      	mov	r2, r4
 8008b56:	4606      	mov	r6, r0
 8008b58:	460f      	mov	r7, r1
 8008b5a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008b5e:	462b      	mov	r3, r5
 8008b60:	f7f7 fcb2 	bl	80004c8 <__aeabi_dmul>
 8008b64:	4602      	mov	r2, r0
 8008b66:	460b      	mov	r3, r1
 8008b68:	4630      	mov	r0, r6
 8008b6a:	4639      	mov	r1, r7
 8008b6c:	f7f7 faf6 	bl	800015c <__adddf3>
 8008b70:	2400      	movs	r4, #0
 8008b72:	4606      	mov	r6, r0
 8008b74:	460f      	mov	r7, r1
 8008b76:	4602      	mov	r2, r0
 8008b78:	460b      	mov	r3, r1
 8008b7a:	4640      	mov	r0, r8
 8008b7c:	4649      	mov	r1, r9
 8008b7e:	f7f7 faed 	bl	800015c <__adddf3>
 8008b82:	a33b      	add	r3, pc, #236	; (adr r3, 8008c70 <__ieee754_pow+0x718>)
 8008b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b88:	4620      	mov	r0, r4
 8008b8a:	460d      	mov	r5, r1
 8008b8c:	f7f7 fc9c 	bl	80004c8 <__aeabi_dmul>
 8008b90:	4642      	mov	r2, r8
 8008b92:	464b      	mov	r3, r9
 8008b94:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008b98:	4620      	mov	r0, r4
 8008b9a:	4629      	mov	r1, r5
 8008b9c:	f7f7 fadc 	bl	8000158 <__aeabi_dsub>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	460b      	mov	r3, r1
 8008ba4:	4630      	mov	r0, r6
 8008ba6:	4639      	mov	r1, r7
 8008ba8:	f7f7 fad6 	bl	8000158 <__aeabi_dsub>
 8008bac:	a332      	add	r3, pc, #200	; (adr r3, 8008c78 <__ieee754_pow+0x720>)
 8008bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb2:	f7f7 fc89 	bl	80004c8 <__aeabi_dmul>
 8008bb6:	a332      	add	r3, pc, #200	; (adr r3, 8008c80 <__ieee754_pow+0x728>)
 8008bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bbc:	4606      	mov	r6, r0
 8008bbe:	460f      	mov	r7, r1
 8008bc0:	4620      	mov	r0, r4
 8008bc2:	4629      	mov	r1, r5
 8008bc4:	f7f7 fc80 	bl	80004c8 <__aeabi_dmul>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	460b      	mov	r3, r1
 8008bcc:	4630      	mov	r0, r6
 8008bce:	4639      	mov	r1, r7
 8008bd0:	f7f7 fac4 	bl	800015c <__adddf3>
 8008bd4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008bd6:	4b33      	ldr	r3, [pc, #204]	; (8008ca4 <__ieee754_pow+0x74c>)
 8008bd8:	f04f 0a00 	mov.w	sl, #0
 8008bdc:	4413      	add	r3, r2
 8008bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be2:	f7f7 fabb 	bl	800015c <__adddf3>
 8008be6:	4680      	mov	r8, r0
 8008be8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008bea:	4689      	mov	r9, r1
 8008bec:	f7f7 fc02 	bl	80003f4 <__aeabi_i2d>
 8008bf0:	4604      	mov	r4, r0
 8008bf2:	460d      	mov	r5, r1
 8008bf4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008bf6:	4b2c      	ldr	r3, [pc, #176]	; (8008ca8 <__ieee754_pow+0x750>)
 8008bf8:	4413      	add	r3, r2
 8008bfa:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008bfe:	4642      	mov	r2, r8
 8008c00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c04:	464b      	mov	r3, r9
 8008c06:	f7f7 faa9 	bl	800015c <__adddf3>
 8008c0a:	4632      	mov	r2, r6
 8008c0c:	463b      	mov	r3, r7
 8008c0e:	f7f7 faa5 	bl	800015c <__adddf3>
 8008c12:	4622      	mov	r2, r4
 8008c14:	462b      	mov	r3, r5
 8008c16:	f7f7 faa1 	bl	800015c <__adddf3>
 8008c1a:	4622      	mov	r2, r4
 8008c1c:	462b      	mov	r3, r5
 8008c1e:	4650      	mov	r0, sl
 8008c20:	468b      	mov	fp, r1
 8008c22:	f7f7 fa99 	bl	8000158 <__aeabi_dsub>
 8008c26:	4632      	mov	r2, r6
 8008c28:	463b      	mov	r3, r7
 8008c2a:	f7f7 fa95 	bl	8000158 <__aeabi_dsub>
 8008c2e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c32:	f7f7 fa91 	bl	8000158 <__aeabi_dsub>
 8008c36:	4602      	mov	r2, r0
 8008c38:	460b      	mov	r3, r1
 8008c3a:	4640      	mov	r0, r8
 8008c3c:	4649      	mov	r1, r9
 8008c3e:	e60d      	b.n	800885c <__ieee754_pow+0x304>
 8008c40:	4a454eef 	.word	0x4a454eef
 8008c44:	3fca7e28 	.word	0x3fca7e28
 8008c48:	93c9db65 	.word	0x93c9db65
 8008c4c:	3fcd864a 	.word	0x3fcd864a
 8008c50:	a91d4101 	.word	0xa91d4101
 8008c54:	3fd17460 	.word	0x3fd17460
 8008c58:	518f264d 	.word	0x518f264d
 8008c5c:	3fd55555 	.word	0x3fd55555
 8008c60:	db6fabff 	.word	0xdb6fabff
 8008c64:	3fdb6db6 	.word	0x3fdb6db6
 8008c68:	33333303 	.word	0x33333303
 8008c6c:	3fe33333 	.word	0x3fe33333
 8008c70:	e0000000 	.word	0xe0000000
 8008c74:	3feec709 	.word	0x3feec709
 8008c78:	dc3a03fd 	.word	0xdc3a03fd
 8008c7c:	3feec709 	.word	0x3feec709
 8008c80:	145b01f5 	.word	0x145b01f5
 8008c84:	be3e2fe0 	.word	0xbe3e2fe0
 8008c88:	7ff00000 	.word	0x7ff00000
 8008c8c:	43400000 	.word	0x43400000
 8008c90:	0003988e 	.word	0x0003988e
 8008c94:	000bb679 	.word	0x000bb679
 8008c98:	08009d70 	.word	0x08009d70
 8008c9c:	3ff00000 	.word	0x3ff00000
 8008ca0:	40080000 	.word	0x40080000
 8008ca4:	08009d90 	.word	0x08009d90
 8008ca8:	08009d80 	.word	0x08009d80
 8008cac:	2601      	movs	r6, #1
 8008cae:	e66a      	b.n	8008986 <__ieee754_pow+0x42e>
 8008cb0:	a39d      	add	r3, pc, #628	; (adr r3, 8008f28 <__ieee754_pow+0x9d0>)
 8008cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb6:	4640      	mov	r0, r8
 8008cb8:	4649      	mov	r1, r9
 8008cba:	f7f7 fa4f 	bl	800015c <__adddf3>
 8008cbe:	4622      	mov	r2, r4
 8008cc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008cc4:	462b      	mov	r3, r5
 8008cc6:	4650      	mov	r0, sl
 8008cc8:	4639      	mov	r1, r7
 8008cca:	f7f7 fa45 	bl	8000158 <__aeabi_dsub>
 8008cce:	4602      	mov	r2, r0
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008cd6:	f7f7 fe87 	bl	80009e8 <__aeabi_dcmpgt>
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	f47f ae09 	bne.w	80088f2 <__ieee754_pow+0x39a>
 8008ce0:	4aa3      	ldr	r2, [pc, #652]	; (8008f70 <__ieee754_pow+0xa18>)
 8008ce2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	f340 8101 	ble.w	8008eee <__ieee754_pow+0x996>
 8008cec:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008cf0:	2000      	movs	r0, #0
 8008cf2:	151b      	asrs	r3, r3, #20
 8008cf4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008cf8:	fa4a f303 	asr.w	r3, sl, r3
 8008cfc:	4433      	add	r3, r6
 8008cfe:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008d02:	4f9c      	ldr	r7, [pc, #624]	; (8008f74 <__ieee754_pow+0xa1c>)
 8008d04:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008d08:	4117      	asrs	r7, r2
 8008d0a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008d0e:	ea23 0107 	bic.w	r1, r3, r7
 8008d12:	f1c2 0214 	rsb	r2, r2, #20
 8008d16:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008d1a:	460b      	mov	r3, r1
 8008d1c:	fa4a fa02 	asr.w	sl, sl, r2
 8008d20:	2e00      	cmp	r6, #0
 8008d22:	4602      	mov	r2, r0
 8008d24:	4629      	mov	r1, r5
 8008d26:	4620      	mov	r0, r4
 8008d28:	bfb8      	it	lt
 8008d2a:	f1ca 0a00 	rsblt	sl, sl, #0
 8008d2e:	f7f7 fa13 	bl	8000158 <__aeabi_dsub>
 8008d32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d3a:	2400      	movs	r4, #0
 8008d3c:	4642      	mov	r2, r8
 8008d3e:	464b      	mov	r3, r9
 8008d40:	f7f7 fa0c 	bl	800015c <__adddf3>
 8008d44:	a37a      	add	r3, pc, #488	; (adr r3, 8008f30 <__ieee754_pow+0x9d8>)
 8008d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d4a:	4620      	mov	r0, r4
 8008d4c:	460d      	mov	r5, r1
 8008d4e:	f7f7 fbbb 	bl	80004c8 <__aeabi_dmul>
 8008d52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d56:	4606      	mov	r6, r0
 8008d58:	460f      	mov	r7, r1
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	4629      	mov	r1, r5
 8008d5e:	f7f7 f9fb 	bl	8000158 <__aeabi_dsub>
 8008d62:	4602      	mov	r2, r0
 8008d64:	460b      	mov	r3, r1
 8008d66:	4640      	mov	r0, r8
 8008d68:	4649      	mov	r1, r9
 8008d6a:	f7f7 f9f5 	bl	8000158 <__aeabi_dsub>
 8008d6e:	a372      	add	r3, pc, #456	; (adr r3, 8008f38 <__ieee754_pow+0x9e0>)
 8008d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d74:	f7f7 fba8 	bl	80004c8 <__aeabi_dmul>
 8008d78:	a371      	add	r3, pc, #452	; (adr r3, 8008f40 <__ieee754_pow+0x9e8>)
 8008d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d7e:	4680      	mov	r8, r0
 8008d80:	4689      	mov	r9, r1
 8008d82:	4620      	mov	r0, r4
 8008d84:	4629      	mov	r1, r5
 8008d86:	f7f7 fb9f 	bl	80004c8 <__aeabi_dmul>
 8008d8a:	4602      	mov	r2, r0
 8008d8c:	460b      	mov	r3, r1
 8008d8e:	4640      	mov	r0, r8
 8008d90:	4649      	mov	r1, r9
 8008d92:	f7f7 f9e3 	bl	800015c <__adddf3>
 8008d96:	4604      	mov	r4, r0
 8008d98:	460d      	mov	r5, r1
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	4630      	mov	r0, r6
 8008da0:	4639      	mov	r1, r7
 8008da2:	f7f7 f9db 	bl	800015c <__adddf3>
 8008da6:	4632      	mov	r2, r6
 8008da8:	463b      	mov	r3, r7
 8008daa:	4680      	mov	r8, r0
 8008dac:	4689      	mov	r9, r1
 8008dae:	f7f7 f9d3 	bl	8000158 <__aeabi_dsub>
 8008db2:	4602      	mov	r2, r0
 8008db4:	460b      	mov	r3, r1
 8008db6:	4620      	mov	r0, r4
 8008db8:	4629      	mov	r1, r5
 8008dba:	f7f7 f9cd 	bl	8000158 <__aeabi_dsub>
 8008dbe:	4642      	mov	r2, r8
 8008dc0:	4606      	mov	r6, r0
 8008dc2:	460f      	mov	r7, r1
 8008dc4:	464b      	mov	r3, r9
 8008dc6:	4640      	mov	r0, r8
 8008dc8:	4649      	mov	r1, r9
 8008dca:	f7f7 fb7d 	bl	80004c8 <__aeabi_dmul>
 8008dce:	a35e      	add	r3, pc, #376	; (adr r3, 8008f48 <__ieee754_pow+0x9f0>)
 8008dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd4:	4604      	mov	r4, r0
 8008dd6:	460d      	mov	r5, r1
 8008dd8:	f7f7 fb76 	bl	80004c8 <__aeabi_dmul>
 8008ddc:	a35c      	add	r3, pc, #368	; (adr r3, 8008f50 <__ieee754_pow+0x9f8>)
 8008dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de2:	f7f7 f9b9 	bl	8000158 <__aeabi_dsub>
 8008de6:	4622      	mov	r2, r4
 8008de8:	462b      	mov	r3, r5
 8008dea:	f7f7 fb6d 	bl	80004c8 <__aeabi_dmul>
 8008dee:	a35a      	add	r3, pc, #360	; (adr r3, 8008f58 <__ieee754_pow+0xa00>)
 8008df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df4:	f7f7 f9b2 	bl	800015c <__adddf3>
 8008df8:	4622      	mov	r2, r4
 8008dfa:	462b      	mov	r3, r5
 8008dfc:	f7f7 fb64 	bl	80004c8 <__aeabi_dmul>
 8008e00:	a357      	add	r3, pc, #348	; (adr r3, 8008f60 <__ieee754_pow+0xa08>)
 8008e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e06:	f7f7 f9a7 	bl	8000158 <__aeabi_dsub>
 8008e0a:	4622      	mov	r2, r4
 8008e0c:	462b      	mov	r3, r5
 8008e0e:	f7f7 fb5b 	bl	80004c8 <__aeabi_dmul>
 8008e12:	a355      	add	r3, pc, #340	; (adr r3, 8008f68 <__ieee754_pow+0xa10>)
 8008e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e18:	f7f7 f9a0 	bl	800015c <__adddf3>
 8008e1c:	4622      	mov	r2, r4
 8008e1e:	462b      	mov	r3, r5
 8008e20:	f7f7 fb52 	bl	80004c8 <__aeabi_dmul>
 8008e24:	4602      	mov	r2, r0
 8008e26:	460b      	mov	r3, r1
 8008e28:	4640      	mov	r0, r8
 8008e2a:	4649      	mov	r1, r9
 8008e2c:	f7f7 f994 	bl	8000158 <__aeabi_dsub>
 8008e30:	4604      	mov	r4, r0
 8008e32:	460d      	mov	r5, r1
 8008e34:	4602      	mov	r2, r0
 8008e36:	460b      	mov	r3, r1
 8008e38:	4640      	mov	r0, r8
 8008e3a:	4649      	mov	r1, r9
 8008e3c:	f7f7 fb44 	bl	80004c8 <__aeabi_dmul>
 8008e40:	2200      	movs	r2, #0
 8008e42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008e4a:	4620      	mov	r0, r4
 8008e4c:	4629      	mov	r1, r5
 8008e4e:	f7f7 f983 	bl	8000158 <__aeabi_dsub>
 8008e52:	4602      	mov	r2, r0
 8008e54:	460b      	mov	r3, r1
 8008e56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e5a:	f7f7 fc5f 	bl	800071c <__aeabi_ddiv>
 8008e5e:	4632      	mov	r2, r6
 8008e60:	4604      	mov	r4, r0
 8008e62:	460d      	mov	r5, r1
 8008e64:	463b      	mov	r3, r7
 8008e66:	4640      	mov	r0, r8
 8008e68:	4649      	mov	r1, r9
 8008e6a:	f7f7 fb2d 	bl	80004c8 <__aeabi_dmul>
 8008e6e:	4632      	mov	r2, r6
 8008e70:	463b      	mov	r3, r7
 8008e72:	f7f7 f973 	bl	800015c <__adddf3>
 8008e76:	4602      	mov	r2, r0
 8008e78:	460b      	mov	r3, r1
 8008e7a:	4620      	mov	r0, r4
 8008e7c:	4629      	mov	r1, r5
 8008e7e:	f7f7 f96b 	bl	8000158 <__aeabi_dsub>
 8008e82:	4642      	mov	r2, r8
 8008e84:	464b      	mov	r3, r9
 8008e86:	f7f7 f967 	bl	8000158 <__aeabi_dsub>
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	460b      	mov	r3, r1
 8008e8e:	2000      	movs	r0, #0
 8008e90:	4939      	ldr	r1, [pc, #228]	; (8008f78 <__ieee754_pow+0xa20>)
 8008e92:	f7f7 f961 	bl	8000158 <__aeabi_dsub>
 8008e96:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8008e9a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008e9e:	da29      	bge.n	8008ef4 <__ieee754_pow+0x99c>
 8008ea0:	4652      	mov	r2, sl
 8008ea2:	f000 fae1 	bl	8009468 <scalbn>
 8008ea6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008eaa:	f7ff bbfe 	b.w	80086aa <__ieee754_pow+0x152>
 8008eae:	4b33      	ldr	r3, [pc, #204]	; (8008f7c <__ieee754_pow+0xa24>)
 8008eb0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8008eb4:	429f      	cmp	r7, r3
 8008eb6:	f77f af13 	ble.w	8008ce0 <__ieee754_pow+0x788>
 8008eba:	4b31      	ldr	r3, [pc, #196]	; (8008f80 <__ieee754_pow+0xa28>)
 8008ebc:	440b      	add	r3, r1
 8008ebe:	4303      	orrs	r3, r0
 8008ec0:	d009      	beq.n	8008ed6 <__ieee754_pow+0x97e>
 8008ec2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	2300      	movs	r3, #0
 8008eca:	f7f7 fd6f 	bl	80009ac <__aeabi_dcmplt>
 8008ece:	3800      	subs	r0, #0
 8008ed0:	bf18      	it	ne
 8008ed2:	2001      	movne	r0, #1
 8008ed4:	e453      	b.n	800877e <__ieee754_pow+0x226>
 8008ed6:	4622      	mov	r2, r4
 8008ed8:	462b      	mov	r3, r5
 8008eda:	f7f7 f93d 	bl	8000158 <__aeabi_dsub>
 8008ede:	4642      	mov	r2, r8
 8008ee0:	464b      	mov	r3, r9
 8008ee2:	f7f7 fd77 	bl	80009d4 <__aeabi_dcmpge>
 8008ee6:	2800      	cmp	r0, #0
 8008ee8:	f43f aefa 	beq.w	8008ce0 <__ieee754_pow+0x788>
 8008eec:	e7e9      	b.n	8008ec2 <__ieee754_pow+0x96a>
 8008eee:	f04f 0a00 	mov.w	sl, #0
 8008ef2:	e720      	b.n	8008d36 <__ieee754_pow+0x7de>
 8008ef4:	4621      	mov	r1, r4
 8008ef6:	e7d6      	b.n	8008ea6 <__ieee754_pow+0x94e>
 8008ef8:	f04f 0b00 	mov.w	fp, #0
 8008efc:	f8df c078 	ldr.w	ip, [pc, #120]	; 8008f78 <__ieee754_pow+0xa20>
 8008f00:	f7ff bbba 	b.w	8008678 <__ieee754_pow+0x120>
 8008f04:	f04f 0b00 	mov.w	fp, #0
 8008f08:	f04f 0c00 	mov.w	ip, #0
 8008f0c:	f7ff bbb4 	b.w	8008678 <__ieee754_pow+0x120>
 8008f10:	4640      	mov	r0, r8
 8008f12:	4649      	mov	r1, r9
 8008f14:	f7ff bb3d 	b.w	8008592 <__ieee754_pow+0x3a>
 8008f18:	9200      	str	r2, [sp, #0]
 8008f1a:	f7ff bb89 	b.w	8008630 <__ieee754_pow+0xd8>
 8008f1e:	2300      	movs	r3, #0
 8008f20:	f7ff bb73 	b.w	800860a <__ieee754_pow+0xb2>
 8008f24:	f3af 8000 	nop.w
 8008f28:	652b82fe 	.word	0x652b82fe
 8008f2c:	3c971547 	.word	0x3c971547
 8008f30:	00000000 	.word	0x00000000
 8008f34:	3fe62e43 	.word	0x3fe62e43
 8008f38:	fefa39ef 	.word	0xfefa39ef
 8008f3c:	3fe62e42 	.word	0x3fe62e42
 8008f40:	0ca86c39 	.word	0x0ca86c39
 8008f44:	be205c61 	.word	0xbe205c61
 8008f48:	72bea4d0 	.word	0x72bea4d0
 8008f4c:	3e663769 	.word	0x3e663769
 8008f50:	c5d26bf1 	.word	0xc5d26bf1
 8008f54:	3ebbbd41 	.word	0x3ebbbd41
 8008f58:	af25de2c 	.word	0xaf25de2c
 8008f5c:	3f11566a 	.word	0x3f11566a
 8008f60:	16bebd93 	.word	0x16bebd93
 8008f64:	3f66c16c 	.word	0x3f66c16c
 8008f68:	5555553e 	.word	0x5555553e
 8008f6c:	3fc55555 	.word	0x3fc55555
 8008f70:	3fe00000 	.word	0x3fe00000
 8008f74:	000fffff 	.word	0x000fffff
 8008f78:	3ff00000 	.word	0x3ff00000
 8008f7c:	4090cbff 	.word	0x4090cbff
 8008f80:	3f6f3400 	.word	0x3f6f3400

08008f84 <__ieee754_sqrt>:
 8008f84:	f8df c158 	ldr.w	ip, [pc, #344]	; 80090e0 <__ieee754_sqrt+0x15c>
 8008f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f8c:	ea3c 0c01 	bics.w	ip, ip, r1
 8008f90:	4606      	mov	r6, r0
 8008f92:	460d      	mov	r5, r1
 8008f94:	460c      	mov	r4, r1
 8008f96:	460a      	mov	r2, r1
 8008f98:	4607      	mov	r7, r0
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	d10f      	bne.n	8008fbe <__ieee754_sqrt+0x3a>
 8008f9e:	4602      	mov	r2, r0
 8008fa0:	460b      	mov	r3, r1
 8008fa2:	f7f7 fa91 	bl	80004c8 <__aeabi_dmul>
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	460b      	mov	r3, r1
 8008faa:	4630      	mov	r0, r6
 8008fac:	4629      	mov	r1, r5
 8008fae:	f7f7 f8d5 	bl	800015c <__adddf3>
 8008fb2:	4606      	mov	r6, r0
 8008fb4:	460d      	mov	r5, r1
 8008fb6:	4630      	mov	r0, r6
 8008fb8:	4629      	mov	r1, r5
 8008fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fbe:	2900      	cmp	r1, #0
 8008fc0:	dc0e      	bgt.n	8008fe0 <__ieee754_sqrt+0x5c>
 8008fc2:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8008fc6:	ea5c 0707 	orrs.w	r7, ip, r7
 8008fca:	d0f4      	beq.n	8008fb6 <__ieee754_sqrt+0x32>
 8008fcc:	b141      	cbz	r1, 8008fe0 <__ieee754_sqrt+0x5c>
 8008fce:	4602      	mov	r2, r0
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	f7f7 f8c1 	bl	8000158 <__aeabi_dsub>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	460b      	mov	r3, r1
 8008fda:	f7f7 fb9f 	bl	800071c <__aeabi_ddiv>
 8008fde:	e7e8      	b.n	8008fb2 <__ieee754_sqrt+0x2e>
 8008fe0:	1521      	asrs	r1, r4, #20
 8008fe2:	d075      	beq.n	80090d0 <__ieee754_sqrt+0x14c>
 8008fe4:	07cc      	lsls	r4, r1, #31
 8008fe6:	f04f 0400 	mov.w	r4, #0
 8008fea:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008fee:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8008ff2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008ff6:	bf5e      	ittt	pl
 8008ff8:	0fd9      	lsrpl	r1, r3, #31
 8008ffa:	005b      	lslpl	r3, r3, #1
 8008ffc:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8009000:	0fd9      	lsrs	r1, r3, #31
 8009002:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8009006:	2516      	movs	r5, #22
 8009008:	4620      	mov	r0, r4
 800900a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800900e:	107f      	asrs	r7, r7, #1
 8009010:	005b      	lsls	r3, r3, #1
 8009012:	1846      	adds	r6, r0, r1
 8009014:	4296      	cmp	r6, r2
 8009016:	bfde      	ittt	le
 8009018:	1b92      	suble	r2, r2, r6
 800901a:	1870      	addle	r0, r6, r1
 800901c:	1864      	addle	r4, r4, r1
 800901e:	0052      	lsls	r2, r2, #1
 8009020:	3d01      	subs	r5, #1
 8009022:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009026:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800902a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800902e:	d1f0      	bne.n	8009012 <__ieee754_sqrt+0x8e>
 8009030:	4629      	mov	r1, r5
 8009032:	f04f 0e20 	mov.w	lr, #32
 8009036:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800903a:	4282      	cmp	r2, r0
 800903c:	eb06 0c05 	add.w	ip, r6, r5
 8009040:	dc02      	bgt.n	8009048 <__ieee754_sqrt+0xc4>
 8009042:	d113      	bne.n	800906c <__ieee754_sqrt+0xe8>
 8009044:	459c      	cmp	ip, r3
 8009046:	d811      	bhi.n	800906c <__ieee754_sqrt+0xe8>
 8009048:	f1bc 0f00 	cmp.w	ip, #0
 800904c:	eb0c 0506 	add.w	r5, ip, r6
 8009050:	da43      	bge.n	80090da <__ieee754_sqrt+0x156>
 8009052:	2d00      	cmp	r5, #0
 8009054:	db41      	blt.n	80090da <__ieee754_sqrt+0x156>
 8009056:	f100 0801 	add.w	r8, r0, #1
 800905a:	1a12      	subs	r2, r2, r0
 800905c:	4640      	mov	r0, r8
 800905e:	459c      	cmp	ip, r3
 8009060:	bf88      	it	hi
 8009062:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8009066:	eba3 030c 	sub.w	r3, r3, ip
 800906a:	4431      	add	r1, r6
 800906c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009070:	f1be 0e01 	subs.w	lr, lr, #1
 8009074:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8009078:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800907c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009080:	d1db      	bne.n	800903a <__ieee754_sqrt+0xb6>
 8009082:	4313      	orrs	r3, r2
 8009084:	d006      	beq.n	8009094 <__ieee754_sqrt+0x110>
 8009086:	1c48      	adds	r0, r1, #1
 8009088:	bf0b      	itete	eq
 800908a:	4671      	moveq	r1, lr
 800908c:	3101      	addne	r1, #1
 800908e:	3401      	addeq	r4, #1
 8009090:	f021 0101 	bicne.w	r1, r1, #1
 8009094:	1063      	asrs	r3, r4, #1
 8009096:	0849      	lsrs	r1, r1, #1
 8009098:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800909c:	07e2      	lsls	r2, r4, #31
 800909e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80090a2:	bf48      	it	mi
 80090a4:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80090a8:	460e      	mov	r6, r1
 80090aa:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80090ae:	e782      	b.n	8008fb6 <__ieee754_sqrt+0x32>
 80090b0:	0ada      	lsrs	r2, r3, #11
 80090b2:	3815      	subs	r0, #21
 80090b4:	055b      	lsls	r3, r3, #21
 80090b6:	2a00      	cmp	r2, #0
 80090b8:	d0fa      	beq.n	80090b0 <__ieee754_sqrt+0x12c>
 80090ba:	02d5      	lsls	r5, r2, #11
 80090bc:	d50a      	bpl.n	80090d4 <__ieee754_sqrt+0x150>
 80090be:	f1c1 0420 	rsb	r4, r1, #32
 80090c2:	fa23 f404 	lsr.w	r4, r3, r4
 80090c6:	1e4d      	subs	r5, r1, #1
 80090c8:	408b      	lsls	r3, r1
 80090ca:	4322      	orrs	r2, r4
 80090cc:	1b41      	subs	r1, r0, r5
 80090ce:	e789      	b.n	8008fe4 <__ieee754_sqrt+0x60>
 80090d0:	4608      	mov	r0, r1
 80090d2:	e7f0      	b.n	80090b6 <__ieee754_sqrt+0x132>
 80090d4:	0052      	lsls	r2, r2, #1
 80090d6:	3101      	adds	r1, #1
 80090d8:	e7ef      	b.n	80090ba <__ieee754_sqrt+0x136>
 80090da:	4680      	mov	r8, r0
 80090dc:	e7bd      	b.n	800905a <__ieee754_sqrt+0xd6>
 80090de:	bf00      	nop
 80090e0:	7ff00000 	.word	0x7ff00000

080090e4 <with_errno>:
 80090e4:	b570      	push	{r4, r5, r6, lr}
 80090e6:	4604      	mov	r4, r0
 80090e8:	460d      	mov	r5, r1
 80090ea:	4616      	mov	r6, r2
 80090ec:	f7ff f89e 	bl	800822c <__errno>
 80090f0:	4629      	mov	r1, r5
 80090f2:	6006      	str	r6, [r0, #0]
 80090f4:	4620      	mov	r0, r4
 80090f6:	bd70      	pop	{r4, r5, r6, pc}

080090f8 <xflow>:
 80090f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80090fa:	4615      	mov	r5, r2
 80090fc:	461c      	mov	r4, r3
 80090fe:	b180      	cbz	r0, 8009122 <xflow+0x2a>
 8009100:	4610      	mov	r0, r2
 8009102:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009106:	e9cd 0100 	strd	r0, r1, [sp]
 800910a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800910e:	4628      	mov	r0, r5
 8009110:	4621      	mov	r1, r4
 8009112:	f7f7 f9d9 	bl	80004c8 <__aeabi_dmul>
 8009116:	2222      	movs	r2, #34	; 0x22
 8009118:	b003      	add	sp, #12
 800911a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800911e:	f7ff bfe1 	b.w	80090e4 <with_errno>
 8009122:	4610      	mov	r0, r2
 8009124:	4619      	mov	r1, r3
 8009126:	e7ee      	b.n	8009106 <xflow+0xe>

08009128 <__math_uflow>:
 8009128:	2200      	movs	r2, #0
 800912a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800912e:	f7ff bfe3 	b.w	80090f8 <xflow>

08009132 <__math_oflow>:
 8009132:	2200      	movs	r2, #0
 8009134:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009138:	f7ff bfde 	b.w	80090f8 <xflow>
 800913c:	0000      	movs	r0, r0
	...

08009140 <atan>:
 8009140:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009144:	4bb6      	ldr	r3, [pc, #728]	; (8009420 <atan+0x2e0>)
 8009146:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800914a:	429e      	cmp	r6, r3
 800914c:	4604      	mov	r4, r0
 800914e:	460d      	mov	r5, r1
 8009150:	468b      	mov	fp, r1
 8009152:	dd17      	ble.n	8009184 <atan+0x44>
 8009154:	4bb3      	ldr	r3, [pc, #716]	; (8009424 <atan+0x2e4>)
 8009156:	429e      	cmp	r6, r3
 8009158:	dc01      	bgt.n	800915e <atan+0x1e>
 800915a:	d109      	bne.n	8009170 <atan+0x30>
 800915c:	b140      	cbz	r0, 8009170 <atan+0x30>
 800915e:	4622      	mov	r2, r4
 8009160:	462b      	mov	r3, r5
 8009162:	4620      	mov	r0, r4
 8009164:	4629      	mov	r1, r5
 8009166:	f7f6 fff9 	bl	800015c <__adddf3>
 800916a:	4604      	mov	r4, r0
 800916c:	460d      	mov	r5, r1
 800916e:	e005      	b.n	800917c <atan+0x3c>
 8009170:	f1bb 0f00 	cmp.w	fp, #0
 8009174:	4cac      	ldr	r4, [pc, #688]	; (8009428 <atan+0x2e8>)
 8009176:	f300 8121 	bgt.w	80093bc <atan+0x27c>
 800917a:	4dac      	ldr	r5, [pc, #688]	; (800942c <atan+0x2ec>)
 800917c:	4620      	mov	r0, r4
 800917e:	4629      	mov	r1, r5
 8009180:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009184:	4baa      	ldr	r3, [pc, #680]	; (8009430 <atan+0x2f0>)
 8009186:	429e      	cmp	r6, r3
 8009188:	dc11      	bgt.n	80091ae <atan+0x6e>
 800918a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800918e:	429e      	cmp	r6, r3
 8009190:	dc0a      	bgt.n	80091a8 <atan+0x68>
 8009192:	a38b      	add	r3, pc, #556	; (adr r3, 80093c0 <atan+0x280>)
 8009194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009198:	f7f6 ffe0 	bl	800015c <__adddf3>
 800919c:	2200      	movs	r2, #0
 800919e:	4ba5      	ldr	r3, [pc, #660]	; (8009434 <atan+0x2f4>)
 80091a0:	f7f7 fc22 	bl	80009e8 <__aeabi_dcmpgt>
 80091a4:	2800      	cmp	r0, #0
 80091a6:	d1e9      	bne.n	800917c <atan+0x3c>
 80091a8:	f04f 3aff 	mov.w	sl, #4294967295
 80091ac:	e027      	b.n	80091fe <atan+0xbe>
 80091ae:	f000 f951 	bl	8009454 <fabs>
 80091b2:	4ba1      	ldr	r3, [pc, #644]	; (8009438 <atan+0x2f8>)
 80091b4:	4604      	mov	r4, r0
 80091b6:	429e      	cmp	r6, r3
 80091b8:	460d      	mov	r5, r1
 80091ba:	f300 80b8 	bgt.w	800932e <atan+0x1ee>
 80091be:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80091c2:	429e      	cmp	r6, r3
 80091c4:	f300 809c 	bgt.w	8009300 <atan+0x1c0>
 80091c8:	4602      	mov	r2, r0
 80091ca:	460b      	mov	r3, r1
 80091cc:	f7f6 ffc6 	bl	800015c <__adddf3>
 80091d0:	2200      	movs	r2, #0
 80091d2:	4b98      	ldr	r3, [pc, #608]	; (8009434 <atan+0x2f4>)
 80091d4:	f7f6 ffc0 	bl	8000158 <__aeabi_dsub>
 80091d8:	2200      	movs	r2, #0
 80091da:	4606      	mov	r6, r0
 80091dc:	460f      	mov	r7, r1
 80091de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80091e2:	4620      	mov	r0, r4
 80091e4:	4629      	mov	r1, r5
 80091e6:	f7f6 ffb9 	bl	800015c <__adddf3>
 80091ea:	4602      	mov	r2, r0
 80091ec:	460b      	mov	r3, r1
 80091ee:	4630      	mov	r0, r6
 80091f0:	4639      	mov	r1, r7
 80091f2:	f7f7 fa93 	bl	800071c <__aeabi_ddiv>
 80091f6:	f04f 0a00 	mov.w	sl, #0
 80091fa:	4604      	mov	r4, r0
 80091fc:	460d      	mov	r5, r1
 80091fe:	4622      	mov	r2, r4
 8009200:	462b      	mov	r3, r5
 8009202:	4620      	mov	r0, r4
 8009204:	4629      	mov	r1, r5
 8009206:	f7f7 f95f 	bl	80004c8 <__aeabi_dmul>
 800920a:	4602      	mov	r2, r0
 800920c:	460b      	mov	r3, r1
 800920e:	4680      	mov	r8, r0
 8009210:	4689      	mov	r9, r1
 8009212:	f7f7 f959 	bl	80004c8 <__aeabi_dmul>
 8009216:	a36c      	add	r3, pc, #432	; (adr r3, 80093c8 <atan+0x288>)
 8009218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800921c:	4606      	mov	r6, r0
 800921e:	460f      	mov	r7, r1
 8009220:	f7f7 f952 	bl	80004c8 <__aeabi_dmul>
 8009224:	a36a      	add	r3, pc, #424	; (adr r3, 80093d0 <atan+0x290>)
 8009226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922a:	f7f6 ff97 	bl	800015c <__adddf3>
 800922e:	4632      	mov	r2, r6
 8009230:	463b      	mov	r3, r7
 8009232:	f7f7 f949 	bl	80004c8 <__aeabi_dmul>
 8009236:	a368      	add	r3, pc, #416	; (adr r3, 80093d8 <atan+0x298>)
 8009238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800923c:	f7f6 ff8e 	bl	800015c <__adddf3>
 8009240:	4632      	mov	r2, r6
 8009242:	463b      	mov	r3, r7
 8009244:	f7f7 f940 	bl	80004c8 <__aeabi_dmul>
 8009248:	a365      	add	r3, pc, #404	; (adr r3, 80093e0 <atan+0x2a0>)
 800924a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924e:	f7f6 ff85 	bl	800015c <__adddf3>
 8009252:	4632      	mov	r2, r6
 8009254:	463b      	mov	r3, r7
 8009256:	f7f7 f937 	bl	80004c8 <__aeabi_dmul>
 800925a:	a363      	add	r3, pc, #396	; (adr r3, 80093e8 <atan+0x2a8>)
 800925c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009260:	f7f6 ff7c 	bl	800015c <__adddf3>
 8009264:	4632      	mov	r2, r6
 8009266:	463b      	mov	r3, r7
 8009268:	f7f7 f92e 	bl	80004c8 <__aeabi_dmul>
 800926c:	a360      	add	r3, pc, #384	; (adr r3, 80093f0 <atan+0x2b0>)
 800926e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009272:	f7f6 ff73 	bl	800015c <__adddf3>
 8009276:	4642      	mov	r2, r8
 8009278:	464b      	mov	r3, r9
 800927a:	f7f7 f925 	bl	80004c8 <__aeabi_dmul>
 800927e:	a35e      	add	r3, pc, #376	; (adr r3, 80093f8 <atan+0x2b8>)
 8009280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009284:	4680      	mov	r8, r0
 8009286:	4689      	mov	r9, r1
 8009288:	4630      	mov	r0, r6
 800928a:	4639      	mov	r1, r7
 800928c:	f7f7 f91c 	bl	80004c8 <__aeabi_dmul>
 8009290:	a35b      	add	r3, pc, #364	; (adr r3, 8009400 <atan+0x2c0>)
 8009292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009296:	f7f6 ff5f 	bl	8000158 <__aeabi_dsub>
 800929a:	4632      	mov	r2, r6
 800929c:	463b      	mov	r3, r7
 800929e:	f7f7 f913 	bl	80004c8 <__aeabi_dmul>
 80092a2:	a359      	add	r3, pc, #356	; (adr r3, 8009408 <atan+0x2c8>)
 80092a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a8:	f7f6 ff56 	bl	8000158 <__aeabi_dsub>
 80092ac:	4632      	mov	r2, r6
 80092ae:	463b      	mov	r3, r7
 80092b0:	f7f7 f90a 	bl	80004c8 <__aeabi_dmul>
 80092b4:	a356      	add	r3, pc, #344	; (adr r3, 8009410 <atan+0x2d0>)
 80092b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ba:	f7f6 ff4d 	bl	8000158 <__aeabi_dsub>
 80092be:	4632      	mov	r2, r6
 80092c0:	463b      	mov	r3, r7
 80092c2:	f7f7 f901 	bl	80004c8 <__aeabi_dmul>
 80092c6:	a354      	add	r3, pc, #336	; (adr r3, 8009418 <atan+0x2d8>)
 80092c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092cc:	f7f6 ff44 	bl	8000158 <__aeabi_dsub>
 80092d0:	4632      	mov	r2, r6
 80092d2:	463b      	mov	r3, r7
 80092d4:	f7f7 f8f8 	bl	80004c8 <__aeabi_dmul>
 80092d8:	4602      	mov	r2, r0
 80092da:	460b      	mov	r3, r1
 80092dc:	4640      	mov	r0, r8
 80092de:	4649      	mov	r1, r9
 80092e0:	f7f6 ff3c 	bl	800015c <__adddf3>
 80092e4:	4622      	mov	r2, r4
 80092e6:	462b      	mov	r3, r5
 80092e8:	f7f7 f8ee 	bl	80004c8 <__aeabi_dmul>
 80092ec:	f1ba 3fff 	cmp.w	sl, #4294967295
 80092f0:	4602      	mov	r2, r0
 80092f2:	460b      	mov	r3, r1
 80092f4:	d144      	bne.n	8009380 <atan+0x240>
 80092f6:	4620      	mov	r0, r4
 80092f8:	4629      	mov	r1, r5
 80092fa:	f7f6 ff2d 	bl	8000158 <__aeabi_dsub>
 80092fe:	e734      	b.n	800916a <atan+0x2a>
 8009300:	2200      	movs	r2, #0
 8009302:	4b4c      	ldr	r3, [pc, #304]	; (8009434 <atan+0x2f4>)
 8009304:	f7f6 ff28 	bl	8000158 <__aeabi_dsub>
 8009308:	2200      	movs	r2, #0
 800930a:	4606      	mov	r6, r0
 800930c:	460f      	mov	r7, r1
 800930e:	4620      	mov	r0, r4
 8009310:	4629      	mov	r1, r5
 8009312:	4b48      	ldr	r3, [pc, #288]	; (8009434 <atan+0x2f4>)
 8009314:	f7f6 ff22 	bl	800015c <__adddf3>
 8009318:	4602      	mov	r2, r0
 800931a:	460b      	mov	r3, r1
 800931c:	4630      	mov	r0, r6
 800931e:	4639      	mov	r1, r7
 8009320:	f7f7 f9fc 	bl	800071c <__aeabi_ddiv>
 8009324:	f04f 0a01 	mov.w	sl, #1
 8009328:	4604      	mov	r4, r0
 800932a:	460d      	mov	r5, r1
 800932c:	e767      	b.n	80091fe <atan+0xbe>
 800932e:	4b43      	ldr	r3, [pc, #268]	; (800943c <atan+0x2fc>)
 8009330:	429e      	cmp	r6, r3
 8009332:	da1a      	bge.n	800936a <atan+0x22a>
 8009334:	2200      	movs	r2, #0
 8009336:	4b42      	ldr	r3, [pc, #264]	; (8009440 <atan+0x300>)
 8009338:	f7f6 ff0e 	bl	8000158 <__aeabi_dsub>
 800933c:	2200      	movs	r2, #0
 800933e:	4606      	mov	r6, r0
 8009340:	460f      	mov	r7, r1
 8009342:	4620      	mov	r0, r4
 8009344:	4629      	mov	r1, r5
 8009346:	4b3e      	ldr	r3, [pc, #248]	; (8009440 <atan+0x300>)
 8009348:	f7f7 f8be 	bl	80004c8 <__aeabi_dmul>
 800934c:	2200      	movs	r2, #0
 800934e:	4b39      	ldr	r3, [pc, #228]	; (8009434 <atan+0x2f4>)
 8009350:	f7f6 ff04 	bl	800015c <__adddf3>
 8009354:	4602      	mov	r2, r0
 8009356:	460b      	mov	r3, r1
 8009358:	4630      	mov	r0, r6
 800935a:	4639      	mov	r1, r7
 800935c:	f7f7 f9de 	bl	800071c <__aeabi_ddiv>
 8009360:	f04f 0a02 	mov.w	sl, #2
 8009364:	4604      	mov	r4, r0
 8009366:	460d      	mov	r5, r1
 8009368:	e749      	b.n	80091fe <atan+0xbe>
 800936a:	4602      	mov	r2, r0
 800936c:	460b      	mov	r3, r1
 800936e:	2000      	movs	r0, #0
 8009370:	4934      	ldr	r1, [pc, #208]	; (8009444 <atan+0x304>)
 8009372:	f7f7 f9d3 	bl	800071c <__aeabi_ddiv>
 8009376:	f04f 0a03 	mov.w	sl, #3
 800937a:	4604      	mov	r4, r0
 800937c:	460d      	mov	r5, r1
 800937e:	e73e      	b.n	80091fe <atan+0xbe>
 8009380:	4b31      	ldr	r3, [pc, #196]	; (8009448 <atan+0x308>)
 8009382:	4e32      	ldr	r6, [pc, #200]	; (800944c <atan+0x30c>)
 8009384:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009388:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800938c:	e9da 2300 	ldrd	r2, r3, [sl]
 8009390:	f7f6 fee2 	bl	8000158 <__aeabi_dsub>
 8009394:	4622      	mov	r2, r4
 8009396:	462b      	mov	r3, r5
 8009398:	f7f6 fede 	bl	8000158 <__aeabi_dsub>
 800939c:	4602      	mov	r2, r0
 800939e:	460b      	mov	r3, r1
 80093a0:	e9d6 0100 	ldrd	r0, r1, [r6]
 80093a4:	f7f6 fed8 	bl	8000158 <__aeabi_dsub>
 80093a8:	f1bb 0f00 	cmp.w	fp, #0
 80093ac:	4604      	mov	r4, r0
 80093ae:	460d      	mov	r5, r1
 80093b0:	f6bf aee4 	bge.w	800917c <atan+0x3c>
 80093b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80093b8:	461d      	mov	r5, r3
 80093ba:	e6df      	b.n	800917c <atan+0x3c>
 80093bc:	4d24      	ldr	r5, [pc, #144]	; (8009450 <atan+0x310>)
 80093be:	e6dd      	b.n	800917c <atan+0x3c>
 80093c0:	8800759c 	.word	0x8800759c
 80093c4:	7e37e43c 	.word	0x7e37e43c
 80093c8:	e322da11 	.word	0xe322da11
 80093cc:	3f90ad3a 	.word	0x3f90ad3a
 80093d0:	24760deb 	.word	0x24760deb
 80093d4:	3fa97b4b 	.word	0x3fa97b4b
 80093d8:	a0d03d51 	.word	0xa0d03d51
 80093dc:	3fb10d66 	.word	0x3fb10d66
 80093e0:	c54c206e 	.word	0xc54c206e
 80093e4:	3fb745cd 	.word	0x3fb745cd
 80093e8:	920083ff 	.word	0x920083ff
 80093ec:	3fc24924 	.word	0x3fc24924
 80093f0:	5555550d 	.word	0x5555550d
 80093f4:	3fd55555 	.word	0x3fd55555
 80093f8:	2c6a6c2f 	.word	0x2c6a6c2f
 80093fc:	bfa2b444 	.word	0xbfa2b444
 8009400:	52defd9a 	.word	0x52defd9a
 8009404:	3fadde2d 	.word	0x3fadde2d
 8009408:	af749a6d 	.word	0xaf749a6d
 800940c:	3fb3b0f2 	.word	0x3fb3b0f2
 8009410:	fe231671 	.word	0xfe231671
 8009414:	3fbc71c6 	.word	0x3fbc71c6
 8009418:	9998ebc4 	.word	0x9998ebc4
 800941c:	3fc99999 	.word	0x3fc99999
 8009420:	440fffff 	.word	0x440fffff
 8009424:	7ff00000 	.word	0x7ff00000
 8009428:	54442d18 	.word	0x54442d18
 800942c:	bff921fb 	.word	0xbff921fb
 8009430:	3fdbffff 	.word	0x3fdbffff
 8009434:	3ff00000 	.word	0x3ff00000
 8009438:	3ff2ffff 	.word	0x3ff2ffff
 800943c:	40038000 	.word	0x40038000
 8009440:	3ff80000 	.word	0x3ff80000
 8009444:	bff00000 	.word	0xbff00000
 8009448:	08009dc0 	.word	0x08009dc0
 800944c:	08009da0 	.word	0x08009da0
 8009450:	3ff921fb 	.word	0x3ff921fb

08009454 <fabs>:
 8009454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009458:	4770      	bx	lr

0800945a <finite>:
 800945a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800945e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009462:	0fc0      	lsrs	r0, r0, #31
 8009464:	4770      	bx	lr
	...

08009468 <scalbn>:
 8009468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800946a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800946e:	4604      	mov	r4, r0
 8009470:	460d      	mov	r5, r1
 8009472:	4617      	mov	r7, r2
 8009474:	460b      	mov	r3, r1
 8009476:	b996      	cbnz	r6, 800949e <scalbn+0x36>
 8009478:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800947c:	4303      	orrs	r3, r0
 800947e:	d039      	beq.n	80094f4 <scalbn+0x8c>
 8009480:	4b33      	ldr	r3, [pc, #204]	; (8009550 <scalbn+0xe8>)
 8009482:	2200      	movs	r2, #0
 8009484:	f7f7 f820 	bl	80004c8 <__aeabi_dmul>
 8009488:	4b32      	ldr	r3, [pc, #200]	; (8009554 <scalbn+0xec>)
 800948a:	4604      	mov	r4, r0
 800948c:	429f      	cmp	r7, r3
 800948e:	460d      	mov	r5, r1
 8009490:	da0f      	bge.n	80094b2 <scalbn+0x4a>
 8009492:	a32b      	add	r3, pc, #172	; (adr r3, 8009540 <scalbn+0xd8>)
 8009494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009498:	f7f7 f816 	bl	80004c8 <__aeabi_dmul>
 800949c:	e006      	b.n	80094ac <scalbn+0x44>
 800949e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80094a2:	4296      	cmp	r6, r2
 80094a4:	d10a      	bne.n	80094bc <scalbn+0x54>
 80094a6:	4602      	mov	r2, r0
 80094a8:	f7f6 fe58 	bl	800015c <__adddf3>
 80094ac:	4604      	mov	r4, r0
 80094ae:	460d      	mov	r5, r1
 80094b0:	e020      	b.n	80094f4 <scalbn+0x8c>
 80094b2:	460b      	mov	r3, r1
 80094b4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80094b8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 80094bc:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80094c0:	19b9      	adds	r1, r7, r6
 80094c2:	4291      	cmp	r1, r2
 80094c4:	dd0e      	ble.n	80094e4 <scalbn+0x7c>
 80094c6:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80094ca:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80094ce:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80094d2:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80094d6:	4820      	ldr	r0, [pc, #128]	; (8009558 <scalbn+0xf0>)
 80094d8:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80094dc:	a31a      	add	r3, pc, #104	; (adr r3, 8009548 <scalbn+0xe0>)
 80094de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e2:	e7d9      	b.n	8009498 <scalbn+0x30>
 80094e4:	2900      	cmp	r1, #0
 80094e6:	dd08      	ble.n	80094fa <scalbn+0x92>
 80094e8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80094ec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80094f0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80094f4:	4620      	mov	r0, r4
 80094f6:	4629      	mov	r1, r5
 80094f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094fa:	f111 0f35 	cmn.w	r1, #53	; 0x35
 80094fe:	da12      	bge.n	8009526 <scalbn+0xbe>
 8009500:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009504:	429f      	cmp	r7, r3
 8009506:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800950a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800950e:	dcdc      	bgt.n	80094ca <scalbn+0x62>
 8009510:	a30b      	add	r3, pc, #44	; (adr r3, 8009540 <scalbn+0xd8>)
 8009512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009516:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800951a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800951e:	480f      	ldr	r0, [pc, #60]	; (800955c <scalbn+0xf4>)
 8009520:	f041 011f 	orr.w	r1, r1, #31
 8009524:	e7b8      	b.n	8009498 <scalbn+0x30>
 8009526:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800952a:	3136      	adds	r1, #54	; 0x36
 800952c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009530:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8009534:	4620      	mov	r0, r4
 8009536:	4629      	mov	r1, r5
 8009538:	2200      	movs	r2, #0
 800953a:	4b09      	ldr	r3, [pc, #36]	; (8009560 <scalbn+0xf8>)
 800953c:	e7ac      	b.n	8009498 <scalbn+0x30>
 800953e:	bf00      	nop
 8009540:	c2f8f359 	.word	0xc2f8f359
 8009544:	01a56e1f 	.word	0x01a56e1f
 8009548:	8800759c 	.word	0x8800759c
 800954c:	7e37e43c 	.word	0x7e37e43c
 8009550:	43500000 	.word	0x43500000
 8009554:	ffff3cb0 	.word	0xffff3cb0
 8009558:	8800759c 	.word	0x8800759c
 800955c:	c2f8f359 	.word	0xc2f8f359
 8009560:	3c900000 	.word	0x3c900000

08009564 <_init>:
 8009564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009566:	bf00      	nop
 8009568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800956a:	bc08      	pop	{r3}
 800956c:	469e      	mov	lr, r3
 800956e:	4770      	bx	lr

08009570 <_fini>:
 8009570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009572:	bf00      	nop
 8009574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009576:	bc08      	pop	{r3}
 8009578:	469e      	mov	lr, r3
 800957a:	4770      	bx	lr
