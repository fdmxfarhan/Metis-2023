
metis2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd6c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d78  0800bef8  0800bef8  0001bef8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dc70  0800dc70  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800dc70  0800dc70  0001dc70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dc78  0800dc78  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dc78  0800dc78  0001dc78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dc7c  0800dc7c  0001dc7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  0800dc80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a0  2**0
                  CONTENTS
 10 .bss          00000728  200000a0  200000a0  000200a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200007c8  200007c8  000200a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014283  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028b0  00000000  00000000  00034353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011b8  00000000  00000000  00036c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010d8  00000000  00000000  00037dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000233d8  00000000  00000000  00038e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000165c2  00000000  00000000  0005c270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da4b0  00000000  00000000  00072832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014cce2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000530c  00000000  00000000  0014cd34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000a0 	.word	0x200000a0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800bedc 	.word	0x0800bedc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000a4 	.word	0x200000a4
 80001c4:	0800bedc 	.word	0x0800bedc

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_uldivmod>:
 8000af0:	b953      	cbnz	r3, 8000b08 <__aeabi_uldivmod+0x18>
 8000af2:	b94a      	cbnz	r2, 8000b08 <__aeabi_uldivmod+0x18>
 8000af4:	2900      	cmp	r1, #0
 8000af6:	bf08      	it	eq
 8000af8:	2800      	cmpeq	r0, #0
 8000afa:	bf1c      	itt	ne
 8000afc:	f04f 31ff 	movne.w	r1, #4294967295
 8000b00:	f04f 30ff 	movne.w	r0, #4294967295
 8000b04:	f000 b974 	b.w	8000df0 <__aeabi_idiv0>
 8000b08:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b10:	f000 f806 	bl	8000b20 <__udivmoddi4>
 8000b14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b1c:	b004      	add	sp, #16
 8000b1e:	4770      	bx	lr

08000b20 <__udivmoddi4>:
 8000b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b24:	9d08      	ldr	r5, [sp, #32]
 8000b26:	4604      	mov	r4, r0
 8000b28:	468e      	mov	lr, r1
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d14d      	bne.n	8000bca <__udivmoddi4+0xaa>
 8000b2e:	428a      	cmp	r2, r1
 8000b30:	4694      	mov	ip, r2
 8000b32:	d969      	bls.n	8000c08 <__udivmoddi4+0xe8>
 8000b34:	fab2 f282 	clz	r2, r2
 8000b38:	b152      	cbz	r2, 8000b50 <__udivmoddi4+0x30>
 8000b3a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b3e:	f1c2 0120 	rsb	r1, r2, #32
 8000b42:	fa20 f101 	lsr.w	r1, r0, r1
 8000b46:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b4a:	ea41 0e03 	orr.w	lr, r1, r3
 8000b4e:	4094      	lsls	r4, r2
 8000b50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b54:	0c21      	lsrs	r1, r4, #16
 8000b56:	fbbe f6f8 	udiv	r6, lr, r8
 8000b5a:	fa1f f78c 	uxth.w	r7, ip
 8000b5e:	fb08 e316 	mls	r3, r8, r6, lr
 8000b62:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b66:	fb06 f107 	mul.w	r1, r6, r7
 8000b6a:	4299      	cmp	r1, r3
 8000b6c:	d90a      	bls.n	8000b84 <__udivmoddi4+0x64>
 8000b6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b76:	f080 811f 	bcs.w	8000db8 <__udivmoddi4+0x298>
 8000b7a:	4299      	cmp	r1, r3
 8000b7c:	f240 811c 	bls.w	8000db8 <__udivmoddi4+0x298>
 8000b80:	3e02      	subs	r6, #2
 8000b82:	4463      	add	r3, ip
 8000b84:	1a5b      	subs	r3, r3, r1
 8000b86:	b2a4      	uxth	r4, r4
 8000b88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000b90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b94:	fb00 f707 	mul.w	r7, r0, r7
 8000b98:	42a7      	cmp	r7, r4
 8000b9a:	d90a      	bls.n	8000bb2 <__udivmoddi4+0x92>
 8000b9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ba0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ba4:	f080 810a 	bcs.w	8000dbc <__udivmoddi4+0x29c>
 8000ba8:	42a7      	cmp	r7, r4
 8000baa:	f240 8107 	bls.w	8000dbc <__udivmoddi4+0x29c>
 8000bae:	4464      	add	r4, ip
 8000bb0:	3802      	subs	r0, #2
 8000bb2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bb6:	1be4      	subs	r4, r4, r7
 8000bb8:	2600      	movs	r6, #0
 8000bba:	b11d      	cbz	r5, 8000bc4 <__udivmoddi4+0xa4>
 8000bbc:	40d4      	lsrs	r4, r2
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000bc4:	4631      	mov	r1, r6
 8000bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bca:	428b      	cmp	r3, r1
 8000bcc:	d909      	bls.n	8000be2 <__udivmoddi4+0xc2>
 8000bce:	2d00      	cmp	r5, #0
 8000bd0:	f000 80ef 	beq.w	8000db2 <__udivmoddi4+0x292>
 8000bd4:	2600      	movs	r6, #0
 8000bd6:	e9c5 0100 	strd	r0, r1, [r5]
 8000bda:	4630      	mov	r0, r6
 8000bdc:	4631      	mov	r1, r6
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	fab3 f683 	clz	r6, r3
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	d14a      	bne.n	8000c80 <__udivmoddi4+0x160>
 8000bea:	428b      	cmp	r3, r1
 8000bec:	d302      	bcc.n	8000bf4 <__udivmoddi4+0xd4>
 8000bee:	4282      	cmp	r2, r0
 8000bf0:	f200 80f9 	bhi.w	8000de6 <__udivmoddi4+0x2c6>
 8000bf4:	1a84      	subs	r4, r0, r2
 8000bf6:	eb61 0303 	sbc.w	r3, r1, r3
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	469e      	mov	lr, r3
 8000bfe:	2d00      	cmp	r5, #0
 8000c00:	d0e0      	beq.n	8000bc4 <__udivmoddi4+0xa4>
 8000c02:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c06:	e7dd      	b.n	8000bc4 <__udivmoddi4+0xa4>
 8000c08:	b902      	cbnz	r2, 8000c0c <__udivmoddi4+0xec>
 8000c0a:	deff      	udf	#255	; 0xff
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	2a00      	cmp	r2, #0
 8000c12:	f040 8092 	bne.w	8000d3a <__udivmoddi4+0x21a>
 8000c16:	eba1 010c 	sub.w	r1, r1, ip
 8000c1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1e:	fa1f fe8c 	uxth.w	lr, ip
 8000c22:	2601      	movs	r6, #1
 8000c24:	0c20      	lsrs	r0, r4, #16
 8000c26:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c2a:	fb07 1113 	mls	r1, r7, r3, r1
 8000c2e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c32:	fb0e f003 	mul.w	r0, lr, r3
 8000c36:	4288      	cmp	r0, r1
 8000c38:	d908      	bls.n	8000c4c <__udivmoddi4+0x12c>
 8000c3a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c3e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c42:	d202      	bcs.n	8000c4a <__udivmoddi4+0x12a>
 8000c44:	4288      	cmp	r0, r1
 8000c46:	f200 80cb 	bhi.w	8000de0 <__udivmoddi4+0x2c0>
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	1a09      	subs	r1, r1, r0
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c54:	fb07 1110 	mls	r1, r7, r0, r1
 8000c58:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000c60:	45a6      	cmp	lr, r4
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x156>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6c:	d202      	bcs.n	8000c74 <__udivmoddi4+0x154>
 8000c6e:	45a6      	cmp	lr, r4
 8000c70:	f200 80bb 	bhi.w	8000dea <__udivmoddi4+0x2ca>
 8000c74:	4608      	mov	r0, r1
 8000c76:	eba4 040e 	sub.w	r4, r4, lr
 8000c7a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c7e:	e79c      	b.n	8000bba <__udivmoddi4+0x9a>
 8000c80:	f1c6 0720 	rsb	r7, r6, #32
 8000c84:	40b3      	lsls	r3, r6
 8000c86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c8e:	fa20 f407 	lsr.w	r4, r0, r7
 8000c92:	fa01 f306 	lsl.w	r3, r1, r6
 8000c96:	431c      	orrs	r4, r3
 8000c98:	40f9      	lsrs	r1, r7
 8000c9a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c9e:	fa00 f306 	lsl.w	r3, r0, r6
 8000ca2:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ca6:	0c20      	lsrs	r0, r4, #16
 8000ca8:	fa1f fe8c 	uxth.w	lr, ip
 8000cac:	fb09 1118 	mls	r1, r9, r8, r1
 8000cb0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cb4:	fb08 f00e 	mul.w	r0, r8, lr
 8000cb8:	4288      	cmp	r0, r1
 8000cba:	fa02 f206 	lsl.w	r2, r2, r6
 8000cbe:	d90b      	bls.n	8000cd8 <__udivmoddi4+0x1b8>
 8000cc0:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cc8:	f080 8088 	bcs.w	8000ddc <__udivmoddi4+0x2bc>
 8000ccc:	4288      	cmp	r0, r1
 8000cce:	f240 8085 	bls.w	8000ddc <__udivmoddi4+0x2bc>
 8000cd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000cd6:	4461      	add	r1, ip
 8000cd8:	1a09      	subs	r1, r1, r0
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ce0:	fb09 1110 	mls	r1, r9, r0, r1
 8000ce4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	458e      	cmp	lr, r1
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x1e2>
 8000cf0:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cf8:	d26c      	bcs.n	8000dd4 <__udivmoddi4+0x2b4>
 8000cfa:	458e      	cmp	lr, r1
 8000cfc:	d96a      	bls.n	8000dd4 <__udivmoddi4+0x2b4>
 8000cfe:	3802      	subs	r0, #2
 8000d00:	4461      	add	r1, ip
 8000d02:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d06:	fba0 9402 	umull	r9, r4, r0, r2
 8000d0a:	eba1 010e 	sub.w	r1, r1, lr
 8000d0e:	42a1      	cmp	r1, r4
 8000d10:	46c8      	mov	r8, r9
 8000d12:	46a6      	mov	lr, r4
 8000d14:	d356      	bcc.n	8000dc4 <__udivmoddi4+0x2a4>
 8000d16:	d053      	beq.n	8000dc0 <__udivmoddi4+0x2a0>
 8000d18:	b15d      	cbz	r5, 8000d32 <__udivmoddi4+0x212>
 8000d1a:	ebb3 0208 	subs.w	r2, r3, r8
 8000d1e:	eb61 010e 	sbc.w	r1, r1, lr
 8000d22:	fa01 f707 	lsl.w	r7, r1, r7
 8000d26:	fa22 f306 	lsr.w	r3, r2, r6
 8000d2a:	40f1      	lsrs	r1, r6
 8000d2c:	431f      	orrs	r7, r3
 8000d2e:	e9c5 7100 	strd	r7, r1, [r5]
 8000d32:	2600      	movs	r6, #0
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	f1c2 0320 	rsb	r3, r2, #32
 8000d3e:	40d8      	lsrs	r0, r3
 8000d40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d44:	fa21 f303 	lsr.w	r3, r1, r3
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4301      	orrs	r1, r0
 8000d4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d50:	fa1f fe8c 	uxth.w	lr, ip
 8000d54:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d58:	fb07 3610 	mls	r6, r7, r0, r3
 8000d5c:	0c0b      	lsrs	r3, r1, #16
 8000d5e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d62:	fb00 f60e 	mul.w	r6, r0, lr
 8000d66:	429e      	cmp	r6, r3
 8000d68:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6c:	d908      	bls.n	8000d80 <__udivmoddi4+0x260>
 8000d6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d76:	d22f      	bcs.n	8000dd8 <__udivmoddi4+0x2b8>
 8000d78:	429e      	cmp	r6, r3
 8000d7a:	d92d      	bls.n	8000dd8 <__udivmoddi4+0x2b8>
 8000d7c:	3802      	subs	r0, #2
 8000d7e:	4463      	add	r3, ip
 8000d80:	1b9b      	subs	r3, r3, r6
 8000d82:	b289      	uxth	r1, r1
 8000d84:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d88:	fb07 3316 	mls	r3, r7, r6, r3
 8000d8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d90:	fb06 f30e 	mul.w	r3, r6, lr
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x28a>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000da0:	d216      	bcs.n	8000dd0 <__udivmoddi4+0x2b0>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d914      	bls.n	8000dd0 <__udivmoddi4+0x2b0>
 8000da6:	3e02      	subs	r6, #2
 8000da8:	4461      	add	r1, ip
 8000daa:	1ac9      	subs	r1, r1, r3
 8000dac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000db0:	e738      	b.n	8000c24 <__udivmoddi4+0x104>
 8000db2:	462e      	mov	r6, r5
 8000db4:	4628      	mov	r0, r5
 8000db6:	e705      	b.n	8000bc4 <__udivmoddi4+0xa4>
 8000db8:	4606      	mov	r6, r0
 8000dba:	e6e3      	b.n	8000b84 <__udivmoddi4+0x64>
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	e6f8      	b.n	8000bb2 <__udivmoddi4+0x92>
 8000dc0:	454b      	cmp	r3, r9
 8000dc2:	d2a9      	bcs.n	8000d18 <__udivmoddi4+0x1f8>
 8000dc4:	ebb9 0802 	subs.w	r8, r9, r2
 8000dc8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000dcc:	3801      	subs	r0, #1
 8000dce:	e7a3      	b.n	8000d18 <__udivmoddi4+0x1f8>
 8000dd0:	4646      	mov	r6, r8
 8000dd2:	e7ea      	b.n	8000daa <__udivmoddi4+0x28a>
 8000dd4:	4620      	mov	r0, r4
 8000dd6:	e794      	b.n	8000d02 <__udivmoddi4+0x1e2>
 8000dd8:	4640      	mov	r0, r8
 8000dda:	e7d1      	b.n	8000d80 <__udivmoddi4+0x260>
 8000ddc:	46d0      	mov	r8, sl
 8000dde:	e77b      	b.n	8000cd8 <__udivmoddi4+0x1b8>
 8000de0:	3b02      	subs	r3, #2
 8000de2:	4461      	add	r1, ip
 8000de4:	e732      	b.n	8000c4c <__udivmoddi4+0x12c>
 8000de6:	4630      	mov	r0, r6
 8000de8:	e709      	b.n	8000bfe <__udivmoddi4+0xde>
 8000dea:	4464      	add	r4, ip
 8000dec:	3802      	subs	r0, #2
 8000dee:	e742      	b.n	8000c76 <__udivmoddi4+0x156>

08000df0 <__aeabi_idiv0>:
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop

08000df4 <initGY>:
uint8_t GY_Init_Command[]    = {0xA5, 0x54, 0xA5, 0x51};
uint8_t GY_Request_Command[] = {0xA5, 0x51};
uint8_t GY_Set_Command[] = {0xA5, 0x55};


void initGY(UART_HandleTypeDef *huart){
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
	HAL_Delay(500);
 8000dfc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e00:	f002 fe68 	bl	8003ad4 <HAL_Delay>
	HAL_UART_Transmit(huart, GY_A5, 1, 100);
 8000e04:	2364      	movs	r3, #100	; 0x64
 8000e06:	2201      	movs	r2, #1
 8000e08:	4918      	ldr	r1, [pc, #96]	; (8000e6c <initGY+0x78>)
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f007 fc81 	bl	8008712 <HAL_UART_Transmit>
	HAL_UART_Transmit(huart, GY_54, 1, 100);
 8000e10:	2364      	movs	r3, #100	; 0x64
 8000e12:	2201      	movs	r2, #1
 8000e14:	4916      	ldr	r1, [pc, #88]	; (8000e70 <initGY+0x7c>)
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f007 fc7b 	bl	8008712 <HAL_UART_Transmit>
	HAL_Delay(500);
 8000e1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e20:	f002 fe58 	bl	8003ad4 <HAL_Delay>
	HAL_UART_Transmit(huart, GY_A5, 1, 100);
 8000e24:	2364      	movs	r3, #100	; 0x64
 8000e26:	2201      	movs	r2, #1
 8000e28:	4910      	ldr	r1, [pc, #64]	; (8000e6c <initGY+0x78>)
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f007 fc71 	bl	8008712 <HAL_UART_Transmit>
	HAL_UART_Transmit(huart, GY_51, 1, 100);
 8000e30:	2364      	movs	r3, #100	; 0x64
 8000e32:	2201      	movs	r2, #1
 8000e34:	490f      	ldr	r1, [pc, #60]	; (8000e74 <initGY+0x80>)
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f007 fc6b 	bl	8008712 <HAL_UART_Transmit>
	HAL_Delay(500);
 8000e3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e40:	f002 fe48 	bl	8003ad4 <HAL_Delay>
	HAL_UART_Transmit(huart, GY_A5, 1, 100);
 8000e44:	2364      	movs	r3, #100	; 0x64
 8000e46:	2201      	movs	r2, #1
 8000e48:	4908      	ldr	r1, [pc, #32]	; (8000e6c <initGY+0x78>)
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f007 fc61 	bl	8008712 <HAL_UART_Transmit>
	HAL_UART_Transmit(huart, GY_55, 1, 100);
 8000e50:	2364      	movs	r3, #100	; 0x64
 8000e52:	2201      	movs	r2, #1
 8000e54:	4908      	ldr	r1, [pc, #32]	; (8000e78 <initGY+0x84>)
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f007 fc5b 	bl	8008712 <HAL_UART_Transmit>
	HAL_Delay(500);
 8000e5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e60:	f002 fe38 	bl	8003ad4 <HAL_Delay>
}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20000000 	.word	0x20000000
 8000e70:	20000004 	.word	0x20000004
 8000e74:	20000008 	.word	0x20000008
 8000e78:	2000000c 	.word	0x2000000c

08000e7c <print_num>:
uint8_t battery_blink = 1, battery_blink_cnt = 0;
int already_shooted = 0, shoot_cnt = 0, mf_cnt = 0, stop_before_shoot_cnt = 0;
int arrived_to_goal = 0, ball_in_kicker = 0, out_state = 0;
char look_dir = 'F';

void print_num(char* label, int num, int x, int y){
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
 8000e88:	603b      	str	r3, [r7, #0]
	SSD1306_GotoXY(x, y);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	683a      	ldr	r2, [r7, #0]
 8000e90:	b292      	uxth	r2, r2
 8000e92:	4611      	mov	r1, r2
 8000e94:	4618      	mov	r0, r3
 8000e96:	f002 f9df 	bl	8003258 <SSD1306_GotoXY>
	SSD1306_Puts(label, &Font_7x10, SSD1306_COLOR_WHITE);
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	496d      	ldr	r1, [pc, #436]	; (8001054 <print_num+0x1d8>)
 8000e9e:	68f8      	ldr	r0, [r7, #12]
 8000ea0:	f002 fa70 	bl	8003384 <SSD1306_Puts>
	if(num >= 0){
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	db67      	blt.n	8000f7a <print_num+0xfe>
		SSD1306_Putc('+', &Font_7x10, SSD1306_COLOR_WHITE);
 8000eaa:	2201      	movs	r2, #1
 8000eac:	4969      	ldr	r1, [pc, #420]	; (8001054 <print_num+0x1d8>)
 8000eae:	202b      	movs	r0, #43	; 0x2b
 8000eb0:	f002 f9e8 	bl	8003284 <SSD1306_Putc>
		SSD1306_Putc((num/1000)%10+'0', &Font_7x10, SSD1306_COLOR_WHITE);
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	4a68      	ldr	r2, [pc, #416]	; (8001058 <print_num+0x1dc>)
 8000eb8:	fb82 1203 	smull	r1, r2, r2, r3
 8000ebc:	1192      	asrs	r2, r2, #6
 8000ebe:	17db      	asrs	r3, r3, #31
 8000ec0:	1ad2      	subs	r2, r2, r3
 8000ec2:	4b66      	ldr	r3, [pc, #408]	; (800105c <print_num+0x1e0>)
 8000ec4:	fb83 1302 	smull	r1, r3, r3, r2
 8000ec8:	1099      	asrs	r1, r3, #2
 8000eca:	17d3      	asrs	r3, r2, #31
 8000ecc:	1ac9      	subs	r1, r1, r3
 8000ece:	460b      	mov	r3, r1
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	440b      	add	r3, r1
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	1ad1      	subs	r1, r2, r3
 8000ed8:	b2cb      	uxtb	r3, r1
 8000eda:	3330      	adds	r3, #48	; 0x30
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	2201      	movs	r2, #1
 8000ee0:	495c      	ldr	r1, [pc, #368]	; (8001054 <print_num+0x1d8>)
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f002 f9ce 	bl	8003284 <SSD1306_Putc>
		SSD1306_Putc((num/100)%10+'0', &Font_7x10, SSD1306_COLOR_WHITE);
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	4a5d      	ldr	r2, [pc, #372]	; (8001060 <print_num+0x1e4>)
 8000eec:	fb82 1203 	smull	r1, r2, r2, r3
 8000ef0:	1152      	asrs	r2, r2, #5
 8000ef2:	17db      	asrs	r3, r3, #31
 8000ef4:	1ad2      	subs	r2, r2, r3
 8000ef6:	4b59      	ldr	r3, [pc, #356]	; (800105c <print_num+0x1e0>)
 8000ef8:	fb83 1302 	smull	r1, r3, r3, r2
 8000efc:	1099      	asrs	r1, r3, #2
 8000efe:	17d3      	asrs	r3, r2, #31
 8000f00:	1ac9      	subs	r1, r1, r3
 8000f02:	460b      	mov	r3, r1
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	440b      	add	r3, r1
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	1ad1      	subs	r1, r2, r3
 8000f0c:	b2cb      	uxtb	r3, r1
 8000f0e:	3330      	adds	r3, #48	; 0x30
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2201      	movs	r2, #1
 8000f14:	494f      	ldr	r1, [pc, #316]	; (8001054 <print_num+0x1d8>)
 8000f16:	4618      	mov	r0, r3
 8000f18:	f002 f9b4 	bl	8003284 <SSD1306_Putc>
		SSD1306_Putc((num/10)%10+'0', &Font_7x10, SSD1306_COLOR_WHITE);
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	4a4f      	ldr	r2, [pc, #316]	; (800105c <print_num+0x1e0>)
 8000f20:	fb82 1203 	smull	r1, r2, r2, r3
 8000f24:	1092      	asrs	r2, r2, #2
 8000f26:	17db      	asrs	r3, r3, #31
 8000f28:	1ad2      	subs	r2, r2, r3
 8000f2a:	4b4c      	ldr	r3, [pc, #304]	; (800105c <print_num+0x1e0>)
 8000f2c:	fb83 1302 	smull	r1, r3, r3, r2
 8000f30:	1099      	asrs	r1, r3, #2
 8000f32:	17d3      	asrs	r3, r2, #31
 8000f34:	1ac9      	subs	r1, r1, r3
 8000f36:	460b      	mov	r3, r1
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	440b      	add	r3, r1
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	1ad1      	subs	r1, r2, r3
 8000f40:	b2cb      	uxtb	r3, r1
 8000f42:	3330      	adds	r3, #48	; 0x30
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2201      	movs	r2, #1
 8000f48:	4942      	ldr	r1, [pc, #264]	; (8001054 <print_num+0x1d8>)
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f002 f99a 	bl	8003284 <SSD1306_Putc>
		SSD1306_Putc((num/1)%10+'0', &Font_7x10, SSD1306_COLOR_WHITE);
 8000f50:	68ba      	ldr	r2, [r7, #8]
 8000f52:	4b42      	ldr	r3, [pc, #264]	; (800105c <print_num+0x1e0>)
 8000f54:	fb83 1302 	smull	r1, r3, r3, r2
 8000f58:	1099      	asrs	r1, r3, #2
 8000f5a:	17d3      	asrs	r3, r2, #31
 8000f5c:	1ac9      	subs	r1, r1, r3
 8000f5e:	460b      	mov	r3, r1
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	440b      	add	r3, r1
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	1ad1      	subs	r1, r2, r3
 8000f68:	b2cb      	uxtb	r3, r1
 8000f6a:	3330      	adds	r3, #48	; 0x30
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2201      	movs	r2, #1
 8000f70:	4938      	ldr	r1, [pc, #224]	; (8001054 <print_num+0x1d8>)
 8000f72:	4618      	mov	r0, r3
 8000f74:	f002 f986 	bl	8003284 <SSD1306_Putc>
		SSD1306_Putc((-num/1000)%10+'0', &Font_7x10, SSD1306_COLOR_WHITE);
		SSD1306_Putc((-num/100)%10+'0', &Font_7x10, SSD1306_COLOR_WHITE);
		SSD1306_Putc((-num/10)%10+'0', &Font_7x10, SSD1306_COLOR_WHITE);
		SSD1306_Putc((-num/1)%10+'0', &Font_7x10, SSD1306_COLOR_WHITE);
	}
}
 8000f78:	e067      	b.n	800104a <print_num+0x1ce>
		SSD1306_Putc('-', &Font_7x10, SSD1306_COLOR_WHITE);
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	4935      	ldr	r1, [pc, #212]	; (8001054 <print_num+0x1d8>)
 8000f7e:	202d      	movs	r0, #45	; 0x2d
 8000f80:	f002 f980 	bl	8003284 <SSD1306_Putc>
		SSD1306_Putc((-num/1000)%10+'0', &Font_7x10, SSD1306_COLOR_WHITE);
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	4a34      	ldr	r2, [pc, #208]	; (8001058 <print_num+0x1dc>)
 8000f88:	fb82 1203 	smull	r1, r2, r2, r3
 8000f8c:	1192      	asrs	r2, r2, #6
 8000f8e:	17db      	asrs	r3, r3, #31
 8000f90:	1a9a      	subs	r2, r3, r2
 8000f92:	4b32      	ldr	r3, [pc, #200]	; (800105c <print_num+0x1e0>)
 8000f94:	fb83 1302 	smull	r1, r3, r3, r2
 8000f98:	1099      	asrs	r1, r3, #2
 8000f9a:	17d3      	asrs	r3, r2, #31
 8000f9c:	1ac9      	subs	r1, r1, r3
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	440b      	add	r3, r1
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	1ad1      	subs	r1, r2, r3
 8000fa8:	b2cb      	uxtb	r3, r1
 8000faa:	3330      	adds	r3, #48	; 0x30
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2201      	movs	r2, #1
 8000fb0:	4928      	ldr	r1, [pc, #160]	; (8001054 <print_num+0x1d8>)
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f002 f966 	bl	8003284 <SSD1306_Putc>
		SSD1306_Putc((-num/100)%10+'0', &Font_7x10, SSD1306_COLOR_WHITE);
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	4a29      	ldr	r2, [pc, #164]	; (8001060 <print_num+0x1e4>)
 8000fbc:	fb82 1203 	smull	r1, r2, r2, r3
 8000fc0:	1152      	asrs	r2, r2, #5
 8000fc2:	17db      	asrs	r3, r3, #31
 8000fc4:	1a9a      	subs	r2, r3, r2
 8000fc6:	4b25      	ldr	r3, [pc, #148]	; (800105c <print_num+0x1e0>)
 8000fc8:	fb83 1302 	smull	r1, r3, r3, r2
 8000fcc:	1099      	asrs	r1, r3, #2
 8000fce:	17d3      	asrs	r3, r2, #31
 8000fd0:	1ac9      	subs	r1, r1, r3
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	440b      	add	r3, r1
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	1ad1      	subs	r1, r2, r3
 8000fdc:	b2cb      	uxtb	r3, r1
 8000fde:	3330      	adds	r3, #48	; 0x30
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	491b      	ldr	r1, [pc, #108]	; (8001054 <print_num+0x1d8>)
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f002 f94c 	bl	8003284 <SSD1306_Putc>
		SSD1306_Putc((-num/10)%10+'0', &Font_7x10, SSD1306_COLOR_WHITE);
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	4a1b      	ldr	r2, [pc, #108]	; (800105c <print_num+0x1e0>)
 8000ff0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ff4:	1092      	asrs	r2, r2, #2
 8000ff6:	17db      	asrs	r3, r3, #31
 8000ff8:	1a9a      	subs	r2, r3, r2
 8000ffa:	4b18      	ldr	r3, [pc, #96]	; (800105c <print_num+0x1e0>)
 8000ffc:	fb83 1302 	smull	r1, r3, r3, r2
 8001000:	1099      	asrs	r1, r3, #2
 8001002:	17d3      	asrs	r3, r2, #31
 8001004:	1ac9      	subs	r1, r1, r3
 8001006:	460b      	mov	r3, r1
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	440b      	add	r3, r1
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	1ad1      	subs	r1, r2, r3
 8001010:	b2cb      	uxtb	r3, r1
 8001012:	3330      	adds	r3, #48	; 0x30
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2201      	movs	r2, #1
 8001018:	490e      	ldr	r1, [pc, #56]	; (8001054 <print_num+0x1d8>)
 800101a:	4618      	mov	r0, r3
 800101c:	f002 f932 	bl	8003284 <SSD1306_Putc>
		SSD1306_Putc((-num/1)%10+'0', &Font_7x10, SSD1306_COLOR_WHITE);
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	425a      	negs	r2, r3
 8001024:	4b0d      	ldr	r3, [pc, #52]	; (800105c <print_num+0x1e0>)
 8001026:	fb83 1302 	smull	r1, r3, r3, r2
 800102a:	1099      	asrs	r1, r3, #2
 800102c:	17d3      	asrs	r3, r2, #31
 800102e:	1ac9      	subs	r1, r1, r3
 8001030:	460b      	mov	r3, r1
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	440b      	add	r3, r1
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	1ad1      	subs	r1, r2, r3
 800103a:	b2cb      	uxtb	r3, r1
 800103c:	3330      	adds	r3, #48	; 0x30
 800103e:	b2db      	uxtb	r3, r3
 8001040:	2201      	movs	r2, #1
 8001042:	4904      	ldr	r1, [pc, #16]	; (8001054 <print_num+0x1d8>)
 8001044:	4618      	mov	r0, r3
 8001046:	f002 f91d 	bl	8003284 <SSD1306_Putc>
}
 800104a:	bf00      	nop
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000014 	.word	0x20000014
 8001058:	10624dd3 	.word	0x10624dd3
 800105c:	66666667 	.word	0x66666667
 8001060:	51eb851f 	.word	0x51eb851f

08001064 <read_adc>:
uint32_t read_adc(uint32_t channel){
 8001064:	b580      	push	{r7, lr}
 8001066:	b088      	sub	sp, #32
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 800106c:	f107 030c 	add.w	r3, r7, #12
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800107a:	2301      	movs	r3, #1
 800107c:	617b      	str	r3, [r7, #20]
	sConfig.Channel = channel;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	60fb      	str	r3, [r7, #12]
	sConfig.Rank = 1;
 8001082:	2301      	movs	r3, #1
 8001084:	613b      	str	r3, [r7, #16]
	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001086:	f107 030c 	add.w	r3, r7, #12
 800108a:	4619      	mov	r1, r3
 800108c:	4809      	ldr	r0, [pc, #36]	; (80010b4 <read_adc+0x50>)
 800108e:	f002 fef3 	bl	8003e78 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 8001092:	4808      	ldr	r0, [pc, #32]	; (80010b4 <read_adc+0x50>)
 8001094:	f002 fd86 	bl	8003ba4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001098:	f04f 31ff 	mov.w	r1, #4294967295
 800109c:	4805      	ldr	r0, [pc, #20]	; (80010b4 <read_adc+0x50>)
 800109e:	f002 fe53 	bl	8003d48 <HAL_ADC_PollForConversion>
	uint32_t val = HAL_ADC_GetValue(&hadc1);
 80010a2:	4804      	ldr	r0, [pc, #16]	; (80010b4 <read_adc+0x50>)
 80010a4:	f002 fedb 	bl	8003e5e <HAL_ADC_GetValue>
 80010a8:	61f8      	str	r0, [r7, #28]
	return val;
 80010aa:	69fb      	ldr	r3, [r7, #28]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3720      	adds	r7, #32
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	200000bc 	.word	0x200000bc

080010b8 <read_sensors>:
			}
		}
	}
	HAL_Delay(1);
}
void read_sensors(){
 80010b8:	b590      	push	{r4, r7, lr}
 80010ba:	b087      	sub	sp, #28
 80010bc:	af02      	add	r7, sp, #8
	if(HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin)){
 80010be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010c2:	4862      	ldr	r0, [pc, #392]	; (800124c <read_sensors+0x194>)
 80010c4:	f003 ffb4 	bl	8005030 <HAL_GPIO_ReadPin>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d06d      	beq.n	80011aa <read_sensors+0xf2>
		RED_ON;
 80010ce:	2201      	movs	r2, #1
 80010d0:	2120      	movs	r1, #32
 80010d2:	485e      	ldr	r0, [pc, #376]	; (800124c <read_sensors+0x194>)
 80010d4:	f003 ffc4 	bl	8005060 <HAL_GPIO_WritePin>
		BUZZER_ON;
 80010d8:	2201      	movs	r2, #1
 80010da:	2108      	movs	r1, #8
 80010dc:	485b      	ldr	r0, [pc, #364]	; (800124c <read_sensors+0x194>)
 80010de:	f003 ffbf 	bl	8005060 <HAL_GPIO_WritePin>
		for(int i=0; i<16; i++){
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	e04a      	b.n	800117e <read_sensors+0xc6>
			HAL_GPIO_WritePin(ADD0_GPIO_Port, ADD0_Pin, (i/1)%2);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	f003 0301 	and.w	r3, r3, #1
 80010f0:	bfb8      	it	lt
 80010f2:	425b      	neglt	r3, r3
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	461a      	mov	r2, r3
 80010f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010fc:	4854      	ldr	r0, [pc, #336]	; (8001250 <read_sensors+0x198>)
 80010fe:	f003 ffaf 	bl	8005060 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ADD1_GPIO_Port, ADD1_Pin, (i/2)%2);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	0fda      	lsrs	r2, r3, #31
 8001106:	4413      	add	r3, r2
 8001108:	105b      	asrs	r3, r3, #1
 800110a:	2b00      	cmp	r3, #0
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	bfb8      	it	lt
 8001112:	425b      	neglt	r3, r3
 8001114:	b2db      	uxtb	r3, r3
 8001116:	461a      	mov	r2, r3
 8001118:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800111c:	484c      	ldr	r0, [pc, #304]	; (8001250 <read_sensors+0x198>)
 800111e:	f003 ff9f 	bl	8005060 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ADD2_GPIO_Port, ADD2_Pin, (i/4)%2);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	2b00      	cmp	r3, #0
 8001126:	da00      	bge.n	800112a <read_sensors+0x72>
 8001128:	3303      	adds	r3, #3
 800112a:	109b      	asrs	r3, r3, #2
 800112c:	2b00      	cmp	r3, #0
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	bfb8      	it	lt
 8001134:	425b      	neglt	r3, r3
 8001136:	b2db      	uxtb	r3, r3
 8001138:	461a      	mov	r2, r3
 800113a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800113e:	4844      	ldr	r0, [pc, #272]	; (8001250 <read_sensors+0x198>)
 8001140:	f003 ff8e 	bl	8005060 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ADD3_GPIO_Port, ADD3_Pin, (i/8)%2);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2b00      	cmp	r3, #0
 8001148:	da00      	bge.n	800114c <read_sensors+0x94>
 800114a:	3307      	adds	r3, #7
 800114c:	10db      	asrs	r3, r3, #3
 800114e:	2b00      	cmp	r3, #0
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	bfb8      	it	lt
 8001156:	425b      	neglt	r3, r3
 8001158:	b2db      	uxtb	r3, r3
 800115a:	461a      	mov	r2, r3
 800115c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001160:	483b      	ldr	r0, [pc, #236]	; (8001250 <read_sensors+0x198>)
 8001162:	f003 ff7d 	bl	8005060 <HAL_GPIO_WritePin>
			kaf_set[i] = read_adc(ADC_CHANNEL_14);
 8001166:	200e      	movs	r0, #14
 8001168:	f7ff ff7c 	bl	8001064 <read_adc>
 800116c:	4603      	mov	r3, r0
 800116e:	4619      	mov	r1, r3
 8001170:	4a38      	ldr	r2, [pc, #224]	; (8001254 <read_sensors+0x19c>)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i=0; i<16; i++){
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	3301      	adds	r3, #1
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	2b0f      	cmp	r3, #15
 8001182:	ddb1      	ble.n	80010e8 <read_sensors+0x30>
		}
		while(HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin));
 8001184:	bf00      	nop
 8001186:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800118a:	4830      	ldr	r0, [pc, #192]	; (800124c <read_sensors+0x194>)
 800118c:	f003 ff50 	bl	8005030 <HAL_GPIO_ReadPin>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d1f7      	bne.n	8001186 <read_sensors+0xce>
		RED_OFF;
 8001196:	2200      	movs	r2, #0
 8001198:	2120      	movs	r1, #32
 800119a:	482c      	ldr	r0, [pc, #176]	; (800124c <read_sensors+0x194>)
 800119c:	f003 ff60 	bl	8005060 <HAL_GPIO_WritePin>
		BUZZER_OFF;
 80011a0:	2200      	movs	r2, #0
 80011a2:	2108      	movs	r1, #8
 80011a4:	4829      	ldr	r0, [pc, #164]	; (800124c <read_sensors+0x194>)
 80011a6:	f003 ff5b 	bl	8005060 <HAL_GPIO_WritePin>
	}
	if(HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin)){
 80011aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011ae:	4827      	ldr	r0, [pc, #156]	; (800124c <read_sensors+0x194>)
 80011b0:	f003 ff3e 	bl	8005030 <HAL_GPIO_ReadPin>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d014      	beq.n	80011e4 <read_sensors+0x12c>
		RED_ON;
 80011ba:	2201      	movs	r2, #1
 80011bc:	2120      	movs	r1, #32
 80011be:	4823      	ldr	r0, [pc, #140]	; (800124c <read_sensors+0x194>)
 80011c0:	f003 ff4e 	bl	8005060 <HAL_GPIO_WritePin>
		shoot();
 80011c4:	f001 fd60 	bl	8002c88 <shoot>
		while(HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin));
 80011c8:	bf00      	nop
 80011ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011ce:	481f      	ldr	r0, [pc, #124]	; (800124c <read_sensors+0x194>)
 80011d0:	f003 ff2e 	bl	8005030 <HAL_GPIO_ReadPin>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d1f7      	bne.n	80011ca <read_sensors+0x112>
		RED_OFF;
 80011da:	2200      	movs	r2, #0
 80011dc:	2120      	movs	r1, #32
 80011de:	481b      	ldr	r0, [pc, #108]	; (800124c <read_sensors+0x194>)
 80011e0:	f003 ff3e 	bl	8005060 <HAL_GPIO_WritePin>
	}
	if(GY_updated == 0){
 80011e4:	4b1c      	ldr	r3, [pc, #112]	; (8001258 <read_sensors+0x1a0>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d116      	bne.n	800121a <read_sensors+0x162>
		HAL_UART_Transmit(&huart2, &GY_Request_Command[0], 2, PHY_FULLDUPLEX_10M);
 80011ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011f0:	2202      	movs	r2, #2
 80011f2:	491a      	ldr	r1, [pc, #104]	; (800125c <read_sensors+0x1a4>)
 80011f4:	481a      	ldr	r0, [pc, #104]	; (8001260 <read_sensors+0x1a8>)
 80011f6:	f007 fa8c 	bl	8008712 <HAL_UART_Transmit>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, &Rx2_Buff[0], RX2_Size);
 80011fa:	2208      	movs	r2, #8
 80011fc:	4919      	ldr	r1, [pc, #100]	; (8001264 <read_sensors+0x1ac>)
 80011fe:	4818      	ldr	r0, [pc, #96]	; (8001260 <read_sensors+0x1a8>)
 8001200:	f007 fb19 	bl	8008836 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001204:	4b18      	ldr	r3, [pc, #96]	; (8001268 <read_sensors+0x1b0>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	4b17      	ldr	r3, [pc, #92]	; (8001268 <read_sensors+0x1b0>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f022 0208 	bic.w	r2, r2, #8
 8001212:	601a      	str	r2, [r3, #0]
		GY_updated = 1;
 8001214:	4b10      	ldr	r3, [pc, #64]	; (8001258 <read_sensors+0x1a0>)
 8001216:	2201      	movs	r2, #1
 8001218:	601a      	str	r2, [r3, #0]
	}
	if(pixy_updated == 0) {
 800121a:	4b14      	ldr	r3, [pc, #80]	; (800126c <read_sensors+0x1b4>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d110      	bne.n	8001244 <read_sensors+0x18c>
		HAL_I2C_Master_Transmit(&hi2c1, 0x54 << 1, &i2c_tx_data[0], sizeof(i2c_tx_data), 100);
 8001222:	2364      	movs	r3, #100	; 0x64
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	2301      	movs	r3, #1
 8001228:	4a11      	ldr	r2, [pc, #68]	; (8001270 <read_sensors+0x1b8>)
 800122a:	21a8      	movs	r1, #168	; 0xa8
 800122c:	4811      	ldr	r0, [pc, #68]	; (8001274 <read_sensors+0x1bc>)
 800122e:	f004 f875 	bl	800531c <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive_IT(&hi2c1, 0x54 << 1, &i2c_rx_data[0], sizeof(i2c_rx_data));
 8001232:	2340      	movs	r3, #64	; 0x40
 8001234:	4a10      	ldr	r2, [pc, #64]	; (8001278 <read_sensors+0x1c0>)
 8001236:	21a8      	movs	r1, #168	; 0xa8
 8001238:	480e      	ldr	r0, [pc, #56]	; (8001274 <read_sensors+0x1bc>)
 800123a:	f004 f96d 	bl	8005518 <HAL_I2C_Master_Receive_IT>
		pixy_updated = 1;
 800123e:	4b0b      	ldr	r3, [pc, #44]	; (800126c <read_sensors+0x1b4>)
 8001240:	2201      	movs	r2, #1
 8001242:	601a      	str	r2, [r3, #0]
	}
	for(int i=0; i<16; i++){
 8001244:	2300      	movs	r3, #0
 8001246:	60bb      	str	r3, [r7, #8]
 8001248:	e15a      	b.n	8001500 <read_sensors+0x448>
 800124a:	bf00      	nop
 800124c:	40020400 	.word	0x40020400
 8001250:	40020c00 	.word	0x40020c00
 8001254:	20000360 	.word	0x20000360
 8001258:	200002ac 	.word	0x200002ac
 800125c:	20000010 	.word	0x20000010
 8001260:	200001f4 	.word	0x200001f4
 8001264:	200002a0 	.word	0x200002a0
 8001268:	20000238 	.word	0x20000238
 800126c:	200002a8 	.word	0x200002a8
 8001270:	200002b0 	.word	0x200002b0
 8001274:	20000104 	.word	0x20000104
 8001278:	200002b4 	.word	0x200002b4
		HAL_GPIO_WritePin(ADD0_GPIO_Port, ADD0_Pin, (i/1)%2);
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	2b00      	cmp	r3, #0
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	bfb8      	it	lt
 8001286:	425b      	neglt	r3, r3
 8001288:	b2db      	uxtb	r3, r3
 800128a:	461a      	mov	r2, r3
 800128c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001290:	48a4      	ldr	r0, [pc, #656]	; (8001524 <read_sensors+0x46c>)
 8001292:	f003 fee5 	bl	8005060 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ADD1_GPIO_Port, ADD1_Pin, (i/2)%2);
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	0fda      	lsrs	r2, r3, #31
 800129a:	4413      	add	r3, r2
 800129c:	105b      	asrs	r3, r3, #1
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	bfb8      	it	lt
 80012a6:	425b      	neglt	r3, r3
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	461a      	mov	r2, r3
 80012ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012b0:	489c      	ldr	r0, [pc, #624]	; (8001524 <read_sensors+0x46c>)
 80012b2:	f003 fed5 	bl	8005060 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ADD2_GPIO_Port, ADD2_Pin, (i/4)%2);
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	da00      	bge.n	80012be <read_sensors+0x206>
 80012bc:	3303      	adds	r3, #3
 80012be:	109b      	asrs	r3, r3, #2
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	bfb8      	it	lt
 80012c8:	425b      	neglt	r3, r3
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	461a      	mov	r2, r3
 80012ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012d2:	4894      	ldr	r0, [pc, #592]	; (8001524 <read_sensors+0x46c>)
 80012d4:	f003 fec4 	bl	8005060 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ADD3_GPIO_Port, ADD3_Pin, (i/8)%2);
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	da00      	bge.n	80012e0 <read_sensors+0x228>
 80012de:	3307      	adds	r3, #7
 80012e0:	10db      	asrs	r3, r3, #3
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	bfb8      	it	lt
 80012ea:	425b      	neglt	r3, r3
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	461a      	mov	r2, r3
 80012f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012f4:	488b      	ldr	r0, [pc, #556]	; (8001524 <read_sensors+0x46c>)
 80012f6:	f003 feb3 	bl	8005060 <HAL_GPIO_WritePin>
		if(i == 5)  kaf[0]  = kaf_set[i] - read_adc(ADC_CHANNEL_14);
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	2b05      	cmp	r3, #5
 80012fe:	d10c      	bne.n	800131a <read_sensors+0x262>
 8001300:	4a89      	ldr	r2, [pc, #548]	; (8001528 <read_sensors+0x470>)
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001308:	461c      	mov	r4, r3
 800130a:	200e      	movs	r0, #14
 800130c:	f7ff feaa 	bl	8001064 <read_adc>
 8001310:	4603      	mov	r3, r0
 8001312:	1ae3      	subs	r3, r4, r3
 8001314:	461a      	mov	r2, r3
 8001316:	4b85      	ldr	r3, [pc, #532]	; (800152c <read_sensors+0x474>)
 8001318:	601a      	str	r2, [r3, #0]
		if(i == 9)  kaf[1]  = kaf_set[i] - read_adc(ADC_CHANNEL_14);
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	2b09      	cmp	r3, #9
 800131e:	d10c      	bne.n	800133a <read_sensors+0x282>
 8001320:	4a81      	ldr	r2, [pc, #516]	; (8001528 <read_sensors+0x470>)
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001328:	461c      	mov	r4, r3
 800132a:	200e      	movs	r0, #14
 800132c:	f7ff fe9a 	bl	8001064 <read_adc>
 8001330:	4603      	mov	r3, r0
 8001332:	1ae3      	subs	r3, r4, r3
 8001334:	461a      	mov	r2, r3
 8001336:	4b7d      	ldr	r3, [pc, #500]	; (800152c <read_sensors+0x474>)
 8001338:	605a      	str	r2, [r3, #4]
		if(i == 11) kaf[2]  = kaf_set[i] - read_adc(ADC_CHANNEL_14);
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	2b0b      	cmp	r3, #11
 800133e:	d10c      	bne.n	800135a <read_sensors+0x2a2>
 8001340:	4a79      	ldr	r2, [pc, #484]	; (8001528 <read_sensors+0x470>)
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001348:	461c      	mov	r4, r3
 800134a:	200e      	movs	r0, #14
 800134c:	f7ff fe8a 	bl	8001064 <read_adc>
 8001350:	4603      	mov	r3, r0
 8001352:	1ae3      	subs	r3, r4, r3
 8001354:	461a      	mov	r2, r3
 8001356:	4b75      	ldr	r3, [pc, #468]	; (800152c <read_sensors+0x474>)
 8001358:	609a      	str	r2, [r3, #8]
		if(i == 4)  kaf[3]  = kaf_set[i] - read_adc(ADC_CHANNEL_14);
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	2b04      	cmp	r3, #4
 800135e:	d10c      	bne.n	800137a <read_sensors+0x2c2>
 8001360:	4a71      	ldr	r2, [pc, #452]	; (8001528 <read_sensors+0x470>)
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001368:	461c      	mov	r4, r3
 800136a:	200e      	movs	r0, #14
 800136c:	f7ff fe7a 	bl	8001064 <read_adc>
 8001370:	4603      	mov	r3, r0
 8001372:	1ae3      	subs	r3, r4, r3
 8001374:	461a      	mov	r2, r3
 8001376:	4b6d      	ldr	r3, [pc, #436]	; (800152c <read_sensors+0x474>)
 8001378:	60da      	str	r2, [r3, #12]
		if(i == 6)  kaf[4]  = kaf_set[i] - read_adc(ADC_CHANNEL_14);
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	2b06      	cmp	r3, #6
 800137e:	d10c      	bne.n	800139a <read_sensors+0x2e2>
 8001380:	4a69      	ldr	r2, [pc, #420]	; (8001528 <read_sensors+0x470>)
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001388:	461c      	mov	r4, r3
 800138a:	200e      	movs	r0, #14
 800138c:	f7ff fe6a 	bl	8001064 <read_adc>
 8001390:	4603      	mov	r3, r0
 8001392:	1ae3      	subs	r3, r4, r3
 8001394:	461a      	mov	r2, r3
 8001396:	4b65      	ldr	r3, [pc, #404]	; (800152c <read_sensors+0x474>)
 8001398:	611a      	str	r2, [r3, #16]
		if(i == 8)  kaf[5]  = kaf_set[i] - read_adc(ADC_CHANNEL_14);
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	2b08      	cmp	r3, #8
 800139e:	d10c      	bne.n	80013ba <read_sensors+0x302>
 80013a0:	4a61      	ldr	r2, [pc, #388]	; (8001528 <read_sensors+0x470>)
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a8:	461c      	mov	r4, r3
 80013aa:	200e      	movs	r0, #14
 80013ac:	f7ff fe5a 	bl	8001064 <read_adc>
 80013b0:	4603      	mov	r3, r0
 80013b2:	1ae3      	subs	r3, r4, r3
 80013b4:	461a      	mov	r2, r3
 80013b6:	4b5d      	ldr	r3, [pc, #372]	; (800152c <read_sensors+0x474>)
 80013b8:	615a      	str	r2, [r3, #20]
		if(i == 12) kaf[6]  = kaf_set[i] - read_adc(ADC_CHANNEL_14);
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	2b0c      	cmp	r3, #12
 80013be:	d10c      	bne.n	80013da <read_sensors+0x322>
 80013c0:	4a59      	ldr	r2, [pc, #356]	; (8001528 <read_sensors+0x470>)
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c8:	461c      	mov	r4, r3
 80013ca:	200e      	movs	r0, #14
 80013cc:	f7ff fe4a 	bl	8001064 <read_adc>
 80013d0:	4603      	mov	r3, r0
 80013d2:	1ae3      	subs	r3, r4, r3
 80013d4:	461a      	mov	r2, r3
 80013d6:	4b55      	ldr	r3, [pc, #340]	; (800152c <read_sensors+0x474>)
 80013d8:	619a      	str	r2, [r3, #24]
		if(i == 7)  kaf[7]  = kaf_set[i] - read_adc(ADC_CHANNEL_14);
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	2b07      	cmp	r3, #7
 80013de:	d10c      	bne.n	80013fa <read_sensors+0x342>
 80013e0:	4a51      	ldr	r2, [pc, #324]	; (8001528 <read_sensors+0x470>)
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e8:	461c      	mov	r4, r3
 80013ea:	200e      	movs	r0, #14
 80013ec:	f7ff fe3a 	bl	8001064 <read_adc>
 80013f0:	4603      	mov	r3, r0
 80013f2:	1ae3      	subs	r3, r4, r3
 80013f4:	461a      	mov	r2, r3
 80013f6:	4b4d      	ldr	r3, [pc, #308]	; (800152c <read_sensors+0x474>)
 80013f8:	61da      	str	r2, [r3, #28]
		if(i == 3)  kaf[8]  = kaf_set[i] - read_adc(ADC_CHANNEL_14);
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	2b03      	cmp	r3, #3
 80013fe:	d10c      	bne.n	800141a <read_sensors+0x362>
 8001400:	4a49      	ldr	r2, [pc, #292]	; (8001528 <read_sensors+0x470>)
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001408:	461c      	mov	r4, r3
 800140a:	200e      	movs	r0, #14
 800140c:	f7ff fe2a 	bl	8001064 <read_adc>
 8001410:	4603      	mov	r3, r0
 8001412:	1ae3      	subs	r3, r4, r3
 8001414:	461a      	mov	r2, r3
 8001416:	4b45      	ldr	r3, [pc, #276]	; (800152c <read_sensors+0x474>)
 8001418:	621a      	str	r2, [r3, #32]
		if(i == 1)  kaf[9]  = kaf_set[i] - read_adc(ADC_CHANNEL_14);
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d10c      	bne.n	800143a <read_sensors+0x382>
 8001420:	4a41      	ldr	r2, [pc, #260]	; (8001528 <read_sensors+0x470>)
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001428:	461c      	mov	r4, r3
 800142a:	200e      	movs	r0, #14
 800142c:	f7ff fe1a 	bl	8001064 <read_adc>
 8001430:	4603      	mov	r3, r0
 8001432:	1ae3      	subs	r3, r4, r3
 8001434:	461a      	mov	r2, r3
 8001436:	4b3d      	ldr	r3, [pc, #244]	; (800152c <read_sensors+0x474>)
 8001438:	625a      	str	r2, [r3, #36]	; 0x24
		if(i == 14) kaf[10] = kaf_set[i] - read_adc(ADC_CHANNEL_14);
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	2b0e      	cmp	r3, #14
 800143e:	d10c      	bne.n	800145a <read_sensors+0x3a2>
 8001440:	4a39      	ldr	r2, [pc, #228]	; (8001528 <read_sensors+0x470>)
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001448:	461c      	mov	r4, r3
 800144a:	200e      	movs	r0, #14
 800144c:	f7ff fe0a 	bl	8001064 <read_adc>
 8001450:	4603      	mov	r3, r0
 8001452:	1ae3      	subs	r3, r4, r3
 8001454:	461a      	mov	r2, r3
 8001456:	4b35      	ldr	r3, [pc, #212]	; (800152c <read_sensors+0x474>)
 8001458:	629a      	str	r2, [r3, #40]	; 0x28
		if(i == 10) kaf[11] = kaf_set[i] - read_adc(ADC_CHANNEL_14);
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	2b0a      	cmp	r3, #10
 800145e:	d10c      	bne.n	800147a <read_sensors+0x3c2>
 8001460:	4a31      	ldr	r2, [pc, #196]	; (8001528 <read_sensors+0x470>)
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001468:	461c      	mov	r4, r3
 800146a:	200e      	movs	r0, #14
 800146c:	f7ff fdfa 	bl	8001064 <read_adc>
 8001470:	4603      	mov	r3, r0
 8001472:	1ae3      	subs	r3, r4, r3
 8001474:	461a      	mov	r2, r3
 8001476:	4b2d      	ldr	r3, [pc, #180]	; (800152c <read_sensors+0x474>)
 8001478:	62da      	str	r2, [r3, #44]	; 0x2c
		if(i == 2)  kaf[12] = kaf_set[i] - read_adc(ADC_CHANNEL_14);
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	2b02      	cmp	r3, #2
 800147e:	d10c      	bne.n	800149a <read_sensors+0x3e2>
 8001480:	4a29      	ldr	r2, [pc, #164]	; (8001528 <read_sensors+0x470>)
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001488:	461c      	mov	r4, r3
 800148a:	200e      	movs	r0, #14
 800148c:	f7ff fdea 	bl	8001064 <read_adc>
 8001490:	4603      	mov	r3, r0
 8001492:	1ae3      	subs	r3, r4, r3
 8001494:	461a      	mov	r2, r3
 8001496:	4b25      	ldr	r3, [pc, #148]	; (800152c <read_sensors+0x474>)
 8001498:	631a      	str	r2, [r3, #48]	; 0x30
		if(i == 15) kaf[13] = kaf_set[i] - read_adc(ADC_CHANNEL_14);
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	2b0f      	cmp	r3, #15
 800149e:	d10c      	bne.n	80014ba <read_sensors+0x402>
 80014a0:	4a21      	ldr	r2, [pc, #132]	; (8001528 <read_sensors+0x470>)
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a8:	461c      	mov	r4, r3
 80014aa:	200e      	movs	r0, #14
 80014ac:	f7ff fdda 	bl	8001064 <read_adc>
 80014b0:	4603      	mov	r3, r0
 80014b2:	1ae3      	subs	r3, r4, r3
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b1d      	ldr	r3, [pc, #116]	; (800152c <read_sensors+0x474>)
 80014b8:	635a      	str	r2, [r3, #52]	; 0x34
		if(i == 13) kaf[14] = kaf_set[i] - read_adc(ADC_CHANNEL_14);
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	2b0d      	cmp	r3, #13
 80014be:	d10c      	bne.n	80014da <read_sensors+0x422>
 80014c0:	4a19      	ldr	r2, [pc, #100]	; (8001528 <read_sensors+0x470>)
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c8:	461c      	mov	r4, r3
 80014ca:	200e      	movs	r0, #14
 80014cc:	f7ff fdca 	bl	8001064 <read_adc>
 80014d0:	4603      	mov	r3, r0
 80014d2:	1ae3      	subs	r3, r4, r3
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b15      	ldr	r3, [pc, #84]	; (800152c <read_sensors+0x474>)
 80014d8:	639a      	str	r2, [r3, #56]	; 0x38
		if(i == 0)  kaf[15] = kaf_set[i] - read_adc(ADC_CHANNEL_14);
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d10c      	bne.n	80014fa <read_sensors+0x442>
 80014e0:	4a11      	ldr	r2, [pc, #68]	; (8001528 <read_sensors+0x470>)
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e8:	461c      	mov	r4, r3
 80014ea:	200e      	movs	r0, #14
 80014ec:	f7ff fdba 	bl	8001064 <read_adc>
 80014f0:	4603      	mov	r3, r0
 80014f2:	1ae3      	subs	r3, r4, r3
 80014f4:	461a      	mov	r2, r3
 80014f6:	4b0d      	ldr	r3, [pc, #52]	; (800152c <read_sensors+0x474>)
 80014f8:	63da      	str	r2, [r3, #60]	; 0x3c
	for(int i=0; i<16; i++){
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	3301      	adds	r3, #1
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	2b0f      	cmp	r3, #15
 8001504:	f77f aeba 	ble.w	800127c <read_sensors+0x1c4>
	}
	int shoot_sens   = read_adc(ADC_CHANNEL_10);
 8001508:	200a      	movs	r0, #10
 800150a:	f7ff fdab 	bl	8001064 <read_adc>
 800150e:	4603      	mov	r3, r0
 8001510:	607b      	str	r3, [r7, #4]
	if(shoot_sens < 1000) ball_in_kicker = 1;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001518:	da0c      	bge.n	8001534 <read_sensors+0x47c>
 800151a:	4b05      	ldr	r3, [pc, #20]	; (8001530 <read_sensors+0x478>)
 800151c:	2201      	movs	r2, #1
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	e00b      	b.n	800153a <read_sensors+0x482>
 8001522:	bf00      	nop
 8001524:	40020c00 	.word	0x40020c00
 8001528:	20000360 	.word	0x20000360
 800152c:	20000320 	.word	0x20000320
 8001530:	200003b8 	.word	0x200003b8
	else 				  ball_in_kicker = 0;
 8001534:	4b62      	ldr	r3, [pc, #392]	; (80016c0 <read_sensors+0x608>)
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
	int battery_volt = read_adc(ADC_CHANNEL_7) * 0.044;
 800153a:	2007      	movs	r0, #7
 800153c:	f7ff fd92 	bl	8001064 <read_adc>
 8001540:	4603      	mov	r3, r0
 8001542:	4618      	mov	r0, r3
 8001544:	f7fe ff82 	bl	800044c <__aeabi_ui2d>
 8001548:	a35b      	add	r3, pc, #364	; (adr r3, 80016b8 <read_sensors+0x600>)
 800154a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154e:	f7fe fff7 	bl	8000540 <__aeabi_dmul>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	4610      	mov	r0, r2
 8001558:	4619      	mov	r1, r3
 800155a:	f7ff faa1 	bl	8000aa0 <__aeabi_d2iz>
 800155e:	4603      	mov	r3, r0
 8001560:	603b      	str	r3, [r7, #0]

	print_num("GY:", Heading, 0, 0);
 8001562:	4b58      	ldr	r3, [pc, #352]	; (80016c4 <read_sensors+0x60c>)
 8001564:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001568:	4619      	mov	r1, r3
 800156a:	2300      	movs	r3, #0
 800156c:	2200      	movs	r2, #0
 800156e:	4856      	ldr	r0, [pc, #344]	; (80016c8 <read_sensors+0x610>)
 8001570:	f7ff fc84 	bl	8000e7c <print_num>
	print_num("XB:", x_ball, 0, 10);
 8001574:	4b55      	ldr	r3, [pc, #340]	; (80016cc <read_sensors+0x614>)
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	4619      	mov	r1, r3
 800157a:	230a      	movs	r3, #10
 800157c:	2200      	movs	r2, #0
 800157e:	4854      	ldr	r0, [pc, #336]	; (80016d0 <read_sensors+0x618>)
 8001580:	f7ff fc7c 	bl	8000e7c <print_num>
	print_num("YB:", y_ball, 0, 20);
 8001584:	4b53      	ldr	r3, [pc, #332]	; (80016d4 <read_sensors+0x61c>)
 8001586:	881b      	ldrh	r3, [r3, #0]
 8001588:	4619      	mov	r1, r3
 800158a:	2314      	movs	r3, #20
 800158c:	2200      	movs	r2, #0
 800158e:	4852      	ldr	r0, [pc, #328]	; (80016d8 <read_sensors+0x620>)
 8001590:	f7ff fc74 	bl	8000e7c <print_num>
	print_num("BA", ball_angle, 0, 30);
 8001594:	4b51      	ldr	r3, [pc, #324]	; (80016dc <read_sensors+0x624>)
 8001596:	6819      	ldr	r1, [r3, #0]
 8001598:	231e      	movs	r3, #30
 800159a:	2200      	movs	r2, #0
 800159c:	4850      	ldr	r0, [pc, #320]	; (80016e0 <read_sensors+0x628>)
 800159e:	f7ff fc6d 	bl	8000e7c <print_num>
	print_num("SH", shoot_sens, 0, 40);
 80015a2:	2328      	movs	r3, #40	; 0x28
 80015a4:	2200      	movs	r2, #0
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	484e      	ldr	r0, [pc, #312]	; (80016e4 <read_sensors+0x62c>)
 80015aa:	f7ff fc67 	bl	8000e7c <print_num>


	if(battery_volt < 100 && battery_volt > 50){
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	2b63      	cmp	r3, #99	; 0x63
 80015b2:	dc1a      	bgt.n	80015ea <read_sensors+0x532>
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	2b32      	cmp	r3, #50	; 0x32
 80015b8:	dd17      	ble.n	80015ea <read_sensors+0x532>
		if(battery_blink_cnt > 10) {
 80015ba:	4b4b      	ldr	r3, [pc, #300]	; (80016e8 <read_sensors+0x630>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b0a      	cmp	r3, #10
 80015c0:	d90c      	bls.n	80015dc <read_sensors+0x524>
			battery_blink = !battery_blink;
 80015c2:	4b4a      	ldr	r3, [pc, #296]	; (80016ec <read_sensors+0x634>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	bf0c      	ite	eq
 80015ca:	2301      	moveq	r3, #1
 80015cc:	2300      	movne	r3, #0
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	461a      	mov	r2, r3
 80015d2:	4b46      	ldr	r3, [pc, #280]	; (80016ec <read_sensors+0x634>)
 80015d4:	701a      	strb	r2, [r3, #0]
			battery_blink_cnt = 0;
 80015d6:	4b44      	ldr	r3, [pc, #272]	; (80016e8 <read_sensors+0x630>)
 80015d8:	2200      	movs	r2, #0
 80015da:	701a      	strb	r2, [r3, #0]
		}
		battery_blink_cnt++;
 80015dc:	4b42      	ldr	r3, [pc, #264]	; (80016e8 <read_sensors+0x630>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	3301      	adds	r3, #1
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	4b40      	ldr	r3, [pc, #256]	; (80016e8 <read_sensors+0x630>)
 80015e6:	701a      	strb	r2, [r3, #0]
 80015e8:	e002      	b.n	80015f0 <read_sensors+0x538>
	}
	else battery_blink = 1;
 80015ea:	4b40      	ldr	r3, [pc, #256]	; (80016ec <read_sensors+0x634>)
 80015ec:	2201      	movs	r2, #1
 80015ee:	701a      	strb	r2, [r3, #0]
	SSD1306_GotoXY(0, 50);
 80015f0:	2132      	movs	r1, #50	; 0x32
 80015f2:	2000      	movs	r0, #0
 80015f4:	f001 fe30 	bl	8003258 <SSD1306_GotoXY>
	SSD1306_Puts("BAT:", &Font_7x10, battery_blink);
 80015f8:	4b3c      	ldr	r3, [pc, #240]	; (80016ec <read_sensors+0x634>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	461a      	mov	r2, r3
 80015fe:	493c      	ldr	r1, [pc, #240]	; (80016f0 <read_sensors+0x638>)
 8001600:	483c      	ldr	r0, [pc, #240]	; (80016f4 <read_sensors+0x63c>)
 8001602:	f001 febf 	bl	8003384 <SSD1306_Puts>
	SSD1306_Putc((battery_volt/100)%10+'0', &Font_7x10, battery_blink);
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	4a3b      	ldr	r2, [pc, #236]	; (80016f8 <read_sensors+0x640>)
 800160a:	fb82 1203 	smull	r1, r2, r2, r3
 800160e:	1152      	asrs	r2, r2, #5
 8001610:	17db      	asrs	r3, r3, #31
 8001612:	1ad2      	subs	r2, r2, r3
 8001614:	4b39      	ldr	r3, [pc, #228]	; (80016fc <read_sensors+0x644>)
 8001616:	fb83 1302 	smull	r1, r3, r3, r2
 800161a:	1099      	asrs	r1, r3, #2
 800161c:	17d3      	asrs	r3, r2, #31
 800161e:	1ac9      	subs	r1, r1, r3
 8001620:	460b      	mov	r3, r1
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	440b      	add	r3, r1
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	1ad1      	subs	r1, r2, r3
 800162a:	b2cb      	uxtb	r3, r1
 800162c:	3330      	adds	r3, #48	; 0x30
 800162e:	b2db      	uxtb	r3, r3
 8001630:	4a2e      	ldr	r2, [pc, #184]	; (80016ec <read_sensors+0x634>)
 8001632:	7812      	ldrb	r2, [r2, #0]
 8001634:	492e      	ldr	r1, [pc, #184]	; (80016f0 <read_sensors+0x638>)
 8001636:	4618      	mov	r0, r3
 8001638:	f001 fe24 	bl	8003284 <SSD1306_Putc>
	SSD1306_Putc((battery_volt/10)%10+'0', &Font_7x10, battery_blink);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	4a2f      	ldr	r2, [pc, #188]	; (80016fc <read_sensors+0x644>)
 8001640:	fb82 1203 	smull	r1, r2, r2, r3
 8001644:	1092      	asrs	r2, r2, #2
 8001646:	17db      	asrs	r3, r3, #31
 8001648:	1ad2      	subs	r2, r2, r3
 800164a:	4b2c      	ldr	r3, [pc, #176]	; (80016fc <read_sensors+0x644>)
 800164c:	fb83 1302 	smull	r1, r3, r3, r2
 8001650:	1099      	asrs	r1, r3, #2
 8001652:	17d3      	asrs	r3, r2, #31
 8001654:	1ac9      	subs	r1, r1, r3
 8001656:	460b      	mov	r3, r1
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	440b      	add	r3, r1
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	1ad1      	subs	r1, r2, r3
 8001660:	b2cb      	uxtb	r3, r1
 8001662:	3330      	adds	r3, #48	; 0x30
 8001664:	b2db      	uxtb	r3, r3
 8001666:	4a21      	ldr	r2, [pc, #132]	; (80016ec <read_sensors+0x634>)
 8001668:	7812      	ldrb	r2, [r2, #0]
 800166a:	4921      	ldr	r1, [pc, #132]	; (80016f0 <read_sensors+0x638>)
 800166c:	4618      	mov	r0, r3
 800166e:	f001 fe09 	bl	8003284 <SSD1306_Putc>
	SSD1306_Puts(".", &Font_7x10, battery_blink);
 8001672:	4b1e      	ldr	r3, [pc, #120]	; (80016ec <read_sensors+0x634>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	461a      	mov	r2, r3
 8001678:	491d      	ldr	r1, [pc, #116]	; (80016f0 <read_sensors+0x638>)
 800167a:	4821      	ldr	r0, [pc, #132]	; (8001700 <read_sensors+0x648>)
 800167c:	f001 fe82 	bl	8003384 <SSD1306_Puts>
	SSD1306_Putc((battery_volt/1)%10+'0', &Font_7x10, battery_blink);
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	4b1e      	ldr	r3, [pc, #120]	; (80016fc <read_sensors+0x644>)
 8001684:	fb83 1302 	smull	r1, r3, r3, r2
 8001688:	1099      	asrs	r1, r3, #2
 800168a:	17d3      	asrs	r3, r2, #31
 800168c:	1ac9      	subs	r1, r1, r3
 800168e:	460b      	mov	r3, r1
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	440b      	add	r3, r1
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	1ad1      	subs	r1, r2, r3
 8001698:	b2cb      	uxtb	r3, r1
 800169a:	3330      	adds	r3, #48	; 0x30
 800169c:	b2db      	uxtb	r3, r3
 800169e:	4a13      	ldr	r2, [pc, #76]	; (80016ec <read_sensors+0x634>)
 80016a0:	7812      	ldrb	r2, [r2, #0]
 80016a2:	4913      	ldr	r1, [pc, #76]	; (80016f0 <read_sensors+0x638>)
 80016a4:	4618      	mov	r0, r3
 80016a6:	f001 fded 	bl	8003284 <SSD1306_Putc>



	SSD1306_UpdateScreen();
 80016aa:	f001 fd2f 	bl	800310c <SSD1306_UpdateScreen>
}
 80016ae:	bf00      	nop
 80016b0:	3714      	adds	r7, #20
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd90      	pop	{r4, r7, pc}
 80016b6:	bf00      	nop
 80016b8:	020c49ba 	.word	0x020c49ba
 80016bc:	3fa6872b 	.word	0x3fa6872b
 80016c0:	200003b8 	.word	0x200003b8
 80016c4:	2000029c 	.word	0x2000029c
 80016c8:	0800bef8 	.word	0x0800bef8
 80016cc:	200002fc 	.word	0x200002fc
 80016d0:	0800befc 	.word	0x0800befc
 80016d4:	200002fe 	.word	0x200002fe
 80016d8:	0800bf00 	.word	0x0800bf00
 80016dc:	20000308 	.word	0x20000308
 80016e0:	0800bf04 	.word	0x0800bf04
 80016e4:	0800bf08 	.word	0x0800bf08
 80016e8:	200003a0 	.word	0x200003a0
 80016ec:	2000002c 	.word	0x2000002c
 80016f0:	20000014 	.word	0x20000014
 80016f4:	0800bf0c 	.word	0x0800bf0c
 80016f8:	51eb851f 	.word	0x51eb851f
 80016fc:	66666667 	.word	0x66666667
 8001700:	0800bf14 	.word	0x0800bf14

08001704 <OUT>:
void OUT(){
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
	if(kaf[15] > LDR_Sens || kaf[14] > LDR_Sens || kaf[13] > LDR_Sens || kaf[9] > LDR_Sens || kaf[6] > LDR_Sens) arrived_to_goal = 1;
 8001708:	4b6d      	ldr	r3, [pc, #436]	; (80018c0 <OUT+0x1bc>)
 800170a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800170c:	2bc8      	cmp	r3, #200	; 0xc8
 800170e:	dc0f      	bgt.n	8001730 <OUT+0x2c>
 8001710:	4b6b      	ldr	r3, [pc, #428]	; (80018c0 <OUT+0x1bc>)
 8001712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001714:	2bc8      	cmp	r3, #200	; 0xc8
 8001716:	dc0b      	bgt.n	8001730 <OUT+0x2c>
 8001718:	4b69      	ldr	r3, [pc, #420]	; (80018c0 <OUT+0x1bc>)
 800171a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800171c:	2bc8      	cmp	r3, #200	; 0xc8
 800171e:	dc07      	bgt.n	8001730 <OUT+0x2c>
 8001720:	4b67      	ldr	r3, [pc, #412]	; (80018c0 <OUT+0x1bc>)
 8001722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001724:	2bc8      	cmp	r3, #200	; 0xc8
 8001726:	dc03      	bgt.n	8001730 <OUT+0x2c>
 8001728:	4b65      	ldr	r3, [pc, #404]	; (80018c0 <OUT+0x1bc>)
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	2bc8      	cmp	r3, #200	; 0xc8
 800172e:	dd02      	ble.n	8001736 <OUT+0x32>
 8001730:	4b64      	ldr	r3, [pc, #400]	; (80018c4 <OUT+0x1c0>)
 8001732:	2201      	movs	r2, #1
 8001734:	601a      	str	r2, [r3, #0]
	if(kaf[0] > LDR_Sens || kaf[1] > LDR_Sens || kaf[2] > LDR_Sens || kaf[4] > LDR_Sens){
 8001736:	4b62      	ldr	r3, [pc, #392]	; (80018c0 <OUT+0x1bc>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2bc8      	cmp	r3, #200	; 0xc8
 800173c:	dc0b      	bgt.n	8001756 <OUT+0x52>
 800173e:	4b60      	ldr	r3, [pc, #384]	; (80018c0 <OUT+0x1bc>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2bc8      	cmp	r3, #200	; 0xc8
 8001744:	dc07      	bgt.n	8001756 <OUT+0x52>
 8001746:	4b5e      	ldr	r3, [pc, #376]	; (80018c0 <OUT+0x1bc>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	2bc8      	cmp	r3, #200	; 0xc8
 800174c:	dc03      	bgt.n	8001756 <OUT+0x52>
 800174e:	4b5c      	ldr	r3, [pc, #368]	; (80018c0 <OUT+0x1bc>)
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	2bc8      	cmp	r3, #200	; 0xc8
 8001754:	dd0f      	ble.n	8001776 <OUT+0x72>
		fast_stop();
 8001756:	f001 f995 	bl	8002a84 <fast_stop>
		moveForSec(180, 20);
 800175a:	2114      	movs	r1, #20
 800175c:	20b4      	movs	r0, #180	; 0xb4
 800175e:	f001 fa5b 	bl	8002c18 <moveForSec>
		while(is_ball){
 8001762:	e003      	b.n	800176c <OUT+0x68>
		  read_sensors();
 8001764:	f7ff fca8 	bl	80010b8 <read_sensors>
		  stop();
 8001768:	f001 fc02 	bl	8002f70 <stop>
		while(is_ball){
 800176c:	4b56      	ldr	r3, [pc, #344]	; (80018c8 <OUT+0x1c4>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1f7      	bne.n	8001764 <OUT+0x60>
	if(kaf[0] > LDR_Sens || kaf[1] > LDR_Sens || kaf[2] > LDR_Sens || kaf[4] > LDR_Sens){
 8001774:	e0a1      	b.n	80018ba <OUT+0x1b6>
		}
	}
	else if(kaf[3] > LDR_Sens){
 8001776:	4b52      	ldr	r3, [pc, #328]	; (80018c0 <OUT+0x1bc>)
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	2bc8      	cmp	r3, #200	; 0xc8
 800177c:	dd0f      	ble.n	800179e <OUT+0x9a>
		fast_stop();
 800177e:	f001 f981 	bl	8002a84 <fast_stop>
		moveForSec(225, 20);
 8001782:	2114      	movs	r1, #20
 8001784:	20e1      	movs	r0, #225	; 0xe1
 8001786:	f001 fa47 	bl	8002c18 <moveForSec>
		while(is_ball){
 800178a:	e003      	b.n	8001794 <OUT+0x90>
			read_sensors();
 800178c:	f7ff fc94 	bl	80010b8 <read_sensors>
			stop();
 8001790:	f001 fbee 	bl	8002f70 <stop>
		while(is_ball){
 8001794:	4b4c      	ldr	r3, [pc, #304]	; (80018c8 <OUT+0x1c4>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d1f7      	bne.n	800178c <OUT+0x88>
			read_sensors();
			stop();
	  }
	}

}
 800179c:	e08d      	b.n	80018ba <OUT+0x1b6>
	else if(kaf[6] > LDR_Sens || kaf[7] > LDR_Sens){
 800179e:	4b48      	ldr	r3, [pc, #288]	; (80018c0 <OUT+0x1bc>)
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	2bc8      	cmp	r3, #200	; 0xc8
 80017a4:	dc03      	bgt.n	80017ae <OUT+0xaa>
 80017a6:	4b46      	ldr	r3, [pc, #280]	; (80018c0 <OUT+0x1bc>)
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	2bc8      	cmp	r3, #200	; 0xc8
 80017ac:	dd10      	ble.n	80017d0 <OUT+0xcc>
		fast_stop();
 80017ae:	f001 f969 	bl	8002a84 <fast_stop>
		moveForSec(270, 20);
 80017b2:	2114      	movs	r1, #20
 80017b4:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80017b8:	f001 fa2e 	bl	8002c18 <moveForSec>
		while(is_ball){
 80017bc:	e003      	b.n	80017c6 <OUT+0xc2>
		  read_sensors();
 80017be:	f7ff fc7b 	bl	80010b8 <read_sensors>
		  stop();
 80017c2:	f001 fbd5 	bl	8002f70 <stop>
		while(is_ball){
 80017c6:	4b40      	ldr	r3, [pc, #256]	; (80018c8 <OUT+0x1c4>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f7      	bne.n	80017be <OUT+0xba>
	else if(kaf[6] > LDR_Sens || kaf[7] > LDR_Sens){
 80017ce:	e074      	b.n	80018ba <OUT+0x1b6>
	else if(kaf[10] > LDR_Sens){
 80017d0:	4b3b      	ldr	r3, [pc, #236]	; (80018c0 <OUT+0x1bc>)
 80017d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d4:	2bc8      	cmp	r3, #200	; 0xc8
 80017d6:	dd10      	ble.n	80017fa <OUT+0xf6>
		fast_stop();
 80017d8:	f001 f954 	bl	8002a84 <fast_stop>
		moveForSec(315, 20);
 80017dc:	2114      	movs	r1, #20
 80017de:	f240 103b 	movw	r0, #315	; 0x13b
 80017e2:	f001 fa19 	bl	8002c18 <moveForSec>
		while(is_ball){
 80017e6:	e003      	b.n	80017f0 <OUT+0xec>
			read_sensors();
 80017e8:	f7ff fc66 	bl	80010b8 <read_sensors>
			stop();
 80017ec:	f001 fbc0 	bl	8002f70 <stop>
		while(is_ball){
 80017f0:	4b35      	ldr	r3, [pc, #212]	; (80018c8 <OUT+0x1c4>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d1f7      	bne.n	80017e8 <OUT+0xe4>
}
 80017f8:	e05f      	b.n	80018ba <OUT+0x1b6>
	else if(kaf[13] > LDR_Sens || kaf[14] > LDR_Sens || kaf[15] > LDR_Sens || kaf[11] > LDR_Sens){
 80017fa:	4b31      	ldr	r3, [pc, #196]	; (80018c0 <OUT+0x1bc>)
 80017fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017fe:	2bc8      	cmp	r3, #200	; 0xc8
 8001800:	dc0b      	bgt.n	800181a <OUT+0x116>
 8001802:	4b2f      	ldr	r3, [pc, #188]	; (80018c0 <OUT+0x1bc>)
 8001804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001806:	2bc8      	cmp	r3, #200	; 0xc8
 8001808:	dc07      	bgt.n	800181a <OUT+0x116>
 800180a:	4b2d      	ldr	r3, [pc, #180]	; (80018c0 <OUT+0x1bc>)
 800180c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800180e:	2bc8      	cmp	r3, #200	; 0xc8
 8001810:	dc03      	bgt.n	800181a <OUT+0x116>
 8001812:	4b2b      	ldr	r3, [pc, #172]	; (80018c0 <OUT+0x1bc>)
 8001814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001816:	2bc8      	cmp	r3, #200	; 0xc8
 8001818:	dd0f      	ble.n	800183a <OUT+0x136>
	  fast_stop();
 800181a:	f001 f933 	bl	8002a84 <fast_stop>
	  moveForSec(0, 20);
 800181e:	2114      	movs	r1, #20
 8001820:	2000      	movs	r0, #0
 8001822:	f001 f9f9 	bl	8002c18 <moveForSec>
	  while(is_ball){
 8001826:	e003      	b.n	8001830 <OUT+0x12c>
		  read_sensors();
 8001828:	f7ff fc46 	bl	80010b8 <read_sensors>
		  stop();
 800182c:	f001 fba0 	bl	8002f70 <stop>
	  while(is_ball){
 8001830:	4b25      	ldr	r3, [pc, #148]	; (80018c8 <OUT+0x1c4>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1f7      	bne.n	8001828 <OUT+0x124>
	else if(kaf[13] > LDR_Sens || kaf[14] > LDR_Sens || kaf[15] > LDR_Sens || kaf[11] > LDR_Sens){
 8001838:	e03f      	b.n	80018ba <OUT+0x1b6>
	else if(kaf[12] > LDR_Sens){
 800183a:	4b21      	ldr	r3, [pc, #132]	; (80018c0 <OUT+0x1bc>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	2bc8      	cmp	r3, #200	; 0xc8
 8001840:	dd0f      	ble.n	8001862 <OUT+0x15e>
		fast_stop();
 8001842:	f001 f91f 	bl	8002a84 <fast_stop>
		moveForSec(45, 20);
 8001846:	2114      	movs	r1, #20
 8001848:	202d      	movs	r0, #45	; 0x2d
 800184a:	f001 f9e5 	bl	8002c18 <moveForSec>
		while(is_ball){
 800184e:	e003      	b.n	8001858 <OUT+0x154>
			read_sensors();
 8001850:	f7ff fc32 	bl	80010b8 <read_sensors>
			stop();
 8001854:	f001 fb8c 	bl	8002f70 <stop>
		while(is_ball){
 8001858:	4b1b      	ldr	r3, [pc, #108]	; (80018c8 <OUT+0x1c4>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1f7      	bne.n	8001850 <OUT+0x14c>
}
 8001860:	e02b      	b.n	80018ba <OUT+0x1b6>
	else if(kaf[9] > LDR_Sens || kaf[8] > LDR_Sens){
 8001862:	4b17      	ldr	r3, [pc, #92]	; (80018c0 <OUT+0x1bc>)
 8001864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001866:	2bc8      	cmp	r3, #200	; 0xc8
 8001868:	dc03      	bgt.n	8001872 <OUT+0x16e>
 800186a:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <OUT+0x1bc>)
 800186c:	6a1b      	ldr	r3, [r3, #32]
 800186e:	2bc8      	cmp	r3, #200	; 0xc8
 8001870:	dd0f      	ble.n	8001892 <OUT+0x18e>
	  fast_stop();
 8001872:	f001 f907 	bl	8002a84 <fast_stop>
	  moveForSec(90, 20);
 8001876:	2114      	movs	r1, #20
 8001878:	205a      	movs	r0, #90	; 0x5a
 800187a:	f001 f9cd 	bl	8002c18 <moveForSec>
	  while(is_ball){
 800187e:	e003      	b.n	8001888 <OUT+0x184>
		  read_sensors();
 8001880:	f7ff fc1a 	bl	80010b8 <read_sensors>
		  stop();
 8001884:	f001 fb74 	bl	8002f70 <stop>
	  while(is_ball){
 8001888:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <OUT+0x1c4>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1f7      	bne.n	8001880 <OUT+0x17c>
	else if(kaf[9] > LDR_Sens || kaf[8] > LDR_Sens){
 8001890:	e013      	b.n	80018ba <OUT+0x1b6>
	else if(kaf[5] > LDR_Sens){
 8001892:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <OUT+0x1bc>)
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	2bc8      	cmp	r3, #200	; 0xc8
 8001898:	dd0f      	ble.n	80018ba <OUT+0x1b6>
		fast_stop();
 800189a:	f001 f8f3 	bl	8002a84 <fast_stop>
		moveForSec(135, 20);
 800189e:	2114      	movs	r1, #20
 80018a0:	2087      	movs	r0, #135	; 0x87
 80018a2:	f001 f9b9 	bl	8002c18 <moveForSec>
		while(is_ball){
 80018a6:	e003      	b.n	80018b0 <OUT+0x1ac>
			read_sensors();
 80018a8:	f7ff fc06 	bl	80010b8 <read_sensors>
			stop();
 80018ac:	f001 fb60 	bl	8002f70 <stop>
		while(is_ball){
 80018b0:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <OUT+0x1c4>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d1f7      	bne.n	80018a8 <OUT+0x1a4>
}
 80018b8:	e7ff      	b.n	80018ba <OUT+0x1b6>
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000320 	.word	0x20000320
 80018c4:	200003b4 	.word	0x200003b4
 80018c8:	20000310 	.word	0x20000310

080018cc <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 80018cc:	b5b0      	push	{r4, r5, r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	460b      	mov	r3, r1
 80018d6:	807b      	strh	r3, [r7, #2]
	for(int i=0; i<RX2_Size; i++){
 80018d8:	2300      	movs	r3, #0
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	e0bf      	b.n	8001a5e <HAL_UARTEx_RxEventCallback+0x192>
		if(Rx2_Buff[i] == 0xAA){
 80018de:	4a65      	ldr	r2, [pc, #404]	; (8001a74 <HAL_UARTEx_RxEventCallback+0x1a8>)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	4413      	add	r3, r2
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2baa      	cmp	r3, #170	; 0xaa
 80018e8:	f040 80b6 	bne.w	8001a58 <HAL_UARTEx_RxEventCallback+0x18c>
			Heading = (int16_t)(Rx2_Buff[(i+1)%8]<<8 | Rx2_Buff[(i+2)%8])/100.00 + rotation_fix;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	3301      	adds	r3, #1
 80018f0:	425a      	negs	r2, r3
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	f002 0207 	and.w	r2, r2, #7
 80018fa:	bf58      	it	pl
 80018fc:	4253      	negpl	r3, r2
 80018fe:	4a5d      	ldr	r2, [pc, #372]	; (8001a74 <HAL_UARTEx_RxEventCallback+0x1a8>)
 8001900:	5cd3      	ldrb	r3, [r2, r3]
 8001902:	021b      	lsls	r3, r3, #8
 8001904:	b21a      	sxth	r2, r3
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	3302      	adds	r3, #2
 800190a:	4259      	negs	r1, r3
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	f001 0107 	and.w	r1, r1, #7
 8001914:	bf58      	it	pl
 8001916:	424b      	negpl	r3, r1
 8001918:	4956      	ldr	r1, [pc, #344]	; (8001a74 <HAL_UARTEx_RxEventCallback+0x1a8>)
 800191a:	5ccb      	ldrb	r3, [r1, r3]
 800191c:	b21b      	sxth	r3, r3
 800191e:	4313      	orrs	r3, r2
 8001920:	b21b      	sxth	r3, r3
 8001922:	4618      	mov	r0, r3
 8001924:	f7fe fda2 	bl	800046c <__aeabi_i2d>
 8001928:	f04f 0200 	mov.w	r2, #0
 800192c:	4b52      	ldr	r3, [pc, #328]	; (8001a78 <HAL_UARTEx_RxEventCallback+0x1ac>)
 800192e:	f7fe ff31 	bl	8000794 <__aeabi_ddiv>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	4614      	mov	r4, r2
 8001938:	461d      	mov	r5, r3
 800193a:	4b50      	ldr	r3, [pc, #320]	; (8001a7c <HAL_UARTEx_RxEventCallback+0x1b0>)
 800193c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001940:	4618      	mov	r0, r3
 8001942:	f7fe fd93 	bl	800046c <__aeabi_i2d>
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	4620      	mov	r0, r4
 800194c:	4629      	mov	r1, r5
 800194e:	f7fe fc41 	bl	80001d4 <__adddf3>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	4610      	mov	r0, r2
 8001958:	4619      	mov	r1, r3
 800195a:	f7ff f8a1 	bl	8000aa0 <__aeabi_d2iz>
 800195e:	4603      	mov	r3, r0
 8001960:	b21a      	sxth	r2, r3
 8001962:	4b47      	ldr	r3, [pc, #284]	; (8001a80 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8001964:	801a      	strh	r2, [r3, #0]
			Pitch = (int16_t)(Rx2_Buff[(i+3)%8]<<8 | Rx2_Buff[(i+4)%8])/100.00;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	3303      	adds	r3, #3
 800196a:	425a      	negs	r2, r3
 800196c:	f003 0307 	and.w	r3, r3, #7
 8001970:	f002 0207 	and.w	r2, r2, #7
 8001974:	bf58      	it	pl
 8001976:	4253      	negpl	r3, r2
 8001978:	4a3e      	ldr	r2, [pc, #248]	; (8001a74 <HAL_UARTEx_RxEventCallback+0x1a8>)
 800197a:	5cd3      	ldrb	r3, [r2, r3]
 800197c:	021b      	lsls	r3, r3, #8
 800197e:	b21a      	sxth	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	3304      	adds	r3, #4
 8001984:	4259      	negs	r1, r3
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	f001 0107 	and.w	r1, r1, #7
 800198e:	bf58      	it	pl
 8001990:	424b      	negpl	r3, r1
 8001992:	4938      	ldr	r1, [pc, #224]	; (8001a74 <HAL_UARTEx_RxEventCallback+0x1a8>)
 8001994:	5ccb      	ldrb	r3, [r1, r3]
 8001996:	b21b      	sxth	r3, r3
 8001998:	4313      	orrs	r3, r2
 800199a:	b21b      	sxth	r3, r3
 800199c:	4618      	mov	r0, r3
 800199e:	f7fe fd65 	bl	800046c <__aeabi_i2d>
 80019a2:	f04f 0200 	mov.w	r2, #0
 80019a6:	4b34      	ldr	r3, [pc, #208]	; (8001a78 <HAL_UARTEx_RxEventCallback+0x1ac>)
 80019a8:	f7fe fef4 	bl	8000794 <__aeabi_ddiv>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	4610      	mov	r0, r2
 80019b2:	4619      	mov	r1, r3
 80019b4:	f7ff f874 	bl	8000aa0 <__aeabi_d2iz>
 80019b8:	4603      	mov	r3, r0
 80019ba:	b21a      	sxth	r2, r3
 80019bc:	4b31      	ldr	r3, [pc, #196]	; (8001a84 <HAL_UARTEx_RxEventCallback+0x1b8>)
 80019be:	801a      	strh	r2, [r3, #0]
			Roll = (int16_t)(Rx2_Buff[(i+5)%8]<<8 | Rx2_Buff[(i+6)%8])/100.00;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	3305      	adds	r3, #5
 80019c4:	425a      	negs	r2, r3
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	f002 0207 	and.w	r2, r2, #7
 80019ce:	bf58      	it	pl
 80019d0:	4253      	negpl	r3, r2
 80019d2:	4a28      	ldr	r2, [pc, #160]	; (8001a74 <HAL_UARTEx_RxEventCallback+0x1a8>)
 80019d4:	5cd3      	ldrb	r3, [r2, r3]
 80019d6:	021b      	lsls	r3, r3, #8
 80019d8:	b21a      	sxth	r2, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	3306      	adds	r3, #6
 80019de:	4259      	negs	r1, r3
 80019e0:	f003 0307 	and.w	r3, r3, #7
 80019e4:	f001 0107 	and.w	r1, r1, #7
 80019e8:	bf58      	it	pl
 80019ea:	424b      	negpl	r3, r1
 80019ec:	4921      	ldr	r1, [pc, #132]	; (8001a74 <HAL_UARTEx_RxEventCallback+0x1a8>)
 80019ee:	5ccb      	ldrb	r3, [r1, r3]
 80019f0:	b21b      	sxth	r3, r3
 80019f2:	4313      	orrs	r3, r2
 80019f4:	b21b      	sxth	r3, r3
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7fe fd38 	bl	800046c <__aeabi_i2d>
 80019fc:	f04f 0200 	mov.w	r2, #0
 8001a00:	4b1d      	ldr	r3, [pc, #116]	; (8001a78 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8001a02:	f7fe fec7 	bl	8000794 <__aeabi_ddiv>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	4610      	mov	r0, r2
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f7ff f847 	bl	8000aa0 <__aeabi_d2iz>
 8001a12:	4603      	mov	r3, r0
 8001a14:	b21a      	sxth	r2, r3
 8001a16:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8001a18:	801a      	strh	r2, [r3, #0]

			if(Heading > 180) Heading -= 360;
 8001a1a:	4b19      	ldr	r3, [pc, #100]	; (8001a80 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8001a1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a20:	2bb4      	cmp	r3, #180	; 0xb4
 8001a22:	dd09      	ble.n	8001a38 <HAL_UARTEx_RxEventCallback+0x16c>
 8001a24:	4b16      	ldr	r3, [pc, #88]	; (8001a80 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8001a26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	b21a      	sxth	r2, r3
 8001a34:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8001a36:	801a      	strh	r2, [r3, #0]
			if(Heading <-180) Heading += 360;
 8001a38:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8001a3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a3e:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 8001a42:	da09      	bge.n	8001a58 <HAL_UARTEx_RxEventCallback+0x18c>
 8001a44:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8001a46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	b21a      	sxth	r2, r3
 8001a54:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8001a56:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<RX2_Size; i++){
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2b07      	cmp	r3, #7
 8001a62:	f77f af3c 	ble.w	80018de <HAL_UARTEx_RxEventCallback+0x12>

		}
	}
	GY_updated = 0;
 8001a66:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <HAL_UARTEx_RxEventCallback+0x1c0>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
}
 8001a6c:	bf00      	nop
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bdb0      	pop	{r4, r5, r7, pc}
 8001a74:	200002a0 	.word	0x200002a0
 8001a78:	40590000 	.word	0x40590000
 8001a7c:	2000029e 	.word	0x2000029e
 8001a80:	2000029c 	.word	0x2000029c
 8001a84:	20000298 	.word	0x20000298
 8001a88:	2000029a 	.word	0x2000029a
 8001a8c:	200002ac 	.word	0x200002ac

08001a90 <HAL_I2C_MasterRxCpltCallback>:
void HAL_I2C_MasterRxCpltCallback (I2C_HandleTypeDef * hi2c)
{
 8001a90:	b5b0      	push	{r4, r5, r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
	is_ball = 0;
 8001a98:	4b99      	ldr	r3, [pc, #612]	; (8001d00 <HAL_I2C_MasterRxCpltCallback+0x270>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
	is_goal = 0;
 8001a9e:	4b99      	ldr	r3, [pc, #612]	; (8001d04 <HAL_I2C_MasterRxCpltCallback+0x274>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
	for (int i = sizeof(i2c_rx_data)-10; i >=0 ; i--) {
 8001aa4:	2336      	movs	r3, #54	; 0x36
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	e206      	b.n	8001eb8 <HAL_I2C_MasterRxCpltCallback+0x428>
		if(i2c_rx_data[i] == 0x55 && i2c_rx_data[i+1] == 0xaa && i2c_rx_data[i+2] != 0xaa && i2c_rx_data[i+2] != 0x55 ){
 8001aaa:	4a97      	ldr	r2, [pc, #604]	; (8001d08 <HAL_I2C_MasterRxCpltCallback+0x278>)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	4413      	add	r3, r2
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2b55      	cmp	r3, #85	; 0x55
 8001ab4:	f040 81fd 	bne.w	8001eb2 <HAL_I2C_MasterRxCpltCallback+0x422>
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	3301      	adds	r3, #1
 8001abc:	4a92      	ldr	r2, [pc, #584]	; (8001d08 <HAL_I2C_MasterRxCpltCallback+0x278>)
 8001abe:	5cd3      	ldrb	r3, [r2, r3]
 8001ac0:	2baa      	cmp	r3, #170	; 0xaa
 8001ac2:	f040 81f6 	bne.w	8001eb2 <HAL_I2C_MasterRxCpltCallback+0x422>
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	3302      	adds	r3, #2
 8001aca:	4a8f      	ldr	r2, [pc, #572]	; (8001d08 <HAL_I2C_MasterRxCpltCallback+0x278>)
 8001acc:	5cd3      	ldrb	r3, [r2, r3]
 8001ace:	2baa      	cmp	r3, #170	; 0xaa
 8001ad0:	f000 81ef 	beq.w	8001eb2 <HAL_I2C_MasterRxCpltCallback+0x422>
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	3302      	adds	r3, #2
 8001ad8:	4a8b      	ldr	r2, [pc, #556]	; (8001d08 <HAL_I2C_MasterRxCpltCallback+0x278>)
 8001ada:	5cd3      	ldrb	r3, [r2, r3]
 8001adc:	2b55      	cmp	r3, #85	; 0x55
 8001ade:	f000 81e8 	beq.w	8001eb2 <HAL_I2C_MasterRxCpltCallback+0x422>
			checksum  = i2c_rx_data[i+2]  | (i2c_rx_data[i+3] << 8);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	3302      	adds	r3, #2
 8001ae6:	4a88      	ldr	r2, [pc, #544]	; (8001d08 <HAL_I2C_MasterRxCpltCallback+0x278>)
 8001ae8:	5cd3      	ldrb	r3, [r2, r3]
 8001aea:	b21a      	sxth	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	3303      	adds	r3, #3
 8001af0:	4985      	ldr	r1, [pc, #532]	; (8001d08 <HAL_I2C_MasterRxCpltCallback+0x278>)
 8001af2:	5ccb      	ldrb	r3, [r1, r3]
 8001af4:	021b      	lsls	r3, r3, #8
 8001af6:	b21b      	sxth	r3, r3
 8001af8:	4313      	orrs	r3, r2
 8001afa:	b21b      	sxth	r3, r3
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	4b83      	ldr	r3, [pc, #524]	; (8001d0c <HAL_I2C_MasterRxCpltCallback+0x27c>)
 8001b00:	801a      	strh	r2, [r3, #0]
			if(checksum == (i2c_rx_data[i+4]  | (i2c_rx_data[i+5] << 8)) + (i2c_rx_data[i+6]  | (i2c_rx_data[i+7] << 8)) + (i2c_rx_data[i+8]  | (i2c_rx_data[i+9] << 8)) + (i2c_rx_data[i+10] | (i2c_rx_data[i+11]<< 8)) + (i2c_rx_data[i+12] | (i2c_rx_data[i+13]<< 8))){
 8001b02:	4b82      	ldr	r3, [pc, #520]	; (8001d0c <HAL_I2C_MasterRxCpltCallback+0x27c>)
 8001b04:	881b      	ldrh	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	3304      	adds	r3, #4
 8001b0c:	4a7e      	ldr	r2, [pc, #504]	; (8001d08 <HAL_I2C_MasterRxCpltCallback+0x278>)
 8001b0e:	5cd3      	ldrb	r3, [r2, r3]
 8001b10:	4619      	mov	r1, r3
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	3305      	adds	r3, #5
 8001b16:	4a7c      	ldr	r2, [pc, #496]	; (8001d08 <HAL_I2C_MasterRxCpltCallback+0x278>)
 8001b18:	5cd3      	ldrb	r3, [r2, r3]
 8001b1a:	021b      	lsls	r3, r3, #8
 8001b1c:	ea41 0203 	orr.w	r2, r1, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	3306      	adds	r3, #6
 8001b24:	4978      	ldr	r1, [pc, #480]	; (8001d08 <HAL_I2C_MasterRxCpltCallback+0x278>)
 8001b26:	5ccb      	ldrb	r3, [r1, r3]
 8001b28:	461c      	mov	r4, r3
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	3307      	adds	r3, #7
 8001b2e:	4976      	ldr	r1, [pc, #472]	; (8001d08 <HAL_I2C_MasterRxCpltCallback+0x278>)
 8001b30:	5ccb      	ldrb	r3, [r1, r3]
 8001b32:	021b      	lsls	r3, r3, #8
 8001b34:	4323      	orrs	r3, r4
 8001b36:	441a      	add	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	3308      	adds	r3, #8
 8001b3c:	4972      	ldr	r1, [pc, #456]	; (8001d08 <HAL_I2C_MasterRxCpltCallback+0x278>)
 8001b3e:	5ccb      	ldrb	r3, [r1, r3]
 8001b40:	461c      	mov	r4, r3
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	3309      	adds	r3, #9
 8001b46:	4970      	ldr	r1, [pc, #448]	; (8001d08 <HAL_I2C_MasterRxCpltCallback+0x278>)
 8001b48:	5ccb      	ldrb	r3, [r1, r3]
 8001b4a:	021b      	lsls	r3, r3, #8
 8001b4c:	4323      	orrs	r3, r4
 8001b4e:	441a      	add	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	330a      	adds	r3, #10
 8001b54:	496c      	ldr	r1, [pc, #432]	; (8001d08 <HAL_I2C_MasterRxCpltCallback+0x278>)
 8001b56:	5ccb      	ldrb	r3, [r1, r3]
 8001b58:	461c      	mov	r4, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	330b      	adds	r3, #11
 8001b5e:	496a      	ldr	r1, [pc, #424]	; (8001d08 <HAL_I2C_MasterRxCpltCallback+0x278>)
 8001b60:	5ccb      	ldrb	r3, [r1, r3]
 8001b62:	021b      	lsls	r3, r3, #8
 8001b64:	4323      	orrs	r3, r4
 8001b66:	441a      	add	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	330c      	adds	r3, #12
 8001b6c:	4966      	ldr	r1, [pc, #408]	; (8001d08 <HAL_I2C_MasterRxCpltCallback+0x278>)
 8001b6e:	5ccb      	ldrb	r3, [r1, r3]
 8001b70:	461c      	mov	r4, r3
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	330d      	adds	r3, #13
 8001b76:	4964      	ldr	r1, [pc, #400]	; (8001d08 <HAL_I2C_MasterRxCpltCallback+0x278>)
 8001b78:	5ccb      	ldrb	r3, [r1, r3]
 8001b7a:	021b      	lsls	r3, r3, #8
 8001b7c:	4323      	orrs	r3, r4
 8001b7e:	4413      	add	r3, r2
 8001b80:	4298      	cmp	r0, r3
 8001b82:	f040 8196 	bne.w	8001eb2 <HAL_I2C_MasterRxCpltCallback+0x422>
				signature = i2c_rx_data[i+4]  | (i2c_rx_data[i+5] << 8);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	3304      	adds	r3, #4
 8001b8a:	4a5f      	ldr	r2, [pc, #380]	; (8001d08 <HAL_I2C_MasterRxCpltCallback+0x278>)
 8001b8c:	5cd3      	ldrb	r3, [r2, r3]
 8001b8e:	b21a      	sxth	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	3305      	adds	r3, #5
 8001b94:	495c      	ldr	r1, [pc, #368]	; (8001d08 <HAL_I2C_MasterRxCpltCallback+0x278>)
 8001b96:	5ccb      	ldrb	r3, [r1, r3]
 8001b98:	021b      	lsls	r3, r3, #8
 8001b9a:	b21b      	sxth	r3, r3
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	b21b      	sxth	r3, r3
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	4b5b      	ldr	r3, [pc, #364]	; (8001d10 <HAL_I2C_MasterRxCpltCallback+0x280>)
 8001ba4:	801a      	strh	r2, [r3, #0]
				if(signature == 1){
 8001ba6:	4b5a      	ldr	r3, [pc, #360]	; (8001d10 <HAL_I2C_MasterRxCpltCallback+0x280>)
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	f040 80c0 	bne.w	8001d30 <HAL_I2C_MasterRxCpltCallback+0x2a0>
					x_ball    = i2c_rx_data[i+6]  | (i2c_rx_data[i+7] << 8);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	3306      	adds	r3, #6
 8001bb4:	4a54      	ldr	r2, [pc, #336]	; (8001d08 <HAL_I2C_MasterRxCpltCallback+0x278>)
 8001bb6:	5cd3      	ldrb	r3, [r2, r3]
 8001bb8:	b21a      	sxth	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	3307      	adds	r3, #7
 8001bbe:	4952      	ldr	r1, [pc, #328]	; (8001d08 <HAL_I2C_MasterRxCpltCallback+0x278>)
 8001bc0:	5ccb      	ldrb	r3, [r1, r3]
 8001bc2:	021b      	lsls	r3, r3, #8
 8001bc4:	b21b      	sxth	r3, r3
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	b21b      	sxth	r3, r3
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	4b51      	ldr	r3, [pc, #324]	; (8001d14 <HAL_I2C_MasterRxCpltCallback+0x284>)
 8001bce:	801a      	strh	r2, [r3, #0]
					y_ball 	  = i2c_rx_data[i+8]  | (i2c_rx_data[i+9] << 8);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	3308      	adds	r3, #8
 8001bd4:	4a4c      	ldr	r2, [pc, #304]	; (8001d08 <HAL_I2C_MasterRxCpltCallback+0x278>)
 8001bd6:	5cd3      	ldrb	r3, [r2, r3]
 8001bd8:	b21a      	sxth	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	3309      	adds	r3, #9
 8001bde:	494a      	ldr	r1, [pc, #296]	; (8001d08 <HAL_I2C_MasterRxCpltCallback+0x278>)
 8001be0:	5ccb      	ldrb	r3, [r1, r3]
 8001be2:	021b      	lsls	r3, r3, #8
 8001be4:	b21b      	sxth	r3, r3
 8001be6:	4313      	orrs	r3, r2
 8001be8:	b21b      	sxth	r3, r3
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	4b4a      	ldr	r3, [pc, #296]	; (8001d18 <HAL_I2C_MasterRxCpltCallback+0x288>)
 8001bee:	801a      	strh	r2, [r3, #0]
					ball_angle     = atan2(y_ball - y_robot, x_robot - x_ball) * 180 / M_PI;
 8001bf0:	4b49      	ldr	r3, [pc, #292]	; (8001d18 <HAL_I2C_MasterRxCpltCallback+0x288>)
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	4b49      	ldr	r3, [pc, #292]	; (8001d1c <HAL_I2C_MasterRxCpltCallback+0x28c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7fe fc35 	bl	800046c <__aeabi_i2d>
 8001c02:	4604      	mov	r4, r0
 8001c04:	460d      	mov	r5, r1
 8001c06:	4b46      	ldr	r3, [pc, #280]	; (8001d20 <HAL_I2C_MasterRxCpltCallback+0x290>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a42      	ldr	r2, [pc, #264]	; (8001d14 <HAL_I2C_MasterRxCpltCallback+0x284>)
 8001c0c:	8812      	ldrh	r2, [r2, #0]
 8001c0e:	1a9b      	subs	r3, r3, r2
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7fe fc2b 	bl	800046c <__aeabi_i2d>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	ec43 2b11 	vmov	d1, r2, r3
 8001c1e:	ec45 4b10 	vmov	d0, r4, r5
 8001c22:	f008 f83d 	bl	8009ca0 <atan2>
 8001c26:	ec51 0b10 	vmov	r0, r1, d0
 8001c2a:	f04f 0200 	mov.w	r2, #0
 8001c2e:	4b3d      	ldr	r3, [pc, #244]	; (8001d24 <HAL_I2C_MasterRxCpltCallback+0x294>)
 8001c30:	f7fe fc86 	bl	8000540 <__aeabi_dmul>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	4610      	mov	r0, r2
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	a32c      	add	r3, pc, #176	; (adr r3, 8001cf0 <HAL_I2C_MasterRxCpltCallback+0x260>)
 8001c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c42:	f7fe fda7 	bl	8000794 <__aeabi_ddiv>
 8001c46:	4602      	mov	r2, r0
 8001c48:	460b      	mov	r3, r1
 8001c4a:	4610      	mov	r0, r2
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f7fe ff27 	bl	8000aa0 <__aeabi_d2iz>
 8001c52:	4603      	mov	r3, r0
 8001c54:	4a34      	ldr	r2, [pc, #208]	; (8001d28 <HAL_I2C_MasterRxCpltCallback+0x298>)
 8001c56:	6013      	str	r3, [r2, #0]
					if(ball_angle < 0)   ball_angle = ball_angle + 360;
 8001c58:	4b33      	ldr	r3, [pc, #204]	; (8001d28 <HAL_I2C_MasterRxCpltCallback+0x298>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	da05      	bge.n	8001c6c <HAL_I2C_MasterRxCpltCallback+0x1dc>
 8001c60:	4b31      	ldr	r3, [pc, #196]	; (8001d28 <HAL_I2C_MasterRxCpltCallback+0x298>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c68:	4a2f      	ldr	r2, [pc, #188]	; (8001d28 <HAL_I2C_MasterRxCpltCallback+0x298>)
 8001c6a:	6013      	str	r3, [r2, #0]
					ball_dist = sqrt(pow(x_robot - x_ball , 2) + pow(y_robot - y_ball , 2));
 8001c6c:	4b2c      	ldr	r3, [pc, #176]	; (8001d20 <HAL_I2C_MasterRxCpltCallback+0x290>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a28      	ldr	r2, [pc, #160]	; (8001d14 <HAL_I2C_MasterRxCpltCallback+0x284>)
 8001c72:	8812      	ldrh	r2, [r2, #0]
 8001c74:	1a9b      	subs	r3, r3, r2
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7fe fbf8 	bl	800046c <__aeabi_i2d>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 8001cf8 <HAL_I2C_MasterRxCpltCallback+0x268>
 8001c84:	ec43 2b10 	vmov	d0, r2, r3
 8001c88:	f008 f80c 	bl	8009ca4 <pow>
 8001c8c:	ec55 4b10 	vmov	r4, r5, d0
 8001c90:	4b22      	ldr	r3, [pc, #136]	; (8001d1c <HAL_I2C_MasterRxCpltCallback+0x28c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a20      	ldr	r2, [pc, #128]	; (8001d18 <HAL_I2C_MasterRxCpltCallback+0x288>)
 8001c96:	8812      	ldrh	r2, [r2, #0]
 8001c98:	1a9b      	subs	r3, r3, r2
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7fe fbe6 	bl	800046c <__aeabi_i2d>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8001cf8 <HAL_I2C_MasterRxCpltCallback+0x268>
 8001ca8:	ec43 2b10 	vmov	d0, r2, r3
 8001cac:	f007 fffa 	bl	8009ca4 <pow>
 8001cb0:	ec53 2b10 	vmov	r2, r3, d0
 8001cb4:	4620      	mov	r0, r4
 8001cb6:	4629      	mov	r1, r5
 8001cb8:	f7fe fa8c 	bl	80001d4 <__adddf3>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	ec43 2b17 	vmov	d7, r2, r3
 8001cc4:	eeb0 0a47 	vmov.f32	s0, s14
 8001cc8:	eef0 0a67 	vmov.f32	s1, s15
 8001ccc:	f008 f85a 	bl	8009d84 <sqrt>
 8001cd0:	ec53 2b10 	vmov	r2, r3, d0
 8001cd4:	4610      	mov	r0, r2
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	f7fe fee2 	bl	8000aa0 <__aeabi_d2iz>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	4a13      	ldr	r2, [pc, #76]	; (8001d2c <HAL_I2C_MasterRxCpltCallback+0x29c>)
 8001ce0:	6013      	str	r3, [r2, #0]
					is_ball = 1;
 8001ce2:	4b07      	ldr	r3, [pc, #28]	; (8001d00 <HAL_I2C_MasterRxCpltCallback+0x270>)
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	e0e3      	b.n	8001eb2 <HAL_I2C_MasterRxCpltCallback+0x422>
 8001cea:	bf00      	nop
 8001cec:	f3af 8000 	nop.w
 8001cf0:	54442d18 	.word	0x54442d18
 8001cf4:	400921fb 	.word	0x400921fb
 8001cf8:	00000000 	.word	0x00000000
 8001cfc:	40000000 	.word	0x40000000
 8001d00:	20000310 	.word	0x20000310
 8001d04:	2000031c 	.word	0x2000031c
 8001d08:	200002b4 	.word	0x200002b4
 8001d0c:	200002f8 	.word	0x200002f8
 8001d10:	200002fa 	.word	0x200002fa
 8001d14:	200002fc 	.word	0x200002fc
 8001d18:	200002fe 	.word	0x200002fe
 8001d1c:	20000028 	.word	0x20000028
 8001d20:	20000024 	.word	0x20000024
 8001d24:	40668000 	.word	0x40668000
 8001d28:	20000308 	.word	0x20000308
 8001d2c:	2000030c 	.word	0x2000030c
				}
				else if(signature == 2){
 8001d30:	4b6b      	ldr	r3, [pc, #428]	; (8001ee0 <HAL_I2C_MasterRxCpltCallback+0x450>)
 8001d32:	881b      	ldrh	r3, [r3, #0]
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	f040 80bc 	bne.w	8001eb2 <HAL_I2C_MasterRxCpltCallback+0x422>
					x_goal    = i2c_rx_data[i+6]  | (i2c_rx_data[i+7] << 8);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	3306      	adds	r3, #6
 8001d3e:	4a69      	ldr	r2, [pc, #420]	; (8001ee4 <HAL_I2C_MasterRxCpltCallback+0x454>)
 8001d40:	5cd3      	ldrb	r3, [r2, r3]
 8001d42:	b21a      	sxth	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	3307      	adds	r3, #7
 8001d48:	4966      	ldr	r1, [pc, #408]	; (8001ee4 <HAL_I2C_MasterRxCpltCallback+0x454>)
 8001d4a:	5ccb      	ldrb	r3, [r1, r3]
 8001d4c:	021b      	lsls	r3, r3, #8
 8001d4e:	b21b      	sxth	r3, r3
 8001d50:	4313      	orrs	r3, r2
 8001d52:	b21b      	sxth	r3, r3
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	4b64      	ldr	r3, [pc, #400]	; (8001ee8 <HAL_I2C_MasterRxCpltCallback+0x458>)
 8001d58:	801a      	strh	r2, [r3, #0]
					y_goal 	  = i2c_rx_data[i+8]  | (i2c_rx_data[i+9] << 8);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	3308      	adds	r3, #8
 8001d5e:	4a61      	ldr	r2, [pc, #388]	; (8001ee4 <HAL_I2C_MasterRxCpltCallback+0x454>)
 8001d60:	5cd3      	ldrb	r3, [r2, r3]
 8001d62:	b21a      	sxth	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	3309      	adds	r3, #9
 8001d68:	495e      	ldr	r1, [pc, #376]	; (8001ee4 <HAL_I2C_MasterRxCpltCallback+0x454>)
 8001d6a:	5ccb      	ldrb	r3, [r1, r3]
 8001d6c:	021b      	lsls	r3, r3, #8
 8001d6e:	b21b      	sxth	r3, r3
 8001d70:	4313      	orrs	r3, r2
 8001d72:	b21b      	sxth	r3, r3
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	4b5d      	ldr	r3, [pc, #372]	; (8001eec <HAL_I2C_MasterRxCpltCallback+0x45c>)
 8001d78:	801a      	strh	r2, [r3, #0]
					w_goal 	  = i2c_rx_data[i+10] | (i2c_rx_data[i+11]<< 8);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	330a      	adds	r3, #10
 8001d7e:	4a59      	ldr	r2, [pc, #356]	; (8001ee4 <HAL_I2C_MasterRxCpltCallback+0x454>)
 8001d80:	5cd3      	ldrb	r3, [r2, r3]
 8001d82:	b21a      	sxth	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	330b      	adds	r3, #11
 8001d88:	4956      	ldr	r1, [pc, #344]	; (8001ee4 <HAL_I2C_MasterRxCpltCallback+0x454>)
 8001d8a:	5ccb      	ldrb	r3, [r1, r3]
 8001d8c:	021b      	lsls	r3, r3, #8
 8001d8e:	b21b      	sxth	r3, r3
 8001d90:	4313      	orrs	r3, r2
 8001d92:	b21b      	sxth	r3, r3
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	4b56      	ldr	r3, [pc, #344]	; (8001ef0 <HAL_I2C_MasterRxCpltCallback+0x460>)
 8001d98:	801a      	strh	r2, [r3, #0]
					h_goal 	  = i2c_rx_data[i+12] | (i2c_rx_data[i+13]<< 8);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	330c      	adds	r3, #12
 8001d9e:	4a51      	ldr	r2, [pc, #324]	; (8001ee4 <HAL_I2C_MasterRxCpltCallback+0x454>)
 8001da0:	5cd3      	ldrb	r3, [r2, r3]
 8001da2:	b21a      	sxth	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	330d      	adds	r3, #13
 8001da8:	494e      	ldr	r1, [pc, #312]	; (8001ee4 <HAL_I2C_MasterRxCpltCallback+0x454>)
 8001daa:	5ccb      	ldrb	r3, [r1, r3]
 8001dac:	021b      	lsls	r3, r3, #8
 8001dae:	b21b      	sxth	r3, r3
 8001db0:	4313      	orrs	r3, r2
 8001db2:	b21b      	sxth	r3, r3
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	4b4f      	ldr	r3, [pc, #316]	; (8001ef4 <HAL_I2C_MasterRxCpltCallback+0x464>)
 8001db8:	801a      	strh	r2, [r3, #0]
					goal_angle     = atan2(y_goal - y_robot, x_robot - x_goal) * 180 / M_PI;
 8001dba:	4b4c      	ldr	r3, [pc, #304]	; (8001eec <HAL_I2C_MasterRxCpltCallback+0x45c>)
 8001dbc:	881b      	ldrh	r3, [r3, #0]
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	4b4d      	ldr	r3, [pc, #308]	; (8001ef8 <HAL_I2C_MasterRxCpltCallback+0x468>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe fb50 	bl	800046c <__aeabi_i2d>
 8001dcc:	4604      	mov	r4, r0
 8001dce:	460d      	mov	r5, r1
 8001dd0:	4b4a      	ldr	r3, [pc, #296]	; (8001efc <HAL_I2C_MasterRxCpltCallback+0x46c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a44      	ldr	r2, [pc, #272]	; (8001ee8 <HAL_I2C_MasterRxCpltCallback+0x458>)
 8001dd6:	8812      	ldrh	r2, [r2, #0]
 8001dd8:	1a9b      	subs	r3, r3, r2
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7fe fb46 	bl	800046c <__aeabi_i2d>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	ec43 2b11 	vmov	d1, r2, r3
 8001de8:	ec45 4b10 	vmov	d0, r4, r5
 8001dec:	f007 ff58 	bl	8009ca0 <atan2>
 8001df0:	ec51 0b10 	vmov	r0, r1, d0
 8001df4:	f04f 0200 	mov.w	r2, #0
 8001df8:	4b41      	ldr	r3, [pc, #260]	; (8001f00 <HAL_I2C_MasterRxCpltCallback+0x470>)
 8001dfa:	f7fe fba1 	bl	8000540 <__aeabi_dmul>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	4610      	mov	r0, r2
 8001e04:	4619      	mov	r1, r3
 8001e06:	a332      	add	r3, pc, #200	; (adr r3, 8001ed0 <HAL_I2C_MasterRxCpltCallback+0x440>)
 8001e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0c:	f7fe fcc2 	bl	8000794 <__aeabi_ddiv>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	4610      	mov	r0, r2
 8001e16:	4619      	mov	r1, r3
 8001e18:	f7fe fe42 	bl	8000aa0 <__aeabi_d2iz>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	4a39      	ldr	r2, [pc, #228]	; (8001f04 <HAL_I2C_MasterRxCpltCallback+0x474>)
 8001e20:	6013      	str	r3, [r2, #0]
					if(goal_angle < 0)   goal_angle = goal_angle + 360;
 8001e22:	4b38      	ldr	r3, [pc, #224]	; (8001f04 <HAL_I2C_MasterRxCpltCallback+0x474>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	da05      	bge.n	8001e36 <HAL_I2C_MasterRxCpltCallback+0x3a6>
 8001e2a:	4b36      	ldr	r3, [pc, #216]	; (8001f04 <HAL_I2C_MasterRxCpltCallback+0x474>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e32:	4a34      	ldr	r2, [pc, #208]	; (8001f04 <HAL_I2C_MasterRxCpltCallback+0x474>)
 8001e34:	6013      	str	r3, [r2, #0]
					goal_dist = sqrt(pow(x_robot - x_goal , 2) + pow(y_robot - y_goal , 2));
 8001e36:	4b31      	ldr	r3, [pc, #196]	; (8001efc <HAL_I2C_MasterRxCpltCallback+0x46c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a2b      	ldr	r2, [pc, #172]	; (8001ee8 <HAL_I2C_MasterRxCpltCallback+0x458>)
 8001e3c:	8812      	ldrh	r2, [r2, #0]
 8001e3e:	1a9b      	subs	r3, r3, r2
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7fe fb13 	bl	800046c <__aeabi_i2d>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8001ed8 <HAL_I2C_MasterRxCpltCallback+0x448>
 8001e4e:	ec43 2b10 	vmov	d0, r2, r3
 8001e52:	f007 ff27 	bl	8009ca4 <pow>
 8001e56:	ec55 4b10 	vmov	r4, r5, d0
 8001e5a:	4b27      	ldr	r3, [pc, #156]	; (8001ef8 <HAL_I2C_MasterRxCpltCallback+0x468>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a23      	ldr	r2, [pc, #140]	; (8001eec <HAL_I2C_MasterRxCpltCallback+0x45c>)
 8001e60:	8812      	ldrh	r2, [r2, #0]
 8001e62:	1a9b      	subs	r3, r3, r2
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7fe fb01 	bl	800046c <__aeabi_i2d>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8001ed8 <HAL_I2C_MasterRxCpltCallback+0x448>
 8001e72:	ec43 2b10 	vmov	d0, r2, r3
 8001e76:	f007 ff15 	bl	8009ca4 <pow>
 8001e7a:	ec53 2b10 	vmov	r2, r3, d0
 8001e7e:	4620      	mov	r0, r4
 8001e80:	4629      	mov	r1, r5
 8001e82:	f7fe f9a7 	bl	80001d4 <__adddf3>
 8001e86:	4602      	mov	r2, r0
 8001e88:	460b      	mov	r3, r1
 8001e8a:	ec43 2b17 	vmov	d7, r2, r3
 8001e8e:	eeb0 0a47 	vmov.f32	s0, s14
 8001e92:	eef0 0a67 	vmov.f32	s1, s15
 8001e96:	f007 ff75 	bl	8009d84 <sqrt>
 8001e9a:	ec53 2b10 	vmov	r2, r3, d0
 8001e9e:	4610      	mov	r0, r2
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	f7fe fdfd 	bl	8000aa0 <__aeabi_d2iz>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	4a17      	ldr	r2, [pc, #92]	; (8001f08 <HAL_I2C_MasterRxCpltCallback+0x478>)
 8001eaa:	6013      	str	r3, [r2, #0]
					is_goal = 1;
 8001eac:	4b17      	ldr	r3, [pc, #92]	; (8001f0c <HAL_I2C_MasterRxCpltCallback+0x47c>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]
	for (int i = sizeof(i2c_rx_data)-10; i >=0 ; i--) {
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f6bf adf5 	bge.w	8001aaa <HAL_I2C_MasterRxCpltCallback+0x1a>
				}
			}
		}
	}
	pixy_updated = 0;
 8001ec0:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <HAL_I2C_MasterRxCpltCallback+0x480>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
}
 8001ec6:	bf00      	nop
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bdb0      	pop	{r4, r5, r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	54442d18 	.word	0x54442d18
 8001ed4:	400921fb 	.word	0x400921fb
 8001ed8:	00000000 	.word	0x00000000
 8001edc:	40000000 	.word	0x40000000
 8001ee0:	200002fa 	.word	0x200002fa
 8001ee4:	200002b4 	.word	0x200002b4
 8001ee8:	20000304 	.word	0x20000304
 8001eec:	20000306 	.word	0x20000306
 8001ef0:	20000300 	.word	0x20000300
 8001ef4:	20000302 	.word	0x20000302
 8001ef8:	20000028 	.word	0x20000028
 8001efc:	20000024 	.word	0x20000024
 8001f00:	40668000 	.word	0x40668000
 8001f04:	20000314 	.word	0x20000314
 8001f08:	20000318 	.word	0x20000318
 8001f0c:	2000031c 	.word	0x2000031c
 8001f10:	200002a8 	.word	0x200002a8

08001f14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f1a:	f001 fd69 	bl	80039f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f1e:	f000 f889 	bl	8002034 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f22:	f000 fa85 	bl	8002430 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f26:	f000 fa63 	bl	80023f0 <MX_DMA_Init>
  MX_ADC1_Init();
 8001f2a:	f000 f8e1 	bl	80020f0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001f2e:	f000 f931 	bl	8002194 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001f32:	f000 f95d 	bl	80021f0 <MX_I2C2_Init>
  MX_TIM1_Init();
 8001f36:	f000 f989 	bl	800224c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001f3a:	f000 fa2f 	bl	800239c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001f3e:	2100      	movs	r1, #0
 8001f40:	4832      	ldr	r0, [pc, #200]	; (800200c <main+0xf8>)
 8001f42:	f005 ff31 	bl	8007da8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001f46:	2104      	movs	r1, #4
 8001f48:	4830      	ldr	r0, [pc, #192]	; (800200c <main+0xf8>)
 8001f4a:	f005 ff2d 	bl	8007da8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001f4e:	2108      	movs	r1, #8
 8001f50:	482e      	ldr	r0, [pc, #184]	; (800200c <main+0xf8>)
 8001f52:	f005 ff29 	bl	8007da8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001f56:	210c      	movs	r1, #12
 8001f58:	482c      	ldr	r0, [pc, #176]	; (800200c <main+0xf8>)
 8001f5a:	f005 ff25 	bl	8007da8 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(MOTORS_EN_GPIO_Port, MOTORS_EN_Pin, 1);
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f64:	482a      	ldr	r0, [pc, #168]	; (8002010 <main+0xfc>)
 8001f66:	f003 f87b 	bl	8005060 <HAL_GPIO_WritePin>
  SSD1306_Init();
 8001f6a:	f001 f80b 	bl	8002f84 <SSD1306_Init>
  SSD1306_GotoXY(25, 20);
 8001f6e:	2114      	movs	r1, #20
 8001f70:	2019      	movs	r0, #25
 8001f72:	f001 f971 	bl	8003258 <SSD1306_GotoXY>
  SSD1306_Puts("METIS", &Font_16x26, 1);
 8001f76:	2201      	movs	r2, #1
 8001f78:	4926      	ldr	r1, [pc, #152]	; (8002014 <main+0x100>)
 8001f7a:	4827      	ldr	r0, [pc, #156]	; (8002018 <main+0x104>)
 8001f7c:	f001 fa02 	bl	8003384 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8001f80:	f001 f8c4 	bl	800310c <SSD1306_UpdateScreen>
  for(int i=0; i<2; i++){
 8001f84:	2300      	movs	r3, #0
 8001f86:	607b      	str	r3, [r7, #4]
 8001f88:	e01c      	b.n	8001fc4 <main+0xb0>
	  BUZZER_ON;
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	2108      	movs	r1, #8
 8001f8e:	4823      	ldr	r0, [pc, #140]	; (800201c <main+0x108>)
 8001f90:	f003 f866 	bl	8005060 <HAL_GPIO_WritePin>
	  GREEN_ON;
 8001f94:	2201      	movs	r2, #1
 8001f96:	2180      	movs	r1, #128	; 0x80
 8001f98:	4821      	ldr	r0, [pc, #132]	; (8002020 <main+0x10c>)
 8001f9a:	f003 f861 	bl	8005060 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8001f9e:	2064      	movs	r0, #100	; 0x64
 8001fa0:	f001 fd98 	bl	8003ad4 <HAL_Delay>
	  BUZZER_OFF;
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	2108      	movs	r1, #8
 8001fa8:	481c      	ldr	r0, [pc, #112]	; (800201c <main+0x108>)
 8001faa:	f003 f859 	bl	8005060 <HAL_GPIO_WritePin>
	  GREEN_OFF;
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2180      	movs	r1, #128	; 0x80
 8001fb2:	481b      	ldr	r0, [pc, #108]	; (8002020 <main+0x10c>)
 8001fb4:	f003 f854 	bl	8005060 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8001fb8:	2064      	movs	r0, #100	; 0x64
 8001fba:	f001 fd8b 	bl	8003ad4 <HAL_Delay>
  for(int i=0; i<2; i++){
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	607b      	str	r3, [r7, #4]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	dddf      	ble.n	8001f8a <main+0x76>
  }
  initGY(&huart2);
 8001fca:	4816      	ldr	r0, [pc, #88]	; (8002024 <main+0x110>)
 8001fcc:	f7fe ff12 	bl	8000df4 <initGY>

  HAL_UART_Transmit(&huart2, &GY_Request_Command[0], 2, PHY_FULLDUPLEX_10M);
 8001fd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	4914      	ldr	r1, [pc, #80]	; (8002028 <main+0x114>)
 8001fd8:	4812      	ldr	r0, [pc, #72]	; (8002024 <main+0x110>)
 8001fda:	f006 fb9a 	bl	8008712 <HAL_UART_Transmit>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, &Rx2_Buff[0], RX2_Size);
 8001fde:	2208      	movs	r2, #8
 8001fe0:	4912      	ldr	r1, [pc, #72]	; (800202c <main+0x118>)
 8001fe2:	4810      	ldr	r0, [pc, #64]	; (8002024 <main+0x110>)
 8001fe4:	f006 fc27 	bl	8008836 <HAL_UARTEx_ReceiveToIdle_DMA>
__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001fe8:	4b11      	ldr	r3, [pc, #68]	; (8002030 <main+0x11c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	4b10      	ldr	r3, [pc, #64]	; (8002030 <main+0x11c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 0208 	bic.w	r2, r2, #8
 8001ff6:	601a      	str	r2, [r3, #0]
  SSD1306_Clear();
 8001ff8:	f001 f9e9 	bl	80033ce <SSD1306_Clear>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  read_sensors();
 8001ffc:	f7ff f85c 	bl	80010b8 <read_sensors>
	  OUT();
 8002000:	f7ff fb80 	bl	8001704 <OUT>
	  shift();
 8002004:	f000 ff16 	bl	8002e34 <shift>
	  read_sensors();
 8002008:	e7f8      	b.n	8001ffc <main+0xe8>
 800200a:	bf00      	nop
 800200c:	200001ac 	.word	0x200001ac
 8002010:	40021000 	.word	0x40021000
 8002014:	2000001c 	.word	0x2000001c
 8002018:	0800bf18 	.word	0x0800bf18
 800201c:	40020400 	.word	0x40020400
 8002020:	40020c00 	.word	0x40020c00
 8002024:	200001f4 	.word	0x200001f4
 8002028:	20000010 	.word	0x20000010
 800202c:	200002a0 	.word	0x200002a0
 8002030:	20000238 	.word	0x20000238

08002034 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b094      	sub	sp, #80	; 0x50
 8002038:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800203a:	f107 0320 	add.w	r3, r7, #32
 800203e:	2230      	movs	r2, #48	; 0x30
 8002040:	2100      	movs	r1, #0
 8002042:	4618      	mov	r0, r3
 8002044:	f007 fd76 	bl	8009b34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002048:	f107 030c 	add.w	r3, r7, #12
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	60da      	str	r2, [r3, #12]
 8002056:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002058:	2300      	movs	r3, #0
 800205a:	60bb      	str	r3, [r7, #8]
 800205c:	4b22      	ldr	r3, [pc, #136]	; (80020e8 <SystemClock_Config+0xb4>)
 800205e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002060:	4a21      	ldr	r2, [pc, #132]	; (80020e8 <SystemClock_Config+0xb4>)
 8002062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002066:	6413      	str	r3, [r2, #64]	; 0x40
 8002068:	4b1f      	ldr	r3, [pc, #124]	; (80020e8 <SystemClock_Config+0xb4>)
 800206a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002070:	60bb      	str	r3, [r7, #8]
 8002072:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002074:	2300      	movs	r3, #0
 8002076:	607b      	str	r3, [r7, #4]
 8002078:	4b1c      	ldr	r3, [pc, #112]	; (80020ec <SystemClock_Config+0xb8>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a1b      	ldr	r2, [pc, #108]	; (80020ec <SystemClock_Config+0xb8>)
 800207e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002082:	6013      	str	r3, [r2, #0]
 8002084:	4b19      	ldr	r3, [pc, #100]	; (80020ec <SystemClock_Config+0xb8>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800208c:	607b      	str	r3, [r7, #4]
 800208e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002090:	2302      	movs	r3, #2
 8002092:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002094:	2301      	movs	r3, #1
 8002096:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002098:	2310      	movs	r3, #16
 800209a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800209c:	2300      	movs	r3, #0
 800209e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020a0:	f107 0320 	add.w	r3, r7, #32
 80020a4:	4618      	mov	r0, r3
 80020a6:	f005 f9d7 	bl	8007458 <HAL_RCC_OscConfig>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80020b0:	f000 fa98 	bl	80025e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020b4:	230f      	movs	r3, #15
 80020b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80020b8:	2300      	movs	r3, #0
 80020ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80020c0:	2300      	movs	r3, #0
 80020c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020c4:	2300      	movs	r3, #0
 80020c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80020c8:	f107 030c 	add.w	r3, r7, #12
 80020cc:	2100      	movs	r1, #0
 80020ce:	4618      	mov	r0, r3
 80020d0:	f005 fc3a 	bl	8007948 <HAL_RCC_ClockConfig>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80020da:	f000 fa83 	bl	80025e4 <Error_Handler>
  }
}
 80020de:	bf00      	nop
 80020e0:	3750      	adds	r7, #80	; 0x50
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40023800 	.word	0x40023800
 80020ec:	40007000 	.word	0x40007000

080020f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80020f6:	463b      	mov	r3, r7
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	609a      	str	r2, [r3, #8]
 8002100:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002102:	4b21      	ldr	r3, [pc, #132]	; (8002188 <MX_ADC1_Init+0x98>)
 8002104:	4a21      	ldr	r2, [pc, #132]	; (800218c <MX_ADC1_Init+0x9c>)
 8002106:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002108:	4b1f      	ldr	r3, [pc, #124]	; (8002188 <MX_ADC1_Init+0x98>)
 800210a:	2200      	movs	r2, #0
 800210c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800210e:	4b1e      	ldr	r3, [pc, #120]	; (8002188 <MX_ADC1_Init+0x98>)
 8002110:	2200      	movs	r2, #0
 8002112:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002114:	4b1c      	ldr	r3, [pc, #112]	; (8002188 <MX_ADC1_Init+0x98>)
 8002116:	2200      	movs	r2, #0
 8002118:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800211a:	4b1b      	ldr	r3, [pc, #108]	; (8002188 <MX_ADC1_Init+0x98>)
 800211c:	2200      	movs	r2, #0
 800211e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002120:	4b19      	ldr	r3, [pc, #100]	; (8002188 <MX_ADC1_Init+0x98>)
 8002122:	2200      	movs	r2, #0
 8002124:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002128:	4b17      	ldr	r3, [pc, #92]	; (8002188 <MX_ADC1_Init+0x98>)
 800212a:	2200      	movs	r2, #0
 800212c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800212e:	4b16      	ldr	r3, [pc, #88]	; (8002188 <MX_ADC1_Init+0x98>)
 8002130:	4a17      	ldr	r2, [pc, #92]	; (8002190 <MX_ADC1_Init+0xa0>)
 8002132:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002134:	4b14      	ldr	r3, [pc, #80]	; (8002188 <MX_ADC1_Init+0x98>)
 8002136:	2200      	movs	r2, #0
 8002138:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800213a:	4b13      	ldr	r3, [pc, #76]	; (8002188 <MX_ADC1_Init+0x98>)
 800213c:	2201      	movs	r2, #1
 800213e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002140:	4b11      	ldr	r3, [pc, #68]	; (8002188 <MX_ADC1_Init+0x98>)
 8002142:	2200      	movs	r2, #0
 8002144:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002148:	4b0f      	ldr	r3, [pc, #60]	; (8002188 <MX_ADC1_Init+0x98>)
 800214a:	2201      	movs	r2, #1
 800214c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800214e:	480e      	ldr	r0, [pc, #56]	; (8002188 <MX_ADC1_Init+0x98>)
 8002150:	f001 fce4 	bl	8003b1c <HAL_ADC_Init>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800215a:	f000 fa43 	bl	80025e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800215e:	2300      	movs	r3, #0
 8002160:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002162:	2301      	movs	r3, #1
 8002164:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002166:	2300      	movs	r3, #0
 8002168:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800216a:	463b      	mov	r3, r7
 800216c:	4619      	mov	r1, r3
 800216e:	4806      	ldr	r0, [pc, #24]	; (8002188 <MX_ADC1_Init+0x98>)
 8002170:	f001 fe82 	bl	8003e78 <HAL_ADC_ConfigChannel>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800217a:	f000 fa33 	bl	80025e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800217e:	bf00      	nop
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	200000bc 	.word	0x200000bc
 800218c:	40012000 	.word	0x40012000
 8002190:	0f000001 	.word	0x0f000001

08002194 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002198:	4b12      	ldr	r3, [pc, #72]	; (80021e4 <MX_I2C1_Init+0x50>)
 800219a:	4a13      	ldr	r2, [pc, #76]	; (80021e8 <MX_I2C1_Init+0x54>)
 800219c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800219e:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <MX_I2C1_Init+0x50>)
 80021a0:	4a12      	ldr	r2, [pc, #72]	; (80021ec <MX_I2C1_Init+0x58>)
 80021a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021a4:	4b0f      	ldr	r3, [pc, #60]	; (80021e4 <MX_I2C1_Init+0x50>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80021aa:	4b0e      	ldr	r3, [pc, #56]	; (80021e4 <MX_I2C1_Init+0x50>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021b0:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <MX_I2C1_Init+0x50>)
 80021b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021b8:	4b0a      	ldr	r3, [pc, #40]	; (80021e4 <MX_I2C1_Init+0x50>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80021be:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <MX_I2C1_Init+0x50>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021c4:	4b07      	ldr	r3, [pc, #28]	; (80021e4 <MX_I2C1_Init+0x50>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021ca:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <MX_I2C1_Init+0x50>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021d0:	4804      	ldr	r0, [pc, #16]	; (80021e4 <MX_I2C1_Init+0x50>)
 80021d2:	f002 ff5f 	bl	8005094 <HAL_I2C_Init>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80021dc:	f000 fa02 	bl	80025e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80021e0:	bf00      	nop
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	20000104 	.word	0x20000104
 80021e8:	40005400 	.word	0x40005400
 80021ec:	00061a80 	.word	0x00061a80

080021f0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80021f4:	4b12      	ldr	r3, [pc, #72]	; (8002240 <MX_I2C2_Init+0x50>)
 80021f6:	4a13      	ldr	r2, [pc, #76]	; (8002244 <MX_I2C2_Init+0x54>)
 80021f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80021fa:	4b11      	ldr	r3, [pc, #68]	; (8002240 <MX_I2C2_Init+0x50>)
 80021fc:	4a12      	ldr	r2, [pc, #72]	; (8002248 <MX_I2C2_Init+0x58>)
 80021fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002200:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <MX_I2C2_Init+0x50>)
 8002202:	2200      	movs	r2, #0
 8002204:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002206:	4b0e      	ldr	r3, [pc, #56]	; (8002240 <MX_I2C2_Init+0x50>)
 8002208:	2200      	movs	r2, #0
 800220a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800220c:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <MX_I2C2_Init+0x50>)
 800220e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002212:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002214:	4b0a      	ldr	r3, [pc, #40]	; (8002240 <MX_I2C2_Init+0x50>)
 8002216:	2200      	movs	r2, #0
 8002218:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800221a:	4b09      	ldr	r3, [pc, #36]	; (8002240 <MX_I2C2_Init+0x50>)
 800221c:	2200      	movs	r2, #0
 800221e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002220:	4b07      	ldr	r3, [pc, #28]	; (8002240 <MX_I2C2_Init+0x50>)
 8002222:	2200      	movs	r2, #0
 8002224:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002226:	4b06      	ldr	r3, [pc, #24]	; (8002240 <MX_I2C2_Init+0x50>)
 8002228:	2200      	movs	r2, #0
 800222a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800222c:	4804      	ldr	r0, [pc, #16]	; (8002240 <MX_I2C2_Init+0x50>)
 800222e:	f002 ff31 	bl	8005094 <HAL_I2C_Init>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002238:	f000 f9d4 	bl	80025e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800223c:	bf00      	nop
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20000158 	.word	0x20000158
 8002244:	40005800 	.word	0x40005800
 8002248:	00061a80 	.word	0x00061a80

0800224c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b092      	sub	sp, #72	; 0x48
 8002250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002252:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800225c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	605a      	str	r2, [r3, #4]
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	60da      	str	r2, [r3, #12]
 800226a:	611a      	str	r2, [r3, #16]
 800226c:	615a      	str	r2, [r3, #20]
 800226e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002270:	1d3b      	adds	r3, r7, #4
 8002272:	2220      	movs	r2, #32
 8002274:	2100      	movs	r1, #0
 8002276:	4618      	mov	r0, r3
 8002278:	f007 fc5c 	bl	8009b34 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800227c:	4b45      	ldr	r3, [pc, #276]	; (8002394 <MX_TIM1_Init+0x148>)
 800227e:	4a46      	ldr	r2, [pc, #280]	; (8002398 <MX_TIM1_Init+0x14c>)
 8002280:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002282:	4b44      	ldr	r3, [pc, #272]	; (8002394 <MX_TIM1_Init+0x148>)
 8002284:	2200      	movs	r2, #0
 8002286:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002288:	4b42      	ldr	r3, [pc, #264]	; (8002394 <MX_TIM1_Init+0x148>)
 800228a:	2200      	movs	r2, #0
 800228c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800228e:	4b41      	ldr	r3, [pc, #260]	; (8002394 <MX_TIM1_Init+0x148>)
 8002290:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002294:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002296:	4b3f      	ldr	r3, [pc, #252]	; (8002394 <MX_TIM1_Init+0x148>)
 8002298:	2200      	movs	r2, #0
 800229a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800229c:	4b3d      	ldr	r3, [pc, #244]	; (8002394 <MX_TIM1_Init+0x148>)
 800229e:	2200      	movs	r2, #0
 80022a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022a2:	4b3c      	ldr	r3, [pc, #240]	; (8002394 <MX_TIM1_Init+0x148>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80022a8:	483a      	ldr	r0, [pc, #232]	; (8002394 <MX_TIM1_Init+0x148>)
 80022aa:	f005 fd2d 	bl	8007d08 <HAL_TIM_OC_Init>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80022b4:	f000 f996 	bl	80025e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022b8:	2300      	movs	r3, #0
 80022ba:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022bc:	2300      	movs	r3, #0
 80022be:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80022c4:	4619      	mov	r1, r3
 80022c6:	4833      	ldr	r0, [pc, #204]	; (8002394 <MX_TIM1_Init+0x148>)
 80022c8:	f006 f908 	bl	80084dc <HAL_TIMEx_MasterConfigSynchronization>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80022d2:	f000 f987 	bl	80025e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80022d6:	2300      	movs	r3, #0
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80022da:	2300      	movs	r3, #0
 80022dc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022de:	2300      	movs	r3, #0
 80022e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80022e2:	2300      	movs	r3, #0
 80022e4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022e6:	2300      	movs	r3, #0
 80022e8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80022ea:	2300      	movs	r3, #0
 80022ec:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80022ee:	2300      	movs	r3, #0
 80022f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022f6:	2200      	movs	r2, #0
 80022f8:	4619      	mov	r1, r3
 80022fa:	4826      	ldr	r0, [pc, #152]	; (8002394 <MX_TIM1_Init+0x148>)
 80022fc:	f005 fe1c 	bl	8007f38 <HAL_TIM_OC_ConfigChannel>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002306:	f000 f96d 	bl	80025e4 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800230a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800230e:	2204      	movs	r2, #4
 8002310:	4619      	mov	r1, r3
 8002312:	4820      	ldr	r0, [pc, #128]	; (8002394 <MX_TIM1_Init+0x148>)
 8002314:	f005 fe10 	bl	8007f38 <HAL_TIM_OC_ConfigChannel>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800231e:	f000 f961 	bl	80025e4 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002322:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002326:	2208      	movs	r2, #8
 8002328:	4619      	mov	r1, r3
 800232a:	481a      	ldr	r0, [pc, #104]	; (8002394 <MX_TIM1_Init+0x148>)
 800232c:	f005 fe04 	bl	8007f38 <HAL_TIM_OC_ConfigChannel>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8002336:	f000 f955 	bl	80025e4 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800233a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800233e:	220c      	movs	r2, #12
 8002340:	4619      	mov	r1, r3
 8002342:	4814      	ldr	r0, [pc, #80]	; (8002394 <MX_TIM1_Init+0x148>)
 8002344:	f005 fdf8 	bl	8007f38 <HAL_TIM_OC_ConfigChannel>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800234e:	f000 f949 	bl	80025e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002352:	2300      	movs	r3, #0
 8002354:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002356:	2300      	movs	r3, #0
 8002358:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800235e:	2300      	movs	r3, #0
 8002360:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002362:	2300      	movs	r3, #0
 8002364:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002366:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800236a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800236c:	2300      	movs	r3, #0
 800236e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002370:	1d3b      	adds	r3, r7, #4
 8002372:	4619      	mov	r1, r3
 8002374:	4807      	ldr	r0, [pc, #28]	; (8002394 <MX_TIM1_Init+0x148>)
 8002376:	f006 f92d 	bl	80085d4 <HAL_TIMEx_ConfigBreakDeadTime>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8002380:	f000 f930 	bl	80025e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002384:	4803      	ldr	r0, [pc, #12]	; (8002394 <MX_TIM1_Init+0x148>)
 8002386:	f001 f9f3 	bl	8003770 <HAL_TIM_MspPostInit>

}
 800238a:	bf00      	nop
 800238c:	3748      	adds	r7, #72	; 0x48
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	200001ac 	.word	0x200001ac
 8002398:	40010000 	.word	0x40010000

0800239c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023a0:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <MX_USART2_UART_Init+0x4c>)
 80023a2:	4a12      	ldr	r2, [pc, #72]	; (80023ec <MX_USART2_UART_Init+0x50>)
 80023a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80023a6:	4b10      	ldr	r3, [pc, #64]	; (80023e8 <MX_USART2_UART_Init+0x4c>)
 80023a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023ae:	4b0e      	ldr	r3, [pc, #56]	; (80023e8 <MX_USART2_UART_Init+0x4c>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023b4:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <MX_USART2_UART_Init+0x4c>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023ba:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <MX_USART2_UART_Init+0x4c>)
 80023bc:	2200      	movs	r2, #0
 80023be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023c0:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <MX_USART2_UART_Init+0x4c>)
 80023c2:	220c      	movs	r2, #12
 80023c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023c6:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <MX_USART2_UART_Init+0x4c>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023cc:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <MX_USART2_UART_Init+0x4c>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023d2:	4805      	ldr	r0, [pc, #20]	; (80023e8 <MX_USART2_UART_Init+0x4c>)
 80023d4:	f006 f950 	bl	8008678 <HAL_UART_Init>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80023de:	f000 f901 	bl	80025e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	200001f4 	.word	0x200001f4
 80023ec:	40004400 	.word	0x40004400

080023f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	607b      	str	r3, [r7, #4]
 80023fa:	4b0c      	ldr	r3, [pc, #48]	; (800242c <MX_DMA_Init+0x3c>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	4a0b      	ldr	r2, [pc, #44]	; (800242c <MX_DMA_Init+0x3c>)
 8002400:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002404:	6313      	str	r3, [r2, #48]	; 0x30
 8002406:	4b09      	ldr	r3, [pc, #36]	; (800242c <MX_DMA_Init+0x3c>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800240e:	607b      	str	r3, [r7, #4]
 8002410:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002412:	2200      	movs	r2, #0
 8002414:	2100      	movs	r1, #0
 8002416:	2010      	movs	r0, #16
 8002418:	f002 f827 	bl	800446a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800241c:	2010      	movs	r0, #16
 800241e:	f002 f840 	bl	80044a2 <HAL_NVIC_EnableIRQ>

}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40023800 	.word	0x40023800

08002430 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b08c      	sub	sp, #48	; 0x30
 8002434:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002436:	f107 031c 	add.w	r3, r7, #28
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	605a      	str	r2, [r3, #4]
 8002440:	609a      	str	r2, [r3, #8]
 8002442:	60da      	str	r2, [r3, #12]
 8002444:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002446:	2300      	movs	r3, #0
 8002448:	61bb      	str	r3, [r7, #24]
 800244a:	4b61      	ldr	r3, [pc, #388]	; (80025d0 <MX_GPIO_Init+0x1a0>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	4a60      	ldr	r2, [pc, #384]	; (80025d0 <MX_GPIO_Init+0x1a0>)
 8002450:	f043 0304 	orr.w	r3, r3, #4
 8002454:	6313      	str	r3, [r2, #48]	; 0x30
 8002456:	4b5e      	ldr	r3, [pc, #376]	; (80025d0 <MX_GPIO_Init+0x1a0>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	f003 0304 	and.w	r3, r3, #4
 800245e:	61bb      	str	r3, [r7, #24]
 8002460:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	617b      	str	r3, [r7, #20]
 8002466:	4b5a      	ldr	r3, [pc, #360]	; (80025d0 <MX_GPIO_Init+0x1a0>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	4a59      	ldr	r2, [pc, #356]	; (80025d0 <MX_GPIO_Init+0x1a0>)
 800246c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002470:	6313      	str	r3, [r2, #48]	; 0x30
 8002472:	4b57      	ldr	r3, [pc, #348]	; (80025d0 <MX_GPIO_Init+0x1a0>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800247a:	617b      	str	r3, [r7, #20]
 800247c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	613b      	str	r3, [r7, #16]
 8002482:	4b53      	ldr	r3, [pc, #332]	; (80025d0 <MX_GPIO_Init+0x1a0>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	4a52      	ldr	r2, [pc, #328]	; (80025d0 <MX_GPIO_Init+0x1a0>)
 8002488:	f043 0301 	orr.w	r3, r3, #1
 800248c:	6313      	str	r3, [r2, #48]	; 0x30
 800248e:	4b50      	ldr	r3, [pc, #320]	; (80025d0 <MX_GPIO_Init+0x1a0>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	613b      	str	r3, [r7, #16]
 8002498:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	4b4c      	ldr	r3, [pc, #304]	; (80025d0 <MX_GPIO_Init+0x1a0>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	4a4b      	ldr	r2, [pc, #300]	; (80025d0 <MX_GPIO_Init+0x1a0>)
 80024a4:	f043 0310 	orr.w	r3, r3, #16
 80024a8:	6313      	str	r3, [r2, #48]	; 0x30
 80024aa:	4b49      	ldr	r3, [pc, #292]	; (80025d0 <MX_GPIO_Init+0x1a0>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	f003 0310 	and.w	r3, r3, #16
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024b6:	2300      	movs	r3, #0
 80024b8:	60bb      	str	r3, [r7, #8]
 80024ba:	4b45      	ldr	r3, [pc, #276]	; (80025d0 <MX_GPIO_Init+0x1a0>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	4a44      	ldr	r2, [pc, #272]	; (80025d0 <MX_GPIO_Init+0x1a0>)
 80024c0:	f043 0302 	orr.w	r3, r3, #2
 80024c4:	6313      	str	r3, [r2, #48]	; 0x30
 80024c6:	4b42      	ldr	r3, [pc, #264]	; (80025d0 <MX_GPIO_Init+0x1a0>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	60bb      	str	r3, [r7, #8]
 80024d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	607b      	str	r3, [r7, #4]
 80024d6:	4b3e      	ldr	r3, [pc, #248]	; (80025d0 <MX_GPIO_Init+0x1a0>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	4a3d      	ldr	r2, [pc, #244]	; (80025d0 <MX_GPIO_Init+0x1a0>)
 80024dc:	f043 0308 	orr.w	r3, r3, #8
 80024e0:	6313      	str	r3, [r2, #48]	; 0x30
 80024e2:	4b3b      	ldr	r3, [pc, #236]	; (80025d0 <MX_GPIO_Init+0x1a0>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	f003 0308 	and.w	r3, r3, #8
 80024ea:	607b      	str	r3, [r7, #4]
 80024ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, L2A_Pin|L1A_Pin|L1B_Pin|L2B_Pin
 80024ee:	2200      	movs	r2, #0
 80024f0:	f249 5180 	movw	r1, #38272	; 0x9580
 80024f4:	4837      	ldr	r0, [pc, #220]	; (80025d4 <MX_GPIO_Init+0x1a4>)
 80024f6:	f002 fdb3 	bl	8005060 <HAL_GPIO_WritePin>
                          |MOTORS_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SHOOT_Pin|BUZZER_Pin|BLUE_Pin|RED_Pin, GPIO_PIN_RESET);
 80024fa:	2200      	movs	r2, #0
 80024fc:	f248 0138 	movw	r1, #32824	; 0x8038
 8002500:	4835      	ldr	r0, [pc, #212]	; (80025d8 <MX_GPIO_Init+0x1a8>)
 8002502:	f002 fdad 	bl	8005060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPIN_Pin|ADD3_Pin|ADD2_Pin|ADD1_Pin
 8002506:	2200      	movs	r2, #0
 8002508:	f64f 7180 	movw	r1, #65408	; 0xff80
 800250c:	4833      	ldr	r0, [pc, #204]	; (80025dc <MX_GPIO_Init+0x1ac>)
 800250e:	f002 fda7 	bl	8005060 <HAL_GPIO_WritePin>
                          |ADD0_Pin|R2B_Pin|R2A_Pin|R1B_Pin
                          |GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R1A_GPIO_Port, R1A_Pin, GPIO_PIN_RESET);
 8002512:	2200      	movs	r2, #0
 8002514:	2140      	movs	r1, #64	; 0x40
 8002516:	4832      	ldr	r0, [pc, #200]	; (80025e0 <MX_GPIO_Init+0x1b0>)
 8002518:	f002 fda2 	bl	8005060 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIP2_Pin DIP1_Pin */
  GPIO_InitStruct.Pin = DIP2_Pin|DIP1_Pin;
 800251c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002520:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002522:	2300      	movs	r3, #0
 8002524:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002526:	2300      	movs	r3, #0
 8002528:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800252a:	f107 031c 	add.w	r3, r7, #28
 800252e:	4619      	mov	r1, r3
 8002530:	482b      	ldr	r0, [pc, #172]	; (80025e0 <MX_GPIO_Init+0x1b0>)
 8002532:	f002 fbe1 	bl	8004cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : L2A_Pin L1A_Pin L1B_Pin L2B_Pin
                           MOTORS_EN_Pin */
  GPIO_InitStruct.Pin = L2A_Pin|L1A_Pin|L1B_Pin|L2B_Pin
 8002536:	f249 5380 	movw	r3, #38272	; 0x9580
 800253a:	61fb      	str	r3, [r7, #28]
                          |MOTORS_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800253c:	2301      	movs	r3, #1
 800253e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002540:	2300      	movs	r3, #0
 8002542:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002544:	2300      	movs	r3, #0
 8002546:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002548:	f107 031c 	add.w	r3, r7, #28
 800254c:	4619      	mov	r1, r3
 800254e:	4821      	ldr	r0, [pc, #132]	; (80025d4 <MX_GPIO_Init+0x1a4>)
 8002550:	f002 fbd2 	bl	8004cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW3_Pin SW2_Pin SW1_Pin */
  GPIO_InitStruct.Pin = SW3_Pin|SW2_Pin|SW1_Pin;
 8002554:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002558:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800255a:	2300      	movs	r3, #0
 800255c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255e:	2300      	movs	r3, #0
 8002560:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002562:	f107 031c 	add.w	r3, r7, #28
 8002566:	4619      	mov	r1, r3
 8002568:	481b      	ldr	r0, [pc, #108]	; (80025d8 <MX_GPIO_Init+0x1a8>)
 800256a:	f002 fbc5 	bl	8004cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SHOOT_Pin BUZZER_Pin BLUE_Pin RED_Pin */
  GPIO_InitStruct.Pin = SHOOT_Pin|BUZZER_Pin|BLUE_Pin|RED_Pin;
 800256e:	f248 0338 	movw	r3, #32824	; 0x8038
 8002572:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002574:	2301      	movs	r3, #1
 8002576:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002578:	2300      	movs	r3, #0
 800257a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257c:	2300      	movs	r3, #0
 800257e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002580:	f107 031c 	add.w	r3, r7, #28
 8002584:	4619      	mov	r1, r3
 8002586:	4814      	ldr	r0, [pc, #80]	; (80025d8 <MX_GPIO_Init+0x1a8>)
 8002588:	f002 fbb6 	bl	8004cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPIN_Pin ADD3_Pin ADD2_Pin ADD1_Pin
                           ADD0_Pin R2B_Pin R2A_Pin R1B_Pin
                           GREEN_Pin */
  GPIO_InitStruct.Pin = SPIN_Pin|ADD3_Pin|ADD2_Pin|ADD1_Pin
 800258c:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002590:	61fb      	str	r3, [r7, #28]
                          |ADD0_Pin|R2B_Pin|R2A_Pin|R1B_Pin
                          |GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002592:	2301      	movs	r3, #1
 8002594:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002596:	2300      	movs	r3, #0
 8002598:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259a:	2300      	movs	r3, #0
 800259c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800259e:	f107 031c 	add.w	r3, r7, #28
 80025a2:	4619      	mov	r1, r3
 80025a4:	480d      	ldr	r0, [pc, #52]	; (80025dc <MX_GPIO_Init+0x1ac>)
 80025a6:	f002 fba7 	bl	8004cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : R1A_Pin */
  GPIO_InitStruct.Pin = R1A_Pin;
 80025aa:	2340      	movs	r3, #64	; 0x40
 80025ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ae:	2301      	movs	r3, #1
 80025b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b2:	2300      	movs	r3, #0
 80025b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b6:	2300      	movs	r3, #0
 80025b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(R1A_GPIO_Port, &GPIO_InitStruct);
 80025ba:	f107 031c 	add.w	r3, r7, #28
 80025be:	4619      	mov	r1, r3
 80025c0:	4807      	ldr	r0, [pc, #28]	; (80025e0 <MX_GPIO_Init+0x1b0>)
 80025c2:	f002 fb99 	bl	8004cf8 <HAL_GPIO_Init>

}
 80025c6:	bf00      	nop
 80025c8:	3730      	adds	r7, #48	; 0x30
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40023800 	.word	0x40023800
 80025d4:	40021000 	.word	0x40021000
 80025d8:	40020400 	.word	0x40020400
 80025dc:	40020c00 	.word	0x40020c00
 80025e0:	40020800 	.word	0x40020800

080025e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025e8:	b672      	cpsid	i
}
 80025ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025ec:	e7fe      	b.n	80025ec <Error_Handler+0x8>
	...

080025f0 <motor>:
 */

#include "main.h"
#include "math.h"

void motor(int L1 , int L2 , int R2 , int R1){
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
 80025fc:	603b      	str	r3, [r7, #0]
	int c;
	if(look_dir == 'F') c = Heading;
 80025fe:	4ba7      	ldr	r3, [pc, #668]	; (800289c <motor+0x2ac>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	2b46      	cmp	r3, #70	; 0x46
 8002604:	d103      	bne.n	800260e <motor+0x1e>
 8002606:	4ba6      	ldr	r3, [pc, #664]	; (80028a0 <motor+0x2b0>)
 8002608:	f9b3 3000 	ldrsh.w	r3, [r3]
 800260c:	617b      	str	r3, [r7, #20]
	if(look_dir == 'B') c = Heading + 180;
 800260e:	4ba3      	ldr	r3, [pc, #652]	; (800289c <motor+0x2ac>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	2b42      	cmp	r3, #66	; 0x42
 8002614:	d104      	bne.n	8002620 <motor+0x30>
 8002616:	4ba2      	ldr	r3, [pc, #648]	; (80028a0 <motor+0x2b0>)
 8002618:	f9b3 3000 	ldrsh.w	r3, [r3]
 800261c:	33b4      	adds	r3, #180	; 0xb4
 800261e:	617b      	str	r3, [r7, #20]
	if(c > 180)  c -= 360;
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	2bb4      	cmp	r3, #180	; 0xb4
 8002624:	dd03      	ble.n	800262e <motor+0x3e>
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800262c:	617b      	str	r3, [r7, #20]
	if(c < -180) c += 360;
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 8002634:	da03      	bge.n	800263e <motor+0x4e>
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800263c:	617b      	str	r3, [r7, #20]

	if(c > 100)  c = 100;
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	2b64      	cmp	r3, #100	; 0x64
 8002642:	dd01      	ble.n	8002648 <motor+0x58>
 8002644:	2364      	movs	r3, #100	; 0x64
 8002646:	617b      	str	r3, [r7, #20]
	if(c < -100) c = -100;
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	f113 0f64 	cmn.w	r3, #100	; 0x64
 800264e:	da02      	bge.n	8002656 <motor+0x66>
 8002650:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8002654:	617b      	str	r3, [r7, #20]
 	R1 += c;
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	4413      	add	r3, r2
 800265c:	603b      	str	r3, [r7, #0]
 	R2 += c;
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	4413      	add	r3, r2
 8002664:	607b      	str	r3, [r7, #4]
 	L1 += c;
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	4413      	add	r3, r2
 800266c:	60fb      	str	r3, [r7, #12]
 	L2 += c;
 800266e:	68ba      	ldr	r2, [r7, #8]
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	4413      	add	r3, r2
 8002674:	60bb      	str	r3, [r7, #8]

 	R1=R1*255;
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	4613      	mov	r3, r2
 800267a:	021b      	lsls	r3, r3, #8
 800267c:	1a9b      	subs	r3, r3, r2
 800267e:	603b      	str	r3, [r7, #0]
 	R2=R2*255;
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	4613      	mov	r3, r2
 8002684:	021b      	lsls	r3, r3, #8
 8002686:	1a9b      	subs	r3, r3, r2
 8002688:	607b      	str	r3, [r7, #4]
 	L1=L1*255;
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	4613      	mov	r3, r2
 800268e:	021b      	lsls	r3, r3, #8
 8002690:	1a9b      	subs	r3, r3, r2
 8002692:	60fb      	str	r3, [r7, #12]
 	L2=L2*255;
 8002694:	68ba      	ldr	r2, [r7, #8]
 8002696:	4613      	mov	r3, r2
 8002698:	021b      	lsls	r3, r3, #8
 800269a:	1a9b      	subs	r3, r3, r2
 800269c:	60bb      	str	r3, [r7, #8]
 	if (R1 > 65535) R1 = 65535;
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026a4:	db02      	blt.n	80026ac <motor+0xbc>
 80026a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026aa:	603b      	str	r3, [r7, #0]
 	if (R2 > 65535) R2 = 65535;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026b2:	db02      	blt.n	80026ba <motor+0xca>
 80026b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026b8:	607b      	str	r3, [r7, #4]
 	if (L1 > 65535) L1 = 65535;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c0:	db02      	blt.n	80026c8 <motor+0xd8>
 80026c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026c6:	60fb      	str	r3, [r7, #12]
 	if (L2 > 65535) L2 = 65535;
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ce:	db02      	blt.n	80026d6 <motor+0xe6>
 80026d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026d4:	60bb      	str	r3, [r7, #8]
 	if (R1 < -65535) R1 = -65535;
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026dc:	dc01      	bgt.n	80026e2 <motor+0xf2>
 80026de:	4b71      	ldr	r3, [pc, #452]	; (80028a4 <motor+0x2b4>)
 80026e0:	603b      	str	r3, [r7, #0]
 	if (R2 < -65535) R2 = -65535;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026e8:	dc01      	bgt.n	80026ee <motor+0xfe>
 80026ea:	4b6e      	ldr	r3, [pc, #440]	; (80028a4 <motor+0x2b4>)
 80026ec:	607b      	str	r3, [r7, #4]
 	if (L1 < -65535) L1 = -65535;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026f4:	dc01      	bgt.n	80026fa <motor+0x10a>
 80026f6:	4b6b      	ldr	r3, [pc, #428]	; (80028a4 <motor+0x2b4>)
 80026f8:	60fb      	str	r3, [r7, #12]
 	if (L2 < -65535) L2 = -65535;
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002700:	dc01      	bgt.n	8002706 <motor+0x116>
 8002702:	4b68      	ldr	r3, [pc, #416]	; (80028a4 <motor+0x2b4>)
 8002704:	60bb      	str	r3, [r7, #8]

 	////////////////L1:
 	if(L1 > 0){
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2b00      	cmp	r3, #0
 800270a:	dd0f      	ble.n	800272c <motor+0x13c>
 		HAL_GPIO_WritePin(L1A_GPIO_Port, L1A_Pin, 0);
 800270c:	2200      	movs	r2, #0
 800270e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002712:	4865      	ldr	r0, [pc, #404]	; (80028a8 <motor+0x2b8>)
 8002714:	f002 fca4 	bl	8005060 <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin(L1B_GPIO_Port, L1B_Pin, 1);
 8002718:	2201      	movs	r2, #1
 800271a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800271e:	4862      	ldr	r0, [pc, #392]	; (80028a8 <motor+0x2b8>)
 8002720:	f002 fc9e 	bl	8005060 <HAL_GPIO_WritePin>
 		TIM1->CCR1=L1;
 8002724:	4a61      	ldr	r2, [pc, #388]	; (80028ac <motor+0x2bc>)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6353      	str	r3, [r2, #52]	; 0x34
 800272a:	e01f      	b.n	800276c <motor+0x17c>
 	}
 	else if(L1 < 0){
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2b00      	cmp	r3, #0
 8002730:	da10      	bge.n	8002754 <motor+0x164>
 		HAL_GPIO_WritePin(L1A_GPIO_Port, L1A_Pin, 1);
 8002732:	2201      	movs	r2, #1
 8002734:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002738:	485b      	ldr	r0, [pc, #364]	; (80028a8 <motor+0x2b8>)
 800273a:	f002 fc91 	bl	8005060 <HAL_GPIO_WritePin>
 	 	HAL_GPIO_WritePin(L1B_GPIO_Port, L1B_Pin, 0);
 800273e:	2200      	movs	r2, #0
 8002740:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002744:	4858      	ldr	r0, [pc, #352]	; (80028a8 <motor+0x2b8>)
 8002746:	f002 fc8b 	bl	8005060 <HAL_GPIO_WritePin>
 		TIM1->CCR1=-L1;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	425a      	negs	r2, r3
 800274e:	4b57      	ldr	r3, [pc, #348]	; (80028ac <motor+0x2bc>)
 8002750:	635a      	str	r2, [r3, #52]	; 0x34
 8002752:	e00b      	b.n	800276c <motor+0x17c>
 	}
 	else{
 		HAL_GPIO_WritePin(L1A_GPIO_Port, L1A_Pin, 1);
 8002754:	2201      	movs	r2, #1
 8002756:	f44f 7180 	mov.w	r1, #256	; 0x100
 800275a:	4853      	ldr	r0, [pc, #332]	; (80028a8 <motor+0x2b8>)
 800275c:	f002 fc80 	bl	8005060 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L1B_GPIO_Port, L1B_Pin, 1);
 8002760:	2201      	movs	r2, #1
 8002762:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002766:	4850      	ldr	r0, [pc, #320]	; (80028a8 <motor+0x2b8>)
 8002768:	f002 fc7a 	bl	8005060 <HAL_GPIO_WritePin>
 	}
 	////////////////L2:
 	if(L2 > 0){
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	2b00      	cmp	r3, #0
 8002770:	dd0e      	ble.n	8002790 <motor+0x1a0>
 		HAL_GPIO_WritePin(L2A_GPIO_Port, L2A_Pin, 0);
 8002772:	2200      	movs	r2, #0
 8002774:	2180      	movs	r1, #128	; 0x80
 8002776:	484c      	ldr	r0, [pc, #304]	; (80028a8 <motor+0x2b8>)
 8002778:	f002 fc72 	bl	8005060 <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin(L2B_GPIO_Port, L2B_Pin, 1);
 800277c:	2201      	movs	r2, #1
 800277e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002782:	4849      	ldr	r0, [pc, #292]	; (80028a8 <motor+0x2b8>)
 8002784:	f002 fc6c 	bl	8005060 <HAL_GPIO_WritePin>
 		TIM1->CCR2=L2;
 8002788:	4a48      	ldr	r2, [pc, #288]	; (80028ac <motor+0x2bc>)
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	6393      	str	r3, [r2, #56]	; 0x38
 800278e:	e01d      	b.n	80027cc <motor+0x1dc>
 	}
 	else if(L2 < 0){
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	2b00      	cmp	r3, #0
 8002794:	da0f      	bge.n	80027b6 <motor+0x1c6>
 		HAL_GPIO_WritePin(L2A_GPIO_Port, L2A_Pin, 1);
 8002796:	2201      	movs	r2, #1
 8002798:	2180      	movs	r1, #128	; 0x80
 800279a:	4843      	ldr	r0, [pc, #268]	; (80028a8 <motor+0x2b8>)
 800279c:	f002 fc60 	bl	8005060 <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin(L2B_GPIO_Port, L2B_Pin, 0);
 80027a0:	2200      	movs	r2, #0
 80027a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027a6:	4840      	ldr	r0, [pc, #256]	; (80028a8 <motor+0x2b8>)
 80027a8:	f002 fc5a 	bl	8005060 <HAL_GPIO_WritePin>
 		TIM1->CCR2=-L2;
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	425a      	negs	r2, r3
 80027b0:	4b3e      	ldr	r3, [pc, #248]	; (80028ac <motor+0x2bc>)
 80027b2:	639a      	str	r2, [r3, #56]	; 0x38
 80027b4:	e00a      	b.n	80027cc <motor+0x1dc>
 	}
 	else{
 		HAL_GPIO_WritePin(L2A_GPIO_Port, L2A_Pin, 1);
 80027b6:	2201      	movs	r2, #1
 80027b8:	2180      	movs	r1, #128	; 0x80
 80027ba:	483b      	ldr	r0, [pc, #236]	; (80028a8 <motor+0x2b8>)
 80027bc:	f002 fc50 	bl	8005060 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L2B_GPIO_Port, L2B_Pin, 1);
 80027c0:	2201      	movs	r2, #1
 80027c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027c6:	4838      	ldr	r0, [pc, #224]	; (80028a8 <motor+0x2b8>)
 80027c8:	f002 fc4a 	bl	8005060 <HAL_GPIO_WritePin>
 	}
 	////////////////R2:
 	if(R2 > 0){
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	dd0f      	ble.n	80027f2 <motor+0x202>
 		HAL_GPIO_WritePin(R2A_GPIO_Port, R2A_Pin, 1);
 80027d2:	2201      	movs	r2, #1
 80027d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027d8:	4835      	ldr	r0, [pc, #212]	; (80028b0 <motor+0x2c0>)
 80027da:	f002 fc41 	bl	8005060 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R2B_GPIO_Port, R2B_Pin, 0);
 80027de:	2200      	movs	r2, #0
 80027e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027e4:	4832      	ldr	r0, [pc, #200]	; (80028b0 <motor+0x2c0>)
 80027e6:	f002 fc3b 	bl	8005060 <HAL_GPIO_WritePin>
 		TIM1->CCR3=R2;
 80027ea:	4a30      	ldr	r2, [pc, #192]	; (80028ac <motor+0x2bc>)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	63d3      	str	r3, [r2, #60]	; 0x3c
 80027f0:	e01f      	b.n	8002832 <motor+0x242>
 	}
 	else if(R2 < 0){
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	da10      	bge.n	800281a <motor+0x22a>
 		HAL_GPIO_WritePin(R2A_GPIO_Port, R2A_Pin, 0);
 80027f8:	2200      	movs	r2, #0
 80027fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027fe:	482c      	ldr	r0, [pc, #176]	; (80028b0 <motor+0x2c0>)
 8002800:	f002 fc2e 	bl	8005060 <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin(R2B_GPIO_Port, R2B_Pin, 1);
 8002804:	2201      	movs	r2, #1
 8002806:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800280a:	4829      	ldr	r0, [pc, #164]	; (80028b0 <motor+0x2c0>)
 800280c:	f002 fc28 	bl	8005060 <HAL_GPIO_WritePin>
 		TIM1->CCR3=-R2;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	425a      	negs	r2, r3
 8002814:	4b25      	ldr	r3, [pc, #148]	; (80028ac <motor+0x2bc>)
 8002816:	63da      	str	r2, [r3, #60]	; 0x3c
 8002818:	e00b      	b.n	8002832 <motor+0x242>
 	}
 	else{
 		HAL_GPIO_WritePin(R2A_GPIO_Port, R2A_Pin, 1);
 800281a:	2201      	movs	r2, #1
 800281c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002820:	4823      	ldr	r0, [pc, #140]	; (80028b0 <motor+0x2c0>)
 8002822:	f002 fc1d 	bl	8005060 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R2B_GPIO_Port, R2B_Pin, 1);
 8002826:	2201      	movs	r2, #1
 8002828:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800282c:	4820      	ldr	r0, [pc, #128]	; (80028b0 <motor+0x2c0>)
 800282e:	f002 fc17 	bl	8005060 <HAL_GPIO_WritePin>
 	}
 	////////////////R1:
 	if(R1 > 0){
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	dd0e      	ble.n	8002856 <motor+0x266>
 		HAL_GPIO_WritePin(R1A_GPIO_Port, R1A_Pin, 1);
 8002838:	2201      	movs	r2, #1
 800283a:	2140      	movs	r1, #64	; 0x40
 800283c:	481d      	ldr	r0, [pc, #116]	; (80028b4 <motor+0x2c4>)
 800283e:	f002 fc0f 	bl	8005060 <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin(R1B_GPIO_Port, R1B_Pin, 0);
 8002842:	2200      	movs	r2, #0
 8002844:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002848:	4819      	ldr	r0, [pc, #100]	; (80028b0 <motor+0x2c0>)
 800284a:	f002 fc09 	bl	8005060 <HAL_GPIO_WritePin>
 		TIM1->CCR4=R1;
 800284e:	4a17      	ldr	r2, [pc, #92]	; (80028ac <motor+0x2bc>)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	6413      	str	r3, [r2, #64]	; 0x40
 	}
 	else{
 		HAL_GPIO_WritePin(R1A_GPIO_Port, R1A_Pin, 1);
		HAL_GPIO_WritePin(R1B_GPIO_Port, R1B_Pin, 1);
 	}
 }
 8002854:	e01d      	b.n	8002892 <motor+0x2a2>
 	else if(R1 < 0){
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	da0f      	bge.n	800287c <motor+0x28c>
 		HAL_GPIO_WritePin(R1A_GPIO_Port, R1A_Pin, 0);
 800285c:	2200      	movs	r2, #0
 800285e:	2140      	movs	r1, #64	; 0x40
 8002860:	4814      	ldr	r0, [pc, #80]	; (80028b4 <motor+0x2c4>)
 8002862:	f002 fbfd 	bl	8005060 <HAL_GPIO_WritePin>
 	 	HAL_GPIO_WritePin(R1B_GPIO_Port, R1B_Pin, 1);
 8002866:	2201      	movs	r2, #1
 8002868:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800286c:	4810      	ldr	r0, [pc, #64]	; (80028b0 <motor+0x2c0>)
 800286e:	f002 fbf7 	bl	8005060 <HAL_GPIO_WritePin>
 		TIM1->CCR4=-R1;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	425a      	negs	r2, r3
 8002876:	4b0d      	ldr	r3, [pc, #52]	; (80028ac <motor+0x2bc>)
 8002878:	641a      	str	r2, [r3, #64]	; 0x40
 }
 800287a:	e00a      	b.n	8002892 <motor+0x2a2>
 		HAL_GPIO_WritePin(R1A_GPIO_Port, R1A_Pin, 1);
 800287c:	2201      	movs	r2, #1
 800287e:	2140      	movs	r1, #64	; 0x40
 8002880:	480c      	ldr	r0, [pc, #48]	; (80028b4 <motor+0x2c4>)
 8002882:	f002 fbed 	bl	8005060 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R1B_GPIO_Port, R1B_Pin, 1);
 8002886:	2201      	movs	r2, #1
 8002888:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800288c:	4808      	ldr	r0, [pc, #32]	; (80028b0 <motor+0x2c0>)
 800288e:	f002 fbe7 	bl	8005060 <HAL_GPIO_WritePin>
 }
 8002892:	bf00      	nop
 8002894:	3718      	adds	r7, #24
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	2000002d 	.word	0x2000002d
 80028a0:	2000029c 	.word	0x2000029c
 80028a4:	ffff0001 	.word	0xffff0001
 80028a8:	40021000 	.word	0x40021000
 80028ac:	40010000 	.word	0x40010000
 80028b0:	40020c00 	.word	0x40020c00
 80028b4:	40020800 	.word	0x40020800

080028b8 <motor_without_correction>:
void motor_without_correction(int L1 , int L2 , int R2 , int R1){
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
 80028c4:	603b      	str	r3, [r7, #0]
 	R1=R1*255;
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	4613      	mov	r3, r2
 80028ca:	021b      	lsls	r3, r3, #8
 80028cc:	1a9b      	subs	r3, r3, r2
 80028ce:	603b      	str	r3, [r7, #0]
 	R2=R2*255;
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	4613      	mov	r3, r2
 80028d4:	021b      	lsls	r3, r3, #8
 80028d6:	1a9b      	subs	r3, r3, r2
 80028d8:	607b      	str	r3, [r7, #4]
 	L1=L1*255;
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	4613      	mov	r3, r2
 80028de:	021b      	lsls	r3, r3, #8
 80028e0:	1a9b      	subs	r3, r3, r2
 80028e2:	60fb      	str	r3, [r7, #12]
 	L2=L2*255;
 80028e4:	68ba      	ldr	r2, [r7, #8]
 80028e6:	4613      	mov	r3, r2
 80028e8:	021b      	lsls	r3, r3, #8
 80028ea:	1a9b      	subs	r3, r3, r2
 80028ec:	60bb      	str	r3, [r7, #8]
 	if (R1 > 65535) R1 = 65535;
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f4:	db02      	blt.n	80028fc <motor_without_correction+0x44>
 80028f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028fa:	603b      	str	r3, [r7, #0]
 	if (R2 > 65535) R2 = 65535;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002902:	db02      	blt.n	800290a <motor_without_correction+0x52>
 8002904:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002908:	607b      	str	r3, [r7, #4]
 	if (L1 > 65535) L1 = 65535;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002910:	db02      	blt.n	8002918 <motor_without_correction+0x60>
 8002912:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002916:	60fb      	str	r3, [r7, #12]
 	if (L2 > 65535) L2 = 65535;
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800291e:	db02      	blt.n	8002926 <motor_without_correction+0x6e>
 8002920:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002924:	60bb      	str	r3, [r7, #8]
 	if (R1 < -65535) R1 = -65535;
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800292c:	dc01      	bgt.n	8002932 <motor_without_correction+0x7a>
 800292e:	4b50      	ldr	r3, [pc, #320]	; (8002a70 <motor_without_correction+0x1b8>)
 8002930:	603b      	str	r3, [r7, #0]
 	if (R2 < -65535) R2 = -65535;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002938:	dc01      	bgt.n	800293e <motor_without_correction+0x86>
 800293a:	4b4d      	ldr	r3, [pc, #308]	; (8002a70 <motor_without_correction+0x1b8>)
 800293c:	607b      	str	r3, [r7, #4]
 	if (L1 < -65535) L1 = -65535;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002944:	dc01      	bgt.n	800294a <motor_without_correction+0x92>
 8002946:	4b4a      	ldr	r3, [pc, #296]	; (8002a70 <motor_without_correction+0x1b8>)
 8002948:	60fb      	str	r3, [r7, #12]
 	if (L2 < -65535) L2 = -65535;
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002950:	dc01      	bgt.n	8002956 <motor_without_correction+0x9e>
 8002952:	4b47      	ldr	r3, [pc, #284]	; (8002a70 <motor_without_correction+0x1b8>)
 8002954:	60bb      	str	r3, [r7, #8]

 	////////////////L1:
 	if(L1 > 0){
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2b00      	cmp	r3, #0
 800295a:	dd0f      	ble.n	800297c <motor_without_correction+0xc4>
 		HAL_GPIO_WritePin(L1A_GPIO_Port, L1A_Pin, 0);
 800295c:	2200      	movs	r2, #0
 800295e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002962:	4844      	ldr	r0, [pc, #272]	; (8002a74 <motor_without_correction+0x1bc>)
 8002964:	f002 fb7c 	bl	8005060 <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin(L1B_GPIO_Port, L1B_Pin, 1);
 8002968:	2201      	movs	r2, #1
 800296a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800296e:	4841      	ldr	r0, [pc, #260]	; (8002a74 <motor_without_correction+0x1bc>)
 8002970:	f002 fb76 	bl	8005060 <HAL_GPIO_WritePin>
 		TIM1->CCR1=L1;
 8002974:	4a40      	ldr	r2, [pc, #256]	; (8002a78 <motor_without_correction+0x1c0>)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6353      	str	r3, [r2, #52]	; 0x34
 800297a:	e00f      	b.n	800299c <motor_without_correction+0xe4>
 	}
 	else{
 		HAL_GPIO_WritePin(L1A_GPIO_Port, L1A_Pin, 1);
 800297c:	2201      	movs	r2, #1
 800297e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002982:	483c      	ldr	r0, [pc, #240]	; (8002a74 <motor_without_correction+0x1bc>)
 8002984:	f002 fb6c 	bl	8005060 <HAL_GPIO_WritePin>
 	 	HAL_GPIO_WritePin(L1B_GPIO_Port, L1B_Pin, 0);
 8002988:	2200      	movs	r2, #0
 800298a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800298e:	4839      	ldr	r0, [pc, #228]	; (8002a74 <motor_without_correction+0x1bc>)
 8002990:	f002 fb66 	bl	8005060 <HAL_GPIO_WritePin>
 		TIM1->CCR1=-L1;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	425a      	negs	r2, r3
 8002998:	4b37      	ldr	r3, [pc, #220]	; (8002a78 <motor_without_correction+0x1c0>)
 800299a:	635a      	str	r2, [r3, #52]	; 0x34
 	}
 	////////////////L2:
 	if(L2 > 0){
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	dd0e      	ble.n	80029c0 <motor_without_correction+0x108>
 		HAL_GPIO_WritePin(L2A_GPIO_Port, L2A_Pin, 0);
 80029a2:	2200      	movs	r2, #0
 80029a4:	2180      	movs	r1, #128	; 0x80
 80029a6:	4833      	ldr	r0, [pc, #204]	; (8002a74 <motor_without_correction+0x1bc>)
 80029a8:	f002 fb5a 	bl	8005060 <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin(L2B_GPIO_Port, L2B_Pin, 1);
 80029ac:	2201      	movs	r2, #1
 80029ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029b2:	4830      	ldr	r0, [pc, #192]	; (8002a74 <motor_without_correction+0x1bc>)
 80029b4:	f002 fb54 	bl	8005060 <HAL_GPIO_WritePin>
 		TIM1->CCR2=L2;
 80029b8:	4a2f      	ldr	r2, [pc, #188]	; (8002a78 <motor_without_correction+0x1c0>)
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	6393      	str	r3, [r2, #56]	; 0x38
 80029be:	e00e      	b.n	80029de <motor_without_correction+0x126>
 	}
 	else{
 		HAL_GPIO_WritePin(L2A_GPIO_Port, L2A_Pin, 1);
 80029c0:	2201      	movs	r2, #1
 80029c2:	2180      	movs	r1, #128	; 0x80
 80029c4:	482b      	ldr	r0, [pc, #172]	; (8002a74 <motor_without_correction+0x1bc>)
 80029c6:	f002 fb4b 	bl	8005060 <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin(L2B_GPIO_Port, L2B_Pin, 0);
 80029ca:	2200      	movs	r2, #0
 80029cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029d0:	4828      	ldr	r0, [pc, #160]	; (8002a74 <motor_without_correction+0x1bc>)
 80029d2:	f002 fb45 	bl	8005060 <HAL_GPIO_WritePin>
 		TIM1->CCR2=-L2;
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	425a      	negs	r2, r3
 80029da:	4b27      	ldr	r3, [pc, #156]	; (8002a78 <motor_without_correction+0x1c0>)
 80029dc:	639a      	str	r2, [r3, #56]	; 0x38
 	}
 	////////////////R2:
 	if(R2 > 0){
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	dd0f      	ble.n	8002a04 <motor_without_correction+0x14c>
 		HAL_GPIO_WritePin(R2A_GPIO_Port, R2A_Pin, 1);
 80029e4:	2201      	movs	r2, #1
 80029e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029ea:	4824      	ldr	r0, [pc, #144]	; (8002a7c <motor_without_correction+0x1c4>)
 80029ec:	f002 fb38 	bl	8005060 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R2B_GPIO_Port, R2B_Pin, 0);
 80029f0:	2200      	movs	r2, #0
 80029f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029f6:	4821      	ldr	r0, [pc, #132]	; (8002a7c <motor_without_correction+0x1c4>)
 80029f8:	f002 fb32 	bl	8005060 <HAL_GPIO_WritePin>
 		TIM1->CCR3=R2;
 80029fc:	4a1e      	ldr	r2, [pc, #120]	; (8002a78 <motor_without_correction+0x1c0>)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002a02:	e00f      	b.n	8002a24 <motor_without_correction+0x16c>
 	}
 	else{
 		HAL_GPIO_WritePin(R2A_GPIO_Port, R2A_Pin, 0);
 8002a04:	2200      	movs	r2, #0
 8002a06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a0a:	481c      	ldr	r0, [pc, #112]	; (8002a7c <motor_without_correction+0x1c4>)
 8002a0c:	f002 fb28 	bl	8005060 <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin(R2B_GPIO_Port, R2B_Pin, 1);
 8002a10:	2201      	movs	r2, #1
 8002a12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a16:	4819      	ldr	r0, [pc, #100]	; (8002a7c <motor_without_correction+0x1c4>)
 8002a18:	f002 fb22 	bl	8005060 <HAL_GPIO_WritePin>
 		TIM1->CCR3=-R2;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	425a      	negs	r2, r3
 8002a20:	4b15      	ldr	r3, [pc, #84]	; (8002a78 <motor_without_correction+0x1c0>)
 8002a22:	63da      	str	r2, [r3, #60]	; 0x3c
 	}
 	////////////////R1:
 	if(R1 > 0){
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	dd0e      	ble.n	8002a48 <motor_without_correction+0x190>
 		HAL_GPIO_WritePin(R1A_GPIO_Port, R1A_Pin, 1);
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	2140      	movs	r1, #64	; 0x40
 8002a2e:	4814      	ldr	r0, [pc, #80]	; (8002a80 <motor_without_correction+0x1c8>)
 8002a30:	f002 fb16 	bl	8005060 <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin(R1B_GPIO_Port, R1B_Pin, 0);
 8002a34:	2200      	movs	r2, #0
 8002a36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a3a:	4810      	ldr	r0, [pc, #64]	; (8002a7c <motor_without_correction+0x1c4>)
 8002a3c:	f002 fb10 	bl	8005060 <HAL_GPIO_WritePin>
 		TIM1->CCR4=R1;
 8002a40:	4a0d      	ldr	r2, [pc, #52]	; (8002a78 <motor_without_correction+0x1c0>)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	6413      	str	r3, [r2, #64]	; 0x40
 	else{
 		HAL_GPIO_WritePin(R1A_GPIO_Port, R1A_Pin, 0);
 	 	HAL_GPIO_WritePin(R1B_GPIO_Port, R1B_Pin, 1);
 		TIM1->CCR4=-R1;
 	}
 }
 8002a46:	e00e      	b.n	8002a66 <motor_without_correction+0x1ae>
 		HAL_GPIO_WritePin(R1A_GPIO_Port, R1A_Pin, 0);
 8002a48:	2200      	movs	r2, #0
 8002a4a:	2140      	movs	r1, #64	; 0x40
 8002a4c:	480c      	ldr	r0, [pc, #48]	; (8002a80 <motor_without_correction+0x1c8>)
 8002a4e:	f002 fb07 	bl	8005060 <HAL_GPIO_WritePin>
 	 	HAL_GPIO_WritePin(R1B_GPIO_Port, R1B_Pin, 1);
 8002a52:	2201      	movs	r2, #1
 8002a54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a58:	4808      	ldr	r0, [pc, #32]	; (8002a7c <motor_without_correction+0x1c4>)
 8002a5a:	f002 fb01 	bl	8005060 <HAL_GPIO_WritePin>
 		TIM1->CCR4=-R1;
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	425a      	negs	r2, r3
 8002a62:	4b05      	ldr	r3, [pc, #20]	; (8002a78 <motor_without_correction+0x1c0>)
 8002a64:	641a      	str	r2, [r3, #64]	; 0x40
 }
 8002a66:	bf00      	nop
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	ffff0001 	.word	0xffff0001
 8002a74:	40021000 	.word	0x40021000
 8002a78:	40010000 	.word	0x40010000
 8002a7c:	40020c00 	.word	0x40020c00
 8002a80:	40020800 	.word	0x40020800

08002a84 <fast_stop>:
void fast_stop(){
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(L1A_GPIO_Port, L1A_Pin, 1);
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a8e:	4816      	ldr	r0, [pc, #88]	; (8002ae8 <fast_stop+0x64>)
 8002a90:	f002 fae6 	bl	8005060 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(L1B_GPIO_Port, L1B_Pin, 1);
 8002a94:	2201      	movs	r2, #1
 8002a96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a9a:	4813      	ldr	r0, [pc, #76]	; (8002ae8 <fast_stop+0x64>)
 8002a9c:	f002 fae0 	bl	8005060 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(L2A_GPIO_Port, L2A_Pin, 1);
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	2180      	movs	r1, #128	; 0x80
 8002aa4:	4810      	ldr	r0, [pc, #64]	; (8002ae8 <fast_stop+0x64>)
 8002aa6:	f002 fadb 	bl	8005060 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(L2B_GPIO_Port, L2B_Pin, 1);
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ab0:	480d      	ldr	r0, [pc, #52]	; (8002ae8 <fast_stop+0x64>)
 8002ab2:	f002 fad5 	bl	8005060 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(R1A_GPIO_Port, R1A_Pin, 1);
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	2140      	movs	r1, #64	; 0x40
 8002aba:	480c      	ldr	r0, [pc, #48]	; (8002aec <fast_stop+0x68>)
 8002abc:	f002 fad0 	bl	8005060 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(R1B_GPIO_Port, R1B_Pin, 1);
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ac6:	480a      	ldr	r0, [pc, #40]	; (8002af0 <fast_stop+0x6c>)
 8002ac8:	f002 faca 	bl	8005060 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(R2A_GPIO_Port, R2A_Pin, 1);
 8002acc:	2201      	movs	r2, #1
 8002ace:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ad2:	4807      	ldr	r0, [pc, #28]	; (8002af0 <fast_stop+0x6c>)
 8002ad4:	f002 fac4 	bl	8005060 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(R2B_GPIO_Port, R2B_Pin, 1);
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ade:	4804      	ldr	r0, [pc, #16]	; (8002af0 <fast_stop+0x6c>)
 8002ae0:	f002 fabe 	bl	8005060 <HAL_GPIO_WritePin>
}
 8002ae4:	bf00      	nop
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	40020800 	.word	0x40020800
 8002af0:	40020c00 	.word	0x40020c00
 8002af4:	00000000 	.word	0x00000000

08002af8 <move>:
void move(int a){
 8002af8:	b5b0      	push	{r4, r5, r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
	if(a>360)     a-=360;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8002b06:	dd03      	ble.n	8002b10 <move+0x18>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002b0e:	607b      	str	r3, [r7, #4]
	if(a<0)       a+=360;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	da03      	bge.n	8002b1e <move+0x26>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b1c:	607b      	str	r3, [r7, #4]
	int x = v * cos(a * M_PI / 180);
 8002b1e:	4b3c      	ldr	r3, [pc, #240]	; (8002c10 <move+0x118>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7fd fca2 	bl	800046c <__aeabi_i2d>
 8002b28:	4604      	mov	r4, r0
 8002b2a:	460d      	mov	r5, r1
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f7fd fc9d 	bl	800046c <__aeabi_i2d>
 8002b32:	a335      	add	r3, pc, #212	; (adr r3, 8002c08 <move+0x110>)
 8002b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b38:	f7fd fd02 	bl	8000540 <__aeabi_dmul>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	4610      	mov	r0, r2
 8002b42:	4619      	mov	r1, r3
 8002b44:	f04f 0200 	mov.w	r2, #0
 8002b48:	4b32      	ldr	r3, [pc, #200]	; (8002c14 <move+0x11c>)
 8002b4a:	f7fd fe23 	bl	8000794 <__aeabi_ddiv>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	460b      	mov	r3, r1
 8002b52:	ec43 2b17 	vmov	d7, r2, r3
 8002b56:	eeb0 0a47 	vmov.f32	s0, s14
 8002b5a:	eef0 0a67 	vmov.f32	s1, s15
 8002b5e:	f006 fff3 	bl	8009b48 <cos>
 8002b62:	ec53 2b10 	vmov	r2, r3, d0
 8002b66:	4620      	mov	r0, r4
 8002b68:	4629      	mov	r1, r5
 8002b6a:	f7fd fce9 	bl	8000540 <__aeabi_dmul>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	460b      	mov	r3, r1
 8002b72:	4610      	mov	r0, r2
 8002b74:	4619      	mov	r1, r3
 8002b76:	f7fd ff93 	bl	8000aa0 <__aeabi_d2iz>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	60fb      	str	r3, [r7, #12]
	int y = v * sin(a * M_PI / 180);
 8002b7e:	4b24      	ldr	r3, [pc, #144]	; (8002c10 <move+0x118>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7fd fc72 	bl	800046c <__aeabi_i2d>
 8002b88:	4604      	mov	r4, r0
 8002b8a:	460d      	mov	r5, r1
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f7fd fc6d 	bl	800046c <__aeabi_i2d>
 8002b92:	a31d      	add	r3, pc, #116	; (adr r3, 8002c08 <move+0x110>)
 8002b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b98:	f7fd fcd2 	bl	8000540 <__aeabi_dmul>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	4610      	mov	r0, r2
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	f04f 0200 	mov.w	r2, #0
 8002ba8:	4b1a      	ldr	r3, [pc, #104]	; (8002c14 <move+0x11c>)
 8002baa:	f7fd fdf3 	bl	8000794 <__aeabi_ddiv>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	ec43 2b17 	vmov	d7, r2, r3
 8002bb6:	eeb0 0a47 	vmov.f32	s0, s14
 8002bba:	eef0 0a67 	vmov.f32	s1, s15
 8002bbe:	f007 f817 	bl	8009bf0 <sin>
 8002bc2:	ec53 2b10 	vmov	r2, r3, d0
 8002bc6:	4620      	mov	r0, r4
 8002bc8:	4629      	mov	r1, r5
 8002bca:	f7fd fcb9 	bl	8000540 <__aeabi_dmul>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	4610      	mov	r0, r2
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	f7fd ff63 	bl	8000aa0 <__aeabi_d2iz>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	60bb      	str	r3, [r7, #8]
	motor((x + y) , (x - y) , (- x - y), (y - x));
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	18d0      	adds	r0, r2, r3
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	1ad1      	subs	r1, r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	425a      	negs	r2, r3
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	1ad4      	subs	r4, r2, r3
 8002bf2:	68ba      	ldr	r2, [r7, #8]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	4622      	mov	r2, r4
 8002bfa:	f7ff fcf9 	bl	80025f0 <motor>

}
 8002bfe:	bf00      	nop
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bdb0      	pop	{r4, r5, r7, pc}
 8002c06:	bf00      	nop
 8002c08:	54442d18 	.word	0x54442d18
 8002c0c:	400921fb 	.word	0x400921fb
 8002c10:	200002f4 	.word	0x200002f4
 8002c14:	40668000 	.word	0x40668000

08002c18 <moveForSec>:
	if(a<0)       a+=360;
	int x = v * cos(a * M_PI / 180);
	int y = v * sin(a * M_PI / 180);
	motor_without_correction((x + y) , (x - y) , (- x - y), (y - x));
}
void moveForSec(int angle, int sec){
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
	for(int i=0; i<sec; i++){
 8002c22:	2300      	movs	r3, #0
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	e007      	b.n	8002c38 <moveForSec+0x20>
		read_sensors();
 8002c28:	f7fe fa46 	bl	80010b8 <read_sensors>
		move(angle);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f7ff ff63 	bl	8002af8 <move>
	for(int i=0; i<sec; i++){
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	3301      	adds	r3, #1
 8002c36:	60fb      	str	r3, [r7, #12]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	dbf3      	blt.n	8002c28 <moveForSec+0x10>
	}
}
 8002c40:	bf00      	nop
 8002c42:	bf00      	nop
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
	...

08002c4c <spin>:
void spin(int spin){
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
	if      (spin==1)  		 HAL_GPIO_WritePin(SPIN_GPIO_Port, SPIN_Pin, 1);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d106      	bne.n	8002c68 <spin+0x1c>
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c60:	4808      	ldr	r0, [pc, #32]	; (8002c84 <spin+0x38>)
 8002c62:	f002 f9fd 	bl	8005060 <HAL_GPIO_WritePin>
	else if (spin==0)		 HAL_GPIO_WritePin(SPIN_GPIO_Port, SPIN_Pin, 0);
}
 8002c66:	e008      	b.n	8002c7a <spin+0x2e>
	else if (spin==0)		 HAL_GPIO_WritePin(SPIN_GPIO_Port, SPIN_Pin, 0);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d105      	bne.n	8002c7a <spin+0x2e>
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c74:	4803      	ldr	r0, [pc, #12]	; (8002c84 <spin+0x38>)
 8002c76:	f002 f9f3 	bl	8005060 <HAL_GPIO_WritePin>
}
 8002c7a:	bf00      	nop
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40020c00 	.word	0x40020c00

08002c88 <shoot>:
void shoot(){
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
	if( already_shooted == 1){
 8002c8c:	4b14      	ldr	r3, [pc, #80]	; (8002ce0 <shoot+0x58>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d10b      	bne.n	8002cac <shoot+0x24>
		shoot_cnt++;
 8002c94:	4b13      	ldr	r3, [pc, #76]	; (8002ce4 <shoot+0x5c>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	4a12      	ldr	r2, [pc, #72]	; (8002ce4 <shoot+0x5c>)
 8002c9c:	6013      	str	r3, [r2, #0]
		if(shoot_cnt > 50)  already_shooted = 0;
 8002c9e:	4b11      	ldr	r3, [pc, #68]	; (8002ce4 <shoot+0x5c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2b32      	cmp	r3, #50	; 0x32
 8002ca4:	dd02      	ble.n	8002cac <shoot+0x24>
 8002ca6:	4b0e      	ldr	r3, [pc, #56]	; (8002ce0 <shoot+0x58>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(SHOOT_GPIO_Port, SHOOT_Pin, 1);
 8002cac:	2201      	movs	r2, #1
 8002cae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cb2:	480d      	ldr	r0, [pc, #52]	; (8002ce8 <shoot+0x60>)
 8002cb4:	f002 f9d4 	bl	8005060 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002cb8:	2064      	movs	r0, #100	; 0x64
 8002cba:	f000 ff0b 	bl	8003ad4 <HAL_Delay>
	HAL_GPIO_WritePin(SHOOT_GPIO_Port, SHOOT_Pin, 0);
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cc4:	4808      	ldr	r0, [pc, #32]	; (8002ce8 <shoot+0x60>)
 8002cc6:	f002 f9cb 	bl	8005060 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8002cca:	20c8      	movs	r0, #200	; 0xc8
 8002ccc:	f000 ff02 	bl	8003ad4 <HAL_Delay>
	already_shooted = 1;
 8002cd0:	4b03      	ldr	r3, [pc, #12]	; (8002ce0 <shoot+0x58>)
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	601a      	str	r2, [r3, #0]
	shoot_cnt = 0;
 8002cd6:	4b03      	ldr	r3, [pc, #12]	; (8002ce4 <shoot+0x5c>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]

}
 8002cdc:	bf00      	nop
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	200003a4 	.word	0x200003a4
 8002ce4:	200003a8 	.word	0x200003a8
 8002ce8:	40020400 	.word	0x40020400

08002cec <rotate_and_shoot>:
void rotate_and_shoot(){
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
	spin(1);
 8002cf0:	2001      	movs	r0, #1
 8002cf2:	f7ff ffab 	bl	8002c4c <spin>
	v = 60;
 8002cf6:	4b47      	ldr	r3, [pc, #284]	; (8002e14 <rotate_and_shoot+0x128>)
 8002cf8:	223c      	movs	r2, #60	; 0x3c
 8002cfa:	601a      	str	r2, [r3, #0]
	if(mf_cnt < 5){
 8002cfc:	4b46      	ldr	r3, [pc, #280]	; (8002e18 <rotate_and_shoot+0x12c>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2b04      	cmp	r3, #4
 8002d02:	dc0b      	bgt.n	8002d1c <rotate_and_shoot+0x30>
		arrived_to_goal = 0;
 8002d04:	4b45      	ldr	r3, [pc, #276]	; (8002e1c <rotate_and_shoot+0x130>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]
		move(0);
 8002d0a:	2000      	movs	r0, #0
 8002d0c:	f7ff fef4 	bl	8002af8 <move>
		mf_cnt++;
 8002d10:	4b41      	ldr	r3, [pc, #260]	; (8002e18 <rotate_and_shoot+0x12c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	3301      	adds	r3, #1
 8002d16:	4a40      	ldr	r2, [pc, #256]	; (8002e18 <rotate_and_shoot+0x12c>)
 8002d18:	6013      	str	r3, [r2, #0]
				}

			}
		}
	}
}
 8002d1a:	e078      	b.n	8002e0e <rotate_and_shoot+0x122>
		look_dir = 'B';
 8002d1c:	4b40      	ldr	r3, [pc, #256]	; (8002e20 <rotate_and_shoot+0x134>)
 8002d1e:	2242      	movs	r2, #66	; 0x42
 8002d20:	701a      	strb	r2, [r3, #0]
		if(Heading < 135 && Heading > -135 && arrived_to_goal == 0){
 8002d22:	4b40      	ldr	r3, [pc, #256]	; (8002e24 <rotate_and_shoot+0x138>)
 8002d24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d28:	2b86      	cmp	r3, #134	; 0x86
 8002d2a:	dc1f      	bgt.n	8002d6c <rotate_and_shoot+0x80>
 8002d2c:	4b3d      	ldr	r3, [pc, #244]	; (8002e24 <rotate_and_shoot+0x138>)
 8002d2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d32:	f113 0f86 	cmn.w	r3, #134	; 0x86
 8002d36:	db19      	blt.n	8002d6c <rotate_and_shoot+0x80>
 8002d38:	4b38      	ldr	r3, [pc, #224]	; (8002e1c <rotate_and_shoot+0x130>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d115      	bne.n	8002d6c <rotate_and_shoot+0x80>
			if(Heading < 0) motor_without_correction(80, 80, 80, 0);
 8002d40:	4b38      	ldr	r3, [pc, #224]	; (8002e24 <rotate_and_shoot+0x138>)
 8002d42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	da06      	bge.n	8002d58 <rotate_and_shoot+0x6c>
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	2250      	movs	r2, #80	; 0x50
 8002d4e:	2150      	movs	r1, #80	; 0x50
 8002d50:	2050      	movs	r0, #80	; 0x50
 8002d52:	f7ff fdb1 	bl	80028b8 <motor_without_correction>
 8002d56:	e05a      	b.n	8002e0e <rotate_and_shoot+0x122>
			else 			motor_without_correction(0, -80, -80, -80);
 8002d58:	f06f 034f 	mvn.w	r3, #79	; 0x4f
 8002d5c:	f06f 024f 	mvn.w	r2, #79	; 0x4f
 8002d60:	f06f 014f 	mvn.w	r1, #79	; 0x4f
 8002d64:	2000      	movs	r0, #0
 8002d66:	f7ff fda7 	bl	80028b8 <motor_without_correction>
			if(Heading < 0) motor_without_correction(80, 80, 80, 0);
 8002d6a:	e050      	b.n	8002e0e <rotate_and_shoot+0x122>
			if (arrived_to_goal == 0) {
 8002d6c:	4b2b      	ldr	r3, [pc, #172]	; (8002e1c <rotate_and_shoot+0x130>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d11f      	bne.n	8002db4 <rotate_and_shoot+0xc8>
				move(goal_angle);
 8002d74:	4b2c      	ldr	r3, [pc, #176]	; (8002e28 <rotate_and_shoot+0x13c>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff febd 	bl	8002af8 <move>
				if(kaf[15] > LDR_Sens || kaf[14] > LDR_Sens || kaf[13] > LDR_Sens || kaf[9] > LDR_Sens || kaf[6] > LDR_Sens) arrived_to_goal = 1;
 8002d7e:	4b2b      	ldr	r3, [pc, #172]	; (8002e2c <rotate_and_shoot+0x140>)
 8002d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d82:	2bc8      	cmp	r3, #200	; 0xc8
 8002d84:	dc0f      	bgt.n	8002da6 <rotate_and_shoot+0xba>
 8002d86:	4b29      	ldr	r3, [pc, #164]	; (8002e2c <rotate_and_shoot+0x140>)
 8002d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8a:	2bc8      	cmp	r3, #200	; 0xc8
 8002d8c:	dc0b      	bgt.n	8002da6 <rotate_and_shoot+0xba>
 8002d8e:	4b27      	ldr	r3, [pc, #156]	; (8002e2c <rotate_and_shoot+0x140>)
 8002d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d92:	2bc8      	cmp	r3, #200	; 0xc8
 8002d94:	dc07      	bgt.n	8002da6 <rotate_and_shoot+0xba>
 8002d96:	4b25      	ldr	r3, [pc, #148]	; (8002e2c <rotate_and_shoot+0x140>)
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9a:	2bc8      	cmp	r3, #200	; 0xc8
 8002d9c:	dc03      	bgt.n	8002da6 <rotate_and_shoot+0xba>
 8002d9e:	4b23      	ldr	r3, [pc, #140]	; (8002e2c <rotate_and_shoot+0x140>)
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	2bc8      	cmp	r3, #200	; 0xc8
 8002da4:	dd02      	ble.n	8002dac <rotate_and_shoot+0xc0>
 8002da6:	4b1d      	ldr	r3, [pc, #116]	; (8002e1c <rotate_and_shoot+0x130>)
 8002da8:	2201      	movs	r2, #1
 8002daa:	601a      	str	r2, [r3, #0]
				stop_before_shoot_cnt = 0;
 8002dac:	4b20      	ldr	r3, [pc, #128]	; (8002e30 <rotate_and_shoot+0x144>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	601a      	str	r2, [r3, #0]
}
 8002db2:	e02c      	b.n	8002e0e <rotate_and_shoot+0x122>
				if(goal_angle < 5 || goal_angle > 355) {
 8002db4:	4b1c      	ldr	r3, [pc, #112]	; (8002e28 <rotate_and_shoot+0x13c>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2b04      	cmp	r3, #4
 8002dba:	dd04      	ble.n	8002dc6 <rotate_and_shoot+0xda>
 8002dbc:	4b1a      	ldr	r3, [pc, #104]	; (8002e28 <rotate_and_shoot+0x13c>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f5b3 7fb2 	cmp.w	r3, #356	; 0x164
 8002dc4:	db04      	blt.n	8002dd0 <rotate_and_shoot+0xe4>
					fast_stop();
 8002dc6:	f7ff fe5d 	bl	8002a84 <fast_stop>
					shoot();
 8002dca:	f7ff ff5d 	bl	8002c88 <shoot>
 8002dce:	e01e      	b.n	8002e0e <rotate_and_shoot+0x122>
				else if(goal_angle < 180) {
 8002dd0:	4b15      	ldr	r3, [pc, #84]	; (8002e28 <rotate_and_shoot+0x13c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2bb3      	cmp	r3, #179	; 0xb3
 8002dd6:	dc09      	bgt.n	8002dec <rotate_and_shoot+0x100>
					motor_without_correction(80, 80, 80, 0);
 8002dd8:	2300      	movs	r3, #0
 8002dda:	2250      	movs	r2, #80	; 0x50
 8002ddc:	2150      	movs	r1, #80	; 0x50
 8002dde:	2050      	movs	r0, #80	; 0x50
 8002de0:	f7ff fd6a 	bl	80028b8 <motor_without_correction>
					stop_before_shoot_cnt = 0;
 8002de4:	4b12      	ldr	r3, [pc, #72]	; (8002e30 <rotate_and_shoot+0x144>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]
}
 8002dea:	e010      	b.n	8002e0e <rotate_and_shoot+0x122>
				else if(goal_angle >=180) {
 8002dec:	4b0e      	ldr	r3, [pc, #56]	; (8002e28 <rotate_and_shoot+0x13c>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2bb3      	cmp	r3, #179	; 0xb3
 8002df2:	dd0c      	ble.n	8002e0e <rotate_and_shoot+0x122>
					motor_without_correction(0, -80, -80, -80);
 8002df4:	f06f 034f 	mvn.w	r3, #79	; 0x4f
 8002df8:	f06f 024f 	mvn.w	r2, #79	; 0x4f
 8002dfc:	f06f 014f 	mvn.w	r1, #79	; 0x4f
 8002e00:	2000      	movs	r0, #0
 8002e02:	f7ff fd59 	bl	80028b8 <motor_without_correction>
					stop_before_shoot_cnt = 0;
 8002e06:	4b0a      	ldr	r3, [pc, #40]	; (8002e30 <rotate_and_shoot+0x144>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]
}
 8002e0c:	e7ff      	b.n	8002e0e <rotate_and_shoot+0x122>
 8002e0e:	bf00      	nop
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	200002f4 	.word	0x200002f4
 8002e18:	200003ac 	.word	0x200003ac
 8002e1c:	200003b4 	.word	0x200003b4
 8002e20:	2000002d 	.word	0x2000002d
 8002e24:	2000029c 	.word	0x2000029c
 8002e28:	20000314 	.word	0x20000314
 8002e2c:	20000320 	.word	0x20000320
 8002e30:	200003b0 	.word	0x200003b0

08002e34 <shift>:
void shift(){
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
	if(ball_in_kicker){
 8002e38:	4b45      	ldr	r3, [pc, #276]	; (8002f50 <shift+0x11c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d002      	beq.n	8002e46 <shift+0x12>
//		shoot();
		rotate_and_shoot();
 8002e40:	f7ff ff54 	bl	8002cec <rotate_and_shoot>
		fast_stop();
//		come_back();
		look_dir = 'F';
	}

}
 8002e44:	e081      	b.n	8002f4a <shift+0x116>
	else if (is_ball){
 8002e46:	4b43      	ldr	r3, [pc, #268]	; (8002f54 <shift+0x120>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d072      	beq.n	8002f34 <shift+0x100>
		arrived_to_goal = 0;
 8002e4e:	4b42      	ldr	r3, [pc, #264]	; (8002f58 <shift+0x124>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]
		mf_cnt = 0;
 8002e54:	4b41      	ldr	r3, [pc, #260]	; (8002f5c <shift+0x128>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	601a      	str	r2, [r3, #0]
		look_dir = 'F';
 8002e5a:	4b41      	ldr	r3, [pc, #260]	; (8002f60 <shift+0x12c>)
 8002e5c:	2246      	movs	r2, #70	; 0x46
 8002e5e:	701a      	strb	r2, [r3, #0]
		if(ball_dist > 58){ //far
 8002e60:	4b40      	ldr	r3, [pc, #256]	; (8002f64 <shift+0x130>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2b3a      	cmp	r3, #58	; 0x3a
 8002e66:	dd0b      	ble.n	8002e80 <shift+0x4c>
			v = 100;
 8002e68:	4b3f      	ldr	r3, [pc, #252]	; (8002f68 <shift+0x134>)
 8002e6a:	2264      	movs	r2, #100	; 0x64
 8002e6c:	601a      	str	r2, [r3, #0]
			move(ball_angle);
 8002e6e:	4b3f      	ldr	r3, [pc, #252]	; (8002f6c <shift+0x138>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff fe40 	bl	8002af8 <move>
			spin(0);
 8002e78:	2000      	movs	r0, #0
 8002e7a:	f7ff fee7 	bl	8002c4c <spin>
}
 8002e7e:	e064      	b.n	8002f4a <shift+0x116>
			spin(1);
 8002e80:	2001      	movs	r0, #1
 8002e82:	f7ff fee3 	bl	8002c4c <spin>
			v = 145;
 8002e86:	4b38      	ldr	r3, [pc, #224]	; (8002f68 <shift+0x134>)
 8002e88:	2291      	movs	r2, #145	; 0x91
 8002e8a:	601a      	str	r2, [r3, #0]
			if 		(ball_angle<10 || ball_angle > 350)   move(ball_angle);
 8002e8c:	4b37      	ldr	r3, [pc, #220]	; (8002f6c <shift+0x138>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2b09      	cmp	r3, #9
 8002e92:	dd04      	ble.n	8002e9e <shift+0x6a>
 8002e94:	4b35      	ldr	r3, [pc, #212]	; (8002f6c <shift+0x138>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8002e9c:	dd05      	ble.n	8002eaa <shift+0x76>
 8002e9e:	4b33      	ldr	r3, [pc, #204]	; (8002f6c <shift+0x138>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff fe28 	bl	8002af8 <move>
}
 8002ea8:	e04f      	b.n	8002f4a <shift+0x116>
			else if (ball_angle<30)       				  move(ball_angle+20);
 8002eaa:	4b30      	ldr	r3, [pc, #192]	; (8002f6c <shift+0x138>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2b1d      	cmp	r3, #29
 8002eb0:	dc06      	bgt.n	8002ec0 <shift+0x8c>
 8002eb2:	4b2e      	ldr	r3, [pc, #184]	; (8002f6c <shift+0x138>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	3314      	adds	r3, #20
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff fe1d 	bl	8002af8 <move>
}
 8002ebe:	e044      	b.n	8002f4a <shift+0x116>
			else if (ball_angle<90)       				  move(ball_angle+50);
 8002ec0:	4b2a      	ldr	r3, [pc, #168]	; (8002f6c <shift+0x138>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2b59      	cmp	r3, #89	; 0x59
 8002ec6:	dc06      	bgt.n	8002ed6 <shift+0xa2>
 8002ec8:	4b28      	ldr	r3, [pc, #160]	; (8002f6c <shift+0x138>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	3332      	adds	r3, #50	; 0x32
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff fe12 	bl	8002af8 <move>
}
 8002ed4:	e039      	b.n	8002f4a <shift+0x116>
			else if (ball_angle<180)       				  move(ball_angle+80);
 8002ed6:	4b25      	ldr	r3, [pc, #148]	; (8002f6c <shift+0x138>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2bb3      	cmp	r3, #179	; 0xb3
 8002edc:	dc06      	bgt.n	8002eec <shift+0xb8>
 8002ede:	4b23      	ldr	r3, [pc, #140]	; (8002f6c <shift+0x138>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	3350      	adds	r3, #80	; 0x50
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff fe07 	bl	8002af8 <move>
}
 8002eea:	e02e      	b.n	8002f4a <shift+0x116>
			else if (ball_angle<270)       				  move(ball_angle-80);
 8002eec:	4b1f      	ldr	r3, [pc, #124]	; (8002f6c <shift+0x138>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8002ef4:	da06      	bge.n	8002f04 <shift+0xd0>
 8002ef6:	4b1d      	ldr	r3, [pc, #116]	; (8002f6c <shift+0x138>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	3b50      	subs	r3, #80	; 0x50
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff fdfb 	bl	8002af8 <move>
}
 8002f02:	e022      	b.n	8002f4a <shift+0x116>
			else if (ball_angle<330)       				  move(ball_angle-25);
 8002f04:	4b19      	ldr	r3, [pc, #100]	; (8002f6c <shift+0x138>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 8002f0c:	da06      	bge.n	8002f1c <shift+0xe8>
 8002f0e:	4b17      	ldr	r3, [pc, #92]	; (8002f6c <shift+0x138>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	3b19      	subs	r3, #25
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff fdef 	bl	8002af8 <move>
}
 8002f1a:	e016      	b.n	8002f4a <shift+0x116>
			else if (ball_angle<=360)       			  move(ball_angle-20);
 8002f1c:	4b13      	ldr	r3, [pc, #76]	; (8002f6c <shift+0x138>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8002f24:	dc11      	bgt.n	8002f4a <shift+0x116>
 8002f26:	4b11      	ldr	r3, [pc, #68]	; (8002f6c <shift+0x138>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	3b14      	subs	r3, #20
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff fde3 	bl	8002af8 <move>
}
 8002f32:	e00a      	b.n	8002f4a <shift+0x116>
		mf_cnt = 0;
 8002f34:	4b09      	ldr	r3, [pc, #36]	; (8002f5c <shift+0x128>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	601a      	str	r2, [r3, #0]
		spin(0);
 8002f3a:	2000      	movs	r0, #0
 8002f3c:	f7ff fe86 	bl	8002c4c <spin>
		fast_stop();
 8002f40:	f7ff fda0 	bl	8002a84 <fast_stop>
		look_dir = 'F';
 8002f44:	4b06      	ldr	r3, [pc, #24]	; (8002f60 <shift+0x12c>)
 8002f46:	2246      	movs	r2, #70	; 0x46
 8002f48:	701a      	strb	r2, [r3, #0]
}
 8002f4a:	bf00      	nop
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	200003b8 	.word	0x200003b8
 8002f54:	20000310 	.word	0x20000310
 8002f58:	200003b4 	.word	0x200003b4
 8002f5c:	200003ac 	.word	0x200003ac
 8002f60:	2000002d 	.word	0x2000002d
 8002f64:	2000030c 	.word	0x2000030c
 8002f68:	200002f4 	.word	0x200002f4
 8002f6c:	20000308 	.word	0x20000308

08002f70 <stop>:
void stop(){
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
	motor(0,0,0,0);
 8002f74:	2300      	movs	r3, #0
 8002f76:	2200      	movs	r2, #0
 8002f78:	2100      	movs	r1, #0
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	f7ff fb38 	bl	80025f0 <motor>
}
 8002f80:	bf00      	nop
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8002f8a:	f000 fa29 	bl	80033e0 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002f8e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002f92:	2201      	movs	r2, #1
 8002f94:	2178      	movs	r1, #120	; 0x78
 8002f96:	485b      	ldr	r0, [pc, #364]	; (8003104 <SSD1306_Init+0x180>)
 8002f98:	f002 fb6c 	bl	8005674 <HAL_I2C_IsDeviceReady>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	e0a9      	b.n	80030fa <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8002fa6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002faa:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002fac:	e002      	b.n	8002fb4 <SSD1306_Init+0x30>
		p--;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1f9      	bne.n	8002fae <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002fba:	22ae      	movs	r2, #174	; 0xae
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	2078      	movs	r0, #120	; 0x78
 8002fc0:	f000 fa8a 	bl	80034d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	2078      	movs	r0, #120	; 0x78
 8002fca:	f000 fa85 	bl	80034d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002fce:	2210      	movs	r2, #16
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	2078      	movs	r0, #120	; 0x78
 8002fd4:	f000 fa80 	bl	80034d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002fd8:	22b0      	movs	r2, #176	; 0xb0
 8002fda:	2100      	movs	r1, #0
 8002fdc:	2078      	movs	r0, #120	; 0x78
 8002fde:	f000 fa7b 	bl	80034d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002fe2:	22c8      	movs	r2, #200	; 0xc8
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	2078      	movs	r0, #120	; 0x78
 8002fe8:	f000 fa76 	bl	80034d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002fec:	2200      	movs	r2, #0
 8002fee:	2100      	movs	r1, #0
 8002ff0:	2078      	movs	r0, #120	; 0x78
 8002ff2:	f000 fa71 	bl	80034d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002ff6:	2210      	movs	r2, #16
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	2078      	movs	r0, #120	; 0x78
 8002ffc:	f000 fa6c 	bl	80034d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8003000:	2240      	movs	r2, #64	; 0x40
 8003002:	2100      	movs	r1, #0
 8003004:	2078      	movs	r0, #120	; 0x78
 8003006:	f000 fa67 	bl	80034d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800300a:	2281      	movs	r2, #129	; 0x81
 800300c:	2100      	movs	r1, #0
 800300e:	2078      	movs	r0, #120	; 0x78
 8003010:	f000 fa62 	bl	80034d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8003014:	22ff      	movs	r2, #255	; 0xff
 8003016:	2100      	movs	r1, #0
 8003018:	2078      	movs	r0, #120	; 0x78
 800301a:	f000 fa5d 	bl	80034d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800301e:	22a1      	movs	r2, #161	; 0xa1
 8003020:	2100      	movs	r1, #0
 8003022:	2078      	movs	r0, #120	; 0x78
 8003024:	f000 fa58 	bl	80034d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8003028:	22a6      	movs	r2, #166	; 0xa6
 800302a:	2100      	movs	r1, #0
 800302c:	2078      	movs	r0, #120	; 0x78
 800302e:	f000 fa53 	bl	80034d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8003032:	22a8      	movs	r2, #168	; 0xa8
 8003034:	2100      	movs	r1, #0
 8003036:	2078      	movs	r0, #120	; 0x78
 8003038:	f000 fa4e 	bl	80034d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800303c:	223f      	movs	r2, #63	; 0x3f
 800303e:	2100      	movs	r1, #0
 8003040:	2078      	movs	r0, #120	; 0x78
 8003042:	f000 fa49 	bl	80034d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003046:	22a4      	movs	r2, #164	; 0xa4
 8003048:	2100      	movs	r1, #0
 800304a:	2078      	movs	r0, #120	; 0x78
 800304c:	f000 fa44 	bl	80034d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8003050:	22d3      	movs	r2, #211	; 0xd3
 8003052:	2100      	movs	r1, #0
 8003054:	2078      	movs	r0, #120	; 0x78
 8003056:	f000 fa3f 	bl	80034d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800305a:	2200      	movs	r2, #0
 800305c:	2100      	movs	r1, #0
 800305e:	2078      	movs	r0, #120	; 0x78
 8003060:	f000 fa3a 	bl	80034d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8003064:	22d5      	movs	r2, #213	; 0xd5
 8003066:	2100      	movs	r1, #0
 8003068:	2078      	movs	r0, #120	; 0x78
 800306a:	f000 fa35 	bl	80034d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800306e:	22f0      	movs	r2, #240	; 0xf0
 8003070:	2100      	movs	r1, #0
 8003072:	2078      	movs	r0, #120	; 0x78
 8003074:	f000 fa30 	bl	80034d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8003078:	22d9      	movs	r2, #217	; 0xd9
 800307a:	2100      	movs	r1, #0
 800307c:	2078      	movs	r0, #120	; 0x78
 800307e:	f000 fa2b 	bl	80034d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8003082:	2222      	movs	r2, #34	; 0x22
 8003084:	2100      	movs	r1, #0
 8003086:	2078      	movs	r0, #120	; 0x78
 8003088:	f000 fa26 	bl	80034d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800308c:	22da      	movs	r2, #218	; 0xda
 800308e:	2100      	movs	r1, #0
 8003090:	2078      	movs	r0, #120	; 0x78
 8003092:	f000 fa21 	bl	80034d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8003096:	2212      	movs	r2, #18
 8003098:	2100      	movs	r1, #0
 800309a:	2078      	movs	r0, #120	; 0x78
 800309c:	f000 fa1c 	bl	80034d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80030a0:	22db      	movs	r2, #219	; 0xdb
 80030a2:	2100      	movs	r1, #0
 80030a4:	2078      	movs	r0, #120	; 0x78
 80030a6:	f000 fa17 	bl	80034d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80030aa:	2220      	movs	r2, #32
 80030ac:	2100      	movs	r1, #0
 80030ae:	2078      	movs	r0, #120	; 0x78
 80030b0:	f000 fa12 	bl	80034d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80030b4:	228d      	movs	r2, #141	; 0x8d
 80030b6:	2100      	movs	r1, #0
 80030b8:	2078      	movs	r0, #120	; 0x78
 80030ba:	f000 fa0d 	bl	80034d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80030be:	2214      	movs	r2, #20
 80030c0:	2100      	movs	r1, #0
 80030c2:	2078      	movs	r0, #120	; 0x78
 80030c4:	f000 fa08 	bl	80034d8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80030c8:	22af      	movs	r2, #175	; 0xaf
 80030ca:	2100      	movs	r1, #0
 80030cc:	2078      	movs	r0, #120	; 0x78
 80030ce:	f000 fa03 	bl	80034d8 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80030d2:	222e      	movs	r2, #46	; 0x2e
 80030d4:	2100      	movs	r1, #0
 80030d6:	2078      	movs	r0, #120	; 0x78
 80030d8:	f000 f9fe 	bl	80034d8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80030dc:	2000      	movs	r0, #0
 80030de:	f000 f843 	bl	8003168 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80030e2:	f000 f813 	bl	800310c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80030e6:	4b08      	ldr	r3, [pc, #32]	; (8003108 <SSD1306_Init+0x184>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80030ec:	4b06      	ldr	r3, [pc, #24]	; (8003108 <SSD1306_Init+0x184>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80030f2:	4b05      	ldr	r3, [pc, #20]	; (8003108 <SSD1306_Init+0x184>)
 80030f4:	2201      	movs	r2, #1
 80030f6:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80030f8:	2301      	movs	r3, #1
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20000158 	.word	0x20000158
 8003108:	200007bc 	.word	0x200007bc

0800310c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8003112:	2300      	movs	r3, #0
 8003114:	71fb      	strb	r3, [r7, #7]
 8003116:	e01d      	b.n	8003154 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8003118:	79fb      	ldrb	r3, [r7, #7]
 800311a:	3b50      	subs	r3, #80	; 0x50
 800311c:	b2db      	uxtb	r3, r3
 800311e:	461a      	mov	r2, r3
 8003120:	2100      	movs	r1, #0
 8003122:	2078      	movs	r0, #120	; 0x78
 8003124:	f000 f9d8 	bl	80034d8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8003128:	2200      	movs	r2, #0
 800312a:	2100      	movs	r1, #0
 800312c:	2078      	movs	r0, #120	; 0x78
 800312e:	f000 f9d3 	bl	80034d8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8003132:	2210      	movs	r2, #16
 8003134:	2100      	movs	r1, #0
 8003136:	2078      	movs	r0, #120	; 0x78
 8003138:	f000 f9ce 	bl	80034d8 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800313c:	79fb      	ldrb	r3, [r7, #7]
 800313e:	01db      	lsls	r3, r3, #7
 8003140:	4a08      	ldr	r2, [pc, #32]	; (8003164 <SSD1306_UpdateScreen+0x58>)
 8003142:	441a      	add	r2, r3
 8003144:	2380      	movs	r3, #128	; 0x80
 8003146:	2140      	movs	r1, #64	; 0x40
 8003148:	2078      	movs	r0, #120	; 0x78
 800314a:	f000 f95f 	bl	800340c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800314e:	79fb      	ldrb	r3, [r7, #7]
 8003150:	3301      	adds	r3, #1
 8003152:	71fb      	strb	r3, [r7, #7]
 8003154:	79fb      	ldrb	r3, [r7, #7]
 8003156:	2b07      	cmp	r3, #7
 8003158:	d9de      	bls.n	8003118 <SSD1306_UpdateScreen+0xc>
	}
}
 800315a:	bf00      	nop
 800315c:	bf00      	nop
 800315e:	3708      	adds	r7, #8
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	200003bc 	.word	0x200003bc

08003168 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	4603      	mov	r3, r0
 8003170:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8003172:	79fb      	ldrb	r3, [r7, #7]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d101      	bne.n	800317c <SSD1306_Fill+0x14>
 8003178:	2300      	movs	r3, #0
 800317a:	e000      	b.n	800317e <SSD1306_Fill+0x16>
 800317c:	23ff      	movs	r3, #255	; 0xff
 800317e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003182:	4619      	mov	r1, r3
 8003184:	4803      	ldr	r0, [pc, #12]	; (8003194 <SSD1306_Fill+0x2c>)
 8003186:	f006 fcd5 	bl	8009b34 <memset>
}
 800318a:	bf00      	nop
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	200003bc 	.word	0x200003bc

08003198 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	4603      	mov	r3, r0
 80031a0:	80fb      	strh	r3, [r7, #6]
 80031a2:	460b      	mov	r3, r1
 80031a4:	80bb      	strh	r3, [r7, #4]
 80031a6:	4613      	mov	r3, r2
 80031a8:	70fb      	strb	r3, [r7, #3]
	if (
 80031aa:	88fb      	ldrh	r3, [r7, #6]
 80031ac:	2b7f      	cmp	r3, #127	; 0x7f
 80031ae:	d848      	bhi.n	8003242 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80031b0:	88bb      	ldrh	r3, [r7, #4]
 80031b2:	2b3f      	cmp	r3, #63	; 0x3f
 80031b4:	d845      	bhi.n	8003242 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80031b6:	4b26      	ldr	r3, [pc, #152]	; (8003250 <SSD1306_DrawPixel+0xb8>)
 80031b8:	791b      	ldrb	r3, [r3, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d006      	beq.n	80031cc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80031be:	78fb      	ldrb	r3, [r7, #3]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	bf0c      	ite	eq
 80031c4:	2301      	moveq	r3, #1
 80031c6:	2300      	movne	r3, #0
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80031cc:	78fb      	ldrb	r3, [r7, #3]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d11a      	bne.n	8003208 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80031d2:	88fa      	ldrh	r2, [r7, #6]
 80031d4:	88bb      	ldrh	r3, [r7, #4]
 80031d6:	08db      	lsrs	r3, r3, #3
 80031d8:	b298      	uxth	r0, r3
 80031da:	4603      	mov	r3, r0
 80031dc:	01db      	lsls	r3, r3, #7
 80031de:	4413      	add	r3, r2
 80031e0:	4a1c      	ldr	r2, [pc, #112]	; (8003254 <SSD1306_DrawPixel+0xbc>)
 80031e2:	5cd3      	ldrb	r3, [r2, r3]
 80031e4:	b25a      	sxtb	r2, r3
 80031e6:	88bb      	ldrh	r3, [r7, #4]
 80031e8:	f003 0307 	and.w	r3, r3, #7
 80031ec:	2101      	movs	r1, #1
 80031ee:	fa01 f303 	lsl.w	r3, r1, r3
 80031f2:	b25b      	sxtb	r3, r3
 80031f4:	4313      	orrs	r3, r2
 80031f6:	b259      	sxtb	r1, r3
 80031f8:	88fa      	ldrh	r2, [r7, #6]
 80031fa:	4603      	mov	r3, r0
 80031fc:	01db      	lsls	r3, r3, #7
 80031fe:	4413      	add	r3, r2
 8003200:	b2c9      	uxtb	r1, r1
 8003202:	4a14      	ldr	r2, [pc, #80]	; (8003254 <SSD1306_DrawPixel+0xbc>)
 8003204:	54d1      	strb	r1, [r2, r3]
 8003206:	e01d      	b.n	8003244 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003208:	88fa      	ldrh	r2, [r7, #6]
 800320a:	88bb      	ldrh	r3, [r7, #4]
 800320c:	08db      	lsrs	r3, r3, #3
 800320e:	b298      	uxth	r0, r3
 8003210:	4603      	mov	r3, r0
 8003212:	01db      	lsls	r3, r3, #7
 8003214:	4413      	add	r3, r2
 8003216:	4a0f      	ldr	r2, [pc, #60]	; (8003254 <SSD1306_DrawPixel+0xbc>)
 8003218:	5cd3      	ldrb	r3, [r2, r3]
 800321a:	b25a      	sxtb	r2, r3
 800321c:	88bb      	ldrh	r3, [r7, #4]
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	2101      	movs	r1, #1
 8003224:	fa01 f303 	lsl.w	r3, r1, r3
 8003228:	b25b      	sxtb	r3, r3
 800322a:	43db      	mvns	r3, r3
 800322c:	b25b      	sxtb	r3, r3
 800322e:	4013      	ands	r3, r2
 8003230:	b259      	sxtb	r1, r3
 8003232:	88fa      	ldrh	r2, [r7, #6]
 8003234:	4603      	mov	r3, r0
 8003236:	01db      	lsls	r3, r3, #7
 8003238:	4413      	add	r3, r2
 800323a:	b2c9      	uxtb	r1, r1
 800323c:	4a05      	ldr	r2, [pc, #20]	; (8003254 <SSD1306_DrawPixel+0xbc>)
 800323e:	54d1      	strb	r1, [r2, r3]
 8003240:	e000      	b.n	8003244 <SSD1306_DrawPixel+0xac>
		return;
 8003242:	bf00      	nop
	}
}
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	200007bc 	.word	0x200007bc
 8003254:	200003bc 	.word	0x200003bc

08003258 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	4603      	mov	r3, r0
 8003260:	460a      	mov	r2, r1
 8003262:	80fb      	strh	r3, [r7, #6]
 8003264:	4613      	mov	r3, r2
 8003266:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8003268:	4a05      	ldr	r2, [pc, #20]	; (8003280 <SSD1306_GotoXY+0x28>)
 800326a:	88fb      	ldrh	r3, [r7, #6]
 800326c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800326e:	4a04      	ldr	r2, [pc, #16]	; (8003280 <SSD1306_GotoXY+0x28>)
 8003270:	88bb      	ldrh	r3, [r7, #4]
 8003272:	8053      	strh	r3, [r2, #2]
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr
 8003280:	200007bc 	.word	0x200007bc

08003284 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	4603      	mov	r3, r0
 800328c:	6039      	str	r1, [r7, #0]
 800328e:	71fb      	strb	r3, [r7, #7]
 8003290:	4613      	mov	r3, r2
 8003292:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003294:	4b3a      	ldr	r3, [pc, #232]	; (8003380 <SSD1306_Putc+0xfc>)
 8003296:	881b      	ldrh	r3, [r3, #0]
 8003298:	461a      	mov	r2, r3
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	4413      	add	r3, r2
	if (
 80032a0:	2b7f      	cmp	r3, #127	; 0x7f
 80032a2:	dc07      	bgt.n	80032b4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80032a4:	4b36      	ldr	r3, [pc, #216]	; (8003380 <SSD1306_Putc+0xfc>)
 80032a6:	885b      	ldrh	r3, [r3, #2]
 80032a8:	461a      	mov	r2, r3
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	785b      	ldrb	r3, [r3, #1]
 80032ae:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80032b0:	2b3f      	cmp	r3, #63	; 0x3f
 80032b2:	dd01      	ble.n	80032b8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80032b4:	2300      	movs	r3, #0
 80032b6:	e05e      	b.n	8003376 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80032b8:	2300      	movs	r3, #0
 80032ba:	617b      	str	r3, [r7, #20]
 80032bc:	e04b      	b.n	8003356 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	79fb      	ldrb	r3, [r7, #7]
 80032c4:	3b20      	subs	r3, #32
 80032c6:	6839      	ldr	r1, [r7, #0]
 80032c8:	7849      	ldrb	r1, [r1, #1]
 80032ca:	fb01 f303 	mul.w	r3, r1, r3
 80032ce:	4619      	mov	r1, r3
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	440b      	add	r3, r1
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	4413      	add	r3, r2
 80032d8:	881b      	ldrh	r3, [r3, #0]
 80032da:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80032dc:	2300      	movs	r3, #0
 80032de:	613b      	str	r3, [r7, #16]
 80032e0:	e030      	b.n	8003344 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d010      	beq.n	8003314 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80032f2:	4b23      	ldr	r3, [pc, #140]	; (8003380 <SSD1306_Putc+0xfc>)
 80032f4:	881a      	ldrh	r2, [r3, #0]
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	4413      	add	r3, r2
 80032fc:	b298      	uxth	r0, r3
 80032fe:	4b20      	ldr	r3, [pc, #128]	; (8003380 <SSD1306_Putc+0xfc>)
 8003300:	885a      	ldrh	r2, [r3, #2]
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	b29b      	uxth	r3, r3
 8003306:	4413      	add	r3, r2
 8003308:	b29b      	uxth	r3, r3
 800330a:	79ba      	ldrb	r2, [r7, #6]
 800330c:	4619      	mov	r1, r3
 800330e:	f7ff ff43 	bl	8003198 <SSD1306_DrawPixel>
 8003312:	e014      	b.n	800333e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8003314:	4b1a      	ldr	r3, [pc, #104]	; (8003380 <SSD1306_Putc+0xfc>)
 8003316:	881a      	ldrh	r2, [r3, #0]
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	b29b      	uxth	r3, r3
 800331c:	4413      	add	r3, r2
 800331e:	b298      	uxth	r0, r3
 8003320:	4b17      	ldr	r3, [pc, #92]	; (8003380 <SSD1306_Putc+0xfc>)
 8003322:	885a      	ldrh	r2, [r3, #2]
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	b29b      	uxth	r3, r3
 8003328:	4413      	add	r3, r2
 800332a:	b299      	uxth	r1, r3
 800332c:	79bb      	ldrb	r3, [r7, #6]
 800332e:	2b00      	cmp	r3, #0
 8003330:	bf0c      	ite	eq
 8003332:	2301      	moveq	r3, #1
 8003334:	2300      	movne	r3, #0
 8003336:	b2db      	uxtb	r3, r3
 8003338:	461a      	mov	r2, r3
 800333a:	f7ff ff2d 	bl	8003198 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	3301      	adds	r3, #1
 8003342:	613b      	str	r3, [r7, #16]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	461a      	mov	r2, r3
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	4293      	cmp	r3, r2
 800334e:	d3c8      	bcc.n	80032e2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	3301      	adds	r3, #1
 8003354:	617b      	str	r3, [r7, #20]
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	785b      	ldrb	r3, [r3, #1]
 800335a:	461a      	mov	r2, r3
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	4293      	cmp	r3, r2
 8003360:	d3ad      	bcc.n	80032be <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8003362:	4b07      	ldr	r3, [pc, #28]	; (8003380 <SSD1306_Putc+0xfc>)
 8003364:	881a      	ldrh	r2, [r3, #0]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	b29b      	uxth	r3, r3
 800336c:	4413      	add	r3, r2
 800336e:	b29a      	uxth	r2, r3
 8003370:	4b03      	ldr	r3, [pc, #12]	; (8003380 <SSD1306_Putc+0xfc>)
 8003372:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8003374:	79fb      	ldrb	r3, [r7, #7]
}
 8003376:	4618      	mov	r0, r3
 8003378:	3718      	adds	r7, #24
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	200007bc 	.word	0x200007bc

08003384 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	4613      	mov	r3, r2
 8003390:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8003392:	e012      	b.n	80033ba <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	79fa      	ldrb	r2, [r7, #7]
 800339a:	68b9      	ldr	r1, [r7, #8]
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff ff71 	bl	8003284 <SSD1306_Putc>
 80033a2:	4603      	mov	r3, r0
 80033a4:	461a      	mov	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d002      	beq.n	80033b4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	e008      	b.n	80033c6 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	3301      	adds	r3, #1
 80033b8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1e8      	bne.n	8003394 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	781b      	ldrb	r3, [r3, #0]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80033d2:	2000      	movs	r0, #0
 80033d4:	f7ff fec8 	bl	8003168 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80033d8:	f7ff fe98 	bl	800310c <SSD1306_UpdateScreen>
}
 80033dc:	bf00      	nop
 80033de:	bd80      	pop	{r7, pc}

080033e0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80033e6:	4b08      	ldr	r3, [pc, #32]	; (8003408 <ssd1306_I2C_Init+0x28>)
 80033e8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80033ea:	e002      	b.n	80033f2 <ssd1306_I2C_Init+0x12>
		p--;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	3b01      	subs	r3, #1
 80033f0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1f9      	bne.n	80033ec <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80033f8:	bf00      	nop
 80033fa:	bf00      	nop
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	0003d090 	.word	0x0003d090

0800340c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800340c:	b590      	push	{r4, r7, lr}
 800340e:	b0c7      	sub	sp, #284	; 0x11c
 8003410:	af02      	add	r7, sp, #8
 8003412:	4604      	mov	r4, r0
 8003414:	4608      	mov	r0, r1
 8003416:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800341a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800341e:	600a      	str	r2, [r1, #0]
 8003420:	4619      	mov	r1, r3
 8003422:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003426:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800342a:	4622      	mov	r2, r4
 800342c:	701a      	strb	r2, [r3, #0]
 800342e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003432:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8003436:	4602      	mov	r2, r0
 8003438:	701a      	strb	r2, [r3, #0]
 800343a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800343e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003442:	460a      	mov	r2, r1
 8003444:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8003446:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800344a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800344e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003452:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8003456:	7812      	ldrb	r2, [r2, #0]
 8003458:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800345a:	2300      	movs	r3, #0
 800345c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8003460:	e015      	b.n	800348e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8003462:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003466:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800346a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800346e:	6812      	ldr	r2, [r2, #0]
 8003470:	441a      	add	r2, r3
 8003472:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003476:	3301      	adds	r3, #1
 8003478:	7811      	ldrb	r1, [r2, #0]
 800347a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800347e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8003482:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8003484:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003488:	3301      	adds	r3, #1
 800348a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800348e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003492:	b29b      	uxth	r3, r3
 8003494:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003498:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800349c:	8812      	ldrh	r2, [r2, #0]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d8df      	bhi.n	8003462 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c2, address, dt, count+1, 10);
 80034a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80034a6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	b299      	uxth	r1, r3
 80034ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80034b2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80034b6:	881b      	ldrh	r3, [r3, #0]
 80034b8:	3301      	adds	r3, #1
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	f107 020c 	add.w	r2, r7, #12
 80034c0:	200a      	movs	r0, #10
 80034c2:	9000      	str	r0, [sp, #0]
 80034c4:	4803      	ldr	r0, [pc, #12]	; (80034d4 <ssd1306_I2C_WriteMulti+0xc8>)
 80034c6:	f001 ff29 	bl	800531c <HAL_I2C_Master_Transmit>
}
 80034ca:	bf00      	nop
 80034cc:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd90      	pop	{r4, r7, pc}
 80034d4:	20000158 	.word	0x20000158

080034d8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af02      	add	r7, sp, #8
 80034de:	4603      	mov	r3, r0
 80034e0:	71fb      	strb	r3, [r7, #7]
 80034e2:	460b      	mov	r3, r1
 80034e4:	71bb      	strb	r3, [r7, #6]
 80034e6:	4613      	mov	r3, r2
 80034e8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80034ea:	79bb      	ldrb	r3, [r7, #6]
 80034ec:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80034ee:	797b      	ldrb	r3, [r7, #5]
 80034f0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 80034f2:	79fb      	ldrb	r3, [r7, #7]
 80034f4:	b299      	uxth	r1, r3
 80034f6:	f107 020c 	add.w	r2, r7, #12
 80034fa:	230a      	movs	r3, #10
 80034fc:	9300      	str	r3, [sp, #0]
 80034fe:	2302      	movs	r3, #2
 8003500:	4803      	ldr	r0, [pc, #12]	; (8003510 <ssd1306_I2C_Write+0x38>)
 8003502:	f001 ff0b 	bl	800531c <HAL_I2C_Master_Transmit>
}
 8003506:	bf00      	nop
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	20000158 	.word	0x20000158

08003514 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800351a:	2300      	movs	r3, #0
 800351c:	607b      	str	r3, [r7, #4]
 800351e:	4b10      	ldr	r3, [pc, #64]	; (8003560 <HAL_MspInit+0x4c>)
 8003520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003522:	4a0f      	ldr	r2, [pc, #60]	; (8003560 <HAL_MspInit+0x4c>)
 8003524:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003528:	6453      	str	r3, [r2, #68]	; 0x44
 800352a:	4b0d      	ldr	r3, [pc, #52]	; (8003560 <HAL_MspInit+0x4c>)
 800352c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003532:	607b      	str	r3, [r7, #4]
 8003534:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003536:	2300      	movs	r3, #0
 8003538:	603b      	str	r3, [r7, #0]
 800353a:	4b09      	ldr	r3, [pc, #36]	; (8003560 <HAL_MspInit+0x4c>)
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	4a08      	ldr	r2, [pc, #32]	; (8003560 <HAL_MspInit+0x4c>)
 8003540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003544:	6413      	str	r3, [r2, #64]	; 0x40
 8003546:	4b06      	ldr	r3, [pc, #24]	; (8003560 <HAL_MspInit+0x4c>)
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354e:	603b      	str	r3, [r7, #0]
 8003550:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003552:	bf00      	nop
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	40023800 	.word	0x40023800

08003564 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b08a      	sub	sp, #40	; 0x28
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800356c:	f107 0314 	add.w	r3, r7, #20
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	605a      	str	r2, [r3, #4]
 8003576:	609a      	str	r2, [r3, #8]
 8003578:	60da      	str	r2, [r3, #12]
 800357a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a24      	ldr	r2, [pc, #144]	; (8003614 <HAL_ADC_MspInit+0xb0>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d141      	bne.n	800360a <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003586:	2300      	movs	r3, #0
 8003588:	613b      	str	r3, [r7, #16]
 800358a:	4b23      	ldr	r3, [pc, #140]	; (8003618 <HAL_ADC_MspInit+0xb4>)
 800358c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358e:	4a22      	ldr	r2, [pc, #136]	; (8003618 <HAL_ADC_MspInit+0xb4>)
 8003590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003594:	6453      	str	r3, [r2, #68]	; 0x44
 8003596:	4b20      	ldr	r3, [pc, #128]	; (8003618 <HAL_ADC_MspInit+0xb4>)
 8003598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359e:	613b      	str	r3, [r7, #16]
 80035a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035a2:	2300      	movs	r3, #0
 80035a4:	60fb      	str	r3, [r7, #12]
 80035a6:	4b1c      	ldr	r3, [pc, #112]	; (8003618 <HAL_ADC_MspInit+0xb4>)
 80035a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035aa:	4a1b      	ldr	r2, [pc, #108]	; (8003618 <HAL_ADC_MspInit+0xb4>)
 80035ac:	f043 0304 	orr.w	r3, r3, #4
 80035b0:	6313      	str	r3, [r2, #48]	; 0x30
 80035b2:	4b19      	ldr	r3, [pc, #100]	; (8003618 <HAL_ADC_MspInit+0xb4>)
 80035b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b6:	f003 0304 	and.w	r3, r3, #4
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035be:	2300      	movs	r3, #0
 80035c0:	60bb      	str	r3, [r7, #8]
 80035c2:	4b15      	ldr	r3, [pc, #84]	; (8003618 <HAL_ADC_MspInit+0xb4>)
 80035c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c6:	4a14      	ldr	r2, [pc, #80]	; (8003618 <HAL_ADC_MspInit+0xb4>)
 80035c8:	f043 0301 	orr.w	r3, r3, #1
 80035cc:	6313      	str	r3, [r2, #48]	; 0x30
 80035ce:	4b12      	ldr	r3, [pc, #72]	; (8003618 <HAL_ADC_MspInit+0xb4>)
 80035d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	60bb      	str	r3, [r7, #8]
 80035d8:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80035da:	231f      	movs	r3, #31
 80035dc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035de:	2303      	movs	r3, #3
 80035e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e2:	2300      	movs	r3, #0
 80035e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035e6:	f107 0314 	add.w	r3, r7, #20
 80035ea:	4619      	mov	r1, r3
 80035ec:	480b      	ldr	r0, [pc, #44]	; (800361c <HAL_ADC_MspInit+0xb8>)
 80035ee:	f001 fb83 	bl	8004cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80035f2:	23ff      	movs	r3, #255	; 0xff
 80035f4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035f6:	2303      	movs	r3, #3
 80035f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fa:	2300      	movs	r3, #0
 80035fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035fe:	f107 0314 	add.w	r3, r7, #20
 8003602:	4619      	mov	r1, r3
 8003604:	4806      	ldr	r0, [pc, #24]	; (8003620 <HAL_ADC_MspInit+0xbc>)
 8003606:	f001 fb77 	bl	8004cf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800360a:	bf00      	nop
 800360c:	3728      	adds	r7, #40	; 0x28
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	40012000 	.word	0x40012000
 8003618:	40023800 	.word	0x40023800
 800361c:	40020800 	.word	0x40020800
 8003620:	40020000 	.word	0x40020000

08003624 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b08c      	sub	sp, #48	; 0x30
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800362c:	f107 031c 	add.w	r3, r7, #28
 8003630:	2200      	movs	r2, #0
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	605a      	str	r2, [r3, #4]
 8003636:	609a      	str	r2, [r3, #8]
 8003638:	60da      	str	r2, [r3, #12]
 800363a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a36      	ldr	r2, [pc, #216]	; (800371c <HAL_I2C_MspInit+0xf8>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d134      	bne.n	80036b0 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003646:	2300      	movs	r3, #0
 8003648:	61bb      	str	r3, [r7, #24]
 800364a:	4b35      	ldr	r3, [pc, #212]	; (8003720 <HAL_I2C_MspInit+0xfc>)
 800364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364e:	4a34      	ldr	r2, [pc, #208]	; (8003720 <HAL_I2C_MspInit+0xfc>)
 8003650:	f043 0302 	orr.w	r3, r3, #2
 8003654:	6313      	str	r3, [r2, #48]	; 0x30
 8003656:	4b32      	ldr	r3, [pc, #200]	; (8003720 <HAL_I2C_MspInit+0xfc>)
 8003658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	61bb      	str	r3, [r7, #24]
 8003660:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003662:	23c0      	movs	r3, #192	; 0xc0
 8003664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003666:	2312      	movs	r3, #18
 8003668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366a:	2300      	movs	r3, #0
 800366c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800366e:	2303      	movs	r3, #3
 8003670:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003672:	2304      	movs	r3, #4
 8003674:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003676:	f107 031c 	add.w	r3, r7, #28
 800367a:	4619      	mov	r1, r3
 800367c:	4829      	ldr	r0, [pc, #164]	; (8003724 <HAL_I2C_MspInit+0x100>)
 800367e:	f001 fb3b 	bl	8004cf8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003682:	2300      	movs	r3, #0
 8003684:	617b      	str	r3, [r7, #20]
 8003686:	4b26      	ldr	r3, [pc, #152]	; (8003720 <HAL_I2C_MspInit+0xfc>)
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	4a25      	ldr	r2, [pc, #148]	; (8003720 <HAL_I2C_MspInit+0xfc>)
 800368c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003690:	6413      	str	r3, [r2, #64]	; 0x40
 8003692:	4b23      	ldr	r3, [pc, #140]	; (8003720 <HAL_I2C_MspInit+0xfc>)
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800369a:	617b      	str	r3, [r7, #20]
 800369c:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800369e:	2200      	movs	r2, #0
 80036a0:	2100      	movs	r1, #0
 80036a2:	201f      	movs	r0, #31
 80036a4:	f000 fee1 	bl	800446a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80036a8:	201f      	movs	r0, #31
 80036aa:	f000 fefa 	bl	80044a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80036ae:	e031      	b.n	8003714 <HAL_I2C_MspInit+0xf0>
  else if(hi2c->Instance==I2C2)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a1c      	ldr	r2, [pc, #112]	; (8003728 <HAL_I2C_MspInit+0x104>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d12c      	bne.n	8003714 <HAL_I2C_MspInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036ba:	2300      	movs	r3, #0
 80036bc:	613b      	str	r3, [r7, #16]
 80036be:	4b18      	ldr	r3, [pc, #96]	; (8003720 <HAL_I2C_MspInit+0xfc>)
 80036c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c2:	4a17      	ldr	r2, [pc, #92]	; (8003720 <HAL_I2C_MspInit+0xfc>)
 80036c4:	f043 0302 	orr.w	r3, r3, #2
 80036c8:	6313      	str	r3, [r2, #48]	; 0x30
 80036ca:	4b15      	ldr	r3, [pc, #84]	; (8003720 <HAL_I2C_MspInit+0xfc>)
 80036cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	613b      	str	r3, [r7, #16]
 80036d4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80036d6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80036da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036dc:	2312      	movs	r3, #18
 80036de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e0:	2300      	movs	r3, #0
 80036e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036e4:	2303      	movs	r3, #3
 80036e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80036e8:	2304      	movs	r3, #4
 80036ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036ec:	f107 031c 	add.w	r3, r7, #28
 80036f0:	4619      	mov	r1, r3
 80036f2:	480c      	ldr	r0, [pc, #48]	; (8003724 <HAL_I2C_MspInit+0x100>)
 80036f4:	f001 fb00 	bl	8004cf8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80036f8:	2300      	movs	r3, #0
 80036fa:	60fb      	str	r3, [r7, #12]
 80036fc:	4b08      	ldr	r3, [pc, #32]	; (8003720 <HAL_I2C_MspInit+0xfc>)
 80036fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003700:	4a07      	ldr	r2, [pc, #28]	; (8003720 <HAL_I2C_MspInit+0xfc>)
 8003702:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003706:	6413      	str	r3, [r2, #64]	; 0x40
 8003708:	4b05      	ldr	r3, [pc, #20]	; (8003720 <HAL_I2C_MspInit+0xfc>)
 800370a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003710:	60fb      	str	r3, [r7, #12]
 8003712:	68fb      	ldr	r3, [r7, #12]
}
 8003714:	bf00      	nop
 8003716:	3730      	adds	r7, #48	; 0x30
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40005400 	.word	0x40005400
 8003720:	40023800 	.word	0x40023800
 8003724:	40020400 	.word	0x40020400
 8003728:	40005800 	.word	0x40005800

0800372c <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a0b      	ldr	r2, [pc, #44]	; (8003768 <HAL_TIM_OC_MspInit+0x3c>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d10d      	bne.n	800375a <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800373e:	2300      	movs	r3, #0
 8003740:	60fb      	str	r3, [r7, #12]
 8003742:	4b0a      	ldr	r3, [pc, #40]	; (800376c <HAL_TIM_OC_MspInit+0x40>)
 8003744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003746:	4a09      	ldr	r2, [pc, #36]	; (800376c <HAL_TIM_OC_MspInit+0x40>)
 8003748:	f043 0301 	orr.w	r3, r3, #1
 800374c:	6453      	str	r3, [r2, #68]	; 0x44
 800374e:	4b07      	ldr	r3, [pc, #28]	; (800376c <HAL_TIM_OC_MspInit+0x40>)
 8003750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800375a:	bf00      	nop
 800375c:	3714      	adds	r7, #20
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	40010000 	.word	0x40010000
 800376c:	40023800 	.word	0x40023800

08003770 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b088      	sub	sp, #32
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003778:	f107 030c 	add.w	r3, r7, #12
 800377c:	2200      	movs	r2, #0
 800377e:	601a      	str	r2, [r3, #0]
 8003780:	605a      	str	r2, [r3, #4]
 8003782:	609a      	str	r2, [r3, #8]
 8003784:	60da      	str	r2, [r3, #12]
 8003786:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a12      	ldr	r2, [pc, #72]	; (80037d8 <HAL_TIM_MspPostInit+0x68>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d11e      	bne.n	80037d0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003792:	2300      	movs	r3, #0
 8003794:	60bb      	str	r3, [r7, #8]
 8003796:	4b11      	ldr	r3, [pc, #68]	; (80037dc <HAL_TIM_MspPostInit+0x6c>)
 8003798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379a:	4a10      	ldr	r2, [pc, #64]	; (80037dc <HAL_TIM_MspPostInit+0x6c>)
 800379c:	f043 0310 	orr.w	r3, r3, #16
 80037a0:	6313      	str	r3, [r2, #48]	; 0x30
 80037a2:	4b0e      	ldr	r3, [pc, #56]	; (80037dc <HAL_TIM_MspPostInit+0x6c>)
 80037a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a6:	f003 0310 	and.w	r3, r3, #16
 80037aa:	60bb      	str	r3, [r7, #8]
 80037ac:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80037ae:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80037b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b4:	2302      	movs	r3, #2
 80037b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b8:	2300      	movs	r3, #0
 80037ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037bc:	2300      	movs	r3, #0
 80037be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80037c0:	2301      	movs	r3, #1
 80037c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80037c4:	f107 030c 	add.w	r3, r7, #12
 80037c8:	4619      	mov	r1, r3
 80037ca:	4805      	ldr	r0, [pc, #20]	; (80037e0 <HAL_TIM_MspPostInit+0x70>)
 80037cc:	f001 fa94 	bl	8004cf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80037d0:	bf00      	nop
 80037d2:	3720      	adds	r7, #32
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	40010000 	.word	0x40010000
 80037dc:	40023800 	.word	0x40023800
 80037e0:	40021000 	.word	0x40021000

080037e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b08a      	sub	sp, #40	; 0x28
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037ec:	f107 0314 	add.w	r3, r7, #20
 80037f0:	2200      	movs	r2, #0
 80037f2:	601a      	str	r2, [r3, #0]
 80037f4:	605a      	str	r2, [r3, #4]
 80037f6:	609a      	str	r2, [r3, #8]
 80037f8:	60da      	str	r2, [r3, #12]
 80037fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a34      	ldr	r2, [pc, #208]	; (80038d4 <HAL_UART_MspInit+0xf0>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d161      	bne.n	80038ca <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003806:	2300      	movs	r3, #0
 8003808:	613b      	str	r3, [r7, #16]
 800380a:	4b33      	ldr	r3, [pc, #204]	; (80038d8 <HAL_UART_MspInit+0xf4>)
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	4a32      	ldr	r2, [pc, #200]	; (80038d8 <HAL_UART_MspInit+0xf4>)
 8003810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003814:	6413      	str	r3, [r2, #64]	; 0x40
 8003816:	4b30      	ldr	r3, [pc, #192]	; (80038d8 <HAL_UART_MspInit+0xf4>)
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381e:	613b      	str	r3, [r7, #16]
 8003820:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003822:	2300      	movs	r3, #0
 8003824:	60fb      	str	r3, [r7, #12]
 8003826:	4b2c      	ldr	r3, [pc, #176]	; (80038d8 <HAL_UART_MspInit+0xf4>)
 8003828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382a:	4a2b      	ldr	r2, [pc, #172]	; (80038d8 <HAL_UART_MspInit+0xf4>)
 800382c:	f043 0308 	orr.w	r3, r3, #8
 8003830:	6313      	str	r3, [r2, #48]	; 0x30
 8003832:	4b29      	ldr	r3, [pc, #164]	; (80038d8 <HAL_UART_MspInit+0xf4>)
 8003834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003836:	f003 0308 	and.w	r3, r3, #8
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800383e:	2360      	movs	r3, #96	; 0x60
 8003840:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003842:	2302      	movs	r3, #2
 8003844:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003846:	2300      	movs	r3, #0
 8003848:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800384a:	2303      	movs	r3, #3
 800384c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800384e:	2307      	movs	r3, #7
 8003850:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003852:	f107 0314 	add.w	r3, r7, #20
 8003856:	4619      	mov	r1, r3
 8003858:	4820      	ldr	r0, [pc, #128]	; (80038dc <HAL_UART_MspInit+0xf8>)
 800385a:	f001 fa4d 	bl	8004cf8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800385e:	4b20      	ldr	r3, [pc, #128]	; (80038e0 <HAL_UART_MspInit+0xfc>)
 8003860:	4a20      	ldr	r2, [pc, #128]	; (80038e4 <HAL_UART_MspInit+0x100>)
 8003862:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003864:	4b1e      	ldr	r3, [pc, #120]	; (80038e0 <HAL_UART_MspInit+0xfc>)
 8003866:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800386a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800386c:	4b1c      	ldr	r3, [pc, #112]	; (80038e0 <HAL_UART_MspInit+0xfc>)
 800386e:	2200      	movs	r2, #0
 8003870:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003872:	4b1b      	ldr	r3, [pc, #108]	; (80038e0 <HAL_UART_MspInit+0xfc>)
 8003874:	2200      	movs	r2, #0
 8003876:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003878:	4b19      	ldr	r3, [pc, #100]	; (80038e0 <HAL_UART_MspInit+0xfc>)
 800387a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800387e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003880:	4b17      	ldr	r3, [pc, #92]	; (80038e0 <HAL_UART_MspInit+0xfc>)
 8003882:	2200      	movs	r2, #0
 8003884:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003886:	4b16      	ldr	r3, [pc, #88]	; (80038e0 <HAL_UART_MspInit+0xfc>)
 8003888:	2200      	movs	r2, #0
 800388a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800388c:	4b14      	ldr	r3, [pc, #80]	; (80038e0 <HAL_UART_MspInit+0xfc>)
 800388e:	2200      	movs	r2, #0
 8003890:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003892:	4b13      	ldr	r3, [pc, #76]	; (80038e0 <HAL_UART_MspInit+0xfc>)
 8003894:	2200      	movs	r2, #0
 8003896:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003898:	4b11      	ldr	r3, [pc, #68]	; (80038e0 <HAL_UART_MspInit+0xfc>)
 800389a:	2200      	movs	r2, #0
 800389c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800389e:	4810      	ldr	r0, [pc, #64]	; (80038e0 <HAL_UART_MspInit+0xfc>)
 80038a0:	f000 fe1a 	bl	80044d8 <HAL_DMA_Init>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80038aa:	f7fe fe9b 	bl	80025e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a0b      	ldr	r2, [pc, #44]	; (80038e0 <HAL_UART_MspInit+0xfc>)
 80038b2:	639a      	str	r2, [r3, #56]	; 0x38
 80038b4:	4a0a      	ldr	r2, [pc, #40]	; (80038e0 <HAL_UART_MspInit+0xfc>)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80038ba:	2200      	movs	r2, #0
 80038bc:	2100      	movs	r1, #0
 80038be:	2026      	movs	r0, #38	; 0x26
 80038c0:	f000 fdd3 	bl	800446a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80038c4:	2026      	movs	r0, #38	; 0x26
 80038c6:	f000 fdec 	bl	80044a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80038ca:	bf00      	nop
 80038cc:	3728      	adds	r7, #40	; 0x28
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40004400 	.word	0x40004400
 80038d8:	40023800 	.word	0x40023800
 80038dc:	40020c00 	.word	0x40020c00
 80038e0:	20000238 	.word	0x20000238
 80038e4:	40026088 	.word	0x40026088

080038e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80038ec:	e7fe      	b.n	80038ec <NMI_Handler+0x4>

080038ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038ee:	b480      	push	{r7}
 80038f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038f2:	e7fe      	b.n	80038f2 <HardFault_Handler+0x4>

080038f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038f8:	e7fe      	b.n	80038f8 <MemManage_Handler+0x4>

080038fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038fa:	b480      	push	{r7}
 80038fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038fe:	e7fe      	b.n	80038fe <BusFault_Handler+0x4>

08003900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003904:	e7fe      	b.n	8003904 <UsageFault_Handler+0x4>

08003906 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003906:	b480      	push	{r7}
 8003908:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800390a:	bf00      	nop
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003918:	bf00      	nop
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr

08003922 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003922:	b480      	push	{r7}
 8003924:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003926:	bf00      	nop
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003934:	f000 f8ae 	bl	8003a94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003938:	bf00      	nop
 800393a:	bd80      	pop	{r7, pc}

0800393c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003940:	4802      	ldr	r0, [pc, #8]	; (800394c <DMA1_Stream5_IRQHandler+0x10>)
 8003942:	f000 ff61 	bl	8004808 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003946:	bf00      	nop
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	20000238 	.word	0x20000238

08003950 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003954:	4802      	ldr	r0, [pc, #8]	; (8003960 <I2C1_EV_IRQHandler+0x10>)
 8003956:	f001 ffbb 	bl	80058d0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800395a:	bf00      	nop
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	20000104 	.word	0x20000104

08003964 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003968:	4802      	ldr	r0, [pc, #8]	; (8003974 <USART2_IRQHandler+0x10>)
 800396a:	f004 ffc9 	bl	8008900 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800396e:	bf00      	nop
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	200001f4 	.word	0x200001f4

08003978 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800397c:	4b06      	ldr	r3, [pc, #24]	; (8003998 <SystemInit+0x20>)
 800397e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003982:	4a05      	ldr	r2, [pc, #20]	; (8003998 <SystemInit+0x20>)
 8003984:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003988:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800398c:	bf00      	nop
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	e000ed00 	.word	0xe000ed00

0800399c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800399c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80039d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80039a0:	480d      	ldr	r0, [pc, #52]	; (80039d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80039a2:	490e      	ldr	r1, [pc, #56]	; (80039dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80039a4:	4a0e      	ldr	r2, [pc, #56]	; (80039e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80039a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039a8:	e002      	b.n	80039b0 <LoopCopyDataInit>

080039aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039ae:	3304      	adds	r3, #4

080039b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039b4:	d3f9      	bcc.n	80039aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039b6:	4a0b      	ldr	r2, [pc, #44]	; (80039e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80039b8:	4c0b      	ldr	r4, [pc, #44]	; (80039e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80039ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039bc:	e001      	b.n	80039c2 <LoopFillZerobss>

080039be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039c0:	3204      	adds	r2, #4

080039c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039c4:	d3fb      	bcc.n	80039be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80039c6:	f7ff ffd7 	bl	8003978 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80039ca:	f006 f88f 	bl	8009aec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039ce:	f7fe faa1 	bl	8001f14 <main>
  bx  lr    
 80039d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80039d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80039d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039dc:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 80039e0:	0800dc80 	.word	0x0800dc80
  ldr r2, =_sbss
 80039e4:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80039e8:	200007c8 	.word	0x200007c8

080039ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039ec:	e7fe      	b.n	80039ec <ADC_IRQHandler>
	...

080039f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80039f4:	4b0e      	ldr	r3, [pc, #56]	; (8003a30 <HAL_Init+0x40>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a0d      	ldr	r2, [pc, #52]	; (8003a30 <HAL_Init+0x40>)
 80039fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a00:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <HAL_Init+0x40>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a0a      	ldr	r2, [pc, #40]	; (8003a30 <HAL_Init+0x40>)
 8003a06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a0c:	4b08      	ldr	r3, [pc, #32]	; (8003a30 <HAL_Init+0x40>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a07      	ldr	r2, [pc, #28]	; (8003a30 <HAL_Init+0x40>)
 8003a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a18:	2003      	movs	r0, #3
 8003a1a:	f000 fd1b 	bl	8004454 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a1e:	200f      	movs	r0, #15
 8003a20:	f000 f808 	bl	8003a34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a24:	f7ff fd76 	bl	8003514 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	40023c00 	.word	0x40023c00

08003a34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a3c:	4b12      	ldr	r3, [pc, #72]	; (8003a88 <HAL_InitTick+0x54>)
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	4b12      	ldr	r3, [pc, #72]	; (8003a8c <HAL_InitTick+0x58>)
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	4619      	mov	r1, r3
 8003a46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 fd33 	bl	80044be <HAL_SYSTICK_Config>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e00e      	b.n	8003a80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2b0f      	cmp	r3, #15
 8003a66:	d80a      	bhi.n	8003a7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a68:	2200      	movs	r2, #0
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a70:	f000 fcfb 	bl	800446a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a74:	4a06      	ldr	r2, [pc, #24]	; (8003a90 <HAL_InitTick+0x5c>)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	e000      	b.n	8003a80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3708      	adds	r7, #8
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	20000030 	.word	0x20000030
 8003a8c:	20000038 	.word	0x20000038
 8003a90:	20000034 	.word	0x20000034

08003a94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a98:	4b06      	ldr	r3, [pc, #24]	; (8003ab4 <HAL_IncTick+0x20>)
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	4b06      	ldr	r3, [pc, #24]	; (8003ab8 <HAL_IncTick+0x24>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	4a04      	ldr	r2, [pc, #16]	; (8003ab8 <HAL_IncTick+0x24>)
 8003aa6:	6013      	str	r3, [r2, #0]
}
 8003aa8:	bf00      	nop
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	20000038 	.word	0x20000038
 8003ab8:	200007c4 	.word	0x200007c4

08003abc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0
  return uwTick;
 8003ac0:	4b03      	ldr	r3, [pc, #12]	; (8003ad0 <HAL_GetTick+0x14>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	200007c4 	.word	0x200007c4

08003ad4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003adc:	f7ff ffee 	bl	8003abc <HAL_GetTick>
 8003ae0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aec:	d005      	beq.n	8003afa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003aee:	4b0a      	ldr	r3, [pc, #40]	; (8003b18 <HAL_Delay+0x44>)
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	461a      	mov	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4413      	add	r3, r2
 8003af8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003afa:	bf00      	nop
 8003afc:	f7ff ffde 	bl	8003abc <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d8f7      	bhi.n	8003afc <HAL_Delay+0x28>
  {
  }
}
 8003b0c:	bf00      	nop
 8003b0e:	bf00      	nop
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	20000038 	.word	0x20000038

08003b1c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b24:	2300      	movs	r3, #0
 8003b26:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e033      	b.n	8003b9a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d109      	bne.n	8003b4e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f7ff fd12 	bl	8003564 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	f003 0310 	and.w	r3, r3, #16
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d118      	bne.n	8003b8c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003b62:	f023 0302 	bic.w	r3, r3, #2
 8003b66:	f043 0202 	orr.w	r2, r3, #2
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 faa4 	bl	80040bc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	f023 0303 	bic.w	r3, r3, #3
 8003b82:	f043 0201 	orr.w	r2, r3, #1
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	641a      	str	r2, [r3, #64]	; 0x40
 8003b8a:	e001      	b.n	8003b90 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
	...

08003ba4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003bac:	2300      	movs	r3, #0
 8003bae:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d101      	bne.n	8003bbe <HAL_ADC_Start+0x1a>
 8003bba:	2302      	movs	r3, #2
 8003bbc:	e0b2      	b.n	8003d24 <HAL_ADC_Start+0x180>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d018      	beq.n	8003c06 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689a      	ldr	r2, [r3, #8]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f042 0201 	orr.w	r2, r2, #1
 8003be2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003be4:	4b52      	ldr	r3, [pc, #328]	; (8003d30 <HAL_ADC_Start+0x18c>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a52      	ldr	r2, [pc, #328]	; (8003d34 <HAL_ADC_Start+0x190>)
 8003bea:	fba2 2303 	umull	r2, r3, r2, r3
 8003bee:	0c9a      	lsrs	r2, r3, #18
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	005b      	lsls	r3, r3, #1
 8003bf4:	4413      	add	r3, r2
 8003bf6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003bf8:	e002      	b.n	8003c00 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1f9      	bne.n	8003bfa <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d17a      	bne.n	8003d0a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c18:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003c1c:	f023 0301 	bic.w	r3, r3, #1
 8003c20:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d007      	beq.n	8003c46 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c3e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c52:	d106      	bne.n	8003c62 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c58:	f023 0206 	bic.w	r2, r3, #6
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	645a      	str	r2, [r3, #68]	; 0x44
 8003c60:	e002      	b.n	8003c68 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c70:	4b31      	ldr	r3, [pc, #196]	; (8003d38 <HAL_ADC_Start+0x194>)
 8003c72:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003c7c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f003 031f 	and.w	r3, r3, #31
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d12a      	bne.n	8003ce0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a2b      	ldr	r2, [pc, #172]	; (8003d3c <HAL_ADC_Start+0x198>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d015      	beq.n	8003cc0 <HAL_ADC_Start+0x11c>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a29      	ldr	r2, [pc, #164]	; (8003d40 <HAL_ADC_Start+0x19c>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d105      	bne.n	8003caa <HAL_ADC_Start+0x106>
 8003c9e:	4b26      	ldr	r3, [pc, #152]	; (8003d38 <HAL_ADC_Start+0x194>)
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f003 031f 	and.w	r3, r3, #31
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00a      	beq.n	8003cc0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a25      	ldr	r2, [pc, #148]	; (8003d44 <HAL_ADC_Start+0x1a0>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d136      	bne.n	8003d22 <HAL_ADC_Start+0x17e>
 8003cb4:	4b20      	ldr	r3, [pc, #128]	; (8003d38 <HAL_ADC_Start+0x194>)
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f003 0310 	and.w	r3, r3, #16
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d130      	bne.n	8003d22 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d129      	bne.n	8003d22 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	689a      	ldr	r2, [r3, #8]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003cdc:	609a      	str	r2, [r3, #8]
 8003cde:	e020      	b.n	8003d22 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a15      	ldr	r2, [pc, #84]	; (8003d3c <HAL_ADC_Start+0x198>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d11b      	bne.n	8003d22 <HAL_ADC_Start+0x17e>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d114      	bne.n	8003d22 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689a      	ldr	r2, [r3, #8]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003d06:	609a      	str	r2, [r3, #8]
 8003d08:	e00b      	b.n	8003d22 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0e:	f043 0210 	orr.w	r2, r3, #16
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1a:	f043 0201 	orr.w	r2, r3, #1
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3714      	adds	r7, #20
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr
 8003d30:	20000030 	.word	0x20000030
 8003d34:	431bde83 	.word	0x431bde83
 8003d38:	40012300 	.word	0x40012300
 8003d3c:	40012000 	.word	0x40012000
 8003d40:	40012100 	.word	0x40012100
 8003d44:	40012200 	.word	0x40012200

08003d48 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003d52:	2300      	movs	r3, #0
 8003d54:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d64:	d113      	bne.n	8003d8e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003d70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d74:	d10b      	bne.n	8003d8e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	f043 0220 	orr.w	r2, r3, #32
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e063      	b.n	8003e56 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003d8e:	f7ff fe95 	bl	8003abc <HAL_GetTick>
 8003d92:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003d94:	e021      	b.n	8003dda <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d9c:	d01d      	beq.n	8003dda <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d007      	beq.n	8003db4 <HAL_ADC_PollForConversion+0x6c>
 8003da4:	f7ff fe8a 	bl	8003abc <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d212      	bcs.n	8003dda <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d00b      	beq.n	8003dda <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	f043 0204 	orr.w	r2, r3, #4
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e03d      	b.n	8003e56 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d1d6      	bne.n	8003d96 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f06f 0212 	mvn.w	r2, #18
 8003df0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d123      	bne.n	8003e54 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d11f      	bne.n	8003e54 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d006      	beq.n	8003e30 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d111      	bne.n	8003e54 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d105      	bne.n	8003e54 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4c:	f043 0201 	orr.w	r2, r3, #1
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003e5e:	b480      	push	{r7}
 8003e60:	b083      	sub	sp, #12
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003e82:	2300      	movs	r3, #0
 8003e84:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d101      	bne.n	8003e94 <HAL_ADC_ConfigChannel+0x1c>
 8003e90:	2302      	movs	r3, #2
 8003e92:	e105      	b.n	80040a0 <HAL_ADC_ConfigChannel+0x228>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2b09      	cmp	r3, #9
 8003ea2:	d925      	bls.n	8003ef0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68d9      	ldr	r1, [r3, #12]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	4413      	add	r3, r2
 8003eb8:	3b1e      	subs	r3, #30
 8003eba:	2207      	movs	r2, #7
 8003ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec0:	43da      	mvns	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	400a      	ands	r2, r1
 8003ec8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68d9      	ldr	r1, [r3, #12]
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	4618      	mov	r0, r3
 8003edc:	4603      	mov	r3, r0
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	4403      	add	r3, r0
 8003ee2:	3b1e      	subs	r3, #30
 8003ee4:	409a      	lsls	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	60da      	str	r2, [r3, #12]
 8003eee:	e022      	b.n	8003f36 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6919      	ldr	r1, [r3, #16]
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	461a      	mov	r2, r3
 8003efe:	4613      	mov	r3, r2
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	4413      	add	r3, r2
 8003f04:	2207      	movs	r2, #7
 8003f06:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0a:	43da      	mvns	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	400a      	ands	r2, r1
 8003f12:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6919      	ldr	r1, [r3, #16]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	689a      	ldr	r2, [r3, #8]
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	4618      	mov	r0, r3
 8003f26:	4603      	mov	r3, r0
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	4403      	add	r3, r0
 8003f2c:	409a      	lsls	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	2b06      	cmp	r3, #6
 8003f3c:	d824      	bhi.n	8003f88 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	3b05      	subs	r3, #5
 8003f50:	221f      	movs	r2, #31
 8003f52:	fa02 f303 	lsl.w	r3, r2, r3
 8003f56:	43da      	mvns	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	400a      	ands	r2, r1
 8003f5e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	4613      	mov	r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4413      	add	r3, r2
 8003f78:	3b05      	subs	r3, #5
 8003f7a:	fa00 f203 	lsl.w	r2, r0, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	635a      	str	r2, [r3, #52]	; 0x34
 8003f86:	e04c      	b.n	8004022 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	2b0c      	cmp	r3, #12
 8003f8e:	d824      	bhi.n	8003fda <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	4413      	add	r3, r2
 8003fa0:	3b23      	subs	r3, #35	; 0x23
 8003fa2:	221f      	movs	r2, #31
 8003fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa8:	43da      	mvns	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	400a      	ands	r2, r1
 8003fb0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685a      	ldr	r2, [r3, #4]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	3b23      	subs	r3, #35	; 0x23
 8003fcc:	fa00 f203 	lsl.w	r2, r0, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	631a      	str	r2, [r3, #48]	; 0x30
 8003fd8:	e023      	b.n	8004022 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	4413      	add	r3, r2
 8003fea:	3b41      	subs	r3, #65	; 0x41
 8003fec:	221f      	movs	r2, #31
 8003fee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff2:	43da      	mvns	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	400a      	ands	r2, r1
 8003ffa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	b29b      	uxth	r3, r3
 8004008:	4618      	mov	r0, r3
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685a      	ldr	r2, [r3, #4]
 800400e:	4613      	mov	r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	4413      	add	r3, r2
 8004014:	3b41      	subs	r3, #65	; 0x41
 8004016:	fa00 f203 	lsl.w	r2, r0, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	430a      	orrs	r2, r1
 8004020:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004022:	4b22      	ldr	r3, [pc, #136]	; (80040ac <HAL_ADC_ConfigChannel+0x234>)
 8004024:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a21      	ldr	r2, [pc, #132]	; (80040b0 <HAL_ADC_ConfigChannel+0x238>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d109      	bne.n	8004044 <HAL_ADC_ConfigChannel+0x1cc>
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2b12      	cmp	r3, #18
 8004036:	d105      	bne.n	8004044 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a19      	ldr	r2, [pc, #100]	; (80040b0 <HAL_ADC_ConfigChannel+0x238>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d123      	bne.n	8004096 <HAL_ADC_ConfigChannel+0x21e>
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2b10      	cmp	r3, #16
 8004054:	d003      	beq.n	800405e <HAL_ADC_ConfigChannel+0x1e6>
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2b11      	cmp	r3, #17
 800405c:	d11b      	bne.n	8004096 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2b10      	cmp	r3, #16
 8004070:	d111      	bne.n	8004096 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004072:	4b10      	ldr	r3, [pc, #64]	; (80040b4 <HAL_ADC_ConfigChannel+0x23c>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a10      	ldr	r2, [pc, #64]	; (80040b8 <HAL_ADC_ConfigChannel+0x240>)
 8004078:	fba2 2303 	umull	r2, r3, r2, r3
 800407c:	0c9a      	lsrs	r2, r3, #18
 800407e:	4613      	mov	r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	4413      	add	r3, r2
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004088:	e002      	b.n	8004090 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	3b01      	subs	r3, #1
 800408e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1f9      	bne.n	800408a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3714      	adds	r7, #20
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr
 80040ac:	40012300 	.word	0x40012300
 80040b0:	40012000 	.word	0x40012000
 80040b4:	20000030 	.word	0x20000030
 80040b8:	431bde83 	.word	0x431bde83

080040bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040c4:	4b79      	ldr	r3, [pc, #484]	; (80042ac <ADC_Init+0x1f0>)
 80040c6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	431a      	orrs	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6859      	ldr	r1, [r3, #4]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	021a      	lsls	r2, r3, #8
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	430a      	orrs	r2, r1
 8004104:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	685a      	ldr	r2, [r3, #4]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004114:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6859      	ldr	r1, [r3, #4]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689a      	ldr	r2, [r3, #8]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	430a      	orrs	r2, r1
 8004126:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689a      	ldr	r2, [r3, #8]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004136:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	6899      	ldr	r1, [r3, #8]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	68da      	ldr	r2, [r3, #12]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	430a      	orrs	r2, r1
 8004148:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414e:	4a58      	ldr	r2, [pc, #352]	; (80042b0 <ADC_Init+0x1f4>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d022      	beq.n	800419a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	689a      	ldr	r2, [r3, #8]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004162:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6899      	ldr	r1, [r3, #8]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	430a      	orrs	r2, r1
 8004174:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	689a      	ldr	r2, [r3, #8]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004184:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	6899      	ldr	r1, [r3, #8]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	430a      	orrs	r2, r1
 8004196:	609a      	str	r2, [r3, #8]
 8004198:	e00f      	b.n	80041ba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	689a      	ldr	r2, [r3, #8]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80041a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80041b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	689a      	ldr	r2, [r3, #8]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 0202 	bic.w	r2, r2, #2
 80041c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	6899      	ldr	r1, [r3, #8]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	7e1b      	ldrb	r3, [r3, #24]
 80041d4:	005a      	lsls	r2, r3, #1
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	430a      	orrs	r2, r1
 80041dc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d01b      	beq.n	8004220 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041f6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	685a      	ldr	r2, [r3, #4]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004206:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6859      	ldr	r1, [r3, #4]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004212:	3b01      	subs	r3, #1
 8004214:	035a      	lsls	r2, r3, #13
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	430a      	orrs	r2, r1
 800421c:	605a      	str	r2, [r3, #4]
 800421e:	e007      	b.n	8004230 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800422e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800423e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	3b01      	subs	r3, #1
 800424c:	051a      	lsls	r2, r3, #20
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	689a      	ldr	r2, [r3, #8]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004264:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	6899      	ldr	r1, [r3, #8]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004272:	025a      	lsls	r2, r3, #9
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	430a      	orrs	r2, r1
 800427a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689a      	ldr	r2, [r3, #8]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800428a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	6899      	ldr	r1, [r3, #8]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	029a      	lsls	r2, r3, #10
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	430a      	orrs	r2, r1
 800429e:	609a      	str	r2, [r3, #8]
}
 80042a0:	bf00      	nop
 80042a2:	3714      	adds	r7, #20
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr
 80042ac:	40012300 	.word	0x40012300
 80042b0:	0f000001 	.word	0x0f000001

080042b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f003 0307 	and.w	r3, r3, #7
 80042c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042c4:	4b0c      	ldr	r3, [pc, #48]	; (80042f8 <__NVIC_SetPriorityGrouping+0x44>)
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042ca:	68ba      	ldr	r2, [r7, #8]
 80042cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042d0:	4013      	ands	r3, r2
 80042d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80042e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042e6:	4a04      	ldr	r2, [pc, #16]	; (80042f8 <__NVIC_SetPriorityGrouping+0x44>)
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	60d3      	str	r3, [r2, #12]
}
 80042ec:	bf00      	nop
 80042ee:	3714      	adds	r7, #20
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr
 80042f8:	e000ed00 	.word	0xe000ed00

080042fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004300:	4b04      	ldr	r3, [pc, #16]	; (8004314 <__NVIC_GetPriorityGrouping+0x18>)
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	0a1b      	lsrs	r3, r3, #8
 8004306:	f003 0307 	and.w	r3, r3, #7
}
 800430a:	4618      	mov	r0, r3
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	e000ed00 	.word	0xe000ed00

08004318 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	4603      	mov	r3, r0
 8004320:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004326:	2b00      	cmp	r3, #0
 8004328:	db0b      	blt.n	8004342 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800432a:	79fb      	ldrb	r3, [r7, #7]
 800432c:	f003 021f 	and.w	r2, r3, #31
 8004330:	4907      	ldr	r1, [pc, #28]	; (8004350 <__NVIC_EnableIRQ+0x38>)
 8004332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004336:	095b      	lsrs	r3, r3, #5
 8004338:	2001      	movs	r0, #1
 800433a:	fa00 f202 	lsl.w	r2, r0, r2
 800433e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004342:	bf00      	nop
 8004344:	370c      	adds	r7, #12
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	e000e100 	.word	0xe000e100

08004354 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	4603      	mov	r3, r0
 800435c:	6039      	str	r1, [r7, #0]
 800435e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004364:	2b00      	cmp	r3, #0
 8004366:	db0a      	blt.n	800437e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	b2da      	uxtb	r2, r3
 800436c:	490c      	ldr	r1, [pc, #48]	; (80043a0 <__NVIC_SetPriority+0x4c>)
 800436e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004372:	0112      	lsls	r2, r2, #4
 8004374:	b2d2      	uxtb	r2, r2
 8004376:	440b      	add	r3, r1
 8004378:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800437c:	e00a      	b.n	8004394 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	b2da      	uxtb	r2, r3
 8004382:	4908      	ldr	r1, [pc, #32]	; (80043a4 <__NVIC_SetPriority+0x50>)
 8004384:	79fb      	ldrb	r3, [r7, #7]
 8004386:	f003 030f 	and.w	r3, r3, #15
 800438a:	3b04      	subs	r3, #4
 800438c:	0112      	lsls	r2, r2, #4
 800438e:	b2d2      	uxtb	r2, r2
 8004390:	440b      	add	r3, r1
 8004392:	761a      	strb	r2, [r3, #24]
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr
 80043a0:	e000e100 	.word	0xe000e100
 80043a4:	e000ed00 	.word	0xe000ed00

080043a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b089      	sub	sp, #36	; 0x24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f003 0307 	and.w	r3, r3, #7
 80043ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	f1c3 0307 	rsb	r3, r3, #7
 80043c2:	2b04      	cmp	r3, #4
 80043c4:	bf28      	it	cs
 80043c6:	2304      	movcs	r3, #4
 80043c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	3304      	adds	r3, #4
 80043ce:	2b06      	cmp	r3, #6
 80043d0:	d902      	bls.n	80043d8 <NVIC_EncodePriority+0x30>
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	3b03      	subs	r3, #3
 80043d6:	e000      	b.n	80043da <NVIC_EncodePriority+0x32>
 80043d8:	2300      	movs	r3, #0
 80043da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043dc:	f04f 32ff 	mov.w	r2, #4294967295
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	fa02 f303 	lsl.w	r3, r2, r3
 80043e6:	43da      	mvns	r2, r3
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	401a      	ands	r2, r3
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043f0:	f04f 31ff 	mov.w	r1, #4294967295
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	fa01 f303 	lsl.w	r3, r1, r3
 80043fa:	43d9      	mvns	r1, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004400:	4313      	orrs	r3, r2
         );
}
 8004402:	4618      	mov	r0, r3
 8004404:	3724      	adds	r7, #36	; 0x24
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
	...

08004410 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	3b01      	subs	r3, #1
 800441c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004420:	d301      	bcc.n	8004426 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004422:	2301      	movs	r3, #1
 8004424:	e00f      	b.n	8004446 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004426:	4a0a      	ldr	r2, [pc, #40]	; (8004450 <SysTick_Config+0x40>)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	3b01      	subs	r3, #1
 800442c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800442e:	210f      	movs	r1, #15
 8004430:	f04f 30ff 	mov.w	r0, #4294967295
 8004434:	f7ff ff8e 	bl	8004354 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004438:	4b05      	ldr	r3, [pc, #20]	; (8004450 <SysTick_Config+0x40>)
 800443a:	2200      	movs	r2, #0
 800443c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800443e:	4b04      	ldr	r3, [pc, #16]	; (8004450 <SysTick_Config+0x40>)
 8004440:	2207      	movs	r2, #7
 8004442:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3708      	adds	r7, #8
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	e000e010 	.word	0xe000e010

08004454 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f7ff ff29 	bl	80042b4 <__NVIC_SetPriorityGrouping>
}
 8004462:	bf00      	nop
 8004464:	3708      	adds	r7, #8
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}

0800446a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800446a:	b580      	push	{r7, lr}
 800446c:	b086      	sub	sp, #24
 800446e:	af00      	add	r7, sp, #0
 8004470:	4603      	mov	r3, r0
 8004472:	60b9      	str	r1, [r7, #8]
 8004474:	607a      	str	r2, [r7, #4]
 8004476:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004478:	2300      	movs	r3, #0
 800447a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800447c:	f7ff ff3e 	bl	80042fc <__NVIC_GetPriorityGrouping>
 8004480:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	68b9      	ldr	r1, [r7, #8]
 8004486:	6978      	ldr	r0, [r7, #20]
 8004488:	f7ff ff8e 	bl	80043a8 <NVIC_EncodePriority>
 800448c:	4602      	mov	r2, r0
 800448e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004492:	4611      	mov	r1, r2
 8004494:	4618      	mov	r0, r3
 8004496:	f7ff ff5d 	bl	8004354 <__NVIC_SetPriority>
}
 800449a:	bf00      	nop
 800449c:	3718      	adds	r7, #24
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b082      	sub	sp, #8
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	4603      	mov	r3, r0
 80044aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7ff ff31 	bl	8004318 <__NVIC_EnableIRQ>
}
 80044b6:	bf00      	nop
 80044b8:	3708      	adds	r7, #8
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b082      	sub	sp, #8
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f7ff ffa2 	bl	8004410 <SysTick_Config>
 80044cc:	4603      	mov	r3, r0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
	...

080044d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80044e0:	2300      	movs	r3, #0
 80044e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80044e4:	f7ff faea 	bl	8003abc <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d101      	bne.n	80044f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e099      	b.n	8004628 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2202      	movs	r2, #2
 80044f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 0201 	bic.w	r2, r2, #1
 8004512:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004514:	e00f      	b.n	8004536 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004516:	f7ff fad1 	bl	8003abc <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b05      	cmp	r3, #5
 8004522:	d908      	bls.n	8004536 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2220      	movs	r2, #32
 8004528:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2203      	movs	r2, #3
 800452e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e078      	b.n	8004628 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0301 	and.w	r3, r3, #1
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1e8      	bne.n	8004516 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	4b38      	ldr	r3, [pc, #224]	; (8004630 <HAL_DMA_Init+0x158>)
 8004550:	4013      	ands	r3, r2
 8004552:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685a      	ldr	r2, [r3, #4]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004562:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800456e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800457a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a1b      	ldr	r3, [r3, #32]
 8004580:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	4313      	orrs	r3, r2
 8004586:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458c:	2b04      	cmp	r3, #4
 800458e:	d107      	bne.n	80045a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004598:	4313      	orrs	r3, r2
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	4313      	orrs	r3, r2
 800459e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	697a      	ldr	r2, [r7, #20]
 80045a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	f023 0307 	bic.w	r3, r3, #7
 80045b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	4313      	orrs	r3, r2
 80045c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c6:	2b04      	cmp	r3, #4
 80045c8:	d117      	bne.n	80045fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00e      	beq.n	80045fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 fb0f 	bl	8004c00 <DMA_CheckFifoParam>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d008      	beq.n	80045fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2240      	movs	r2, #64	; 0x40
 80045ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2201      	movs	r2, #1
 80045f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80045f6:	2301      	movs	r3, #1
 80045f8:	e016      	b.n	8004628 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 fac6 	bl	8004b94 <DMA_CalcBaseAndBitshift>
 8004608:	4603      	mov	r3, r0
 800460a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004610:	223f      	movs	r2, #63	; 0x3f
 8004612:	409a      	lsls	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	3718      	adds	r7, #24
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	f010803f 	.word	0xf010803f

08004634 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
 8004640:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004642:	2300      	movs	r3, #0
 8004644:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800464a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004652:	2b01      	cmp	r3, #1
 8004654:	d101      	bne.n	800465a <HAL_DMA_Start_IT+0x26>
 8004656:	2302      	movs	r3, #2
 8004658:	e040      	b.n	80046dc <HAL_DMA_Start_IT+0xa8>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b01      	cmp	r3, #1
 800466c:	d12f      	bne.n	80046ce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2202      	movs	r2, #2
 8004672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	68b9      	ldr	r1, [r7, #8]
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f000 fa58 	bl	8004b38 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800468c:	223f      	movs	r2, #63	; 0x3f
 800468e:	409a      	lsls	r2, r3
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f042 0216 	orr.w	r2, r2, #22
 80046a2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d007      	beq.n	80046bc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f042 0208 	orr.w	r2, r2, #8
 80046ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f042 0201 	orr.w	r2, r2, #1
 80046ca:	601a      	str	r2, [r3, #0]
 80046cc:	e005      	b.n	80046da <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80046d6:	2302      	movs	r3, #2
 80046d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80046da:	7dfb      	ldrb	r3, [r7, #23]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3718      	adds	r7, #24
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80046f2:	f7ff f9e3 	bl	8003abc <HAL_GetTick>
 80046f6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b02      	cmp	r3, #2
 8004702:	d008      	beq.n	8004716 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2280      	movs	r2, #128	; 0x80
 8004708:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e052      	b.n	80047bc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f022 0216 	bic.w	r2, r2, #22
 8004724:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	695a      	ldr	r2, [r3, #20]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004734:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473a:	2b00      	cmp	r3, #0
 800473c:	d103      	bne.n	8004746 <HAL_DMA_Abort+0x62>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004742:	2b00      	cmp	r3, #0
 8004744:	d007      	beq.n	8004756 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f022 0208 	bic.w	r2, r2, #8
 8004754:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f022 0201 	bic.w	r2, r2, #1
 8004764:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004766:	e013      	b.n	8004790 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004768:	f7ff f9a8 	bl	8003abc <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	2b05      	cmp	r3, #5
 8004774:	d90c      	bls.n	8004790 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2220      	movs	r2, #32
 800477a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2203      	movs	r2, #3
 8004780:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e015      	b.n	80047bc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1e4      	bne.n	8004768 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a2:	223f      	movs	r2, #63	; 0x3f
 80047a4:	409a      	lsls	r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d004      	beq.n	80047e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2280      	movs	r2, #128	; 0x80
 80047dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e00c      	b.n	80047fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2205      	movs	r2, #5
 80047e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f022 0201 	bic.w	r2, r2, #1
 80047f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004810:	2300      	movs	r3, #0
 8004812:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004814:	4b8e      	ldr	r3, [pc, #568]	; (8004a50 <HAL_DMA_IRQHandler+0x248>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a8e      	ldr	r2, [pc, #568]	; (8004a54 <HAL_DMA_IRQHandler+0x24c>)
 800481a:	fba2 2303 	umull	r2, r3, r2, r3
 800481e:	0a9b      	lsrs	r3, r3, #10
 8004820:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004826:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004832:	2208      	movs	r2, #8
 8004834:	409a      	lsls	r2, r3
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	4013      	ands	r3, r2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d01a      	beq.n	8004874 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0304 	and.w	r3, r3, #4
 8004848:	2b00      	cmp	r3, #0
 800484a:	d013      	beq.n	8004874 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 0204 	bic.w	r2, r2, #4
 800485a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004860:	2208      	movs	r2, #8
 8004862:	409a      	lsls	r2, r3
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800486c:	f043 0201 	orr.w	r2, r3, #1
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004878:	2201      	movs	r2, #1
 800487a:	409a      	lsls	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4013      	ands	r3, r2
 8004880:	2b00      	cmp	r3, #0
 8004882:	d012      	beq.n	80048aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00b      	beq.n	80048aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004896:	2201      	movs	r2, #1
 8004898:	409a      	lsls	r2, r3
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a2:	f043 0202 	orr.w	r2, r3, #2
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ae:	2204      	movs	r2, #4
 80048b0:	409a      	lsls	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	4013      	ands	r3, r2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d012      	beq.n	80048e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0302 	and.w	r3, r3, #2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00b      	beq.n	80048e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048cc:	2204      	movs	r2, #4
 80048ce:	409a      	lsls	r2, r3
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d8:	f043 0204 	orr.w	r2, r3, #4
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e4:	2210      	movs	r2, #16
 80048e6:	409a      	lsls	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	4013      	ands	r3, r2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d043      	beq.n	8004978 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0308 	and.w	r3, r3, #8
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d03c      	beq.n	8004978 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004902:	2210      	movs	r2, #16
 8004904:	409a      	lsls	r2, r3
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d018      	beq.n	800494a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d108      	bne.n	8004938 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492a:	2b00      	cmp	r3, #0
 800492c:	d024      	beq.n	8004978 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	4798      	blx	r3
 8004936:	e01f      	b.n	8004978 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800493c:	2b00      	cmp	r3, #0
 800493e:	d01b      	beq.n	8004978 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	4798      	blx	r3
 8004948:	e016      	b.n	8004978 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004954:	2b00      	cmp	r3, #0
 8004956:	d107      	bne.n	8004968 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f022 0208 	bic.w	r2, r2, #8
 8004966:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496c:	2b00      	cmp	r3, #0
 800496e:	d003      	beq.n	8004978 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800497c:	2220      	movs	r2, #32
 800497e:	409a      	lsls	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	4013      	ands	r3, r2
 8004984:	2b00      	cmp	r3, #0
 8004986:	f000 808f 	beq.w	8004aa8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0310 	and.w	r3, r3, #16
 8004994:	2b00      	cmp	r3, #0
 8004996:	f000 8087 	beq.w	8004aa8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800499e:	2220      	movs	r2, #32
 80049a0:	409a      	lsls	r2, r3
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b05      	cmp	r3, #5
 80049b0:	d136      	bne.n	8004a20 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f022 0216 	bic.w	r2, r2, #22
 80049c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	695a      	ldr	r2, [r3, #20]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d103      	bne.n	80049e2 <HAL_DMA_IRQHandler+0x1da>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d007      	beq.n	80049f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f022 0208 	bic.w	r2, r2, #8
 80049f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049f6:	223f      	movs	r2, #63	; 0x3f
 80049f8:	409a      	lsls	r2, r3
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2201      	movs	r2, #1
 8004a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d07e      	beq.n	8004b14 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	4798      	blx	r3
        }
        return;
 8004a1e:	e079      	b.n	8004b14 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d01d      	beq.n	8004a6a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d10d      	bne.n	8004a58 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d031      	beq.n	8004aa8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	4798      	blx	r3
 8004a4c:	e02c      	b.n	8004aa8 <HAL_DMA_IRQHandler+0x2a0>
 8004a4e:	bf00      	nop
 8004a50:	20000030 	.word	0x20000030
 8004a54:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d023      	beq.n	8004aa8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	4798      	blx	r3
 8004a68:	e01e      	b.n	8004aa8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d10f      	bne.n	8004a98 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f022 0210 	bic.w	r2, r2, #16
 8004a86:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d003      	beq.n	8004aa8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d032      	beq.n	8004b16 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab4:	f003 0301 	and.w	r3, r3, #1
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d022      	beq.n	8004b02 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2205      	movs	r2, #5
 8004ac0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f022 0201 	bic.w	r2, r2, #1
 8004ad2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	60bb      	str	r3, [r7, #8]
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d307      	bcc.n	8004af0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1f2      	bne.n	8004ad4 <HAL_DMA_IRQHandler+0x2cc>
 8004aee:	e000      	b.n	8004af2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004af0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d005      	beq.n	8004b16 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	4798      	blx	r3
 8004b12:	e000      	b.n	8004b16 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004b14:	bf00      	nop
    }
  }
}
 8004b16:	3718      	adds	r7, #24
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b2a:	b2db      	uxtb	r3, r3
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
 8004b44:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b54:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	683a      	ldr	r2, [r7, #0]
 8004b5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	2b40      	cmp	r3, #64	; 0x40
 8004b64:	d108      	bne.n	8004b78 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004b76:	e007      	b.n	8004b88 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68ba      	ldr	r2, [r7, #8]
 8004b7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	60da      	str	r2, [r3, #12]
}
 8004b88:	bf00      	nop
 8004b8a:	3714      	adds	r7, #20
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	3b10      	subs	r3, #16
 8004ba4:	4a14      	ldr	r2, [pc, #80]	; (8004bf8 <DMA_CalcBaseAndBitshift+0x64>)
 8004ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8004baa:	091b      	lsrs	r3, r3, #4
 8004bac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004bae:	4a13      	ldr	r2, [pc, #76]	; (8004bfc <DMA_CalcBaseAndBitshift+0x68>)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2b03      	cmp	r3, #3
 8004bc0:	d909      	bls.n	8004bd6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004bca:	f023 0303 	bic.w	r3, r3, #3
 8004bce:	1d1a      	adds	r2, r3, #4
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	659a      	str	r2, [r3, #88]	; 0x58
 8004bd4:	e007      	b.n	8004be6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004bde:	f023 0303 	bic.w	r3, r3, #3
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3714      	adds	r7, #20
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	aaaaaaab 	.word	0xaaaaaaab
 8004bfc:	0800d9f0 	.word	0x0800d9f0

08004c00 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c10:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d11f      	bne.n	8004c5a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	2b03      	cmp	r3, #3
 8004c1e:	d856      	bhi.n	8004cce <DMA_CheckFifoParam+0xce>
 8004c20:	a201      	add	r2, pc, #4	; (adr r2, 8004c28 <DMA_CheckFifoParam+0x28>)
 8004c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c26:	bf00      	nop
 8004c28:	08004c39 	.word	0x08004c39
 8004c2c:	08004c4b 	.word	0x08004c4b
 8004c30:	08004c39 	.word	0x08004c39
 8004c34:	08004ccf 	.word	0x08004ccf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d046      	beq.n	8004cd2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c48:	e043      	b.n	8004cd2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c52:	d140      	bne.n	8004cd6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c58:	e03d      	b.n	8004cd6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c62:	d121      	bne.n	8004ca8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	2b03      	cmp	r3, #3
 8004c68:	d837      	bhi.n	8004cda <DMA_CheckFifoParam+0xda>
 8004c6a:	a201      	add	r2, pc, #4	; (adr r2, 8004c70 <DMA_CheckFifoParam+0x70>)
 8004c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c70:	08004c81 	.word	0x08004c81
 8004c74:	08004c87 	.word	0x08004c87
 8004c78:	08004c81 	.word	0x08004c81
 8004c7c:	08004c99 	.word	0x08004c99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	73fb      	strb	r3, [r7, #15]
      break;
 8004c84:	e030      	b.n	8004ce8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d025      	beq.n	8004cde <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c96:	e022      	b.n	8004cde <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ca0:	d11f      	bne.n	8004ce2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004ca6:	e01c      	b.n	8004ce2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d903      	bls.n	8004cb6 <DMA_CheckFifoParam+0xb6>
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	2b03      	cmp	r3, #3
 8004cb2:	d003      	beq.n	8004cbc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004cb4:	e018      	b.n	8004ce8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	73fb      	strb	r3, [r7, #15]
      break;
 8004cba:	e015      	b.n	8004ce8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00e      	beq.n	8004ce6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	73fb      	strb	r3, [r7, #15]
      break;
 8004ccc:	e00b      	b.n	8004ce6 <DMA_CheckFifoParam+0xe6>
      break;
 8004cce:	bf00      	nop
 8004cd0:	e00a      	b.n	8004ce8 <DMA_CheckFifoParam+0xe8>
      break;
 8004cd2:	bf00      	nop
 8004cd4:	e008      	b.n	8004ce8 <DMA_CheckFifoParam+0xe8>
      break;
 8004cd6:	bf00      	nop
 8004cd8:	e006      	b.n	8004ce8 <DMA_CheckFifoParam+0xe8>
      break;
 8004cda:	bf00      	nop
 8004cdc:	e004      	b.n	8004ce8 <DMA_CheckFifoParam+0xe8>
      break;
 8004cde:	bf00      	nop
 8004ce0:	e002      	b.n	8004ce8 <DMA_CheckFifoParam+0xe8>
      break;   
 8004ce2:	bf00      	nop
 8004ce4:	e000      	b.n	8004ce8 <DMA_CheckFifoParam+0xe8>
      break;
 8004ce6:	bf00      	nop
    }
  } 
  
  return status; 
 8004ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3714      	adds	r7, #20
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop

08004cf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b089      	sub	sp, #36	; 0x24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d02:	2300      	movs	r3, #0
 8004d04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d06:	2300      	movs	r3, #0
 8004d08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d0e:	2300      	movs	r3, #0
 8004d10:	61fb      	str	r3, [r7, #28]
 8004d12:	e16b      	b.n	8004fec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d14:	2201      	movs	r2, #1
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	4013      	ands	r3, r2
 8004d26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	f040 815a 	bne.w	8004fe6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f003 0303 	and.w	r3, r3, #3
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d005      	beq.n	8004d4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d130      	bne.n	8004dac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	005b      	lsls	r3, r3, #1
 8004d54:	2203      	movs	r2, #3
 8004d56:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5a:	43db      	mvns	r3, r3
 8004d5c:	69ba      	ldr	r2, [r7, #24]
 8004d5e:	4013      	ands	r3, r2
 8004d60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	68da      	ldr	r2, [r3, #12]
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	005b      	lsls	r3, r3, #1
 8004d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6e:	69ba      	ldr	r2, [r7, #24]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	69ba      	ldr	r2, [r7, #24]
 8004d78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d80:	2201      	movs	r2, #1
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	fa02 f303 	lsl.w	r3, r2, r3
 8004d88:	43db      	mvns	r3, r3
 8004d8a:	69ba      	ldr	r2, [r7, #24]
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	091b      	lsrs	r3, r3, #4
 8004d96:	f003 0201 	and.w	r2, r3, #1
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	69ba      	ldr	r2, [r7, #24]
 8004daa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f003 0303 	and.w	r3, r3, #3
 8004db4:	2b03      	cmp	r3, #3
 8004db6:	d017      	beq.n	8004de8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	005b      	lsls	r3, r3, #1
 8004dc2:	2203      	movs	r2, #3
 8004dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc8:	43db      	mvns	r3, r3
 8004dca:	69ba      	ldr	r2, [r7, #24]
 8004dcc:	4013      	ands	r3, r2
 8004dce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	689a      	ldr	r2, [r3, #8]
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	005b      	lsls	r3, r3, #1
 8004dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	69ba      	ldr	r2, [r7, #24]
 8004de6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f003 0303 	and.w	r3, r3, #3
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d123      	bne.n	8004e3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	08da      	lsrs	r2, r3, #3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	3208      	adds	r2, #8
 8004dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	f003 0307 	and.w	r3, r3, #7
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	220f      	movs	r2, #15
 8004e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e10:	43db      	mvns	r3, r3
 8004e12:	69ba      	ldr	r2, [r7, #24]
 8004e14:	4013      	ands	r3, r2
 8004e16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	691a      	ldr	r2, [r3, #16]
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	f003 0307 	and.w	r3, r3, #7
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	fa02 f303 	lsl.w	r3, r2, r3
 8004e28:	69ba      	ldr	r2, [r7, #24]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	08da      	lsrs	r2, r3, #3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	3208      	adds	r2, #8
 8004e36:	69b9      	ldr	r1, [r7, #24]
 8004e38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	005b      	lsls	r3, r3, #1
 8004e46:	2203      	movs	r2, #3
 8004e48:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4c:	43db      	mvns	r3, r3
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	4013      	ands	r3, r2
 8004e52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f003 0203 	and.w	r2, r3, #3
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	005b      	lsls	r3, r3, #1
 8004e60:	fa02 f303 	lsl.w	r3, r2, r3
 8004e64:	69ba      	ldr	r2, [r7, #24]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	f000 80b4 	beq.w	8004fe6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e7e:	2300      	movs	r3, #0
 8004e80:	60fb      	str	r3, [r7, #12]
 8004e82:	4b60      	ldr	r3, [pc, #384]	; (8005004 <HAL_GPIO_Init+0x30c>)
 8004e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e86:	4a5f      	ldr	r2, [pc, #380]	; (8005004 <HAL_GPIO_Init+0x30c>)
 8004e88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e8c:	6453      	str	r3, [r2, #68]	; 0x44
 8004e8e:	4b5d      	ldr	r3, [pc, #372]	; (8005004 <HAL_GPIO_Init+0x30c>)
 8004e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e96:	60fb      	str	r3, [r7, #12]
 8004e98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e9a:	4a5b      	ldr	r2, [pc, #364]	; (8005008 <HAL_GPIO_Init+0x310>)
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	089b      	lsrs	r3, r3, #2
 8004ea0:	3302      	adds	r3, #2
 8004ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	f003 0303 	and.w	r3, r3, #3
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	220f      	movs	r2, #15
 8004eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb6:	43db      	mvns	r3, r3
 8004eb8:	69ba      	ldr	r2, [r7, #24]
 8004eba:	4013      	ands	r3, r2
 8004ebc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a52      	ldr	r2, [pc, #328]	; (800500c <HAL_GPIO_Init+0x314>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d02b      	beq.n	8004f1e <HAL_GPIO_Init+0x226>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a51      	ldr	r2, [pc, #324]	; (8005010 <HAL_GPIO_Init+0x318>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d025      	beq.n	8004f1a <HAL_GPIO_Init+0x222>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a50      	ldr	r2, [pc, #320]	; (8005014 <HAL_GPIO_Init+0x31c>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d01f      	beq.n	8004f16 <HAL_GPIO_Init+0x21e>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a4f      	ldr	r2, [pc, #316]	; (8005018 <HAL_GPIO_Init+0x320>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d019      	beq.n	8004f12 <HAL_GPIO_Init+0x21a>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a4e      	ldr	r2, [pc, #312]	; (800501c <HAL_GPIO_Init+0x324>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d013      	beq.n	8004f0e <HAL_GPIO_Init+0x216>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a4d      	ldr	r2, [pc, #308]	; (8005020 <HAL_GPIO_Init+0x328>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d00d      	beq.n	8004f0a <HAL_GPIO_Init+0x212>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a4c      	ldr	r2, [pc, #304]	; (8005024 <HAL_GPIO_Init+0x32c>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d007      	beq.n	8004f06 <HAL_GPIO_Init+0x20e>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a4b      	ldr	r2, [pc, #300]	; (8005028 <HAL_GPIO_Init+0x330>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d101      	bne.n	8004f02 <HAL_GPIO_Init+0x20a>
 8004efe:	2307      	movs	r3, #7
 8004f00:	e00e      	b.n	8004f20 <HAL_GPIO_Init+0x228>
 8004f02:	2308      	movs	r3, #8
 8004f04:	e00c      	b.n	8004f20 <HAL_GPIO_Init+0x228>
 8004f06:	2306      	movs	r3, #6
 8004f08:	e00a      	b.n	8004f20 <HAL_GPIO_Init+0x228>
 8004f0a:	2305      	movs	r3, #5
 8004f0c:	e008      	b.n	8004f20 <HAL_GPIO_Init+0x228>
 8004f0e:	2304      	movs	r3, #4
 8004f10:	e006      	b.n	8004f20 <HAL_GPIO_Init+0x228>
 8004f12:	2303      	movs	r3, #3
 8004f14:	e004      	b.n	8004f20 <HAL_GPIO_Init+0x228>
 8004f16:	2302      	movs	r3, #2
 8004f18:	e002      	b.n	8004f20 <HAL_GPIO_Init+0x228>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e000      	b.n	8004f20 <HAL_GPIO_Init+0x228>
 8004f1e:	2300      	movs	r3, #0
 8004f20:	69fa      	ldr	r2, [r7, #28]
 8004f22:	f002 0203 	and.w	r2, r2, #3
 8004f26:	0092      	lsls	r2, r2, #2
 8004f28:	4093      	lsls	r3, r2
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f30:	4935      	ldr	r1, [pc, #212]	; (8005008 <HAL_GPIO_Init+0x310>)
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	089b      	lsrs	r3, r3, #2
 8004f36:	3302      	adds	r3, #2
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f3e:	4b3b      	ldr	r3, [pc, #236]	; (800502c <HAL_GPIO_Init+0x334>)
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	43db      	mvns	r3, r3
 8004f48:	69ba      	ldr	r2, [r7, #24]
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d003      	beq.n	8004f62 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004f5a:	69ba      	ldr	r2, [r7, #24]
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f62:	4a32      	ldr	r2, [pc, #200]	; (800502c <HAL_GPIO_Init+0x334>)
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f68:	4b30      	ldr	r3, [pc, #192]	; (800502c <HAL_GPIO_Init+0x334>)
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	43db      	mvns	r3, r3
 8004f72:	69ba      	ldr	r2, [r7, #24]
 8004f74:	4013      	ands	r3, r2
 8004f76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d003      	beq.n	8004f8c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004f84:	69ba      	ldr	r2, [r7, #24]
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f8c:	4a27      	ldr	r2, [pc, #156]	; (800502c <HAL_GPIO_Init+0x334>)
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f92:	4b26      	ldr	r3, [pc, #152]	; (800502c <HAL_GPIO_Init+0x334>)
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	43db      	mvns	r3, r3
 8004f9c:	69ba      	ldr	r2, [r7, #24]
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d003      	beq.n	8004fb6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004fae:	69ba      	ldr	r2, [r7, #24]
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004fb6:	4a1d      	ldr	r2, [pc, #116]	; (800502c <HAL_GPIO_Init+0x334>)
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004fbc:	4b1b      	ldr	r3, [pc, #108]	; (800502c <HAL_GPIO_Init+0x334>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	43db      	mvns	r3, r3
 8004fc6:	69ba      	ldr	r2, [r7, #24]
 8004fc8:	4013      	ands	r3, r2
 8004fca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d003      	beq.n	8004fe0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004fd8:	69ba      	ldr	r2, [r7, #24]
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004fe0:	4a12      	ldr	r2, [pc, #72]	; (800502c <HAL_GPIO_Init+0x334>)
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	3301      	adds	r3, #1
 8004fea:	61fb      	str	r3, [r7, #28]
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	2b0f      	cmp	r3, #15
 8004ff0:	f67f ae90 	bls.w	8004d14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004ff4:	bf00      	nop
 8004ff6:	bf00      	nop
 8004ff8:	3724      	adds	r7, #36	; 0x24
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	40023800 	.word	0x40023800
 8005008:	40013800 	.word	0x40013800
 800500c:	40020000 	.word	0x40020000
 8005010:	40020400 	.word	0x40020400
 8005014:	40020800 	.word	0x40020800
 8005018:	40020c00 	.word	0x40020c00
 800501c:	40021000 	.word	0x40021000
 8005020:	40021400 	.word	0x40021400
 8005024:	40021800 	.word	0x40021800
 8005028:	40021c00 	.word	0x40021c00
 800502c:	40013c00 	.word	0x40013c00

08005030 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	460b      	mov	r3, r1
 800503a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	691a      	ldr	r2, [r3, #16]
 8005040:	887b      	ldrh	r3, [r7, #2]
 8005042:	4013      	ands	r3, r2
 8005044:	2b00      	cmp	r3, #0
 8005046:	d002      	beq.n	800504e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005048:	2301      	movs	r3, #1
 800504a:	73fb      	strb	r3, [r7, #15]
 800504c:	e001      	b.n	8005052 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800504e:	2300      	movs	r3, #0
 8005050:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005052:	7bfb      	ldrb	r3, [r7, #15]
}
 8005054:	4618      	mov	r0, r3
 8005056:	3714      	adds	r7, #20
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	460b      	mov	r3, r1
 800506a:	807b      	strh	r3, [r7, #2]
 800506c:	4613      	mov	r3, r2
 800506e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005070:	787b      	ldrb	r3, [r7, #1]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005076:	887a      	ldrh	r2, [r7, #2]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800507c:	e003      	b.n	8005086 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800507e:	887b      	ldrh	r3, [r7, #2]
 8005080:	041a      	lsls	r2, r3, #16
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	619a      	str	r2, [r3, #24]
}
 8005086:	bf00      	nop
 8005088:	370c      	adds	r7, #12
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
	...

08005094 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d101      	bne.n	80050a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e12b      	b.n	80052fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d106      	bne.n	80050c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f7fe fab2 	bl	8003624 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2224      	movs	r2, #36	; 0x24
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f022 0201 	bic.w	r2, r2, #1
 80050d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80050f8:	f002 fdde 	bl	8007cb8 <HAL_RCC_GetPCLK1Freq>
 80050fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	4a81      	ldr	r2, [pc, #516]	; (8005308 <HAL_I2C_Init+0x274>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d807      	bhi.n	8005118 <HAL_I2C_Init+0x84>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	4a80      	ldr	r2, [pc, #512]	; (800530c <HAL_I2C_Init+0x278>)
 800510c:	4293      	cmp	r3, r2
 800510e:	bf94      	ite	ls
 8005110:	2301      	movls	r3, #1
 8005112:	2300      	movhi	r3, #0
 8005114:	b2db      	uxtb	r3, r3
 8005116:	e006      	b.n	8005126 <HAL_I2C_Init+0x92>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	4a7d      	ldr	r2, [pc, #500]	; (8005310 <HAL_I2C_Init+0x27c>)
 800511c:	4293      	cmp	r3, r2
 800511e:	bf94      	ite	ls
 8005120:	2301      	movls	r3, #1
 8005122:	2300      	movhi	r3, #0
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b00      	cmp	r3, #0
 8005128:	d001      	beq.n	800512e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e0e7      	b.n	80052fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	4a78      	ldr	r2, [pc, #480]	; (8005314 <HAL_I2C_Init+0x280>)
 8005132:	fba2 2303 	umull	r2, r3, r2, r3
 8005136:	0c9b      	lsrs	r3, r3, #18
 8005138:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68ba      	ldr	r2, [r7, #8]
 800514a:	430a      	orrs	r2, r1
 800514c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	6a1b      	ldr	r3, [r3, #32]
 8005154:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	4a6a      	ldr	r2, [pc, #424]	; (8005308 <HAL_I2C_Init+0x274>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d802      	bhi.n	8005168 <HAL_I2C_Init+0xd4>
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	3301      	adds	r3, #1
 8005166:	e009      	b.n	800517c <HAL_I2C_Init+0xe8>
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800516e:	fb02 f303 	mul.w	r3, r2, r3
 8005172:	4a69      	ldr	r2, [pc, #420]	; (8005318 <HAL_I2C_Init+0x284>)
 8005174:	fba2 2303 	umull	r2, r3, r2, r3
 8005178:	099b      	lsrs	r3, r3, #6
 800517a:	3301      	adds	r3, #1
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	6812      	ldr	r2, [r2, #0]
 8005180:	430b      	orrs	r3, r1
 8005182:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	69db      	ldr	r3, [r3, #28]
 800518a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800518e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	495c      	ldr	r1, [pc, #368]	; (8005308 <HAL_I2C_Init+0x274>)
 8005198:	428b      	cmp	r3, r1
 800519a:	d819      	bhi.n	80051d0 <HAL_I2C_Init+0x13c>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	1e59      	subs	r1, r3, #1
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	005b      	lsls	r3, r3, #1
 80051a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80051aa:	1c59      	adds	r1, r3, #1
 80051ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80051b0:	400b      	ands	r3, r1
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00a      	beq.n	80051cc <HAL_I2C_Init+0x138>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	1e59      	subs	r1, r3, #1
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	005b      	lsls	r3, r3, #1
 80051c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80051c4:	3301      	adds	r3, #1
 80051c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051ca:	e051      	b.n	8005270 <HAL_I2C_Init+0x1dc>
 80051cc:	2304      	movs	r3, #4
 80051ce:	e04f      	b.n	8005270 <HAL_I2C_Init+0x1dc>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d111      	bne.n	80051fc <HAL_I2C_Init+0x168>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	1e58      	subs	r0, r3, #1
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6859      	ldr	r1, [r3, #4]
 80051e0:	460b      	mov	r3, r1
 80051e2:	005b      	lsls	r3, r3, #1
 80051e4:	440b      	add	r3, r1
 80051e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80051ea:	3301      	adds	r3, #1
 80051ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	bf0c      	ite	eq
 80051f4:	2301      	moveq	r3, #1
 80051f6:	2300      	movne	r3, #0
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	e012      	b.n	8005222 <HAL_I2C_Init+0x18e>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	1e58      	subs	r0, r3, #1
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6859      	ldr	r1, [r3, #4]
 8005204:	460b      	mov	r3, r1
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	440b      	add	r3, r1
 800520a:	0099      	lsls	r1, r3, #2
 800520c:	440b      	add	r3, r1
 800520e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005212:	3301      	adds	r3, #1
 8005214:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005218:	2b00      	cmp	r3, #0
 800521a:	bf0c      	ite	eq
 800521c:	2301      	moveq	r3, #1
 800521e:	2300      	movne	r3, #0
 8005220:	b2db      	uxtb	r3, r3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d001      	beq.n	800522a <HAL_I2C_Init+0x196>
 8005226:	2301      	movs	r3, #1
 8005228:	e022      	b.n	8005270 <HAL_I2C_Init+0x1dc>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10e      	bne.n	8005250 <HAL_I2C_Init+0x1bc>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	1e58      	subs	r0, r3, #1
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6859      	ldr	r1, [r3, #4]
 800523a:	460b      	mov	r3, r1
 800523c:	005b      	lsls	r3, r3, #1
 800523e:	440b      	add	r3, r1
 8005240:	fbb0 f3f3 	udiv	r3, r0, r3
 8005244:	3301      	adds	r3, #1
 8005246:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800524a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800524e:	e00f      	b.n	8005270 <HAL_I2C_Init+0x1dc>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	1e58      	subs	r0, r3, #1
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6859      	ldr	r1, [r3, #4]
 8005258:	460b      	mov	r3, r1
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	440b      	add	r3, r1
 800525e:	0099      	lsls	r1, r3, #2
 8005260:	440b      	add	r3, r1
 8005262:	fbb0 f3f3 	udiv	r3, r0, r3
 8005266:	3301      	adds	r3, #1
 8005268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800526c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005270:	6879      	ldr	r1, [r7, #4]
 8005272:	6809      	ldr	r1, [r1, #0]
 8005274:	4313      	orrs	r3, r2
 8005276:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	69da      	ldr	r2, [r3, #28]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	431a      	orrs	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	430a      	orrs	r2, r1
 8005292:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800529e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	6911      	ldr	r1, [r2, #16]
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	68d2      	ldr	r2, [r2, #12]
 80052aa:	4311      	orrs	r1, r2
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	6812      	ldr	r2, [r2, #0]
 80052b0:	430b      	orrs	r3, r1
 80052b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	695a      	ldr	r2, [r3, #20]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	431a      	orrs	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	430a      	orrs	r2, r1
 80052ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f042 0201 	orr.w	r2, r2, #1
 80052de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2220      	movs	r2, #32
 80052ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	000186a0 	.word	0x000186a0
 800530c:	001e847f 	.word	0x001e847f
 8005310:	003d08ff 	.word	0x003d08ff
 8005314:	431bde83 	.word	0x431bde83
 8005318:	10624dd3 	.word	0x10624dd3

0800531c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b088      	sub	sp, #32
 8005320:	af02      	add	r7, sp, #8
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	607a      	str	r2, [r7, #4]
 8005326:	461a      	mov	r2, r3
 8005328:	460b      	mov	r3, r1
 800532a:	817b      	strh	r3, [r7, #10]
 800532c:	4613      	mov	r3, r2
 800532e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005330:	f7fe fbc4 	bl	8003abc <HAL_GetTick>
 8005334:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2b20      	cmp	r3, #32
 8005340:	f040 80e0 	bne.w	8005504 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	9300      	str	r3, [sp, #0]
 8005348:	2319      	movs	r3, #25
 800534a:	2201      	movs	r2, #1
 800534c:	4970      	ldr	r1, [pc, #448]	; (8005510 <HAL_I2C_Master_Transmit+0x1f4>)
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f001 feae 	bl	80070b0 <I2C_WaitOnFlagUntilTimeout>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d001      	beq.n	800535e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800535a:	2302      	movs	r3, #2
 800535c:	e0d3      	b.n	8005506 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005364:	2b01      	cmp	r3, #1
 8005366:	d101      	bne.n	800536c <HAL_I2C_Master_Transmit+0x50>
 8005368:	2302      	movs	r3, #2
 800536a:	e0cc      	b.n	8005506 <HAL_I2C_Master_Transmit+0x1ea>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0301 	and.w	r3, r3, #1
 800537e:	2b01      	cmp	r3, #1
 8005380:	d007      	beq.n	8005392 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f042 0201 	orr.w	r2, r2, #1
 8005390:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2221      	movs	r2, #33	; 0x21
 80053a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2210      	movs	r2, #16
 80053ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	893a      	ldrh	r2, [r7, #8]
 80053c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c8:	b29a      	uxth	r2, r3
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	4a50      	ldr	r2, [pc, #320]	; (8005514 <HAL_I2C_Master_Transmit+0x1f8>)
 80053d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80053d4:	8979      	ldrh	r1, [r7, #10]
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	6a3a      	ldr	r2, [r7, #32]
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f001 fd3e 	bl	8006e5c <I2C_MasterRequestWrite>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d001      	beq.n	80053ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e08d      	b.n	8005506 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ea:	2300      	movs	r3, #0
 80053ec:	613b      	str	r3, [r7, #16]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	695b      	ldr	r3, [r3, #20]
 80053f4:	613b      	str	r3, [r7, #16]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	699b      	ldr	r3, [r3, #24]
 80053fc:	613b      	str	r3, [r7, #16]
 80053fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005400:	e066      	b.n	80054d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	6a39      	ldr	r1, [r7, #32]
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f001 ff28 	bl	800725c <I2C_WaitOnTXEFlagUntilTimeout>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00d      	beq.n	800542e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005416:	2b04      	cmp	r3, #4
 8005418:	d107      	bne.n	800542a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005428:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e06b      	b.n	8005506 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005432:	781a      	ldrb	r2, [r3, #0]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543e:	1c5a      	adds	r2, r3, #1
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005448:	b29b      	uxth	r3, r3
 800544a:	3b01      	subs	r3, #1
 800544c:	b29a      	uxth	r2, r3
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005456:	3b01      	subs	r3, #1
 8005458:	b29a      	uxth	r2, r3
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	695b      	ldr	r3, [r3, #20]
 8005464:	f003 0304 	and.w	r3, r3, #4
 8005468:	2b04      	cmp	r3, #4
 800546a:	d11b      	bne.n	80054a4 <HAL_I2C_Master_Transmit+0x188>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005470:	2b00      	cmp	r3, #0
 8005472:	d017      	beq.n	80054a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005478:	781a      	ldrb	r2, [r3, #0]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005484:	1c5a      	adds	r2, r3, #1
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800548e:	b29b      	uxth	r3, r3
 8005490:	3b01      	subs	r3, #1
 8005492:	b29a      	uxth	r2, r3
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800549c:	3b01      	subs	r3, #1
 800549e:	b29a      	uxth	r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	6a39      	ldr	r1, [r7, #32]
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f001 ff18 	bl	80072de <I2C_WaitOnBTFFlagUntilTimeout>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00d      	beq.n	80054d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b8:	2b04      	cmp	r3, #4
 80054ba:	d107      	bne.n	80054cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e01a      	b.n	8005506 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d194      	bne.n	8005402 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2220      	movs	r2, #32
 80054ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005500:	2300      	movs	r3, #0
 8005502:	e000      	b.n	8005506 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005504:	2302      	movs	r3, #2
  }
}
 8005506:	4618      	mov	r0, r3
 8005508:	3718      	adds	r7, #24
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	00100002 	.word	0x00100002
 8005514:	ffff0000 	.word	0xffff0000

08005518 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8005518:	b480      	push	{r7}
 800551a:	b087      	sub	sp, #28
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	607a      	str	r2, [r7, #4]
 8005522:	461a      	mov	r2, r3
 8005524:	460b      	mov	r3, r1
 8005526:	817b      	strh	r3, [r7, #10]
 8005528:	4613      	mov	r3, r2
 800552a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800552c:	2300      	movs	r3, #0
 800552e:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005536:	b2db      	uxtb	r3, r3
 8005538:	2b20      	cmp	r3, #32
 800553a:	f040 808d 	bne.w	8005658 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800553e:	4b4a      	ldr	r3, [pc, #296]	; (8005668 <HAL_I2C_Master_Receive_IT+0x150>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	08db      	lsrs	r3, r3, #3
 8005544:	4a49      	ldr	r2, [pc, #292]	; (800566c <HAL_I2C_Master_Receive_IT+0x154>)
 8005546:	fba2 2303 	umull	r2, r3, r2, r3
 800554a:	0a1a      	lsrs	r2, r3, #8
 800554c:	4613      	mov	r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	4413      	add	r3, r2
 8005552:	009a      	lsls	r2, r3, #2
 8005554:	4413      	add	r3, r2
 8005556:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	3b01      	subs	r3, #1
 800555c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d116      	bne.n	8005592 <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2220      	movs	r2, #32
 800556e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557e:	f043 0220 	orr.w	r2, r3, #32
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e063      	b.n	800565a <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	f003 0302 	and.w	r3, r3, #2
 800559c:	2b02      	cmp	r3, #2
 800559e:	d0db      	beq.n	8005558 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d101      	bne.n	80055ae <HAL_I2C_Master_Receive_IT+0x96>
 80055aa:	2302      	movs	r3, #2
 80055ac:	e055      	b.n	800565a <HAL_I2C_Master_Receive_IT+0x142>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0301 	and.w	r3, r3, #1
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d007      	beq.n	80055d4 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f042 0201 	orr.w	r2, r2, #1
 80055d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2222      	movs	r2, #34	; 0x22
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2210      	movs	r2, #16
 80055f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	893a      	ldrh	r2, [r7, #8]
 8005604:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800560a:	b29a      	uxth	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	4a17      	ldr	r2, [pc, #92]	; (8005670 <HAL_I2C_Master_Receive_IT+0x158>)
 8005614:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8005616:	897a      	ldrh	r2, [r7, #10]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	685a      	ldr	r2, [r3, #4]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8005632:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005642:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005652:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005654:	2300      	movs	r3, #0
 8005656:	e000      	b.n	800565a <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8005658:	2302      	movs	r3, #2
  }
}
 800565a:	4618      	mov	r0, r3
 800565c:	371c      	adds	r7, #28
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	20000030 	.word	0x20000030
 800566c:	14f8b589 	.word	0x14f8b589
 8005670:	ffff0000 	.word	0xffff0000

08005674 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b08a      	sub	sp, #40	; 0x28
 8005678:	af02      	add	r7, sp, #8
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	607a      	str	r2, [r7, #4]
 800567e:	603b      	str	r3, [r7, #0]
 8005680:	460b      	mov	r3, r1
 8005682:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005684:	f7fe fa1a 	bl	8003abc <HAL_GetTick>
 8005688:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800568a:	2300      	movs	r3, #0
 800568c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b20      	cmp	r3, #32
 8005698:	f040 8111 	bne.w	80058be <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	9300      	str	r3, [sp, #0]
 80056a0:	2319      	movs	r3, #25
 80056a2:	2201      	movs	r2, #1
 80056a4:	4988      	ldr	r1, [pc, #544]	; (80058c8 <HAL_I2C_IsDeviceReady+0x254>)
 80056a6:	68f8      	ldr	r0, [r7, #12]
 80056a8:	f001 fd02 	bl	80070b0 <I2C_WaitOnFlagUntilTimeout>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d001      	beq.n	80056b6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80056b2:	2302      	movs	r3, #2
 80056b4:	e104      	b.n	80058c0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d101      	bne.n	80056c4 <HAL_I2C_IsDeviceReady+0x50>
 80056c0:	2302      	movs	r3, #2
 80056c2:	e0fd      	b.n	80058c0 <HAL_I2C_IsDeviceReady+0x24c>
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d007      	beq.n	80056ea <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f042 0201 	orr.w	r2, r2, #1
 80056e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2224      	movs	r2, #36	; 0x24
 80056fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2200      	movs	r2, #0
 8005706:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	4a70      	ldr	r2, [pc, #448]	; (80058cc <HAL_I2C_IsDeviceReady+0x258>)
 800570c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800571c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	2200      	movs	r2, #0
 8005726:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800572a:	68f8      	ldr	r0, [r7, #12]
 800572c:	f001 fcc0 	bl	80070b0 <I2C_WaitOnFlagUntilTimeout>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00d      	beq.n	8005752 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005740:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005744:	d103      	bne.n	800574e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f44f 7200 	mov.w	r2, #512	; 0x200
 800574c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e0b6      	b.n	80058c0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005752:	897b      	ldrh	r3, [r7, #10]
 8005754:	b2db      	uxtb	r3, r3
 8005756:	461a      	mov	r2, r3
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005760:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005762:	f7fe f9ab 	bl	8003abc <HAL_GetTick>
 8005766:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	f003 0302 	and.w	r3, r3, #2
 8005772:	2b02      	cmp	r3, #2
 8005774:	bf0c      	ite	eq
 8005776:	2301      	moveq	r3, #1
 8005778:	2300      	movne	r3, #0
 800577a:	b2db      	uxtb	r3, r3
 800577c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	695b      	ldr	r3, [r3, #20]
 8005784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800578c:	bf0c      	ite	eq
 800578e:	2301      	moveq	r3, #1
 8005790:	2300      	movne	r3, #0
 8005792:	b2db      	uxtb	r3, r3
 8005794:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005796:	e025      	b.n	80057e4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005798:	f7fe f990 	bl	8003abc <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	683a      	ldr	r2, [r7, #0]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d302      	bcc.n	80057ae <HAL_I2C_IsDeviceReady+0x13a>
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d103      	bne.n	80057b6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	22a0      	movs	r2, #160	; 0xa0
 80057b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	f003 0302 	and.w	r3, r3, #2
 80057c0:	2b02      	cmp	r3, #2
 80057c2:	bf0c      	ite	eq
 80057c4:	2301      	moveq	r3, #1
 80057c6:	2300      	movne	r3, #0
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057da:	bf0c      	ite	eq
 80057dc:	2301      	moveq	r3, #1
 80057de:	2300      	movne	r3, #0
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	2ba0      	cmp	r3, #160	; 0xa0
 80057ee:	d005      	beq.n	80057fc <HAL_I2C_IsDeviceReady+0x188>
 80057f0:	7dfb      	ldrb	r3, [r7, #23]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d102      	bne.n	80057fc <HAL_I2C_IsDeviceReady+0x188>
 80057f6:	7dbb      	ldrb	r3, [r7, #22]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d0cd      	beq.n	8005798 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2220      	movs	r2, #32
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	f003 0302 	and.w	r3, r3, #2
 800580e:	2b02      	cmp	r3, #2
 8005810:	d129      	bne.n	8005866 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005820:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005822:	2300      	movs	r3, #0
 8005824:	613b      	str	r3, [r7, #16]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	695b      	ldr	r3, [r3, #20]
 800582c:	613b      	str	r3, [r7, #16]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	613b      	str	r3, [r7, #16]
 8005836:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	9300      	str	r3, [sp, #0]
 800583c:	2319      	movs	r3, #25
 800583e:	2201      	movs	r2, #1
 8005840:	4921      	ldr	r1, [pc, #132]	; (80058c8 <HAL_I2C_IsDeviceReady+0x254>)
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	f001 fc34 	bl	80070b0 <I2C_WaitOnFlagUntilTimeout>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d001      	beq.n	8005852 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e036      	b.n	80058c0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2220      	movs	r2, #32
 8005856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005862:	2300      	movs	r3, #0
 8005864:	e02c      	b.n	80058c0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005874:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800587e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	9300      	str	r3, [sp, #0]
 8005884:	2319      	movs	r3, #25
 8005886:	2201      	movs	r2, #1
 8005888:	490f      	ldr	r1, [pc, #60]	; (80058c8 <HAL_I2C_IsDeviceReady+0x254>)
 800588a:	68f8      	ldr	r0, [r7, #12]
 800588c:	f001 fc10 	bl	80070b0 <I2C_WaitOnFlagUntilTimeout>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d001      	beq.n	800589a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e012      	b.n	80058c0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	3301      	adds	r3, #1
 800589e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80058a0:	69ba      	ldr	r2, [r7, #24]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	f4ff af32 	bcc.w	800570e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2220      	movs	r2, #32
 80058ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e000      	b.n	80058c0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80058be:	2302      	movs	r3, #2
  }
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3720      	adds	r7, #32
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	00100002 	.word	0x00100002
 80058cc:	ffff0000 	.word	0xffff0000

080058d0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b088      	sub	sp, #32
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80058d8:	2300      	movs	r3, #0
 80058da:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058f0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058f8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80058fa:	7bfb      	ldrb	r3, [r7, #15]
 80058fc:	2b10      	cmp	r3, #16
 80058fe:	d003      	beq.n	8005908 <HAL_I2C_EV_IRQHandler+0x38>
 8005900:	7bfb      	ldrb	r3, [r7, #15]
 8005902:	2b40      	cmp	r3, #64	; 0x40
 8005904:	f040 80c1 	bne.w	8005a8a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	699b      	ldr	r3, [r3, #24]
 800590e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b00      	cmp	r3, #0
 8005920:	d10d      	bne.n	800593e <HAL_I2C_EV_IRQHandler+0x6e>
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005928:	d003      	beq.n	8005932 <HAL_I2C_EV_IRQHandler+0x62>
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005930:	d101      	bne.n	8005936 <HAL_I2C_EV_IRQHandler+0x66>
 8005932:	2301      	movs	r3, #1
 8005934:	e000      	b.n	8005938 <HAL_I2C_EV_IRQHandler+0x68>
 8005936:	2300      	movs	r3, #0
 8005938:	2b01      	cmp	r3, #1
 800593a:	f000 8132 	beq.w	8005ba2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	f003 0301 	and.w	r3, r3, #1
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00c      	beq.n	8005962 <HAL_I2C_EV_IRQHandler+0x92>
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	0a5b      	lsrs	r3, r3, #9
 800594c:	f003 0301 	and.w	r3, r3, #1
 8005950:	2b00      	cmp	r3, #0
 8005952:	d006      	beq.n	8005962 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f001 fd64 	bl	8007422 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 fcd2 	bl	8006304 <I2C_Master_SB>
 8005960:	e092      	b.n	8005a88 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	08db      	lsrs	r3, r3, #3
 8005966:	f003 0301 	and.w	r3, r3, #1
 800596a:	2b00      	cmp	r3, #0
 800596c:	d009      	beq.n	8005982 <HAL_I2C_EV_IRQHandler+0xb2>
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	0a5b      	lsrs	r3, r3, #9
 8005972:	f003 0301 	and.w	r3, r3, #1
 8005976:	2b00      	cmp	r3, #0
 8005978:	d003      	beq.n	8005982 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 fd48 	bl	8006410 <I2C_Master_ADD10>
 8005980:	e082      	b.n	8005a88 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	085b      	lsrs	r3, r3, #1
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	2b00      	cmp	r3, #0
 800598c:	d009      	beq.n	80059a2 <HAL_I2C_EV_IRQHandler+0xd2>
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	0a5b      	lsrs	r3, r3, #9
 8005992:	f003 0301 	and.w	r3, r3, #1
 8005996:	2b00      	cmp	r3, #0
 8005998:	d003      	beq.n	80059a2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 fd62 	bl	8006464 <I2C_Master_ADDR>
 80059a0:	e072      	b.n	8005a88 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	089b      	lsrs	r3, r3, #2
 80059a6:	f003 0301 	and.w	r3, r3, #1
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d03b      	beq.n	8005a26 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059bc:	f000 80f3 	beq.w	8005ba6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	09db      	lsrs	r3, r3, #7
 80059c4:	f003 0301 	and.w	r3, r3, #1
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00f      	beq.n	80059ec <HAL_I2C_EV_IRQHandler+0x11c>
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	0a9b      	lsrs	r3, r3, #10
 80059d0:	f003 0301 	and.w	r3, r3, #1
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d009      	beq.n	80059ec <HAL_I2C_EV_IRQHandler+0x11c>
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	089b      	lsrs	r3, r3, #2
 80059dc:	f003 0301 	and.w	r3, r3, #1
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d103      	bne.n	80059ec <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 f942 	bl	8005c6e <I2C_MasterTransmit_TXE>
 80059ea:	e04d      	b.n	8005a88 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	089b      	lsrs	r3, r3, #2
 80059f0:	f003 0301 	and.w	r3, r3, #1
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	f000 80d6 	beq.w	8005ba6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	0a5b      	lsrs	r3, r3, #9
 80059fe:	f003 0301 	and.w	r3, r3, #1
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f000 80cf 	beq.w	8005ba6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005a08:	7bbb      	ldrb	r3, [r7, #14]
 8005a0a:	2b21      	cmp	r3, #33	; 0x21
 8005a0c:	d103      	bne.n	8005a16 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f9c9 	bl	8005da6 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a14:	e0c7      	b.n	8005ba6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005a16:	7bfb      	ldrb	r3, [r7, #15]
 8005a18:	2b40      	cmp	r3, #64	; 0x40
 8005a1a:	f040 80c4 	bne.w	8005ba6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 fa37 	bl	8005e92 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a24:	e0bf      	b.n	8005ba6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a34:	f000 80b7 	beq.w	8005ba6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	099b      	lsrs	r3, r3, #6
 8005a3c:	f003 0301 	and.w	r3, r3, #1
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00f      	beq.n	8005a64 <HAL_I2C_EV_IRQHandler+0x194>
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	0a9b      	lsrs	r3, r3, #10
 8005a48:	f003 0301 	and.w	r3, r3, #1
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d009      	beq.n	8005a64 <HAL_I2C_EV_IRQHandler+0x194>
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	089b      	lsrs	r3, r3, #2
 8005a54:	f003 0301 	and.w	r3, r3, #1
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d103      	bne.n	8005a64 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 faac 	bl	8005fba <I2C_MasterReceive_RXNE>
 8005a62:	e011      	b.n	8005a88 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	089b      	lsrs	r3, r3, #2
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	f000 809a 	beq.w	8005ba6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	0a5b      	lsrs	r3, r3, #9
 8005a76:	f003 0301 	and.w	r3, r3, #1
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f000 8093 	beq.w	8005ba6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 fb55 	bl	8006130 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a86:	e08e      	b.n	8005ba6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005a88:	e08d      	b.n	8005ba6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d004      	beq.n	8005a9c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	695b      	ldr	r3, [r3, #20]
 8005a98:	61fb      	str	r3, [r7, #28]
 8005a9a:	e007      	b.n	8005aac <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	085b      	lsrs	r3, r3, #1
 8005ab0:	f003 0301 	and.w	r3, r3, #1
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d012      	beq.n	8005ade <HAL_I2C_EV_IRQHandler+0x20e>
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	0a5b      	lsrs	r3, r3, #9
 8005abc:	f003 0301 	and.w	r3, r3, #1
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00c      	beq.n	8005ade <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d003      	beq.n	8005ad4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005ad4:	69b9      	ldr	r1, [r7, #24]
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 ff13 	bl	8006902 <I2C_Slave_ADDR>
 8005adc:	e066      	b.n	8005bac <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	091b      	lsrs	r3, r3, #4
 8005ae2:	f003 0301 	and.w	r3, r3, #1
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d009      	beq.n	8005afe <HAL_I2C_EV_IRQHandler+0x22e>
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	0a5b      	lsrs	r3, r3, #9
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 ff4e 	bl	8006998 <I2C_Slave_STOPF>
 8005afc:	e056      	b.n	8005bac <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005afe:	7bbb      	ldrb	r3, [r7, #14]
 8005b00:	2b21      	cmp	r3, #33	; 0x21
 8005b02:	d002      	beq.n	8005b0a <HAL_I2C_EV_IRQHandler+0x23a>
 8005b04:	7bbb      	ldrb	r3, [r7, #14]
 8005b06:	2b29      	cmp	r3, #41	; 0x29
 8005b08:	d125      	bne.n	8005b56 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	09db      	lsrs	r3, r3, #7
 8005b0e:	f003 0301 	and.w	r3, r3, #1
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00f      	beq.n	8005b36 <HAL_I2C_EV_IRQHandler+0x266>
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	0a9b      	lsrs	r3, r3, #10
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d009      	beq.n	8005b36 <HAL_I2C_EV_IRQHandler+0x266>
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	089b      	lsrs	r3, r3, #2
 8005b26:	f003 0301 	and.w	r3, r3, #1
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d103      	bne.n	8005b36 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 fe29 	bl	8006786 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b34:	e039      	b.n	8005baa <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	089b      	lsrs	r3, r3, #2
 8005b3a:	f003 0301 	and.w	r3, r3, #1
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d033      	beq.n	8005baa <HAL_I2C_EV_IRQHandler+0x2da>
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	0a5b      	lsrs	r3, r3, #9
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d02d      	beq.n	8005baa <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 fe56 	bl	8006800 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b54:	e029      	b.n	8005baa <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	099b      	lsrs	r3, r3, #6
 8005b5a:	f003 0301 	and.w	r3, r3, #1
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00f      	beq.n	8005b82 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	0a9b      	lsrs	r3, r3, #10
 8005b66:	f003 0301 	and.w	r3, r3, #1
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d009      	beq.n	8005b82 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	089b      	lsrs	r3, r3, #2
 8005b72:	f003 0301 	and.w	r3, r3, #1
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d103      	bne.n	8005b82 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 fe61 	bl	8006842 <I2C_SlaveReceive_RXNE>
 8005b80:	e014      	b.n	8005bac <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	089b      	lsrs	r3, r3, #2
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00e      	beq.n	8005bac <HAL_I2C_EV_IRQHandler+0x2dc>
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	0a5b      	lsrs	r3, r3, #9
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d008      	beq.n	8005bac <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 fe8f 	bl	80068be <I2C_SlaveReceive_BTF>
 8005ba0:	e004      	b.n	8005bac <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005ba2:	bf00      	nop
 8005ba4:	e002      	b.n	8005bac <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ba6:	bf00      	nop
 8005ba8:	e000      	b.n	8005bac <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005baa:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005bac:	3720      	adds	r7, #32
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b083      	sub	sp, #12
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005bba:	bf00      	nop
 8005bbc:	370c      	adds	r7, #12
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	b083      	sub	sp, #12
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005bce:	bf00      	nop
 8005bd0:	370c      	adds	r7, #12
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b083      	sub	sp, #12
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005be2:	bf00      	nop
 8005be4:	370c      	adds	r7, #12
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b083      	sub	sp, #12
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	70fb      	strb	r3, [r7, #3]
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005bfe:	bf00      	nop
 8005c00:	370c      	adds	r7, #12
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr

08005c0a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c0a:	b480      	push	{r7}
 8005c0c:	b083      	sub	sp, #12
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005c12:	bf00      	nop
 8005c14:	370c      	adds	r7, #12
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr

08005c1e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b083      	sub	sp, #12
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005c26:	bf00      	nop
 8005c28:	370c      	adds	r7, #12
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr

08005c32 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c32:	b480      	push	{r7}
 8005c34:	b083      	sub	sp, #12
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005c3a:	bf00      	nop
 8005c3c:	370c      	adds	r7, #12
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr

08005c46 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005c46:	b480      	push	{r7}
 8005c48:	b083      	sub	sp, #12
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005c4e:	bf00      	nop
 8005c50:	370c      	adds	r7, #12
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr

08005c5a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	b083      	sub	sp, #12
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005c62:	bf00      	nop
 8005c64:	370c      	adds	r7, #12
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr

08005c6e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b084      	sub	sp, #16
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c7c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c84:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d150      	bne.n	8005d36 <I2C_MasterTransmit_TXE+0xc8>
 8005c94:	7bfb      	ldrb	r3, [r7, #15]
 8005c96:	2b21      	cmp	r3, #33	; 0x21
 8005c98:	d14d      	bne.n	8005d36 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	2b08      	cmp	r3, #8
 8005c9e:	d01d      	beq.n	8005cdc <I2C_MasterTransmit_TXE+0x6e>
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	2b20      	cmp	r3, #32
 8005ca4:	d01a      	beq.n	8005cdc <I2C_MasterTransmit_TXE+0x6e>
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005cac:	d016      	beq.n	8005cdc <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	685a      	ldr	r2, [r3, #4]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005cbc:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2211      	movs	r2, #17
 8005cc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2220      	movs	r2, #32
 8005cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f7ff ff6c 	bl	8005bb2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005cda:	e060      	b.n	8005d9e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	685a      	ldr	r2, [r3, #4]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005cea:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cfa:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2220      	movs	r2, #32
 8005d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	2b40      	cmp	r3, #64	; 0x40
 8005d14:	d107      	bne.n	8005d26 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f7ff ff7d 	bl	8005c1e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005d24:	e03b      	b.n	8005d9e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f7ff ff3f 	bl	8005bb2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005d34:	e033      	b.n	8005d9e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005d36:	7bfb      	ldrb	r3, [r7, #15]
 8005d38:	2b21      	cmp	r3, #33	; 0x21
 8005d3a:	d005      	beq.n	8005d48 <I2C_MasterTransmit_TXE+0xda>
 8005d3c:	7bbb      	ldrb	r3, [r7, #14]
 8005d3e:	2b40      	cmp	r3, #64	; 0x40
 8005d40:	d12d      	bne.n	8005d9e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005d42:	7bfb      	ldrb	r3, [r7, #15]
 8005d44:	2b22      	cmp	r3, #34	; 0x22
 8005d46:	d12a      	bne.n	8005d9e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d108      	bne.n	8005d64 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	685a      	ldr	r2, [r3, #4]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d60:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005d62:	e01c      	b.n	8005d9e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	2b40      	cmp	r3, #64	; 0x40
 8005d6e:	d103      	bne.n	8005d78 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 f88e 	bl	8005e92 <I2C_MemoryTransmit_TXE_BTF>
}
 8005d76:	e012      	b.n	8005d9e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7c:	781a      	ldrb	r2, [r3, #0]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d88:	1c5a      	adds	r2, r3, #1
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	3b01      	subs	r3, #1
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005d9c:	e7ff      	b.n	8005d9e <I2C_MasterTransmit_TXE+0x130>
 8005d9e:	bf00      	nop
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}

08005da6 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b084      	sub	sp, #16
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db2:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	2b21      	cmp	r3, #33	; 0x21
 8005dbe:	d164      	bne.n	8005e8a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d012      	beq.n	8005df0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dce:	781a      	ldrb	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dda:	1c5a      	adds	r2, r3, #1
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	3b01      	subs	r3, #1
 8005de8:	b29a      	uxth	r2, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005dee:	e04c      	b.n	8005e8a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2b08      	cmp	r3, #8
 8005df4:	d01d      	beq.n	8005e32 <I2C_MasterTransmit_BTF+0x8c>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2b20      	cmp	r3, #32
 8005dfa:	d01a      	beq.n	8005e32 <I2C_MasterTransmit_BTF+0x8c>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e02:	d016      	beq.n	8005e32 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	685a      	ldr	r2, [r3, #4]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e12:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2211      	movs	r2, #17
 8005e18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2220      	movs	r2, #32
 8005e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f7ff fec1 	bl	8005bb2 <HAL_I2C_MasterTxCpltCallback>
}
 8005e30:	e02b      	b.n	8005e8a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	685a      	ldr	r2, [r3, #4]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e40:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e50:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2220      	movs	r2, #32
 8005e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	2b40      	cmp	r3, #64	; 0x40
 8005e6a:	d107      	bne.n	8005e7c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f7ff fed2 	bl	8005c1e <HAL_I2C_MemTxCpltCallback>
}
 8005e7a:	e006      	b.n	8005e8a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f7ff fe94 	bl	8005bb2 <HAL_I2C_MasterTxCpltCallback>
}
 8005e8a:	bf00      	nop
 8005e8c:	3710      	adds	r7, #16
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b084      	sub	sp, #16
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ea0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d11d      	bne.n	8005ee6 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d10b      	bne.n	8005eca <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eb6:	b2da      	uxtb	r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ec2:	1c9a      	adds	r2, r3, #2
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005ec8:	e073      	b.n	8005fb2 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	121b      	asrs	r3, r3, #8
 8005ed2:	b2da      	uxtb	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ede:	1c5a      	adds	r2, r3, #1
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005ee4:	e065      	b.n	8005fb2 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d10b      	bne.n	8005f06 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ef2:	b2da      	uxtb	r2, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005efe:	1c5a      	adds	r2, r3, #1
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005f04:	e055      	b.n	8005fb2 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d151      	bne.n	8005fb2 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005f0e:	7bfb      	ldrb	r3, [r7, #15]
 8005f10:	2b22      	cmp	r3, #34	; 0x22
 8005f12:	d10d      	bne.n	8005f30 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f22:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f28:	1c5a      	adds	r2, r3, #1
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005f2e:	e040      	b.n	8005fb2 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d015      	beq.n	8005f66 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005f3a:	7bfb      	ldrb	r3, [r7, #15]
 8005f3c:	2b21      	cmp	r3, #33	; 0x21
 8005f3e:	d112      	bne.n	8005f66 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f44:	781a      	ldrb	r2, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f50:	1c5a      	adds	r2, r3, #1
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005f64:	e025      	b.n	8005fb2 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d120      	bne.n	8005fb2 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005f70:	7bfb      	ldrb	r3, [r7, #15]
 8005f72:	2b21      	cmp	r3, #33	; 0x21
 8005f74:	d11d      	bne.n	8005fb2 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f84:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f94:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2220      	movs	r2, #32
 8005fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f7ff fe36 	bl	8005c1e <HAL_I2C_MemTxCpltCallback>
}
 8005fb2:	bf00      	nop
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b084      	sub	sp, #16
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	2b22      	cmp	r3, #34	; 0x22
 8005fcc:	f040 80ac 	bne.w	8006128 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2b03      	cmp	r3, #3
 8005fdc:	d921      	bls.n	8006022 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	691a      	ldr	r2, [r3, #16]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe8:	b2d2      	uxtb	r2, r2
 8005fea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff0:	1c5a      	adds	r2, r3, #1
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	3b01      	subs	r3, #1
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006008:	b29b      	uxth	r3, r3
 800600a:	2b03      	cmp	r3, #3
 800600c:	f040 808c 	bne.w	8006128 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	685a      	ldr	r2, [r3, #4]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800601e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006020:	e082      	b.n	8006128 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006026:	2b02      	cmp	r3, #2
 8006028:	d075      	beq.n	8006116 <I2C_MasterReceive_RXNE+0x15c>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2b01      	cmp	r3, #1
 800602e:	d002      	beq.n	8006036 <I2C_MasterReceive_RXNE+0x7c>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d16f      	bne.n	8006116 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f001 f992 	bl	8007360 <I2C_WaitOnSTOPRequestThroughIT>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d142      	bne.n	80060c8 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006050:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	685a      	ldr	r2, [r3, #4]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006060:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	691a      	ldr	r2, [r3, #16]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606c:	b2d2      	uxtb	r2, r2
 800606e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006074:	1c5a      	adds	r2, r3, #1
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800607e:	b29b      	uxth	r3, r3
 8006080:	3b01      	subs	r3, #1
 8006082:	b29a      	uxth	r2, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2220      	movs	r2, #32
 800608c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006096:	b2db      	uxtb	r3, r3
 8006098:	2b40      	cmp	r3, #64	; 0x40
 800609a:	d10a      	bne.n	80060b2 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f7ff fdc1 	bl	8005c32 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80060b0:	e03a      	b.n	8006128 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2212      	movs	r2, #18
 80060be:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f7fb fce5 	bl	8001a90 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80060c6:	e02f      	b.n	8006128 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	685a      	ldr	r2, [r3, #4]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80060d6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	691a      	ldr	r2, [r3, #16]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e2:	b2d2      	uxtb	r2, r2
 80060e4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ea:	1c5a      	adds	r2, r3, #1
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	3b01      	subs	r3, #1
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2220      	movs	r2, #32
 8006102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f7ff fd99 	bl	8005c46 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006114:	e008      	b.n	8006128 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006124:	605a      	str	r2, [r3, #4]
}
 8006126:	e7ff      	b.n	8006128 <I2C_MasterReceive_RXNE+0x16e>
 8006128:	bf00      	nop
 800612a:	3710      	adds	r7, #16
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006142:	b29b      	uxth	r3, r3
 8006144:	2b04      	cmp	r3, #4
 8006146:	d11b      	bne.n	8006180 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	685a      	ldr	r2, [r3, #4]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006156:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	691a      	ldr	r2, [r3, #16]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006162:	b2d2      	uxtb	r2, r2
 8006164:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616a:	1c5a      	adds	r2, r3, #1
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006174:	b29b      	uxth	r3, r3
 8006176:	3b01      	subs	r3, #1
 8006178:	b29a      	uxth	r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800617e:	e0bd      	b.n	80062fc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006184:	b29b      	uxth	r3, r3
 8006186:	2b03      	cmp	r3, #3
 8006188:	d129      	bne.n	80061de <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	685a      	ldr	r2, [r3, #4]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006198:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2b04      	cmp	r3, #4
 800619e:	d00a      	beq.n	80061b6 <I2C_MasterReceive_BTF+0x86>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d007      	beq.n	80061b6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061b4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	691a      	ldr	r2, [r3, #16]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c0:	b2d2      	uxtb	r2, r2
 80061c2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c8:	1c5a      	adds	r2, r3, #1
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	3b01      	subs	r3, #1
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80061dc:	e08e      	b.n	80062fc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	2b02      	cmp	r3, #2
 80061e6:	d176      	bne.n	80062d6 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d002      	beq.n	80061f4 <I2C_MasterReceive_BTF+0xc4>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2b10      	cmp	r3, #16
 80061f2:	d108      	bne.n	8006206 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006202:	601a      	str	r2, [r3, #0]
 8006204:	e019      	b.n	800623a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2b04      	cmp	r3, #4
 800620a:	d002      	beq.n	8006212 <I2C_MasterReceive_BTF+0xe2>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2b02      	cmp	r3, #2
 8006210:	d108      	bne.n	8006224 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006220:	601a      	str	r2, [r3, #0]
 8006222:	e00a      	b.n	800623a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2b10      	cmp	r3, #16
 8006228:	d007      	beq.n	800623a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006238:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	691a      	ldr	r2, [r3, #16]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006244:	b2d2      	uxtb	r2, r2
 8006246:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624c:	1c5a      	adds	r2, r3, #1
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006256:	b29b      	uxth	r3, r3
 8006258:	3b01      	subs	r3, #1
 800625a:	b29a      	uxth	r2, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	691a      	ldr	r2, [r3, #16]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626a:	b2d2      	uxtb	r2, r2
 800626c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006272:	1c5a      	adds	r2, r3, #1
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800627c:	b29b      	uxth	r3, r3
 800627e:	3b01      	subs	r3, #1
 8006280:	b29a      	uxth	r2, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	685a      	ldr	r2, [r3, #4]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006294:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2220      	movs	r2, #32
 800629a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	2b40      	cmp	r3, #64	; 0x40
 80062a8:	d10a      	bne.n	80062c0 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f7ff fcba 	bl	8005c32 <HAL_I2C_MemRxCpltCallback>
}
 80062be:	e01d      	b.n	80062fc <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2212      	movs	r2, #18
 80062cc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f7fb fbde 	bl	8001a90 <HAL_I2C_MasterRxCpltCallback>
}
 80062d4:	e012      	b.n	80062fc <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	691a      	ldr	r2, [r3, #16]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e0:	b2d2      	uxtb	r2, r2
 80062e2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e8:	1c5a      	adds	r2, r3, #1
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	3b01      	subs	r3, #1
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80062fc:	bf00      	nop
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006312:	b2db      	uxtb	r3, r3
 8006314:	2b40      	cmp	r3, #64	; 0x40
 8006316:	d117      	bne.n	8006348 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800631c:	2b00      	cmp	r3, #0
 800631e:	d109      	bne.n	8006334 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006324:	b2db      	uxtb	r3, r3
 8006326:	461a      	mov	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006330:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006332:	e067      	b.n	8006404 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006338:	b2db      	uxtb	r3, r3
 800633a:	f043 0301 	orr.w	r3, r3, #1
 800633e:	b2da      	uxtb	r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	611a      	str	r2, [r3, #16]
}
 8006346:	e05d      	b.n	8006404 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006350:	d133      	bne.n	80063ba <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006358:	b2db      	uxtb	r3, r3
 800635a:	2b21      	cmp	r3, #33	; 0x21
 800635c:	d109      	bne.n	8006372 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006362:	b2db      	uxtb	r3, r3
 8006364:	461a      	mov	r2, r3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800636e:	611a      	str	r2, [r3, #16]
 8006370:	e008      	b.n	8006384 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006376:	b2db      	uxtb	r3, r3
 8006378:	f043 0301 	orr.w	r3, r3, #1
 800637c:	b2da      	uxtb	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006388:	2b00      	cmp	r3, #0
 800638a:	d004      	beq.n	8006396 <I2C_Master_SB+0x92>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006392:	2b00      	cmp	r3, #0
 8006394:	d108      	bne.n	80063a8 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639a:	2b00      	cmp	r3, #0
 800639c:	d032      	beq.n	8006404 <I2C_Master_SB+0x100>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d02d      	beq.n	8006404 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	685a      	ldr	r2, [r3, #4]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063b6:	605a      	str	r2, [r3, #4]
}
 80063b8:	e024      	b.n	8006404 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d10e      	bne.n	80063e0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	11db      	asrs	r3, r3, #7
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	f003 0306 	and.w	r3, r3, #6
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	f063 030f 	orn	r3, r3, #15
 80063d6:	b2da      	uxtb	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	611a      	str	r2, [r3, #16]
}
 80063de:	e011      	b.n	8006404 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d10d      	bne.n	8006404 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	11db      	asrs	r3, r3, #7
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	f003 0306 	and.w	r3, r3, #6
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	f063 030e 	orn	r3, r3, #14
 80063fc:	b2da      	uxtb	r2, r3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	611a      	str	r2, [r3, #16]
}
 8006404:	bf00      	nop
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800641c:	b2da      	uxtb	r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006428:	2b00      	cmp	r3, #0
 800642a:	d004      	beq.n	8006436 <I2C_Master_ADD10+0x26>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006432:	2b00      	cmp	r3, #0
 8006434:	d108      	bne.n	8006448 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00c      	beq.n	8006458 <I2C_Master_ADD10+0x48>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006444:	2b00      	cmp	r3, #0
 8006446:	d007      	beq.n	8006458 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	685a      	ldr	r2, [r3, #4]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006456:	605a      	str	r2, [r3, #4]
  }
}
 8006458:	bf00      	nop
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006464:	b480      	push	{r7}
 8006466:	b091      	sub	sp, #68	; 0x44
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006472:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006480:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006488:	b2db      	uxtb	r3, r3
 800648a:	2b22      	cmp	r3, #34	; 0x22
 800648c:	f040 8169 	bne.w	8006762 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006494:	2b00      	cmp	r3, #0
 8006496:	d10f      	bne.n	80064b8 <I2C_Master_ADDR+0x54>
 8006498:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800649c:	2b40      	cmp	r3, #64	; 0x40
 800649e:	d10b      	bne.n	80064b8 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064a0:	2300      	movs	r3, #0
 80064a2:	633b      	str	r3, [r7, #48]	; 0x30
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	695b      	ldr	r3, [r3, #20]
 80064aa:	633b      	str	r3, [r7, #48]	; 0x30
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	633b      	str	r3, [r7, #48]	; 0x30
 80064b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b6:	e160      	b.n	800677a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d11d      	bne.n	80064fc <I2C_Master_ADDR+0x98>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80064c8:	d118      	bne.n	80064fc <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064ca:	2300      	movs	r3, #0
 80064cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	695b      	ldr	r3, [r3, #20]
 80064d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	699b      	ldr	r3, [r3, #24]
 80064dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064de:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064ee:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064f4:	1c5a      	adds	r2, r3, #1
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	651a      	str	r2, [r3, #80]	; 0x50
 80064fa:	e13e      	b.n	800677a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006500:	b29b      	uxth	r3, r3
 8006502:	2b00      	cmp	r3, #0
 8006504:	d113      	bne.n	800652e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006506:	2300      	movs	r3, #0
 8006508:	62bb      	str	r3, [r7, #40]	; 0x28
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	695b      	ldr	r3, [r3, #20]
 8006510:	62bb      	str	r3, [r7, #40]	; 0x28
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	699b      	ldr	r3, [r3, #24]
 8006518:	62bb      	str	r3, [r7, #40]	; 0x28
 800651a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800652a:	601a      	str	r2, [r3, #0]
 800652c:	e115      	b.n	800675a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006532:	b29b      	uxth	r3, r3
 8006534:	2b01      	cmp	r3, #1
 8006536:	f040 808a 	bne.w	800664e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800653a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800653c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006540:	d137      	bne.n	80065b2 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006550:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800655c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006560:	d113      	bne.n	800658a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006570:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006572:	2300      	movs	r3, #0
 8006574:	627b      	str	r3, [r7, #36]	; 0x24
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	695b      	ldr	r3, [r3, #20]
 800657c:	627b      	str	r3, [r7, #36]	; 0x24
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	627b      	str	r3, [r7, #36]	; 0x24
 8006586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006588:	e0e7      	b.n	800675a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800658a:	2300      	movs	r3, #0
 800658c:	623b      	str	r3, [r7, #32]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	695b      	ldr	r3, [r3, #20]
 8006594:	623b      	str	r3, [r7, #32]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	699b      	ldr	r3, [r3, #24]
 800659c:	623b      	str	r3, [r7, #32]
 800659e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065ae:	601a      	str	r2, [r3, #0]
 80065b0:	e0d3      	b.n	800675a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80065b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b4:	2b08      	cmp	r3, #8
 80065b6:	d02e      	beq.n	8006616 <I2C_Master_ADDR+0x1b2>
 80065b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ba:	2b20      	cmp	r3, #32
 80065bc:	d02b      	beq.n	8006616 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80065be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065c0:	2b12      	cmp	r3, #18
 80065c2:	d102      	bne.n	80065ca <I2C_Master_ADDR+0x166>
 80065c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d125      	bne.n	8006616 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80065ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065cc:	2b04      	cmp	r3, #4
 80065ce:	d00e      	beq.n	80065ee <I2C_Master_ADDR+0x18a>
 80065d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d00b      	beq.n	80065ee <I2C_Master_ADDR+0x18a>
 80065d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d8:	2b10      	cmp	r3, #16
 80065da:	d008      	beq.n	80065ee <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065ea:	601a      	str	r2, [r3, #0]
 80065ec:	e007      	b.n	80065fe <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80065fc:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065fe:	2300      	movs	r3, #0
 8006600:	61fb      	str	r3, [r7, #28]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	695b      	ldr	r3, [r3, #20]
 8006608:	61fb      	str	r3, [r7, #28]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	61fb      	str	r3, [r7, #28]
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	e0a1      	b.n	800675a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006624:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006626:	2300      	movs	r3, #0
 8006628:	61bb      	str	r3, [r7, #24]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	695b      	ldr	r3, [r3, #20]
 8006630:	61bb      	str	r3, [r7, #24]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	699b      	ldr	r3, [r3, #24]
 8006638:	61bb      	str	r3, [r7, #24]
 800663a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800664a:	601a      	str	r2, [r3, #0]
 800664c:	e085      	b.n	800675a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006652:	b29b      	uxth	r3, r3
 8006654:	2b02      	cmp	r3, #2
 8006656:	d14d      	bne.n	80066f4 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800665a:	2b04      	cmp	r3, #4
 800665c:	d016      	beq.n	800668c <I2C_Master_ADDR+0x228>
 800665e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006660:	2b02      	cmp	r3, #2
 8006662:	d013      	beq.n	800668c <I2C_Master_ADDR+0x228>
 8006664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006666:	2b10      	cmp	r3, #16
 8006668:	d010      	beq.n	800668c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006678:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006688:	601a      	str	r2, [r3, #0]
 800668a:	e007      	b.n	800669c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800669a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066aa:	d117      	bne.n	80066dc <I2C_Master_ADDR+0x278>
 80066ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80066b2:	d00b      	beq.n	80066cc <I2C_Master_ADDR+0x268>
 80066b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d008      	beq.n	80066cc <I2C_Master_ADDR+0x268>
 80066ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066bc:	2b08      	cmp	r3, #8
 80066be:	d005      	beq.n	80066cc <I2C_Master_ADDR+0x268>
 80066c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c2:	2b10      	cmp	r3, #16
 80066c4:	d002      	beq.n	80066cc <I2C_Master_ADDR+0x268>
 80066c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c8:	2b20      	cmp	r3, #32
 80066ca:	d107      	bne.n	80066dc <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	685a      	ldr	r2, [r3, #4]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80066da:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066dc:	2300      	movs	r3, #0
 80066de:	617b      	str	r3, [r7, #20]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	695b      	ldr	r3, [r3, #20]
 80066e6:	617b      	str	r3, [r7, #20]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	699b      	ldr	r3, [r3, #24]
 80066ee:	617b      	str	r3, [r7, #20]
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	e032      	b.n	800675a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006702:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800670e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006712:	d117      	bne.n	8006744 <I2C_Master_ADDR+0x2e0>
 8006714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006716:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800671a:	d00b      	beq.n	8006734 <I2C_Master_ADDR+0x2d0>
 800671c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800671e:	2b01      	cmp	r3, #1
 8006720:	d008      	beq.n	8006734 <I2C_Master_ADDR+0x2d0>
 8006722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006724:	2b08      	cmp	r3, #8
 8006726:	d005      	beq.n	8006734 <I2C_Master_ADDR+0x2d0>
 8006728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672a:	2b10      	cmp	r3, #16
 800672c:	d002      	beq.n	8006734 <I2C_Master_ADDR+0x2d0>
 800672e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006730:	2b20      	cmp	r3, #32
 8006732:	d107      	bne.n	8006744 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	685a      	ldr	r2, [r3, #4]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006742:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006744:	2300      	movs	r3, #0
 8006746:	613b      	str	r3, [r7, #16]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	695b      	ldr	r3, [r3, #20]
 800674e:	613b      	str	r3, [r7, #16]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	699b      	ldr	r3, [r3, #24]
 8006756:	613b      	str	r3, [r7, #16]
 8006758:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006760:	e00b      	b.n	800677a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006762:	2300      	movs	r3, #0
 8006764:	60fb      	str	r3, [r7, #12]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	695b      	ldr	r3, [r3, #20]
 800676c:	60fb      	str	r3, [r7, #12]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	60fb      	str	r3, [r7, #12]
 8006776:	68fb      	ldr	r3, [r7, #12]
}
 8006778:	e7ff      	b.n	800677a <I2C_Master_ADDR+0x316>
 800677a:	bf00      	nop
 800677c:	3744      	adds	r7, #68	; 0x44
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr

08006786 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006786:	b580      	push	{r7, lr}
 8006788:	b084      	sub	sp, #16
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006794:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800679a:	b29b      	uxth	r3, r3
 800679c:	2b00      	cmp	r3, #0
 800679e:	d02b      	beq.n	80067f8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a4:	781a      	ldrb	r2, [r3, #0]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b0:	1c5a      	adds	r2, r3, #1
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	3b01      	subs	r3, #1
 80067be:	b29a      	uxth	r2, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d114      	bne.n	80067f8 <I2C_SlaveTransmit_TXE+0x72>
 80067ce:	7bfb      	ldrb	r3, [r7, #15]
 80067d0:	2b29      	cmp	r3, #41	; 0x29
 80067d2:	d111      	bne.n	80067f8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	685a      	ldr	r2, [r3, #4]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067e2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2221      	movs	r2, #33	; 0x21
 80067e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2228      	movs	r2, #40	; 0x28
 80067ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f7ff f9e7 	bl	8005bc6 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80067f8:	bf00      	nop
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800680c:	b29b      	uxth	r3, r3
 800680e:	2b00      	cmp	r3, #0
 8006810:	d011      	beq.n	8006836 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006816:	781a      	ldrb	r2, [r3, #0]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006822:	1c5a      	adds	r2, r3, #1
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800682c:	b29b      	uxth	r3, r3
 800682e:	3b01      	subs	r3, #1
 8006830:	b29a      	uxth	r2, r3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006836:	bf00      	nop
 8006838:	370c      	adds	r7, #12
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr

08006842 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006842:	b580      	push	{r7, lr}
 8006844:	b084      	sub	sp, #16
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006850:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006856:	b29b      	uxth	r3, r3
 8006858:	2b00      	cmp	r3, #0
 800685a:	d02c      	beq.n	80068b6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	691a      	ldr	r2, [r3, #16]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006866:	b2d2      	uxtb	r2, r2
 8006868:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686e:	1c5a      	adds	r2, r3, #1
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006878:	b29b      	uxth	r3, r3
 800687a:	3b01      	subs	r3, #1
 800687c:	b29a      	uxth	r2, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006886:	b29b      	uxth	r3, r3
 8006888:	2b00      	cmp	r3, #0
 800688a:	d114      	bne.n	80068b6 <I2C_SlaveReceive_RXNE+0x74>
 800688c:	7bfb      	ldrb	r3, [r7, #15]
 800688e:	2b2a      	cmp	r3, #42	; 0x2a
 8006890:	d111      	bne.n	80068b6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	685a      	ldr	r2, [r3, #4]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068a0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2222      	movs	r2, #34	; 0x22
 80068a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2228      	movs	r2, #40	; 0x28
 80068ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f7ff f992 	bl	8005bda <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80068b6:	bf00      	nop
 80068b8:	3710      	adds	r7, #16
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}

080068be <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80068be:	b480      	push	{r7}
 80068c0:	b083      	sub	sp, #12
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d012      	beq.n	80068f6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	691a      	ldr	r2, [r3, #16]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068da:	b2d2      	uxtb	r2, r2
 80068dc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e2:	1c5a      	adds	r2, r3, #1
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	3b01      	subs	r3, #1
 80068f0:	b29a      	uxth	r2, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80068f6:	bf00      	nop
 80068f8:	370c      	adds	r7, #12
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr

08006902 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006902:	b580      	push	{r7, lr}
 8006904:	b084      	sub	sp, #16
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
 800690a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800690c:	2300      	movs	r3, #0
 800690e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006916:	b2db      	uxtb	r3, r3
 8006918:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800691c:	2b28      	cmp	r3, #40	; 0x28
 800691e:	d127      	bne.n	8006970 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	685a      	ldr	r2, [r3, #4]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800692e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	089b      	lsrs	r3, r3, #2
 8006934:	f003 0301 	and.w	r3, r3, #1
 8006938:	2b00      	cmp	r3, #0
 800693a:	d101      	bne.n	8006940 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800693c:	2301      	movs	r3, #1
 800693e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	09db      	lsrs	r3, r3, #7
 8006944:	f003 0301 	and.w	r3, r3, #1
 8006948:	2b00      	cmp	r3, #0
 800694a:	d103      	bne.n	8006954 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	81bb      	strh	r3, [r7, #12]
 8006952:	e002      	b.n	800695a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	699b      	ldr	r3, [r3, #24]
 8006958:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006962:	89ba      	ldrh	r2, [r7, #12]
 8006964:	7bfb      	ldrb	r3, [r7, #15]
 8006966:	4619      	mov	r1, r3
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f7ff f940 	bl	8005bee <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800696e:	e00e      	b.n	800698e <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006970:	2300      	movs	r3, #0
 8006972:	60bb      	str	r3, [r7, #8]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	695b      	ldr	r3, [r3, #20]
 800697a:	60bb      	str	r3, [r7, #8]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	60bb      	str	r3, [r7, #8]
 8006984:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800698e:	bf00      	nop
 8006990:	3710      	adds	r7, #16
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
	...

08006998 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069a6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	685a      	ldr	r2, [r3, #4]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80069b6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80069b8:	2300      	movs	r3, #0
 80069ba:	60bb      	str	r3, [r7, #8]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	60bb      	str	r3, [r7, #8]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f042 0201 	orr.w	r2, r2, #1
 80069d2:	601a      	str	r2, [r3, #0]
 80069d4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069e4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069f4:	d172      	bne.n	8006adc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80069f6:	7bfb      	ldrb	r3, [r7, #15]
 80069f8:	2b22      	cmp	r3, #34	; 0x22
 80069fa:	d002      	beq.n	8006a02 <I2C_Slave_STOPF+0x6a>
 80069fc:	7bfb      	ldrb	r3, [r7, #15]
 80069fe:	2b2a      	cmp	r3, #42	; 0x2a
 8006a00:	d135      	bne.n	8006a6e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	b29a      	uxth	r2, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d005      	beq.n	8006a26 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1e:	f043 0204 	orr.w	r2, r3, #4
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	685a      	ldr	r2, [r3, #4]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a34:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7fe f86e 	bl	8004b1c <HAL_DMA_GetState>
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d049      	beq.n	8006ada <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a4a:	4a69      	ldr	r2, [pc, #420]	; (8006bf0 <I2C_Slave_STOPF+0x258>)
 8006a4c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7fd feb6 	bl	80047c4 <HAL_DMA_Abort_IT>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d03d      	beq.n	8006ada <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006a68:	4610      	mov	r0, r2
 8006a6a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006a6c:	e035      	b.n	8006ada <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	b29a      	uxth	r2, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d005      	beq.n	8006a92 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8a:	f043 0204 	orr.w	r2, r3, #4
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	685a      	ldr	r2, [r3, #4]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006aa0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7fe f838 	bl	8004b1c <HAL_DMA_GetState>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d014      	beq.n	8006adc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ab6:	4a4e      	ldr	r2, [pc, #312]	; (8006bf0 <I2C_Slave_STOPF+0x258>)
 8006ab8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7fd fe80 	bl	80047c4 <HAL_DMA_Abort_IT>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d008      	beq.n	8006adc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006ad4:	4610      	mov	r0, r2
 8006ad6:	4798      	blx	r3
 8006ad8:	e000      	b.n	8006adc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006ada:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d03e      	beq.n	8006b64 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	695b      	ldr	r3, [r3, #20]
 8006aec:	f003 0304 	and.w	r3, r3, #4
 8006af0:	2b04      	cmp	r3, #4
 8006af2:	d112      	bne.n	8006b1a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	691a      	ldr	r2, [r3, #16]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afe:	b2d2      	uxtb	r2, r2
 8006b00:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b06:	1c5a      	adds	r2, r3, #1
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	3b01      	subs	r3, #1
 8006b14:	b29a      	uxth	r2, r3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	695b      	ldr	r3, [r3, #20]
 8006b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b24:	2b40      	cmp	r3, #64	; 0x40
 8006b26:	d112      	bne.n	8006b4e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	691a      	ldr	r2, [r3, #16]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b32:	b2d2      	uxtb	r2, r2
 8006b34:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3a:	1c5a      	adds	r2, r3, #1
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	3b01      	subs	r3, #1
 8006b48:	b29a      	uxth	r2, r3
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d005      	beq.n	8006b64 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5c:	f043 0204 	orr.w	r2, r3, #4
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d003      	beq.n	8006b74 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 f843 	bl	8006bf8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006b72:	e039      	b.n	8006be8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006b74:	7bfb      	ldrb	r3, [r7, #15]
 8006b76:	2b2a      	cmp	r3, #42	; 0x2a
 8006b78:	d109      	bne.n	8006b8e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2228      	movs	r2, #40	; 0x28
 8006b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f7ff f826 	bl	8005bda <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	2b28      	cmp	r3, #40	; 0x28
 8006b98:	d111      	bne.n	8006bbe <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a15      	ldr	r2, [pc, #84]	; (8006bf4 <I2C_Slave_STOPF+0x25c>)
 8006b9e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2220      	movs	r2, #32
 8006baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f7ff f827 	bl	8005c0a <HAL_I2C_ListenCpltCallback>
}
 8006bbc:	e014      	b.n	8006be8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc2:	2b22      	cmp	r3, #34	; 0x22
 8006bc4:	d002      	beq.n	8006bcc <I2C_Slave_STOPF+0x234>
 8006bc6:	7bfb      	ldrb	r3, [r7, #15]
 8006bc8:	2b22      	cmp	r3, #34	; 0x22
 8006bca:	d10d      	bne.n	8006be8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2220      	movs	r2, #32
 8006bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f7fe fff9 	bl	8005bda <HAL_I2C_SlaveRxCpltCallback>
}
 8006be8:	bf00      	nop
 8006bea:	3710      	adds	r7, #16
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}
 8006bf0:	08006f61 	.word	0x08006f61
 8006bf4:	ffff0000 	.word	0xffff0000

08006bf8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c06:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c0e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006c10:	7bbb      	ldrb	r3, [r7, #14]
 8006c12:	2b10      	cmp	r3, #16
 8006c14:	d002      	beq.n	8006c1c <I2C_ITError+0x24>
 8006c16:	7bbb      	ldrb	r3, [r7, #14]
 8006c18:	2b40      	cmp	r3, #64	; 0x40
 8006c1a:	d10a      	bne.n	8006c32 <I2C_ITError+0x3a>
 8006c1c:	7bfb      	ldrb	r3, [r7, #15]
 8006c1e:	2b22      	cmp	r3, #34	; 0x22
 8006c20:	d107      	bne.n	8006c32 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c30:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006c32:	7bfb      	ldrb	r3, [r7, #15]
 8006c34:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006c38:	2b28      	cmp	r3, #40	; 0x28
 8006c3a:	d107      	bne.n	8006c4c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2228      	movs	r2, #40	; 0x28
 8006c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006c4a:	e015      	b.n	8006c78 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c5a:	d00a      	beq.n	8006c72 <I2C_ITError+0x7a>
 8006c5c:	7bfb      	ldrb	r3, [r7, #15]
 8006c5e:	2b60      	cmp	r3, #96	; 0x60
 8006c60:	d007      	beq.n	8006c72 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2220      	movs	r2, #32
 8006c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c86:	d162      	bne.n	8006d4e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	685a      	ldr	r2, [r3, #4]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c96:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d020      	beq.n	8006ce8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006caa:	4a6a      	ldr	r2, [pc, #424]	; (8006e54 <I2C_ITError+0x25c>)
 8006cac:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f7fd fd86 	bl	80047c4 <HAL_DMA_Abort_IT>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	f000 8089 	beq.w	8006dd2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f022 0201 	bic.w	r2, r2, #1
 8006cce:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2220      	movs	r2, #32
 8006cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006ce2:	4610      	mov	r0, r2
 8006ce4:	4798      	blx	r3
 8006ce6:	e074      	b.n	8006dd2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cec:	4a59      	ldr	r2, [pc, #356]	; (8006e54 <I2C_ITError+0x25c>)
 8006cee:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f7fd fd65 	bl	80047c4 <HAL_DMA_Abort_IT>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d068      	beq.n	8006dd2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	695b      	ldr	r3, [r3, #20]
 8006d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d0a:	2b40      	cmp	r3, #64	; 0x40
 8006d0c:	d10b      	bne.n	8006d26 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	691a      	ldr	r2, [r3, #16]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d18:	b2d2      	uxtb	r2, r2
 8006d1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d20:	1c5a      	adds	r2, r3, #1
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f022 0201 	bic.w	r2, r2, #1
 8006d34:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2220      	movs	r2, #32
 8006d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006d48:	4610      	mov	r0, r2
 8006d4a:	4798      	blx	r3
 8006d4c:	e041      	b.n	8006dd2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	2b60      	cmp	r3, #96	; 0x60
 8006d58:	d125      	bne.n	8006da6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2220      	movs	r2, #32
 8006d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	695b      	ldr	r3, [r3, #20]
 8006d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d72:	2b40      	cmp	r3, #64	; 0x40
 8006d74:	d10b      	bne.n	8006d8e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	691a      	ldr	r2, [r3, #16]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d80:	b2d2      	uxtb	r2, r2
 8006d82:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d88:	1c5a      	adds	r2, r3, #1
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f022 0201 	bic.w	r2, r2, #1
 8006d9c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f7fe ff5b 	bl	8005c5a <HAL_I2C_AbortCpltCallback>
 8006da4:	e015      	b.n	8006dd2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	695b      	ldr	r3, [r3, #20]
 8006dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006db0:	2b40      	cmp	r3, #64	; 0x40
 8006db2:	d10b      	bne.n	8006dcc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	691a      	ldr	r2, [r3, #16]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbe:	b2d2      	uxtb	r2, r2
 8006dc0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc6:	1c5a      	adds	r2, r3, #1
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f7fe ff3a 	bl	8005c46 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	f003 0301 	and.w	r3, r3, #1
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10e      	bne.n	8006e00 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d109      	bne.n	8006e00 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d104      	bne.n	8006e00 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d007      	beq.n	8006e10 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	685a      	ldr	r2, [r3, #4]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e0e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e16:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1c:	f003 0304 	and.w	r3, r3, #4
 8006e20:	2b04      	cmp	r3, #4
 8006e22:	d113      	bne.n	8006e4c <I2C_ITError+0x254>
 8006e24:	7bfb      	ldrb	r3, [r7, #15]
 8006e26:	2b28      	cmp	r3, #40	; 0x28
 8006e28:	d110      	bne.n	8006e4c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a0a      	ldr	r2, [pc, #40]	; (8006e58 <I2C_ITError+0x260>)
 8006e2e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2220      	movs	r2, #32
 8006e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f7fe fedf 	bl	8005c0a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006e4c:	bf00      	nop
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	08006f61 	.word	0x08006f61
 8006e58:	ffff0000 	.word	0xffff0000

08006e5c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b088      	sub	sp, #32
 8006e60:	af02      	add	r7, sp, #8
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	607a      	str	r2, [r7, #4]
 8006e66:	603b      	str	r3, [r7, #0]
 8006e68:	460b      	mov	r3, r1
 8006e6a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e70:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	2b08      	cmp	r3, #8
 8006e76:	d006      	beq.n	8006e86 <I2C_MasterRequestWrite+0x2a>
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d003      	beq.n	8006e86 <I2C_MasterRequestWrite+0x2a>
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006e84:	d108      	bne.n	8006e98 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e94:	601a      	str	r2, [r3, #0]
 8006e96:	e00b      	b.n	8006eb0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e9c:	2b12      	cmp	r3, #18
 8006e9e:	d107      	bne.n	8006eb0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006eae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	9300      	str	r3, [sp, #0]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006ebc:	68f8      	ldr	r0, [r7, #12]
 8006ebe:	f000 f8f7 	bl	80070b0 <I2C_WaitOnFlagUntilTimeout>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d00d      	beq.n	8006ee4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ed6:	d103      	bne.n	8006ee0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ede:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006ee0:	2303      	movs	r3, #3
 8006ee2:	e035      	b.n	8006f50 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006eec:	d108      	bne.n	8006f00 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006eee:	897b      	ldrh	r3, [r7, #10]
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006efc:	611a      	str	r2, [r3, #16]
 8006efe:	e01b      	b.n	8006f38 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006f00:	897b      	ldrh	r3, [r7, #10]
 8006f02:	11db      	asrs	r3, r3, #7
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	f003 0306 	and.w	r3, r3, #6
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	f063 030f 	orn	r3, r3, #15
 8006f10:	b2da      	uxtb	r2, r3
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	490e      	ldr	r1, [pc, #56]	; (8006f58 <I2C_MasterRequestWrite+0xfc>)
 8006f1e:	68f8      	ldr	r0, [r7, #12]
 8006f20:	f000 f91d 	bl	800715e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d001      	beq.n	8006f2e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e010      	b.n	8006f50 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006f2e:	897b      	ldrh	r3, [r7, #10]
 8006f30:	b2da      	uxtb	r2, r3
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	4907      	ldr	r1, [pc, #28]	; (8006f5c <I2C_MasterRequestWrite+0x100>)
 8006f3e:	68f8      	ldr	r0, [r7, #12]
 8006f40:	f000 f90d 	bl	800715e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d001      	beq.n	8006f4e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e000      	b.n	8006f50 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3718      	adds	r7, #24
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	00010008 	.word	0x00010008
 8006f5c:	00010002 	.word	0x00010002

08006f60 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b086      	sub	sp, #24
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f70:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f78:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006f7a:	4b4b      	ldr	r3, [pc, #300]	; (80070a8 <I2C_DMAAbort+0x148>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	08db      	lsrs	r3, r3, #3
 8006f80:	4a4a      	ldr	r2, [pc, #296]	; (80070ac <I2C_DMAAbort+0x14c>)
 8006f82:	fba2 2303 	umull	r2, r3, r2, r3
 8006f86:	0a1a      	lsrs	r2, r3, #8
 8006f88:	4613      	mov	r3, r2
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	4413      	add	r3, r2
 8006f8e:	00da      	lsls	r2, r3, #3
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d106      	bne.n	8006fa8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f9e:	f043 0220 	orr.w	r2, r3, #32
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006fa6:	e00a      	b.n	8006fbe <I2C_DMAAbort+0x5e>
    }
    count--;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	3b01      	subs	r3, #1
 8006fac:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fbc:	d0ea      	beq.n	8006f94 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d003      	beq.n	8006fce <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fca:	2200      	movs	r2, #0
 8006fcc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d003      	beq.n	8006fde <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fda:	2200      	movs	r2, #0
 8006fdc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fec:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d003      	beq.n	8007004 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007000:	2200      	movs	r2, #0
 8007002:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007008:	2b00      	cmp	r3, #0
 800700a:	d003      	beq.n	8007014 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007010:	2200      	movs	r2, #0
 8007012:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f022 0201 	bic.w	r2, r2, #1
 8007022:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800702a:	b2db      	uxtb	r3, r3
 800702c:	2b60      	cmp	r3, #96	; 0x60
 800702e:	d10e      	bne.n	800704e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	2220      	movs	r2, #32
 8007034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	2200      	movs	r2, #0
 800703c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	2200      	movs	r2, #0
 8007044:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007046:	6978      	ldr	r0, [r7, #20]
 8007048:	f7fe fe07 	bl	8005c5a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800704c:	e027      	b.n	800709e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800704e:	7cfb      	ldrb	r3, [r7, #19]
 8007050:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007054:	2b28      	cmp	r3, #40	; 0x28
 8007056:	d117      	bne.n	8007088 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f042 0201 	orr.w	r2, r2, #1
 8007066:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007076:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	2200      	movs	r2, #0
 800707c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	2228      	movs	r2, #40	; 0x28
 8007082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007086:	e007      	b.n	8007098 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	2220      	movs	r2, #32
 800708c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	2200      	movs	r2, #0
 8007094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007098:	6978      	ldr	r0, [r7, #20]
 800709a:	f7fe fdd4 	bl	8005c46 <HAL_I2C_ErrorCallback>
}
 800709e:	bf00      	nop
 80070a0:	3718      	adds	r7, #24
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	20000030 	.word	0x20000030
 80070ac:	14f8b589 	.word	0x14f8b589

080070b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	603b      	str	r3, [r7, #0]
 80070bc:	4613      	mov	r3, r2
 80070be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80070c0:	e025      	b.n	800710e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070c8:	d021      	beq.n	800710e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070ca:	f7fc fcf7 	bl	8003abc <HAL_GetTick>
 80070ce:	4602      	mov	r2, r0
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	683a      	ldr	r2, [r7, #0]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d302      	bcc.n	80070e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d116      	bne.n	800710e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2200      	movs	r2, #0
 80070e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2220      	movs	r2, #32
 80070ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070fa:	f043 0220 	orr.w	r2, r3, #32
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2200      	movs	r2, #0
 8007106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e023      	b.n	8007156 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	0c1b      	lsrs	r3, r3, #16
 8007112:	b2db      	uxtb	r3, r3
 8007114:	2b01      	cmp	r3, #1
 8007116:	d10d      	bne.n	8007134 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	695b      	ldr	r3, [r3, #20]
 800711e:	43da      	mvns	r2, r3
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	4013      	ands	r3, r2
 8007124:	b29b      	uxth	r3, r3
 8007126:	2b00      	cmp	r3, #0
 8007128:	bf0c      	ite	eq
 800712a:	2301      	moveq	r3, #1
 800712c:	2300      	movne	r3, #0
 800712e:	b2db      	uxtb	r3, r3
 8007130:	461a      	mov	r2, r3
 8007132:	e00c      	b.n	800714e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	699b      	ldr	r3, [r3, #24]
 800713a:	43da      	mvns	r2, r3
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	4013      	ands	r3, r2
 8007140:	b29b      	uxth	r3, r3
 8007142:	2b00      	cmp	r3, #0
 8007144:	bf0c      	ite	eq
 8007146:	2301      	moveq	r3, #1
 8007148:	2300      	movne	r3, #0
 800714a:	b2db      	uxtb	r3, r3
 800714c:	461a      	mov	r2, r3
 800714e:	79fb      	ldrb	r3, [r7, #7]
 8007150:	429a      	cmp	r2, r3
 8007152:	d0b6      	beq.n	80070c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3710      	adds	r7, #16
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}

0800715e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800715e:	b580      	push	{r7, lr}
 8007160:	b084      	sub	sp, #16
 8007162:	af00      	add	r7, sp, #0
 8007164:	60f8      	str	r0, [r7, #12]
 8007166:	60b9      	str	r1, [r7, #8]
 8007168:	607a      	str	r2, [r7, #4]
 800716a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800716c:	e051      	b.n	8007212 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	695b      	ldr	r3, [r3, #20]
 8007174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800717c:	d123      	bne.n	80071c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800718c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007196:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2200      	movs	r2, #0
 800719c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2220      	movs	r2, #32
 80071a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b2:	f043 0204 	orr.w	r2, r3, #4
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2200      	movs	r2, #0
 80071be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	e046      	b.n	8007254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071cc:	d021      	beq.n	8007212 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071ce:	f7fc fc75 	bl	8003abc <HAL_GetTick>
 80071d2:	4602      	mov	r2, r0
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	1ad3      	subs	r3, r2, r3
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	429a      	cmp	r2, r3
 80071dc:	d302      	bcc.n	80071e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d116      	bne.n	8007212 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2200      	movs	r2, #0
 80071e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2220      	movs	r2, #32
 80071ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071fe:	f043 0220 	orr.w	r2, r3, #32
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	e020      	b.n	8007254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	0c1b      	lsrs	r3, r3, #16
 8007216:	b2db      	uxtb	r3, r3
 8007218:	2b01      	cmp	r3, #1
 800721a:	d10c      	bne.n	8007236 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	695b      	ldr	r3, [r3, #20]
 8007222:	43da      	mvns	r2, r3
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	4013      	ands	r3, r2
 8007228:	b29b      	uxth	r3, r3
 800722a:	2b00      	cmp	r3, #0
 800722c:	bf14      	ite	ne
 800722e:	2301      	movne	r3, #1
 8007230:	2300      	moveq	r3, #0
 8007232:	b2db      	uxtb	r3, r3
 8007234:	e00b      	b.n	800724e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	43da      	mvns	r2, r3
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	4013      	ands	r3, r2
 8007242:	b29b      	uxth	r3, r3
 8007244:	2b00      	cmp	r3, #0
 8007246:	bf14      	ite	ne
 8007248:	2301      	movne	r3, #1
 800724a:	2300      	moveq	r3, #0
 800724c:	b2db      	uxtb	r3, r3
 800724e:	2b00      	cmp	r3, #0
 8007250:	d18d      	bne.n	800716e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	3710      	adds	r7, #16
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007268:	e02d      	b.n	80072c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	f000 f8aa 	bl	80073c4 <I2C_IsAcknowledgeFailed>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d001      	beq.n	800727a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	e02d      	b.n	80072d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007280:	d021      	beq.n	80072c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007282:	f7fc fc1b 	bl	8003abc <HAL_GetTick>
 8007286:	4602      	mov	r2, r0
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	1ad3      	subs	r3, r2, r3
 800728c:	68ba      	ldr	r2, [r7, #8]
 800728e:	429a      	cmp	r2, r3
 8007290:	d302      	bcc.n	8007298 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d116      	bne.n	80072c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2200      	movs	r2, #0
 800729c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2220      	movs	r2, #32
 80072a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b2:	f043 0220 	orr.w	r2, r3, #32
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2200      	movs	r2, #0
 80072be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e007      	b.n	80072d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	695b      	ldr	r3, [r3, #20]
 80072cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072d0:	2b80      	cmp	r3, #128	; 0x80
 80072d2:	d1ca      	bne.n	800726a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3710      	adds	r7, #16
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}

080072de <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80072de:	b580      	push	{r7, lr}
 80072e0:	b084      	sub	sp, #16
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	60f8      	str	r0, [r7, #12]
 80072e6:	60b9      	str	r1, [r7, #8]
 80072e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80072ea:	e02d      	b.n	8007348 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80072ec:	68f8      	ldr	r0, [r7, #12]
 80072ee:	f000 f869 	bl	80073c4 <I2C_IsAcknowledgeFailed>
 80072f2:	4603      	mov	r3, r0
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d001      	beq.n	80072fc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	e02d      	b.n	8007358 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007302:	d021      	beq.n	8007348 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007304:	f7fc fbda 	bl	8003abc <HAL_GetTick>
 8007308:	4602      	mov	r2, r0
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	1ad3      	subs	r3, r2, r3
 800730e:	68ba      	ldr	r2, [r7, #8]
 8007310:	429a      	cmp	r2, r3
 8007312:	d302      	bcc.n	800731a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d116      	bne.n	8007348 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2200      	movs	r2, #0
 800731e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2220      	movs	r2, #32
 8007324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2200      	movs	r2, #0
 800732c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007334:	f043 0220 	orr.w	r2, r3, #32
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2200      	movs	r2, #0
 8007340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	e007      	b.n	8007358 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	695b      	ldr	r3, [r3, #20]
 800734e:	f003 0304 	and.w	r3, r3, #4
 8007352:	2b04      	cmp	r3, #4
 8007354:	d1ca      	bne.n	80072ec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007356:	2300      	movs	r3, #0
}
 8007358:	4618      	mov	r0, r3
 800735a:	3710      	adds	r7, #16
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007360:	b480      	push	{r7}
 8007362:	b085      	sub	sp, #20
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007368:	2300      	movs	r3, #0
 800736a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800736c:	4b13      	ldr	r3, [pc, #76]	; (80073bc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	08db      	lsrs	r3, r3, #3
 8007372:	4a13      	ldr	r2, [pc, #76]	; (80073c0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007374:	fba2 2303 	umull	r2, r3, r2, r3
 8007378:	0a1a      	lsrs	r2, r3, #8
 800737a:	4613      	mov	r3, r2
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	4413      	add	r3, r2
 8007380:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	3b01      	subs	r3, #1
 8007386:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d107      	bne.n	800739e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007392:	f043 0220 	orr.w	r2, r3, #32
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	e008      	b.n	80073b0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073ac:	d0e9      	beq.n	8007382 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80073ae:	2300      	movs	r3, #0
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3714      	adds	r7, #20
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr
 80073bc:	20000030 	.word	0x20000030
 80073c0:	14f8b589 	.word	0x14f8b589

080073c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	695b      	ldr	r3, [r3, #20]
 80073d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073da:	d11b      	bne.n	8007414 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80073e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2220      	movs	r2, #32
 80073f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007400:	f043 0204 	orr.w	r2, r3, #4
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	e000      	b.n	8007416 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	370c      	adds	r7, #12
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr

08007422 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007422:	b480      	push	{r7}
 8007424:	b083      	sub	sp, #12
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800742e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007432:	d103      	bne.n	800743c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800743a:	e007      	b.n	800744c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007440:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007444:	d102      	bne.n	800744c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2208      	movs	r2, #8
 800744a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800744c:	bf00      	nop
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b086      	sub	sp, #24
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d101      	bne.n	800746a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e267      	b.n	800793a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f003 0301 	and.w	r3, r3, #1
 8007472:	2b00      	cmp	r3, #0
 8007474:	d075      	beq.n	8007562 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007476:	4b88      	ldr	r3, [pc, #544]	; (8007698 <HAL_RCC_OscConfig+0x240>)
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	f003 030c 	and.w	r3, r3, #12
 800747e:	2b04      	cmp	r3, #4
 8007480:	d00c      	beq.n	800749c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007482:	4b85      	ldr	r3, [pc, #532]	; (8007698 <HAL_RCC_OscConfig+0x240>)
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800748a:	2b08      	cmp	r3, #8
 800748c:	d112      	bne.n	80074b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800748e:	4b82      	ldr	r3, [pc, #520]	; (8007698 <HAL_RCC_OscConfig+0x240>)
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007496:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800749a:	d10b      	bne.n	80074b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800749c:	4b7e      	ldr	r3, [pc, #504]	; (8007698 <HAL_RCC_OscConfig+0x240>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d05b      	beq.n	8007560 <HAL_RCC_OscConfig+0x108>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d157      	bne.n	8007560 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	e242      	b.n	800793a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074bc:	d106      	bne.n	80074cc <HAL_RCC_OscConfig+0x74>
 80074be:	4b76      	ldr	r3, [pc, #472]	; (8007698 <HAL_RCC_OscConfig+0x240>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a75      	ldr	r2, [pc, #468]	; (8007698 <HAL_RCC_OscConfig+0x240>)
 80074c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074c8:	6013      	str	r3, [r2, #0]
 80074ca:	e01d      	b.n	8007508 <HAL_RCC_OscConfig+0xb0>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80074d4:	d10c      	bne.n	80074f0 <HAL_RCC_OscConfig+0x98>
 80074d6:	4b70      	ldr	r3, [pc, #448]	; (8007698 <HAL_RCC_OscConfig+0x240>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a6f      	ldr	r2, [pc, #444]	; (8007698 <HAL_RCC_OscConfig+0x240>)
 80074dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80074e0:	6013      	str	r3, [r2, #0]
 80074e2:	4b6d      	ldr	r3, [pc, #436]	; (8007698 <HAL_RCC_OscConfig+0x240>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a6c      	ldr	r2, [pc, #432]	; (8007698 <HAL_RCC_OscConfig+0x240>)
 80074e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074ec:	6013      	str	r3, [r2, #0]
 80074ee:	e00b      	b.n	8007508 <HAL_RCC_OscConfig+0xb0>
 80074f0:	4b69      	ldr	r3, [pc, #420]	; (8007698 <HAL_RCC_OscConfig+0x240>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a68      	ldr	r2, [pc, #416]	; (8007698 <HAL_RCC_OscConfig+0x240>)
 80074f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074fa:	6013      	str	r3, [r2, #0]
 80074fc:	4b66      	ldr	r3, [pc, #408]	; (8007698 <HAL_RCC_OscConfig+0x240>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a65      	ldr	r2, [pc, #404]	; (8007698 <HAL_RCC_OscConfig+0x240>)
 8007502:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007506:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d013      	beq.n	8007538 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007510:	f7fc fad4 	bl	8003abc <HAL_GetTick>
 8007514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007516:	e008      	b.n	800752a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007518:	f7fc fad0 	bl	8003abc <HAL_GetTick>
 800751c:	4602      	mov	r2, r0
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	2b64      	cmp	r3, #100	; 0x64
 8007524:	d901      	bls.n	800752a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007526:	2303      	movs	r3, #3
 8007528:	e207      	b.n	800793a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800752a:	4b5b      	ldr	r3, [pc, #364]	; (8007698 <HAL_RCC_OscConfig+0x240>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007532:	2b00      	cmp	r3, #0
 8007534:	d0f0      	beq.n	8007518 <HAL_RCC_OscConfig+0xc0>
 8007536:	e014      	b.n	8007562 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007538:	f7fc fac0 	bl	8003abc <HAL_GetTick>
 800753c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800753e:	e008      	b.n	8007552 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007540:	f7fc fabc 	bl	8003abc <HAL_GetTick>
 8007544:	4602      	mov	r2, r0
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	1ad3      	subs	r3, r2, r3
 800754a:	2b64      	cmp	r3, #100	; 0x64
 800754c:	d901      	bls.n	8007552 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800754e:	2303      	movs	r3, #3
 8007550:	e1f3      	b.n	800793a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007552:	4b51      	ldr	r3, [pc, #324]	; (8007698 <HAL_RCC_OscConfig+0x240>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800755a:	2b00      	cmp	r3, #0
 800755c:	d1f0      	bne.n	8007540 <HAL_RCC_OscConfig+0xe8>
 800755e:	e000      	b.n	8007562 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007560:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f003 0302 	and.w	r3, r3, #2
 800756a:	2b00      	cmp	r3, #0
 800756c:	d063      	beq.n	8007636 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800756e:	4b4a      	ldr	r3, [pc, #296]	; (8007698 <HAL_RCC_OscConfig+0x240>)
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	f003 030c 	and.w	r3, r3, #12
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00b      	beq.n	8007592 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800757a:	4b47      	ldr	r3, [pc, #284]	; (8007698 <HAL_RCC_OscConfig+0x240>)
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007582:	2b08      	cmp	r3, #8
 8007584:	d11c      	bne.n	80075c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007586:	4b44      	ldr	r3, [pc, #272]	; (8007698 <HAL_RCC_OscConfig+0x240>)
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800758e:	2b00      	cmp	r3, #0
 8007590:	d116      	bne.n	80075c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007592:	4b41      	ldr	r3, [pc, #260]	; (8007698 <HAL_RCC_OscConfig+0x240>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 0302 	and.w	r3, r3, #2
 800759a:	2b00      	cmp	r3, #0
 800759c:	d005      	beq.n	80075aa <HAL_RCC_OscConfig+0x152>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d001      	beq.n	80075aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	e1c7      	b.n	800793a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075aa:	4b3b      	ldr	r3, [pc, #236]	; (8007698 <HAL_RCC_OscConfig+0x240>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	00db      	lsls	r3, r3, #3
 80075b8:	4937      	ldr	r1, [pc, #220]	; (8007698 <HAL_RCC_OscConfig+0x240>)
 80075ba:	4313      	orrs	r3, r2
 80075bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075be:	e03a      	b.n	8007636 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d020      	beq.n	800760a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80075c8:	4b34      	ldr	r3, [pc, #208]	; (800769c <HAL_RCC_OscConfig+0x244>)
 80075ca:	2201      	movs	r2, #1
 80075cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075ce:	f7fc fa75 	bl	8003abc <HAL_GetTick>
 80075d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075d4:	e008      	b.n	80075e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80075d6:	f7fc fa71 	bl	8003abc <HAL_GetTick>
 80075da:	4602      	mov	r2, r0
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	1ad3      	subs	r3, r2, r3
 80075e0:	2b02      	cmp	r3, #2
 80075e2:	d901      	bls.n	80075e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80075e4:	2303      	movs	r3, #3
 80075e6:	e1a8      	b.n	800793a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075e8:	4b2b      	ldr	r3, [pc, #172]	; (8007698 <HAL_RCC_OscConfig+0x240>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 0302 	and.w	r3, r3, #2
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d0f0      	beq.n	80075d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075f4:	4b28      	ldr	r3, [pc, #160]	; (8007698 <HAL_RCC_OscConfig+0x240>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	00db      	lsls	r3, r3, #3
 8007602:	4925      	ldr	r1, [pc, #148]	; (8007698 <HAL_RCC_OscConfig+0x240>)
 8007604:	4313      	orrs	r3, r2
 8007606:	600b      	str	r3, [r1, #0]
 8007608:	e015      	b.n	8007636 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800760a:	4b24      	ldr	r3, [pc, #144]	; (800769c <HAL_RCC_OscConfig+0x244>)
 800760c:	2200      	movs	r2, #0
 800760e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007610:	f7fc fa54 	bl	8003abc <HAL_GetTick>
 8007614:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007616:	e008      	b.n	800762a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007618:	f7fc fa50 	bl	8003abc <HAL_GetTick>
 800761c:	4602      	mov	r2, r0
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	2b02      	cmp	r3, #2
 8007624:	d901      	bls.n	800762a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007626:	2303      	movs	r3, #3
 8007628:	e187      	b.n	800793a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800762a:	4b1b      	ldr	r3, [pc, #108]	; (8007698 <HAL_RCC_OscConfig+0x240>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 0302 	and.w	r3, r3, #2
 8007632:	2b00      	cmp	r3, #0
 8007634:	d1f0      	bne.n	8007618 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f003 0308 	and.w	r3, r3, #8
 800763e:	2b00      	cmp	r3, #0
 8007640:	d036      	beq.n	80076b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	695b      	ldr	r3, [r3, #20]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d016      	beq.n	8007678 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800764a:	4b15      	ldr	r3, [pc, #84]	; (80076a0 <HAL_RCC_OscConfig+0x248>)
 800764c:	2201      	movs	r2, #1
 800764e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007650:	f7fc fa34 	bl	8003abc <HAL_GetTick>
 8007654:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007656:	e008      	b.n	800766a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007658:	f7fc fa30 	bl	8003abc <HAL_GetTick>
 800765c:	4602      	mov	r2, r0
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	1ad3      	subs	r3, r2, r3
 8007662:	2b02      	cmp	r3, #2
 8007664:	d901      	bls.n	800766a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007666:	2303      	movs	r3, #3
 8007668:	e167      	b.n	800793a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800766a:	4b0b      	ldr	r3, [pc, #44]	; (8007698 <HAL_RCC_OscConfig+0x240>)
 800766c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800766e:	f003 0302 	and.w	r3, r3, #2
 8007672:	2b00      	cmp	r3, #0
 8007674:	d0f0      	beq.n	8007658 <HAL_RCC_OscConfig+0x200>
 8007676:	e01b      	b.n	80076b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007678:	4b09      	ldr	r3, [pc, #36]	; (80076a0 <HAL_RCC_OscConfig+0x248>)
 800767a:	2200      	movs	r2, #0
 800767c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800767e:	f7fc fa1d 	bl	8003abc <HAL_GetTick>
 8007682:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007684:	e00e      	b.n	80076a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007686:	f7fc fa19 	bl	8003abc <HAL_GetTick>
 800768a:	4602      	mov	r2, r0
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	1ad3      	subs	r3, r2, r3
 8007690:	2b02      	cmp	r3, #2
 8007692:	d907      	bls.n	80076a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007694:	2303      	movs	r3, #3
 8007696:	e150      	b.n	800793a <HAL_RCC_OscConfig+0x4e2>
 8007698:	40023800 	.word	0x40023800
 800769c:	42470000 	.word	0x42470000
 80076a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80076a4:	4b88      	ldr	r3, [pc, #544]	; (80078c8 <HAL_RCC_OscConfig+0x470>)
 80076a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076a8:	f003 0302 	and.w	r3, r3, #2
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d1ea      	bne.n	8007686 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 0304 	and.w	r3, r3, #4
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	f000 8097 	beq.w	80077ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80076be:	2300      	movs	r3, #0
 80076c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80076c2:	4b81      	ldr	r3, [pc, #516]	; (80078c8 <HAL_RCC_OscConfig+0x470>)
 80076c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d10f      	bne.n	80076ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076ce:	2300      	movs	r3, #0
 80076d0:	60bb      	str	r3, [r7, #8]
 80076d2:	4b7d      	ldr	r3, [pc, #500]	; (80078c8 <HAL_RCC_OscConfig+0x470>)
 80076d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d6:	4a7c      	ldr	r2, [pc, #496]	; (80078c8 <HAL_RCC_OscConfig+0x470>)
 80076d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076dc:	6413      	str	r3, [r2, #64]	; 0x40
 80076de:	4b7a      	ldr	r3, [pc, #488]	; (80078c8 <HAL_RCC_OscConfig+0x470>)
 80076e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076e6:	60bb      	str	r3, [r7, #8]
 80076e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80076ea:	2301      	movs	r3, #1
 80076ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076ee:	4b77      	ldr	r3, [pc, #476]	; (80078cc <HAL_RCC_OscConfig+0x474>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d118      	bne.n	800772c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80076fa:	4b74      	ldr	r3, [pc, #464]	; (80078cc <HAL_RCC_OscConfig+0x474>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a73      	ldr	r2, [pc, #460]	; (80078cc <HAL_RCC_OscConfig+0x474>)
 8007700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007704:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007706:	f7fc f9d9 	bl	8003abc <HAL_GetTick>
 800770a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800770c:	e008      	b.n	8007720 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800770e:	f7fc f9d5 	bl	8003abc <HAL_GetTick>
 8007712:	4602      	mov	r2, r0
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	1ad3      	subs	r3, r2, r3
 8007718:	2b02      	cmp	r3, #2
 800771a:	d901      	bls.n	8007720 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800771c:	2303      	movs	r3, #3
 800771e:	e10c      	b.n	800793a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007720:	4b6a      	ldr	r3, [pc, #424]	; (80078cc <HAL_RCC_OscConfig+0x474>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007728:	2b00      	cmp	r3, #0
 800772a:	d0f0      	beq.n	800770e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	2b01      	cmp	r3, #1
 8007732:	d106      	bne.n	8007742 <HAL_RCC_OscConfig+0x2ea>
 8007734:	4b64      	ldr	r3, [pc, #400]	; (80078c8 <HAL_RCC_OscConfig+0x470>)
 8007736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007738:	4a63      	ldr	r2, [pc, #396]	; (80078c8 <HAL_RCC_OscConfig+0x470>)
 800773a:	f043 0301 	orr.w	r3, r3, #1
 800773e:	6713      	str	r3, [r2, #112]	; 0x70
 8007740:	e01c      	b.n	800777c <HAL_RCC_OscConfig+0x324>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	2b05      	cmp	r3, #5
 8007748:	d10c      	bne.n	8007764 <HAL_RCC_OscConfig+0x30c>
 800774a:	4b5f      	ldr	r3, [pc, #380]	; (80078c8 <HAL_RCC_OscConfig+0x470>)
 800774c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800774e:	4a5e      	ldr	r2, [pc, #376]	; (80078c8 <HAL_RCC_OscConfig+0x470>)
 8007750:	f043 0304 	orr.w	r3, r3, #4
 8007754:	6713      	str	r3, [r2, #112]	; 0x70
 8007756:	4b5c      	ldr	r3, [pc, #368]	; (80078c8 <HAL_RCC_OscConfig+0x470>)
 8007758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800775a:	4a5b      	ldr	r2, [pc, #364]	; (80078c8 <HAL_RCC_OscConfig+0x470>)
 800775c:	f043 0301 	orr.w	r3, r3, #1
 8007760:	6713      	str	r3, [r2, #112]	; 0x70
 8007762:	e00b      	b.n	800777c <HAL_RCC_OscConfig+0x324>
 8007764:	4b58      	ldr	r3, [pc, #352]	; (80078c8 <HAL_RCC_OscConfig+0x470>)
 8007766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007768:	4a57      	ldr	r2, [pc, #348]	; (80078c8 <HAL_RCC_OscConfig+0x470>)
 800776a:	f023 0301 	bic.w	r3, r3, #1
 800776e:	6713      	str	r3, [r2, #112]	; 0x70
 8007770:	4b55      	ldr	r3, [pc, #340]	; (80078c8 <HAL_RCC_OscConfig+0x470>)
 8007772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007774:	4a54      	ldr	r2, [pc, #336]	; (80078c8 <HAL_RCC_OscConfig+0x470>)
 8007776:	f023 0304 	bic.w	r3, r3, #4
 800777a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d015      	beq.n	80077b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007784:	f7fc f99a 	bl	8003abc <HAL_GetTick>
 8007788:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800778a:	e00a      	b.n	80077a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800778c:	f7fc f996 	bl	8003abc <HAL_GetTick>
 8007790:	4602      	mov	r2, r0
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	1ad3      	subs	r3, r2, r3
 8007796:	f241 3288 	movw	r2, #5000	; 0x1388
 800779a:	4293      	cmp	r3, r2
 800779c:	d901      	bls.n	80077a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800779e:	2303      	movs	r3, #3
 80077a0:	e0cb      	b.n	800793a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077a2:	4b49      	ldr	r3, [pc, #292]	; (80078c8 <HAL_RCC_OscConfig+0x470>)
 80077a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077a6:	f003 0302 	and.w	r3, r3, #2
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d0ee      	beq.n	800778c <HAL_RCC_OscConfig+0x334>
 80077ae:	e014      	b.n	80077da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077b0:	f7fc f984 	bl	8003abc <HAL_GetTick>
 80077b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80077b6:	e00a      	b.n	80077ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077b8:	f7fc f980 	bl	8003abc <HAL_GetTick>
 80077bc:	4602      	mov	r2, r0
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	1ad3      	subs	r3, r2, r3
 80077c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d901      	bls.n	80077ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80077ca:	2303      	movs	r3, #3
 80077cc:	e0b5      	b.n	800793a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80077ce:	4b3e      	ldr	r3, [pc, #248]	; (80078c8 <HAL_RCC_OscConfig+0x470>)
 80077d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077d2:	f003 0302 	and.w	r3, r3, #2
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d1ee      	bne.n	80077b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80077da:	7dfb      	ldrb	r3, [r7, #23]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d105      	bne.n	80077ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80077e0:	4b39      	ldr	r3, [pc, #228]	; (80078c8 <HAL_RCC_OscConfig+0x470>)
 80077e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e4:	4a38      	ldr	r2, [pc, #224]	; (80078c8 <HAL_RCC_OscConfig+0x470>)
 80077e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	699b      	ldr	r3, [r3, #24]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	f000 80a1 	beq.w	8007938 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80077f6:	4b34      	ldr	r3, [pc, #208]	; (80078c8 <HAL_RCC_OscConfig+0x470>)
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	f003 030c 	and.w	r3, r3, #12
 80077fe:	2b08      	cmp	r3, #8
 8007800:	d05c      	beq.n	80078bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	699b      	ldr	r3, [r3, #24]
 8007806:	2b02      	cmp	r3, #2
 8007808:	d141      	bne.n	800788e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800780a:	4b31      	ldr	r3, [pc, #196]	; (80078d0 <HAL_RCC_OscConfig+0x478>)
 800780c:	2200      	movs	r2, #0
 800780e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007810:	f7fc f954 	bl	8003abc <HAL_GetTick>
 8007814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007816:	e008      	b.n	800782a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007818:	f7fc f950 	bl	8003abc <HAL_GetTick>
 800781c:	4602      	mov	r2, r0
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	1ad3      	subs	r3, r2, r3
 8007822:	2b02      	cmp	r3, #2
 8007824:	d901      	bls.n	800782a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007826:	2303      	movs	r3, #3
 8007828:	e087      	b.n	800793a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800782a:	4b27      	ldr	r3, [pc, #156]	; (80078c8 <HAL_RCC_OscConfig+0x470>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007832:	2b00      	cmp	r3, #0
 8007834:	d1f0      	bne.n	8007818 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	69da      	ldr	r2, [r3, #28]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a1b      	ldr	r3, [r3, #32]
 800783e:	431a      	orrs	r2, r3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007844:	019b      	lsls	r3, r3, #6
 8007846:	431a      	orrs	r2, r3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800784c:	085b      	lsrs	r3, r3, #1
 800784e:	3b01      	subs	r3, #1
 8007850:	041b      	lsls	r3, r3, #16
 8007852:	431a      	orrs	r2, r3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007858:	061b      	lsls	r3, r3, #24
 800785a:	491b      	ldr	r1, [pc, #108]	; (80078c8 <HAL_RCC_OscConfig+0x470>)
 800785c:	4313      	orrs	r3, r2
 800785e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007860:	4b1b      	ldr	r3, [pc, #108]	; (80078d0 <HAL_RCC_OscConfig+0x478>)
 8007862:	2201      	movs	r2, #1
 8007864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007866:	f7fc f929 	bl	8003abc <HAL_GetTick>
 800786a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800786c:	e008      	b.n	8007880 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800786e:	f7fc f925 	bl	8003abc <HAL_GetTick>
 8007872:	4602      	mov	r2, r0
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	1ad3      	subs	r3, r2, r3
 8007878:	2b02      	cmp	r3, #2
 800787a:	d901      	bls.n	8007880 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800787c:	2303      	movs	r3, #3
 800787e:	e05c      	b.n	800793a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007880:	4b11      	ldr	r3, [pc, #68]	; (80078c8 <HAL_RCC_OscConfig+0x470>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007888:	2b00      	cmp	r3, #0
 800788a:	d0f0      	beq.n	800786e <HAL_RCC_OscConfig+0x416>
 800788c:	e054      	b.n	8007938 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800788e:	4b10      	ldr	r3, [pc, #64]	; (80078d0 <HAL_RCC_OscConfig+0x478>)
 8007890:	2200      	movs	r2, #0
 8007892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007894:	f7fc f912 	bl	8003abc <HAL_GetTick>
 8007898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800789a:	e008      	b.n	80078ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800789c:	f7fc f90e 	bl	8003abc <HAL_GetTick>
 80078a0:	4602      	mov	r2, r0
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	1ad3      	subs	r3, r2, r3
 80078a6:	2b02      	cmp	r3, #2
 80078a8:	d901      	bls.n	80078ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80078aa:	2303      	movs	r3, #3
 80078ac:	e045      	b.n	800793a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078ae:	4b06      	ldr	r3, [pc, #24]	; (80078c8 <HAL_RCC_OscConfig+0x470>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d1f0      	bne.n	800789c <HAL_RCC_OscConfig+0x444>
 80078ba:	e03d      	b.n	8007938 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	699b      	ldr	r3, [r3, #24]
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d107      	bne.n	80078d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80078c4:	2301      	movs	r3, #1
 80078c6:	e038      	b.n	800793a <HAL_RCC_OscConfig+0x4e2>
 80078c8:	40023800 	.word	0x40023800
 80078cc:	40007000 	.word	0x40007000
 80078d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80078d4:	4b1b      	ldr	r3, [pc, #108]	; (8007944 <HAL_RCC_OscConfig+0x4ec>)
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	699b      	ldr	r3, [r3, #24]
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d028      	beq.n	8007934 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d121      	bne.n	8007934 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d11a      	bne.n	8007934 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80078fe:	68fa      	ldr	r2, [r7, #12]
 8007900:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007904:	4013      	ands	r3, r2
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800790a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800790c:	4293      	cmp	r3, r2
 800790e:	d111      	bne.n	8007934 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800791a:	085b      	lsrs	r3, r3, #1
 800791c:	3b01      	subs	r3, #1
 800791e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007920:	429a      	cmp	r2, r3
 8007922:	d107      	bne.n	8007934 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800792e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007930:	429a      	cmp	r2, r3
 8007932:	d001      	beq.n	8007938 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007934:	2301      	movs	r3, #1
 8007936:	e000      	b.n	800793a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3718      	adds	r7, #24
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	40023800 	.word	0x40023800

08007948 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d101      	bne.n	800795c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	e0cc      	b.n	8007af6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800795c:	4b68      	ldr	r3, [pc, #416]	; (8007b00 <HAL_RCC_ClockConfig+0x1b8>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f003 0307 	and.w	r3, r3, #7
 8007964:	683a      	ldr	r2, [r7, #0]
 8007966:	429a      	cmp	r2, r3
 8007968:	d90c      	bls.n	8007984 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800796a:	4b65      	ldr	r3, [pc, #404]	; (8007b00 <HAL_RCC_ClockConfig+0x1b8>)
 800796c:	683a      	ldr	r2, [r7, #0]
 800796e:	b2d2      	uxtb	r2, r2
 8007970:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007972:	4b63      	ldr	r3, [pc, #396]	; (8007b00 <HAL_RCC_ClockConfig+0x1b8>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f003 0307 	and.w	r3, r3, #7
 800797a:	683a      	ldr	r2, [r7, #0]
 800797c:	429a      	cmp	r2, r3
 800797e:	d001      	beq.n	8007984 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	e0b8      	b.n	8007af6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f003 0302 	and.w	r3, r3, #2
 800798c:	2b00      	cmp	r3, #0
 800798e:	d020      	beq.n	80079d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f003 0304 	and.w	r3, r3, #4
 8007998:	2b00      	cmp	r3, #0
 800799a:	d005      	beq.n	80079a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800799c:	4b59      	ldr	r3, [pc, #356]	; (8007b04 <HAL_RCC_ClockConfig+0x1bc>)
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	4a58      	ldr	r2, [pc, #352]	; (8007b04 <HAL_RCC_ClockConfig+0x1bc>)
 80079a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80079a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 0308 	and.w	r3, r3, #8
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d005      	beq.n	80079c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80079b4:	4b53      	ldr	r3, [pc, #332]	; (8007b04 <HAL_RCC_ClockConfig+0x1bc>)
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	4a52      	ldr	r2, [pc, #328]	; (8007b04 <HAL_RCC_ClockConfig+0x1bc>)
 80079ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80079be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80079c0:	4b50      	ldr	r3, [pc, #320]	; (8007b04 <HAL_RCC_ClockConfig+0x1bc>)
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	494d      	ldr	r1, [pc, #308]	; (8007b04 <HAL_RCC_ClockConfig+0x1bc>)
 80079ce:	4313      	orrs	r3, r2
 80079d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f003 0301 	and.w	r3, r3, #1
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d044      	beq.n	8007a68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d107      	bne.n	80079f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079e6:	4b47      	ldr	r3, [pc, #284]	; (8007b04 <HAL_RCC_ClockConfig+0x1bc>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d119      	bne.n	8007a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	e07f      	b.n	8007af6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	2b02      	cmp	r3, #2
 80079fc:	d003      	beq.n	8007a06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a02:	2b03      	cmp	r3, #3
 8007a04:	d107      	bne.n	8007a16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a06:	4b3f      	ldr	r3, [pc, #252]	; (8007b04 <HAL_RCC_ClockConfig+0x1bc>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d109      	bne.n	8007a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	e06f      	b.n	8007af6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a16:	4b3b      	ldr	r3, [pc, #236]	; (8007b04 <HAL_RCC_ClockConfig+0x1bc>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f003 0302 	and.w	r3, r3, #2
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d101      	bne.n	8007a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	e067      	b.n	8007af6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007a26:	4b37      	ldr	r3, [pc, #220]	; (8007b04 <HAL_RCC_ClockConfig+0x1bc>)
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	f023 0203 	bic.w	r2, r3, #3
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	4934      	ldr	r1, [pc, #208]	; (8007b04 <HAL_RCC_ClockConfig+0x1bc>)
 8007a34:	4313      	orrs	r3, r2
 8007a36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007a38:	f7fc f840 	bl	8003abc <HAL_GetTick>
 8007a3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a3e:	e00a      	b.n	8007a56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a40:	f7fc f83c 	bl	8003abc <HAL_GetTick>
 8007a44:	4602      	mov	r2, r0
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	1ad3      	subs	r3, r2, r3
 8007a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d901      	bls.n	8007a56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007a52:	2303      	movs	r3, #3
 8007a54:	e04f      	b.n	8007af6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a56:	4b2b      	ldr	r3, [pc, #172]	; (8007b04 <HAL_RCC_ClockConfig+0x1bc>)
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	f003 020c 	and.w	r2, r3, #12
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d1eb      	bne.n	8007a40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007a68:	4b25      	ldr	r3, [pc, #148]	; (8007b00 <HAL_RCC_ClockConfig+0x1b8>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f003 0307 	and.w	r3, r3, #7
 8007a70:	683a      	ldr	r2, [r7, #0]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d20c      	bcs.n	8007a90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a76:	4b22      	ldr	r3, [pc, #136]	; (8007b00 <HAL_RCC_ClockConfig+0x1b8>)
 8007a78:	683a      	ldr	r2, [r7, #0]
 8007a7a:	b2d2      	uxtb	r2, r2
 8007a7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a7e:	4b20      	ldr	r3, [pc, #128]	; (8007b00 <HAL_RCC_ClockConfig+0x1b8>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f003 0307 	and.w	r3, r3, #7
 8007a86:	683a      	ldr	r2, [r7, #0]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d001      	beq.n	8007a90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	e032      	b.n	8007af6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 0304 	and.w	r3, r3, #4
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d008      	beq.n	8007aae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007a9c:	4b19      	ldr	r3, [pc, #100]	; (8007b04 <HAL_RCC_ClockConfig+0x1bc>)
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	4916      	ldr	r1, [pc, #88]	; (8007b04 <HAL_RCC_ClockConfig+0x1bc>)
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f003 0308 	and.w	r3, r3, #8
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d009      	beq.n	8007ace <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007aba:	4b12      	ldr	r3, [pc, #72]	; (8007b04 <HAL_RCC_ClockConfig+0x1bc>)
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	691b      	ldr	r3, [r3, #16]
 8007ac6:	00db      	lsls	r3, r3, #3
 8007ac8:	490e      	ldr	r1, [pc, #56]	; (8007b04 <HAL_RCC_ClockConfig+0x1bc>)
 8007aca:	4313      	orrs	r3, r2
 8007acc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007ace:	f000 f821 	bl	8007b14 <HAL_RCC_GetSysClockFreq>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	4b0b      	ldr	r3, [pc, #44]	; (8007b04 <HAL_RCC_ClockConfig+0x1bc>)
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	091b      	lsrs	r3, r3, #4
 8007ada:	f003 030f 	and.w	r3, r3, #15
 8007ade:	490a      	ldr	r1, [pc, #40]	; (8007b08 <HAL_RCC_ClockConfig+0x1c0>)
 8007ae0:	5ccb      	ldrb	r3, [r1, r3]
 8007ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ae6:	4a09      	ldr	r2, [pc, #36]	; (8007b0c <HAL_RCC_ClockConfig+0x1c4>)
 8007ae8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007aea:	4b09      	ldr	r3, [pc, #36]	; (8007b10 <HAL_RCC_ClockConfig+0x1c8>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4618      	mov	r0, r3
 8007af0:	f7fb ffa0 	bl	8003a34 <HAL_InitTick>

  return HAL_OK;
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3710      	adds	r7, #16
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	bf00      	nop
 8007b00:	40023c00 	.word	0x40023c00
 8007b04:	40023800 	.word	0x40023800
 8007b08:	0800d9d8 	.word	0x0800d9d8
 8007b0c:	20000030 	.word	0x20000030
 8007b10:	20000034 	.word	0x20000034

08007b14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b18:	b090      	sub	sp, #64	; 0x40
 8007b1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	637b      	str	r3, [r7, #52]	; 0x34
 8007b20:	2300      	movs	r3, #0
 8007b22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b24:	2300      	movs	r3, #0
 8007b26:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007b2c:	4b59      	ldr	r3, [pc, #356]	; (8007c94 <HAL_RCC_GetSysClockFreq+0x180>)
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	f003 030c 	and.w	r3, r3, #12
 8007b34:	2b08      	cmp	r3, #8
 8007b36:	d00d      	beq.n	8007b54 <HAL_RCC_GetSysClockFreq+0x40>
 8007b38:	2b08      	cmp	r3, #8
 8007b3a:	f200 80a1 	bhi.w	8007c80 <HAL_RCC_GetSysClockFreq+0x16c>
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d002      	beq.n	8007b48 <HAL_RCC_GetSysClockFreq+0x34>
 8007b42:	2b04      	cmp	r3, #4
 8007b44:	d003      	beq.n	8007b4e <HAL_RCC_GetSysClockFreq+0x3a>
 8007b46:	e09b      	b.n	8007c80 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007b48:	4b53      	ldr	r3, [pc, #332]	; (8007c98 <HAL_RCC_GetSysClockFreq+0x184>)
 8007b4a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007b4c:	e09b      	b.n	8007c86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007b4e:	4b53      	ldr	r3, [pc, #332]	; (8007c9c <HAL_RCC_GetSysClockFreq+0x188>)
 8007b50:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007b52:	e098      	b.n	8007c86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007b54:	4b4f      	ldr	r3, [pc, #316]	; (8007c94 <HAL_RCC_GetSysClockFreq+0x180>)
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b5c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007b5e:	4b4d      	ldr	r3, [pc, #308]	; (8007c94 <HAL_RCC_GetSysClockFreq+0x180>)
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d028      	beq.n	8007bbc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b6a:	4b4a      	ldr	r3, [pc, #296]	; (8007c94 <HAL_RCC_GetSysClockFreq+0x180>)
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	099b      	lsrs	r3, r3, #6
 8007b70:	2200      	movs	r2, #0
 8007b72:	623b      	str	r3, [r7, #32]
 8007b74:	627a      	str	r2, [r7, #36]	; 0x24
 8007b76:	6a3b      	ldr	r3, [r7, #32]
 8007b78:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007b7c:	2100      	movs	r1, #0
 8007b7e:	4b47      	ldr	r3, [pc, #284]	; (8007c9c <HAL_RCC_GetSysClockFreq+0x188>)
 8007b80:	fb03 f201 	mul.w	r2, r3, r1
 8007b84:	2300      	movs	r3, #0
 8007b86:	fb00 f303 	mul.w	r3, r0, r3
 8007b8a:	4413      	add	r3, r2
 8007b8c:	4a43      	ldr	r2, [pc, #268]	; (8007c9c <HAL_RCC_GetSysClockFreq+0x188>)
 8007b8e:	fba0 1202 	umull	r1, r2, r0, r2
 8007b92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b94:	460a      	mov	r2, r1
 8007b96:	62ba      	str	r2, [r7, #40]	; 0x28
 8007b98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b9a:	4413      	add	r3, r2
 8007b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	61bb      	str	r3, [r7, #24]
 8007ba4:	61fa      	str	r2, [r7, #28]
 8007ba6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007baa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007bae:	f7f8 ff9f 	bl	8000af0 <__aeabi_uldivmod>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bba:	e053      	b.n	8007c64 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007bbc:	4b35      	ldr	r3, [pc, #212]	; (8007c94 <HAL_RCC_GetSysClockFreq+0x180>)
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	099b      	lsrs	r3, r3, #6
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	613b      	str	r3, [r7, #16]
 8007bc6:	617a      	str	r2, [r7, #20]
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007bce:	f04f 0b00 	mov.w	fp, #0
 8007bd2:	4652      	mov	r2, sl
 8007bd4:	465b      	mov	r3, fp
 8007bd6:	f04f 0000 	mov.w	r0, #0
 8007bda:	f04f 0100 	mov.w	r1, #0
 8007bde:	0159      	lsls	r1, r3, #5
 8007be0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007be4:	0150      	lsls	r0, r2, #5
 8007be6:	4602      	mov	r2, r0
 8007be8:	460b      	mov	r3, r1
 8007bea:	ebb2 080a 	subs.w	r8, r2, sl
 8007bee:	eb63 090b 	sbc.w	r9, r3, fp
 8007bf2:	f04f 0200 	mov.w	r2, #0
 8007bf6:	f04f 0300 	mov.w	r3, #0
 8007bfa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007bfe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007c02:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007c06:	ebb2 0408 	subs.w	r4, r2, r8
 8007c0a:	eb63 0509 	sbc.w	r5, r3, r9
 8007c0e:	f04f 0200 	mov.w	r2, #0
 8007c12:	f04f 0300 	mov.w	r3, #0
 8007c16:	00eb      	lsls	r3, r5, #3
 8007c18:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c1c:	00e2      	lsls	r2, r4, #3
 8007c1e:	4614      	mov	r4, r2
 8007c20:	461d      	mov	r5, r3
 8007c22:	eb14 030a 	adds.w	r3, r4, sl
 8007c26:	603b      	str	r3, [r7, #0]
 8007c28:	eb45 030b 	adc.w	r3, r5, fp
 8007c2c:	607b      	str	r3, [r7, #4]
 8007c2e:	f04f 0200 	mov.w	r2, #0
 8007c32:	f04f 0300 	mov.w	r3, #0
 8007c36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007c3a:	4629      	mov	r1, r5
 8007c3c:	028b      	lsls	r3, r1, #10
 8007c3e:	4621      	mov	r1, r4
 8007c40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007c44:	4621      	mov	r1, r4
 8007c46:	028a      	lsls	r2, r1, #10
 8007c48:	4610      	mov	r0, r2
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c4e:	2200      	movs	r2, #0
 8007c50:	60bb      	str	r3, [r7, #8]
 8007c52:	60fa      	str	r2, [r7, #12]
 8007c54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c58:	f7f8 ff4a 	bl	8000af0 <__aeabi_uldivmod>
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	460b      	mov	r3, r1
 8007c60:	4613      	mov	r3, r2
 8007c62:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007c64:	4b0b      	ldr	r3, [pc, #44]	; (8007c94 <HAL_RCC_GetSysClockFreq+0x180>)
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	0c1b      	lsrs	r3, r3, #16
 8007c6a:	f003 0303 	and.w	r3, r3, #3
 8007c6e:	3301      	adds	r3, #1
 8007c70:	005b      	lsls	r3, r3, #1
 8007c72:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007c74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c7c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007c7e:	e002      	b.n	8007c86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007c80:	4b05      	ldr	r3, [pc, #20]	; (8007c98 <HAL_RCC_GetSysClockFreq+0x184>)
 8007c82:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007c84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3740      	adds	r7, #64	; 0x40
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c92:	bf00      	nop
 8007c94:	40023800 	.word	0x40023800
 8007c98:	00f42400 	.word	0x00f42400
 8007c9c:	017d7840 	.word	0x017d7840

08007ca0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ca4:	4b03      	ldr	r3, [pc, #12]	; (8007cb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr
 8007cb2:	bf00      	nop
 8007cb4:	20000030 	.word	0x20000030

08007cb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007cbc:	f7ff fff0 	bl	8007ca0 <HAL_RCC_GetHCLKFreq>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	4b05      	ldr	r3, [pc, #20]	; (8007cd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	0a9b      	lsrs	r3, r3, #10
 8007cc8:	f003 0307 	and.w	r3, r3, #7
 8007ccc:	4903      	ldr	r1, [pc, #12]	; (8007cdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8007cce:	5ccb      	ldrb	r3, [r1, r3]
 8007cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	40023800 	.word	0x40023800
 8007cdc:	0800d9e8 	.word	0x0800d9e8

08007ce0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007ce4:	f7ff ffdc 	bl	8007ca0 <HAL_RCC_GetHCLKFreq>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	4b05      	ldr	r3, [pc, #20]	; (8007d00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	0b5b      	lsrs	r3, r3, #13
 8007cf0:	f003 0307 	and.w	r3, r3, #7
 8007cf4:	4903      	ldr	r1, [pc, #12]	; (8007d04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007cf6:	5ccb      	ldrb	r3, [r1, r3]
 8007cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	40023800 	.word	0x40023800
 8007d04:	0800d9e8 	.word	0x0800d9e8

08007d08 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d101      	bne.n	8007d1a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	e041      	b.n	8007d9e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d106      	bne.n	8007d34 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f7fb fcfc 	bl	800372c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2202      	movs	r2, #2
 8007d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	3304      	adds	r3, #4
 8007d44:	4619      	mov	r1, r3
 8007d46:	4610      	mov	r0, r2
 8007d48:	f000 f952 	bl	8007ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2201      	movs	r2, #1
 8007d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2201      	movs	r2, #1
 8007d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2201      	movs	r2, #1
 8007d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d9c:	2300      	movs	r3, #0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3708      	adds	r7, #8
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
	...

08007da8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d109      	bne.n	8007dcc <HAL_TIM_PWM_Start+0x24>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	bf14      	ite	ne
 8007dc4:	2301      	movne	r3, #1
 8007dc6:	2300      	moveq	r3, #0
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	e022      	b.n	8007e12 <HAL_TIM_PWM_Start+0x6a>
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	2b04      	cmp	r3, #4
 8007dd0:	d109      	bne.n	8007de6 <HAL_TIM_PWM_Start+0x3e>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	bf14      	ite	ne
 8007dde:	2301      	movne	r3, #1
 8007de0:	2300      	moveq	r3, #0
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	e015      	b.n	8007e12 <HAL_TIM_PWM_Start+0x6a>
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	2b08      	cmp	r3, #8
 8007dea:	d109      	bne.n	8007e00 <HAL_TIM_PWM_Start+0x58>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	bf14      	ite	ne
 8007df8:	2301      	movne	r3, #1
 8007dfa:	2300      	moveq	r3, #0
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	e008      	b.n	8007e12 <HAL_TIM_PWM_Start+0x6a>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	bf14      	ite	ne
 8007e0c:	2301      	movne	r3, #1
 8007e0e:	2300      	moveq	r3, #0
 8007e10:	b2db      	uxtb	r3, r3
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d001      	beq.n	8007e1a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	e07c      	b.n	8007f14 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d104      	bne.n	8007e2a <HAL_TIM_PWM_Start+0x82>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2202      	movs	r2, #2
 8007e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e28:	e013      	b.n	8007e52 <HAL_TIM_PWM_Start+0xaa>
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	2b04      	cmp	r3, #4
 8007e2e:	d104      	bne.n	8007e3a <HAL_TIM_PWM_Start+0x92>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2202      	movs	r2, #2
 8007e34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e38:	e00b      	b.n	8007e52 <HAL_TIM_PWM_Start+0xaa>
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	2b08      	cmp	r3, #8
 8007e3e:	d104      	bne.n	8007e4a <HAL_TIM_PWM_Start+0xa2>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2202      	movs	r2, #2
 8007e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e48:	e003      	b.n	8007e52 <HAL_TIM_PWM_Start+0xaa>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2202      	movs	r2, #2
 8007e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	2201      	movs	r2, #1
 8007e58:	6839      	ldr	r1, [r7, #0]
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f000 fb18 	bl	8008490 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a2d      	ldr	r2, [pc, #180]	; (8007f1c <HAL_TIM_PWM_Start+0x174>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d004      	beq.n	8007e74 <HAL_TIM_PWM_Start+0xcc>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a2c      	ldr	r2, [pc, #176]	; (8007f20 <HAL_TIM_PWM_Start+0x178>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d101      	bne.n	8007e78 <HAL_TIM_PWM_Start+0xd0>
 8007e74:	2301      	movs	r3, #1
 8007e76:	e000      	b.n	8007e7a <HAL_TIM_PWM_Start+0xd2>
 8007e78:	2300      	movs	r3, #0
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d007      	beq.n	8007e8e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a22      	ldr	r2, [pc, #136]	; (8007f1c <HAL_TIM_PWM_Start+0x174>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d022      	beq.n	8007ede <HAL_TIM_PWM_Start+0x136>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ea0:	d01d      	beq.n	8007ede <HAL_TIM_PWM_Start+0x136>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a1f      	ldr	r2, [pc, #124]	; (8007f24 <HAL_TIM_PWM_Start+0x17c>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d018      	beq.n	8007ede <HAL_TIM_PWM_Start+0x136>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a1d      	ldr	r2, [pc, #116]	; (8007f28 <HAL_TIM_PWM_Start+0x180>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d013      	beq.n	8007ede <HAL_TIM_PWM_Start+0x136>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a1c      	ldr	r2, [pc, #112]	; (8007f2c <HAL_TIM_PWM_Start+0x184>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d00e      	beq.n	8007ede <HAL_TIM_PWM_Start+0x136>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a16      	ldr	r2, [pc, #88]	; (8007f20 <HAL_TIM_PWM_Start+0x178>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d009      	beq.n	8007ede <HAL_TIM_PWM_Start+0x136>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a18      	ldr	r2, [pc, #96]	; (8007f30 <HAL_TIM_PWM_Start+0x188>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d004      	beq.n	8007ede <HAL_TIM_PWM_Start+0x136>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a16      	ldr	r2, [pc, #88]	; (8007f34 <HAL_TIM_PWM_Start+0x18c>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d111      	bne.n	8007f02 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	f003 0307 	and.w	r3, r3, #7
 8007ee8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2b06      	cmp	r3, #6
 8007eee:	d010      	beq.n	8007f12 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f042 0201 	orr.w	r2, r2, #1
 8007efe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f00:	e007      	b.n	8007f12 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f042 0201 	orr.w	r2, r2, #1
 8007f10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f12:	2300      	movs	r3, #0
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3710      	adds	r7, #16
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}
 8007f1c:	40010000 	.word	0x40010000
 8007f20:	40010400 	.word	0x40010400
 8007f24:	40000400 	.word	0x40000400
 8007f28:	40000800 	.word	0x40000800
 8007f2c:	40000c00 	.word	0x40000c00
 8007f30:	40014000 	.word	0x40014000
 8007f34:	40001800 	.word	0x40001800

08007f38 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b086      	sub	sp, #24
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	60b9      	str	r1, [r7, #8]
 8007f42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f44:	2300      	movs	r3, #0
 8007f46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d101      	bne.n	8007f56 <HAL_TIM_OC_ConfigChannel+0x1e>
 8007f52:	2302      	movs	r3, #2
 8007f54:	e048      	b.n	8007fe8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2b0c      	cmp	r3, #12
 8007f62:	d839      	bhi.n	8007fd8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8007f64:	a201      	add	r2, pc, #4	; (adr r2, 8007f6c <HAL_TIM_OC_ConfigChannel+0x34>)
 8007f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f6a:	bf00      	nop
 8007f6c:	08007fa1 	.word	0x08007fa1
 8007f70:	08007fd9 	.word	0x08007fd9
 8007f74:	08007fd9 	.word	0x08007fd9
 8007f78:	08007fd9 	.word	0x08007fd9
 8007f7c:	08007faf 	.word	0x08007faf
 8007f80:	08007fd9 	.word	0x08007fd9
 8007f84:	08007fd9 	.word	0x08007fd9
 8007f88:	08007fd9 	.word	0x08007fd9
 8007f8c:	08007fbd 	.word	0x08007fbd
 8007f90:	08007fd9 	.word	0x08007fd9
 8007f94:	08007fd9 	.word	0x08007fd9
 8007f98:	08007fd9 	.word	0x08007fd9
 8007f9c:	08007fcb 	.word	0x08007fcb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	68b9      	ldr	r1, [r7, #8]
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f000 f8c2 	bl	8008130 <TIM_OC1_SetConfig>
      break;
 8007fac:	e017      	b.n	8007fde <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	68b9      	ldr	r1, [r7, #8]
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f000 f92b 	bl	8008210 <TIM_OC2_SetConfig>
      break;
 8007fba:	e010      	b.n	8007fde <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	68b9      	ldr	r1, [r7, #8]
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f000 f99a 	bl	80082fc <TIM_OC3_SetConfig>
      break;
 8007fc8:	e009      	b.n	8007fde <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	68b9      	ldr	r1, [r7, #8]
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f000 fa07 	bl	80083e4 <TIM_OC4_SetConfig>
      break;
 8007fd6:	e002      	b.n	8007fde <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	75fb      	strb	r3, [r7, #23]
      break;
 8007fdc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3718      	adds	r7, #24
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b085      	sub	sp, #20
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	4a40      	ldr	r2, [pc, #256]	; (8008104 <TIM_Base_SetConfig+0x114>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d013      	beq.n	8008030 <TIM_Base_SetConfig+0x40>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800800e:	d00f      	beq.n	8008030 <TIM_Base_SetConfig+0x40>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	4a3d      	ldr	r2, [pc, #244]	; (8008108 <TIM_Base_SetConfig+0x118>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d00b      	beq.n	8008030 <TIM_Base_SetConfig+0x40>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	4a3c      	ldr	r2, [pc, #240]	; (800810c <TIM_Base_SetConfig+0x11c>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d007      	beq.n	8008030 <TIM_Base_SetConfig+0x40>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	4a3b      	ldr	r2, [pc, #236]	; (8008110 <TIM_Base_SetConfig+0x120>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d003      	beq.n	8008030 <TIM_Base_SetConfig+0x40>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	4a3a      	ldr	r2, [pc, #232]	; (8008114 <TIM_Base_SetConfig+0x124>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d108      	bne.n	8008042 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008036:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	4313      	orrs	r3, r2
 8008040:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	4a2f      	ldr	r2, [pc, #188]	; (8008104 <TIM_Base_SetConfig+0x114>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d02b      	beq.n	80080a2 <TIM_Base_SetConfig+0xb2>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008050:	d027      	beq.n	80080a2 <TIM_Base_SetConfig+0xb2>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	4a2c      	ldr	r2, [pc, #176]	; (8008108 <TIM_Base_SetConfig+0x118>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d023      	beq.n	80080a2 <TIM_Base_SetConfig+0xb2>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	4a2b      	ldr	r2, [pc, #172]	; (800810c <TIM_Base_SetConfig+0x11c>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d01f      	beq.n	80080a2 <TIM_Base_SetConfig+0xb2>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	4a2a      	ldr	r2, [pc, #168]	; (8008110 <TIM_Base_SetConfig+0x120>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d01b      	beq.n	80080a2 <TIM_Base_SetConfig+0xb2>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4a29      	ldr	r2, [pc, #164]	; (8008114 <TIM_Base_SetConfig+0x124>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d017      	beq.n	80080a2 <TIM_Base_SetConfig+0xb2>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	4a28      	ldr	r2, [pc, #160]	; (8008118 <TIM_Base_SetConfig+0x128>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d013      	beq.n	80080a2 <TIM_Base_SetConfig+0xb2>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	4a27      	ldr	r2, [pc, #156]	; (800811c <TIM_Base_SetConfig+0x12c>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d00f      	beq.n	80080a2 <TIM_Base_SetConfig+0xb2>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	4a26      	ldr	r2, [pc, #152]	; (8008120 <TIM_Base_SetConfig+0x130>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d00b      	beq.n	80080a2 <TIM_Base_SetConfig+0xb2>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	4a25      	ldr	r2, [pc, #148]	; (8008124 <TIM_Base_SetConfig+0x134>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d007      	beq.n	80080a2 <TIM_Base_SetConfig+0xb2>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	4a24      	ldr	r2, [pc, #144]	; (8008128 <TIM_Base_SetConfig+0x138>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d003      	beq.n	80080a2 <TIM_Base_SetConfig+0xb2>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	4a23      	ldr	r2, [pc, #140]	; (800812c <TIM_Base_SetConfig+0x13c>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d108      	bne.n	80080b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	68fa      	ldr	r2, [r7, #12]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	695b      	ldr	r3, [r3, #20]
 80080be:	4313      	orrs	r3, r2
 80080c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	689a      	ldr	r2, [r3, #8]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	4a0a      	ldr	r2, [pc, #40]	; (8008104 <TIM_Base_SetConfig+0x114>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d003      	beq.n	80080e8 <TIM_Base_SetConfig+0xf8>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	4a0c      	ldr	r2, [pc, #48]	; (8008114 <TIM_Base_SetConfig+0x124>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d103      	bne.n	80080f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	691a      	ldr	r2, [r3, #16]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2201      	movs	r2, #1
 80080f4:	615a      	str	r2, [r3, #20]
}
 80080f6:	bf00      	nop
 80080f8:	3714      	adds	r7, #20
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr
 8008102:	bf00      	nop
 8008104:	40010000 	.word	0x40010000
 8008108:	40000400 	.word	0x40000400
 800810c:	40000800 	.word	0x40000800
 8008110:	40000c00 	.word	0x40000c00
 8008114:	40010400 	.word	0x40010400
 8008118:	40014000 	.word	0x40014000
 800811c:	40014400 	.word	0x40014400
 8008120:	40014800 	.word	0x40014800
 8008124:	40001800 	.word	0x40001800
 8008128:	40001c00 	.word	0x40001c00
 800812c:	40002000 	.word	0x40002000

08008130 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008130:	b480      	push	{r7}
 8008132:	b087      	sub	sp, #28
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6a1b      	ldr	r3, [r3, #32]
 800813e:	f023 0201 	bic.w	r2, r3, #1
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6a1b      	ldr	r3, [r3, #32]
 800814a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	699b      	ldr	r3, [r3, #24]
 8008156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800815e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f023 0303 	bic.w	r3, r3, #3
 8008166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	68fa      	ldr	r2, [r7, #12]
 800816e:	4313      	orrs	r3, r2
 8008170:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	f023 0302 	bic.w	r3, r3, #2
 8008178:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	689b      	ldr	r3, [r3, #8]
 800817e:	697a      	ldr	r2, [r7, #20]
 8008180:	4313      	orrs	r3, r2
 8008182:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	4a20      	ldr	r2, [pc, #128]	; (8008208 <TIM_OC1_SetConfig+0xd8>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d003      	beq.n	8008194 <TIM_OC1_SetConfig+0x64>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	4a1f      	ldr	r2, [pc, #124]	; (800820c <TIM_OC1_SetConfig+0xdc>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d10c      	bne.n	80081ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	f023 0308 	bic.w	r3, r3, #8
 800819a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	68db      	ldr	r3, [r3, #12]
 80081a0:	697a      	ldr	r2, [r7, #20]
 80081a2:	4313      	orrs	r3, r2
 80081a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	f023 0304 	bic.w	r3, r3, #4
 80081ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	4a15      	ldr	r2, [pc, #84]	; (8008208 <TIM_OC1_SetConfig+0xd8>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d003      	beq.n	80081be <TIM_OC1_SetConfig+0x8e>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	4a14      	ldr	r2, [pc, #80]	; (800820c <TIM_OC1_SetConfig+0xdc>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d111      	bne.n	80081e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80081cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	695b      	ldr	r3, [r3, #20]
 80081d2:	693a      	ldr	r2, [r7, #16]
 80081d4:	4313      	orrs	r3, r2
 80081d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	699b      	ldr	r3, [r3, #24]
 80081dc:	693a      	ldr	r2, [r7, #16]
 80081de:	4313      	orrs	r3, r2
 80081e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	693a      	ldr	r2, [r7, #16]
 80081e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	68fa      	ldr	r2, [r7, #12]
 80081ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	685a      	ldr	r2, [r3, #4]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	697a      	ldr	r2, [r7, #20]
 80081fa:	621a      	str	r2, [r3, #32]
}
 80081fc:	bf00      	nop
 80081fe:	371c      	adds	r7, #28
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr
 8008208:	40010000 	.word	0x40010000
 800820c:	40010400 	.word	0x40010400

08008210 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008210:	b480      	push	{r7}
 8008212:	b087      	sub	sp, #28
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6a1b      	ldr	r3, [r3, #32]
 800821e:	f023 0210 	bic.w	r2, r3, #16
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6a1b      	ldr	r3, [r3, #32]
 800822a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	699b      	ldr	r3, [r3, #24]
 8008236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800823e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008246:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	021b      	lsls	r3, r3, #8
 800824e:	68fa      	ldr	r2, [r7, #12]
 8008250:	4313      	orrs	r3, r2
 8008252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	f023 0320 	bic.w	r3, r3, #32
 800825a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	011b      	lsls	r3, r3, #4
 8008262:	697a      	ldr	r2, [r7, #20]
 8008264:	4313      	orrs	r3, r2
 8008266:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	4a22      	ldr	r2, [pc, #136]	; (80082f4 <TIM_OC2_SetConfig+0xe4>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d003      	beq.n	8008278 <TIM_OC2_SetConfig+0x68>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	4a21      	ldr	r2, [pc, #132]	; (80082f8 <TIM_OC2_SetConfig+0xe8>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d10d      	bne.n	8008294 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800827e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	68db      	ldr	r3, [r3, #12]
 8008284:	011b      	lsls	r3, r3, #4
 8008286:	697a      	ldr	r2, [r7, #20]
 8008288:	4313      	orrs	r3, r2
 800828a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008292:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	4a17      	ldr	r2, [pc, #92]	; (80082f4 <TIM_OC2_SetConfig+0xe4>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d003      	beq.n	80082a4 <TIM_OC2_SetConfig+0x94>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	4a16      	ldr	r2, [pc, #88]	; (80082f8 <TIM_OC2_SetConfig+0xe8>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d113      	bne.n	80082cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80082aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80082b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	695b      	ldr	r3, [r3, #20]
 80082b8:	009b      	lsls	r3, r3, #2
 80082ba:	693a      	ldr	r2, [r7, #16]
 80082bc:	4313      	orrs	r3, r2
 80082be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	699b      	ldr	r3, [r3, #24]
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	693a      	ldr	r2, [r7, #16]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	693a      	ldr	r2, [r7, #16]
 80082d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	68fa      	ldr	r2, [r7, #12]
 80082d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	685a      	ldr	r2, [r3, #4]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	697a      	ldr	r2, [r7, #20]
 80082e4:	621a      	str	r2, [r3, #32]
}
 80082e6:	bf00      	nop
 80082e8:	371c      	adds	r7, #28
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr
 80082f2:	bf00      	nop
 80082f4:	40010000 	.word	0x40010000
 80082f8:	40010400 	.word	0x40010400

080082fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b087      	sub	sp, #28
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6a1b      	ldr	r3, [r3, #32]
 800830a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6a1b      	ldr	r3, [r3, #32]
 8008316:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	69db      	ldr	r3, [r3, #28]
 8008322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800832a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f023 0303 	bic.w	r3, r3, #3
 8008332:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	68fa      	ldr	r2, [r7, #12]
 800833a:	4313      	orrs	r3, r2
 800833c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008344:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	021b      	lsls	r3, r3, #8
 800834c:	697a      	ldr	r2, [r7, #20]
 800834e:	4313      	orrs	r3, r2
 8008350:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4a21      	ldr	r2, [pc, #132]	; (80083dc <TIM_OC3_SetConfig+0xe0>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d003      	beq.n	8008362 <TIM_OC3_SetConfig+0x66>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4a20      	ldr	r2, [pc, #128]	; (80083e0 <TIM_OC3_SetConfig+0xe4>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d10d      	bne.n	800837e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008368:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	68db      	ldr	r3, [r3, #12]
 800836e:	021b      	lsls	r3, r3, #8
 8008370:	697a      	ldr	r2, [r7, #20]
 8008372:	4313      	orrs	r3, r2
 8008374:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800837c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	4a16      	ldr	r2, [pc, #88]	; (80083dc <TIM_OC3_SetConfig+0xe0>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d003      	beq.n	800838e <TIM_OC3_SetConfig+0x92>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	4a15      	ldr	r2, [pc, #84]	; (80083e0 <TIM_OC3_SetConfig+0xe4>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d113      	bne.n	80083b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008394:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800839c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	695b      	ldr	r3, [r3, #20]
 80083a2:	011b      	lsls	r3, r3, #4
 80083a4:	693a      	ldr	r2, [r7, #16]
 80083a6:	4313      	orrs	r3, r2
 80083a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	699b      	ldr	r3, [r3, #24]
 80083ae:	011b      	lsls	r3, r3, #4
 80083b0:	693a      	ldr	r2, [r7, #16]
 80083b2:	4313      	orrs	r3, r2
 80083b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	693a      	ldr	r2, [r7, #16]
 80083ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	68fa      	ldr	r2, [r7, #12]
 80083c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	685a      	ldr	r2, [r3, #4]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	697a      	ldr	r2, [r7, #20]
 80083ce:	621a      	str	r2, [r3, #32]
}
 80083d0:	bf00      	nop
 80083d2:	371c      	adds	r7, #28
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr
 80083dc:	40010000 	.word	0x40010000
 80083e0:	40010400 	.word	0x40010400

080083e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b087      	sub	sp, #28
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6a1b      	ldr	r3, [r3, #32]
 80083f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6a1b      	ldr	r3, [r3, #32]
 80083fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	69db      	ldr	r3, [r3, #28]
 800840a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800841a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	021b      	lsls	r3, r3, #8
 8008422:	68fa      	ldr	r2, [r7, #12]
 8008424:	4313      	orrs	r3, r2
 8008426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800842e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	031b      	lsls	r3, r3, #12
 8008436:	693a      	ldr	r2, [r7, #16]
 8008438:	4313      	orrs	r3, r2
 800843a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	4a12      	ldr	r2, [pc, #72]	; (8008488 <TIM_OC4_SetConfig+0xa4>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d003      	beq.n	800844c <TIM_OC4_SetConfig+0x68>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	4a11      	ldr	r2, [pc, #68]	; (800848c <TIM_OC4_SetConfig+0xa8>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d109      	bne.n	8008460 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008452:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	695b      	ldr	r3, [r3, #20]
 8008458:	019b      	lsls	r3, r3, #6
 800845a:	697a      	ldr	r2, [r7, #20]
 800845c:	4313      	orrs	r3, r2
 800845e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	697a      	ldr	r2, [r7, #20]
 8008464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	68fa      	ldr	r2, [r7, #12]
 800846a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	685a      	ldr	r2, [r3, #4]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	693a      	ldr	r2, [r7, #16]
 8008478:	621a      	str	r2, [r3, #32]
}
 800847a:	bf00      	nop
 800847c:	371c      	adds	r7, #28
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr
 8008486:	bf00      	nop
 8008488:	40010000 	.word	0x40010000
 800848c:	40010400 	.word	0x40010400

08008490 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008490:	b480      	push	{r7}
 8008492:	b087      	sub	sp, #28
 8008494:	af00      	add	r7, sp, #0
 8008496:	60f8      	str	r0, [r7, #12]
 8008498:	60b9      	str	r1, [r7, #8]
 800849a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	f003 031f 	and.w	r3, r3, #31
 80084a2:	2201      	movs	r2, #1
 80084a4:	fa02 f303 	lsl.w	r3, r2, r3
 80084a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	6a1a      	ldr	r2, [r3, #32]
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	43db      	mvns	r3, r3
 80084b2:	401a      	ands	r2, r3
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	6a1a      	ldr	r2, [r3, #32]
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	f003 031f 	and.w	r3, r3, #31
 80084c2:	6879      	ldr	r1, [r7, #4]
 80084c4:	fa01 f303 	lsl.w	r3, r1, r3
 80084c8:	431a      	orrs	r2, r3
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	621a      	str	r2, [r3, #32]
}
 80084ce:	bf00      	nop
 80084d0:	371c      	adds	r7, #28
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr
	...

080084dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80084dc:	b480      	push	{r7}
 80084de:	b085      	sub	sp, #20
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d101      	bne.n	80084f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80084f0:	2302      	movs	r3, #2
 80084f2:	e05a      	b.n	80085aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2201      	movs	r2, #1
 80084f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2202      	movs	r2, #2
 8008500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	689b      	ldr	r3, [r3, #8]
 8008512:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800851a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	68fa      	ldr	r2, [r7, #12]
 8008522:	4313      	orrs	r3, r2
 8008524:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	68fa      	ldr	r2, [r7, #12]
 800852c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a21      	ldr	r2, [pc, #132]	; (80085b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d022      	beq.n	800857e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008540:	d01d      	beq.n	800857e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a1d      	ldr	r2, [pc, #116]	; (80085bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d018      	beq.n	800857e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a1b      	ldr	r2, [pc, #108]	; (80085c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d013      	beq.n	800857e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a1a      	ldr	r2, [pc, #104]	; (80085c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d00e      	beq.n	800857e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a18      	ldr	r2, [pc, #96]	; (80085c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d009      	beq.n	800857e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a17      	ldr	r2, [pc, #92]	; (80085cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d004      	beq.n	800857e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a15      	ldr	r2, [pc, #84]	; (80085d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d10c      	bne.n	8008598 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008584:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	68ba      	ldr	r2, [r7, #8]
 800858c:	4313      	orrs	r3, r2
 800858e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	68ba      	ldr	r2, [r7, #8]
 8008596:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2201      	movs	r2, #1
 800859c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085a8:	2300      	movs	r3, #0
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3714      	adds	r7, #20
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr
 80085b6:	bf00      	nop
 80085b8:	40010000 	.word	0x40010000
 80085bc:	40000400 	.word	0x40000400
 80085c0:	40000800 	.word	0x40000800
 80085c4:	40000c00 	.word	0x40000c00
 80085c8:	40010400 	.word	0x40010400
 80085cc:	40014000 	.word	0x40014000
 80085d0:	40001800 	.word	0x40001800

080085d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b085      	sub	sp, #20
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80085de:	2300      	movs	r3, #0
 80085e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d101      	bne.n	80085f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80085ec:	2302      	movs	r3, #2
 80085ee:	e03d      	b.n	800866c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	68db      	ldr	r3, [r3, #12]
 8008602:	4313      	orrs	r3, r2
 8008604:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	4313      	orrs	r3, r2
 8008612:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	4313      	orrs	r3, r2
 8008620:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4313      	orrs	r3, r2
 800862e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	691b      	ldr	r3, [r3, #16]
 800863a:	4313      	orrs	r3, r2
 800863c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	695b      	ldr	r3, [r3, #20]
 8008648:	4313      	orrs	r3, r2
 800864a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	69db      	ldr	r3, [r3, #28]
 8008656:	4313      	orrs	r3, r2
 8008658:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	68fa      	ldr	r2, [r7, #12]
 8008660:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2200      	movs	r2, #0
 8008666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800866a:	2300      	movs	r3, #0
}
 800866c:	4618      	mov	r0, r3
 800866e:	3714      	adds	r7, #20
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d101      	bne.n	800868a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008686:	2301      	movs	r3, #1
 8008688:	e03f      	b.n	800870a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008690:	b2db      	uxtb	r3, r3
 8008692:	2b00      	cmp	r3, #0
 8008694:	d106      	bne.n	80086a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f7fb f8a0 	bl	80037e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2224      	movs	r2, #36	; 0x24
 80086a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	68da      	ldr	r2, [r3, #12]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80086ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 ff9b 	bl	80095f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	691a      	ldr	r2, [r3, #16]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80086d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	695a      	ldr	r2, [r3, #20]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80086e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	68da      	ldr	r2, [r3, #12]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80086f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2220      	movs	r2, #32
 80086fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2220      	movs	r2, #32
 8008704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008708:	2300      	movs	r3, #0
}
 800870a:	4618      	mov	r0, r3
 800870c:	3708      	adds	r7, #8
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}

08008712 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008712:	b580      	push	{r7, lr}
 8008714:	b08a      	sub	sp, #40	; 0x28
 8008716:	af02      	add	r7, sp, #8
 8008718:	60f8      	str	r0, [r7, #12]
 800871a:	60b9      	str	r1, [r7, #8]
 800871c:	603b      	str	r3, [r7, #0]
 800871e:	4613      	mov	r3, r2
 8008720:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008722:	2300      	movs	r3, #0
 8008724:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800872c:	b2db      	uxtb	r3, r3
 800872e:	2b20      	cmp	r3, #32
 8008730:	d17c      	bne.n	800882c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d002      	beq.n	800873e <HAL_UART_Transmit+0x2c>
 8008738:	88fb      	ldrh	r3, [r7, #6]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d101      	bne.n	8008742 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800873e:	2301      	movs	r3, #1
 8008740:	e075      	b.n	800882e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008748:	2b01      	cmp	r3, #1
 800874a:	d101      	bne.n	8008750 <HAL_UART_Transmit+0x3e>
 800874c:	2302      	movs	r3, #2
 800874e:	e06e      	b.n	800882e <HAL_UART_Transmit+0x11c>
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2201      	movs	r2, #1
 8008754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2200      	movs	r2, #0
 800875c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2221      	movs	r2, #33	; 0x21
 8008762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008766:	f7fb f9a9 	bl	8003abc <HAL_GetTick>
 800876a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	88fa      	ldrh	r2, [r7, #6]
 8008770:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	88fa      	ldrh	r2, [r7, #6]
 8008776:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008780:	d108      	bne.n	8008794 <HAL_UART_Transmit+0x82>
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	691b      	ldr	r3, [r3, #16]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d104      	bne.n	8008794 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800878a:	2300      	movs	r3, #0
 800878c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	61bb      	str	r3, [r7, #24]
 8008792:	e003      	b.n	800879c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008798:	2300      	movs	r3, #0
 800879a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2200      	movs	r2, #0
 80087a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80087a4:	e02a      	b.n	80087fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	9300      	str	r3, [sp, #0]
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	2200      	movs	r2, #0
 80087ae:	2180      	movs	r1, #128	; 0x80
 80087b0:	68f8      	ldr	r0, [r7, #12]
 80087b2:	f000 fc53 	bl	800905c <UART_WaitOnFlagUntilTimeout>
 80087b6:	4603      	mov	r3, r0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d001      	beq.n	80087c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80087bc:	2303      	movs	r3, #3
 80087be:	e036      	b.n	800882e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80087c0:	69fb      	ldr	r3, [r7, #28]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d10b      	bne.n	80087de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	881b      	ldrh	r3, [r3, #0]
 80087ca:	461a      	mov	r2, r3
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80087d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80087d6:	69bb      	ldr	r3, [r7, #24]
 80087d8:	3302      	adds	r3, #2
 80087da:	61bb      	str	r3, [r7, #24]
 80087dc:	e007      	b.n	80087ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80087de:	69fb      	ldr	r3, [r7, #28]
 80087e0:	781a      	ldrb	r2, [r3, #0]
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	3301      	adds	r3, #1
 80087ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	3b01      	subs	r3, #1
 80087f6:	b29a      	uxth	r2, r3
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008800:	b29b      	uxth	r3, r3
 8008802:	2b00      	cmp	r3, #0
 8008804:	d1cf      	bne.n	80087a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	9300      	str	r3, [sp, #0]
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	2200      	movs	r2, #0
 800880e:	2140      	movs	r1, #64	; 0x40
 8008810:	68f8      	ldr	r0, [r7, #12]
 8008812:	f000 fc23 	bl	800905c <UART_WaitOnFlagUntilTimeout>
 8008816:	4603      	mov	r3, r0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d001      	beq.n	8008820 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800881c:	2303      	movs	r3, #3
 800881e:	e006      	b.n	800882e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2220      	movs	r2, #32
 8008824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008828:	2300      	movs	r3, #0
 800882a:	e000      	b.n	800882e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800882c:	2302      	movs	r3, #2
  }
}
 800882e:	4618      	mov	r0, r3
 8008830:	3720      	adds	r7, #32
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}

08008836 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008836:	b580      	push	{r7, lr}
 8008838:	b08c      	sub	sp, #48	; 0x30
 800883a:	af00      	add	r7, sp, #0
 800883c:	60f8      	str	r0, [r7, #12]
 800883e:	60b9      	str	r1, [r7, #8]
 8008840:	4613      	mov	r3, r2
 8008842:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800884a:	b2db      	uxtb	r3, r3
 800884c:	2b20      	cmp	r3, #32
 800884e:	d152      	bne.n	80088f6 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d002      	beq.n	800885c <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8008856:	88fb      	ldrh	r3, [r7, #6]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d101      	bne.n	8008860 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800885c:	2301      	movs	r3, #1
 800885e:	e04b      	b.n	80088f8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008866:	2b01      	cmp	r3, #1
 8008868:	d101      	bne.n	800886e <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800886a:	2302      	movs	r3, #2
 800886c:	e044      	b.n	80088f8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2201      	movs	r2, #1
 8008872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2201      	movs	r2, #1
 800887a:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800887c:	88fb      	ldrh	r3, [r7, #6]
 800887e:	461a      	mov	r2, r3
 8008880:	68b9      	ldr	r1, [r7, #8]
 8008882:	68f8      	ldr	r0, [r7, #12]
 8008884:	f000 fc58 	bl	8009138 <UART_Start_Receive_DMA>
 8008888:	4603      	mov	r3, r0
 800888a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800888e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008892:	2b00      	cmp	r3, #0
 8008894:	d12c      	bne.n	80088f0 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800889a:	2b01      	cmp	r3, #1
 800889c:	d125      	bne.n	80088ea <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800889e:	2300      	movs	r3, #0
 80088a0:	613b      	str	r3, [r7, #16]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	613b      	str	r3, [r7, #16]
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	613b      	str	r3, [r7, #16]
 80088b2:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	330c      	adds	r3, #12
 80088ba:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088bc:	69bb      	ldr	r3, [r7, #24]
 80088be:	e853 3f00 	ldrex	r3, [r3]
 80088c2:	617b      	str	r3, [r7, #20]
   return(result);
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	f043 0310 	orr.w	r3, r3, #16
 80088ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	330c      	adds	r3, #12
 80088d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088d4:	627a      	str	r2, [r7, #36]	; 0x24
 80088d6:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d8:	6a39      	ldr	r1, [r7, #32]
 80088da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088dc:	e841 2300 	strex	r3, r2, [r1]
 80088e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80088e2:	69fb      	ldr	r3, [r7, #28]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d1e5      	bne.n	80088b4 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 80088e8:	e002      	b.n	80088f0 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80088ea:	2301      	movs	r3, #1
 80088ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80088f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80088f4:	e000      	b.n	80088f8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80088f6:	2302      	movs	r3, #2
  }
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3730      	adds	r7, #48	; 0x30
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b0ba      	sub	sp, #232	; 0xe8
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	68db      	ldr	r3, [r3, #12]
 8008918:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	695b      	ldr	r3, [r3, #20]
 8008922:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008926:	2300      	movs	r3, #0
 8008928:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800892c:	2300      	movs	r3, #0
 800892e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008936:	f003 030f 	and.w	r3, r3, #15
 800893a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800893e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008942:	2b00      	cmp	r3, #0
 8008944:	d10f      	bne.n	8008966 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800894a:	f003 0320 	and.w	r3, r3, #32
 800894e:	2b00      	cmp	r3, #0
 8008950:	d009      	beq.n	8008966 <HAL_UART_IRQHandler+0x66>
 8008952:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008956:	f003 0320 	and.w	r3, r3, #32
 800895a:	2b00      	cmp	r3, #0
 800895c:	d003      	beq.n	8008966 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 fd8f 	bl	8009482 <UART_Receive_IT>
      return;
 8008964:	e256      	b.n	8008e14 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008966:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800896a:	2b00      	cmp	r3, #0
 800896c:	f000 80de 	beq.w	8008b2c <HAL_UART_IRQHandler+0x22c>
 8008970:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008974:	f003 0301 	and.w	r3, r3, #1
 8008978:	2b00      	cmp	r3, #0
 800897a:	d106      	bne.n	800898a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800897c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008980:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008984:	2b00      	cmp	r3, #0
 8008986:	f000 80d1 	beq.w	8008b2c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800898a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800898e:	f003 0301 	and.w	r3, r3, #1
 8008992:	2b00      	cmp	r3, #0
 8008994:	d00b      	beq.n	80089ae <HAL_UART_IRQHandler+0xae>
 8008996:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800899a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d005      	beq.n	80089ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a6:	f043 0201 	orr.w	r2, r3, #1
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80089ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089b2:	f003 0304 	and.w	r3, r3, #4
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d00b      	beq.n	80089d2 <HAL_UART_IRQHandler+0xd2>
 80089ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089be:	f003 0301 	and.w	r3, r3, #1
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d005      	beq.n	80089d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ca:	f043 0202 	orr.w	r2, r3, #2
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80089d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089d6:	f003 0302 	and.w	r3, r3, #2
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d00b      	beq.n	80089f6 <HAL_UART_IRQHandler+0xf6>
 80089de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089e2:	f003 0301 	and.w	r3, r3, #1
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d005      	beq.n	80089f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ee:	f043 0204 	orr.w	r2, r3, #4
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80089f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089fa:	f003 0308 	and.w	r3, r3, #8
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d011      	beq.n	8008a26 <HAL_UART_IRQHandler+0x126>
 8008a02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a06:	f003 0320 	and.w	r3, r3, #32
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d105      	bne.n	8008a1a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008a0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a12:	f003 0301 	and.w	r3, r3, #1
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d005      	beq.n	8008a26 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a1e:	f043 0208 	orr.w	r2, r3, #8
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	f000 81ed 	beq.w	8008e0a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a34:	f003 0320 	and.w	r3, r3, #32
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d008      	beq.n	8008a4e <HAL_UART_IRQHandler+0x14e>
 8008a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a40:	f003 0320 	and.w	r3, r3, #32
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d002      	beq.n	8008a4e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f000 fd1a 	bl	8009482 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	695b      	ldr	r3, [r3, #20]
 8008a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a58:	2b40      	cmp	r3, #64	; 0x40
 8008a5a:	bf0c      	ite	eq
 8008a5c:	2301      	moveq	r3, #1
 8008a5e:	2300      	movne	r3, #0
 8008a60:	b2db      	uxtb	r3, r3
 8008a62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a6a:	f003 0308 	and.w	r3, r3, #8
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d103      	bne.n	8008a7a <HAL_UART_IRQHandler+0x17a>
 8008a72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d04f      	beq.n	8008b1a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 fc22 	bl	80092c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	695b      	ldr	r3, [r3, #20]
 8008a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a8a:	2b40      	cmp	r3, #64	; 0x40
 8008a8c:	d141      	bne.n	8008b12 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	3314      	adds	r3, #20
 8008a94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008a9c:	e853 3f00 	ldrex	r3, [r3]
 8008aa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008aa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008aa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008aac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	3314      	adds	r3, #20
 8008ab6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008aba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008abe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008ac6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008aca:	e841 2300 	strex	r3, r2, [r1]
 8008ace:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008ad2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d1d9      	bne.n	8008a8e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d013      	beq.n	8008b0a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ae6:	4a7d      	ldr	r2, [pc, #500]	; (8008cdc <HAL_UART_IRQHandler+0x3dc>)
 8008ae8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7fb fe68 	bl	80047c4 <HAL_DMA_Abort_IT>
 8008af4:	4603      	mov	r3, r0
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d016      	beq.n	8008b28 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b00:	687a      	ldr	r2, [r7, #4]
 8008b02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008b04:	4610      	mov	r0, r2
 8008b06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b08:	e00e      	b.n	8008b28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 f9a4 	bl	8008e58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b10:	e00a      	b.n	8008b28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 f9a0 	bl	8008e58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b18:	e006      	b.n	8008b28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 f99c 	bl	8008e58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2200      	movs	r2, #0
 8008b24:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008b26:	e170      	b.n	8008e0a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b28:	bf00      	nop
    return;
 8008b2a:	e16e      	b.n	8008e0a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	f040 814a 	bne.w	8008dca <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b3a:	f003 0310 	and.w	r3, r3, #16
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	f000 8143 	beq.w	8008dca <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b48:	f003 0310 	and.w	r3, r3, #16
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	f000 813c 	beq.w	8008dca <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008b52:	2300      	movs	r3, #0
 8008b54:	60bb      	str	r3, [r7, #8]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	60bb      	str	r3, [r7, #8]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	60bb      	str	r3, [r7, #8]
 8008b66:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	695b      	ldr	r3, [r3, #20]
 8008b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b72:	2b40      	cmp	r3, #64	; 0x40
 8008b74:	f040 80b4 	bne.w	8008ce0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008b84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	f000 8140 	beq.w	8008e0e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008b92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008b96:	429a      	cmp	r2, r3
 8008b98:	f080 8139 	bcs.w	8008e0e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008ba2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba8:	69db      	ldr	r3, [r3, #28]
 8008baa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bae:	f000 8088 	beq.w	8008cc2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	330c      	adds	r3, #12
 8008bb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008bc0:	e853 3f00 	ldrex	r3, [r3]
 8008bc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008bc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008bcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008bd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	330c      	adds	r3, #12
 8008bda:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008bde:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008be2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008bea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008bee:	e841 2300 	strex	r3, r2, [r1]
 8008bf2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008bf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d1d9      	bne.n	8008bb2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	3314      	adds	r3, #20
 8008c04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c08:	e853 3f00 	ldrex	r3, [r3]
 8008c0c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008c0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c10:	f023 0301 	bic.w	r3, r3, #1
 8008c14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	3314      	adds	r3, #20
 8008c1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008c22:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008c26:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c28:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008c2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008c2e:	e841 2300 	strex	r3, r2, [r1]
 8008c32:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008c34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d1e1      	bne.n	8008bfe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	3314      	adds	r3, #20
 8008c40:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008c44:	e853 3f00 	ldrex	r3, [r3]
 8008c48:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008c4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	3314      	adds	r3, #20
 8008c5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008c5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008c60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008c64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008c66:	e841 2300 	strex	r3, r2, [r1]
 8008c6a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008c6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d1e3      	bne.n	8008c3a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2220      	movs	r2, #32
 8008c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	330c      	adds	r3, #12
 8008c86:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c8a:	e853 3f00 	ldrex	r3, [r3]
 8008c8e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008c90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c92:	f023 0310 	bic.w	r3, r3, #16
 8008c96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	330c      	adds	r3, #12
 8008ca0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008ca4:	65ba      	str	r2, [r7, #88]	; 0x58
 8008ca6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008caa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008cac:	e841 2300 	strex	r3, r2, [r1]
 8008cb0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008cb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d1e3      	bne.n	8008c80 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f7fb fd11 	bl	80046e4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	1ad3      	subs	r3, r2, r3
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f7f8 fdfa 	bl	80018cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008cd8:	e099      	b.n	8008e0e <HAL_UART_IRQHandler+0x50e>
 8008cda:	bf00      	nop
 8008cdc:	0800938b 	.word	0x0800938b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	1ad3      	subs	r3, r2, r3
 8008cec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	f000 808b 	beq.w	8008e12 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008cfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	f000 8086 	beq.w	8008e12 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	330c      	adds	r3, #12
 8008d0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d10:	e853 3f00 	ldrex	r3, [r3]
 8008d14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	330c      	adds	r3, #12
 8008d26:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008d2a:	647a      	str	r2, [r7, #68]	; 0x44
 8008d2c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d32:	e841 2300 	strex	r3, r2, [r1]
 8008d36:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d1e3      	bne.n	8008d06 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	3314      	adds	r3, #20
 8008d44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d48:	e853 3f00 	ldrex	r3, [r3]
 8008d4c:	623b      	str	r3, [r7, #32]
   return(result);
 8008d4e:	6a3b      	ldr	r3, [r7, #32]
 8008d50:	f023 0301 	bic.w	r3, r3, #1
 8008d54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	3314      	adds	r3, #20
 8008d5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008d62:	633a      	str	r2, [r7, #48]	; 0x30
 8008d64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d6a:	e841 2300 	strex	r3, r2, [r1]
 8008d6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d1e3      	bne.n	8008d3e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2220      	movs	r2, #32
 8008d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2200      	movs	r2, #0
 8008d82:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	330c      	adds	r3, #12
 8008d8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	e853 3f00 	ldrex	r3, [r3]
 8008d92:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f023 0310 	bic.w	r3, r3, #16
 8008d9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	330c      	adds	r3, #12
 8008da4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008da8:	61fa      	str	r2, [r7, #28]
 8008daa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dac:	69b9      	ldr	r1, [r7, #24]
 8008dae:	69fa      	ldr	r2, [r7, #28]
 8008db0:	e841 2300 	strex	r3, r2, [r1]
 8008db4:	617b      	str	r3, [r7, #20]
   return(result);
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d1e3      	bne.n	8008d84 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008dbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f7f8 fd82 	bl	80018cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008dc8:	e023      	b.n	8008e12 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d009      	beq.n	8008dea <HAL_UART_IRQHandler+0x4ea>
 8008dd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d003      	beq.n	8008dea <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 fae5 	bl	80093b2 <UART_Transmit_IT>
    return;
 8008de8:	e014      	b.n	8008e14 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d00e      	beq.n	8008e14 <HAL_UART_IRQHandler+0x514>
 8008df6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d008      	beq.n	8008e14 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 fb25 	bl	8009452 <UART_EndTransmit_IT>
    return;
 8008e08:	e004      	b.n	8008e14 <HAL_UART_IRQHandler+0x514>
    return;
 8008e0a:	bf00      	nop
 8008e0c:	e002      	b.n	8008e14 <HAL_UART_IRQHandler+0x514>
      return;
 8008e0e:	bf00      	nop
 8008e10:	e000      	b.n	8008e14 <HAL_UART_IRQHandler+0x514>
      return;
 8008e12:	bf00      	nop
  }
}
 8008e14:	37e8      	adds	r7, #232	; 0xe8
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
 8008e1a:	bf00      	nop

08008e1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b083      	sub	sp, #12
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008e24:	bf00      	nop
 8008e26:	370c      	adds	r7, #12
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr

08008e30 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b083      	sub	sp, #12
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008e38:	bf00      	nop
 8008e3a:	370c      	adds	r7, #12
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b083      	sub	sp, #12
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008e4c:	bf00      	nop
 8008e4e:	370c      	adds	r7, #12
 8008e50:	46bd      	mov	sp, r7
 8008e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e56:	4770      	bx	lr

08008e58 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b083      	sub	sp, #12
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008e60:	bf00      	nop
 8008e62:	370c      	adds	r7, #12
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr

08008e6c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b09c      	sub	sp, #112	; 0x70
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e78:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d172      	bne.n	8008f6e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	330c      	adds	r3, #12
 8008e94:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e98:	e853 3f00 	ldrex	r3, [r3]
 8008e9c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008e9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ea0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ea4:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	330c      	adds	r3, #12
 8008eac:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008eae:	65ba      	str	r2, [r7, #88]	; 0x58
 8008eb0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008eb4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008eb6:	e841 2300 	strex	r3, r2, [r1]
 8008eba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008ebc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d1e5      	bne.n	8008e8e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	3314      	adds	r3, #20
 8008ec8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ecc:	e853 3f00 	ldrex	r3, [r3]
 8008ed0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ed4:	f023 0301 	bic.w	r3, r3, #1
 8008ed8:	667b      	str	r3, [r7, #100]	; 0x64
 8008eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	3314      	adds	r3, #20
 8008ee0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008ee2:	647a      	str	r2, [r7, #68]	; 0x44
 8008ee4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008ee8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008eea:	e841 2300 	strex	r3, r2, [r1]
 8008eee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d1e5      	bne.n	8008ec2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ef6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	3314      	adds	r3, #20
 8008efc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f00:	e853 3f00 	ldrex	r3, [r3]
 8008f04:	623b      	str	r3, [r7, #32]
   return(result);
 8008f06:	6a3b      	ldr	r3, [r7, #32]
 8008f08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f0c:	663b      	str	r3, [r7, #96]	; 0x60
 8008f0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	3314      	adds	r3, #20
 8008f14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008f16:	633a      	str	r2, [r7, #48]	; 0x30
 8008f18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f1e:	e841 2300 	strex	r3, r2, [r1]
 8008f22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d1e5      	bne.n	8008ef6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008f2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f2c:	2220      	movs	r2, #32
 8008f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f36:	2b01      	cmp	r3, #1
 8008f38:	d119      	bne.n	8008f6e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	330c      	adds	r3, #12
 8008f40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	e853 3f00 	ldrex	r3, [r3]
 8008f48:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f023 0310 	bic.w	r3, r3, #16
 8008f50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	330c      	adds	r3, #12
 8008f58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008f5a:	61fa      	str	r2, [r7, #28]
 8008f5c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f5e:	69b9      	ldr	r1, [r7, #24]
 8008f60:	69fa      	ldr	r2, [r7, #28]
 8008f62:	e841 2300 	strex	r3, r2, [r1]
 8008f66:	617b      	str	r3, [r7, #20]
   return(result);
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d1e5      	bne.n	8008f3a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d106      	bne.n	8008f84 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008f7a:	4619      	mov	r1, r3
 8008f7c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008f7e:	f7f8 fca5 	bl	80018cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008f82:	e002      	b.n	8008f8a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008f84:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008f86:	f7ff ff53 	bl	8008e30 <HAL_UART_RxCpltCallback>
}
 8008f8a:	bf00      	nop
 8008f8c:	3770      	adds	r7, #112	; 0x70
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}

08008f92 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008f92:	b580      	push	{r7, lr}
 8008f94:	b084      	sub	sp, #16
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f9e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d108      	bne.n	8008fba <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008fac:	085b      	lsrs	r3, r3, #1
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	68f8      	ldr	r0, [r7, #12]
 8008fb4:	f7f8 fc8a 	bl	80018cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008fb8:	e002      	b.n	8008fc0 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008fba:	68f8      	ldr	r0, [r7, #12]
 8008fbc:	f7ff ff42 	bl	8008e44 <HAL_UART_RxHalfCpltCallback>
}
 8008fc0:	bf00      	nop
 8008fc2:	3710      	adds	r7, #16
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b084      	sub	sp, #16
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fd8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	695b      	ldr	r3, [r3, #20]
 8008fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fe4:	2b80      	cmp	r3, #128	; 0x80
 8008fe6:	bf0c      	ite	eq
 8008fe8:	2301      	moveq	r3, #1
 8008fea:	2300      	movne	r3, #0
 8008fec:	b2db      	uxtb	r3, r3
 8008fee:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	2b21      	cmp	r3, #33	; 0x21
 8008ffa:	d108      	bne.n	800900e <UART_DMAError+0x46>
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d005      	beq.n	800900e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	2200      	movs	r2, #0
 8009006:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009008:	68b8      	ldr	r0, [r7, #8]
 800900a:	f000 f933 	bl	8009274 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	695b      	ldr	r3, [r3, #20]
 8009014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009018:	2b40      	cmp	r3, #64	; 0x40
 800901a:	bf0c      	ite	eq
 800901c:	2301      	moveq	r3, #1
 800901e:	2300      	movne	r3, #0
 8009020:	b2db      	uxtb	r3, r3
 8009022:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800902a:	b2db      	uxtb	r3, r3
 800902c:	2b22      	cmp	r3, #34	; 0x22
 800902e:	d108      	bne.n	8009042 <UART_DMAError+0x7a>
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d005      	beq.n	8009042 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	2200      	movs	r2, #0
 800903a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800903c:	68b8      	ldr	r0, [r7, #8]
 800903e:	f000 f941 	bl	80092c4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009046:	f043 0210 	orr.w	r2, r3, #16
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800904e:	68b8      	ldr	r0, [r7, #8]
 8009050:	f7ff ff02 	bl	8008e58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009054:	bf00      	nop
 8009056:	3710      	adds	r7, #16
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}

0800905c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b090      	sub	sp, #64	; 0x40
 8009060:	af00      	add	r7, sp, #0
 8009062:	60f8      	str	r0, [r7, #12]
 8009064:	60b9      	str	r1, [r7, #8]
 8009066:	603b      	str	r3, [r7, #0]
 8009068:	4613      	mov	r3, r2
 800906a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800906c:	e050      	b.n	8009110 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800906e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009074:	d04c      	beq.n	8009110 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009078:	2b00      	cmp	r3, #0
 800907a:	d007      	beq.n	800908c <UART_WaitOnFlagUntilTimeout+0x30>
 800907c:	f7fa fd1e 	bl	8003abc <HAL_GetTick>
 8009080:	4602      	mov	r2, r0
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	1ad3      	subs	r3, r2, r3
 8009086:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009088:	429a      	cmp	r2, r3
 800908a:	d241      	bcs.n	8009110 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	330c      	adds	r3, #12
 8009092:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009096:	e853 3f00 	ldrex	r3, [r3]
 800909a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800909c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80090a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	330c      	adds	r3, #12
 80090aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80090ac:	637a      	str	r2, [r7, #52]	; 0x34
 80090ae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80090b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090b4:	e841 2300 	strex	r3, r2, [r1]
 80090b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80090ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d1e5      	bne.n	800908c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	3314      	adds	r3, #20
 80090c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	e853 3f00 	ldrex	r3, [r3]
 80090ce:	613b      	str	r3, [r7, #16]
   return(result);
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	f023 0301 	bic.w	r3, r3, #1
 80090d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	3314      	adds	r3, #20
 80090de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80090e0:	623a      	str	r2, [r7, #32]
 80090e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e4:	69f9      	ldr	r1, [r7, #28]
 80090e6:	6a3a      	ldr	r2, [r7, #32]
 80090e8:	e841 2300 	strex	r3, r2, [r1]
 80090ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80090ee:	69bb      	ldr	r3, [r7, #24]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d1e5      	bne.n	80090c0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2220      	movs	r2, #32
 80090f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2220      	movs	r2, #32
 8009100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2200      	movs	r2, #0
 8009108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800910c:	2303      	movs	r3, #3
 800910e:	e00f      	b.n	8009130 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	4013      	ands	r3, r2
 800911a:	68ba      	ldr	r2, [r7, #8]
 800911c:	429a      	cmp	r2, r3
 800911e:	bf0c      	ite	eq
 8009120:	2301      	moveq	r3, #1
 8009122:	2300      	movne	r3, #0
 8009124:	b2db      	uxtb	r3, r3
 8009126:	461a      	mov	r2, r3
 8009128:	79fb      	ldrb	r3, [r7, #7]
 800912a:	429a      	cmp	r2, r3
 800912c:	d09f      	beq.n	800906e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800912e:	2300      	movs	r3, #0
}
 8009130:	4618      	mov	r0, r3
 8009132:	3740      	adds	r7, #64	; 0x40
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b098      	sub	sp, #96	; 0x60
 800913c:	af00      	add	r7, sp, #0
 800913e:	60f8      	str	r0, [r7, #12]
 8009140:	60b9      	str	r1, [r7, #8]
 8009142:	4613      	mov	r3, r2
 8009144:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009146:	68ba      	ldr	r2, [r7, #8]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	88fa      	ldrh	r2, [r7, #6]
 8009150:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2200      	movs	r2, #0
 8009156:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2222      	movs	r2, #34	; 0x22
 800915c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009164:	4a40      	ldr	r2, [pc, #256]	; (8009268 <UART_Start_Receive_DMA+0x130>)
 8009166:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800916c:	4a3f      	ldr	r2, [pc, #252]	; (800926c <UART_Start_Receive_DMA+0x134>)
 800916e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009174:	4a3e      	ldr	r2, [pc, #248]	; (8009270 <UART_Start_Receive_DMA+0x138>)
 8009176:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800917c:	2200      	movs	r2, #0
 800917e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009180:	f107 0308 	add.w	r3, r7, #8
 8009184:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	3304      	adds	r3, #4
 8009190:	4619      	mov	r1, r3
 8009192:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009194:	681a      	ldr	r2, [r3, #0]
 8009196:	88fb      	ldrh	r3, [r7, #6]
 8009198:	f7fb fa4c 	bl	8004634 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800919c:	2300      	movs	r3, #0
 800919e:	613b      	str	r3, [r7, #16]
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	613b      	str	r3, [r7, #16]
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	613b      	str	r3, [r7, #16]
 80091b0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2200      	movs	r2, #0
 80091b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	691b      	ldr	r3, [r3, #16]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d019      	beq.n	80091f6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	330c      	adds	r3, #12
 80091c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091cc:	e853 3f00 	ldrex	r3, [r3]
 80091d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80091d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	330c      	adds	r3, #12
 80091e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80091e2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80091e4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80091e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80091ea:	e841 2300 	strex	r3, r2, [r1]
 80091ee:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80091f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d1e5      	bne.n	80091c2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	3314      	adds	r3, #20
 80091fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009200:	e853 3f00 	ldrex	r3, [r3]
 8009204:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009208:	f043 0301 	orr.w	r3, r3, #1
 800920c:	657b      	str	r3, [r7, #84]	; 0x54
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	3314      	adds	r3, #20
 8009214:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009216:	63ba      	str	r2, [r7, #56]	; 0x38
 8009218:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800921a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800921c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800921e:	e841 2300 	strex	r3, r2, [r1]
 8009222:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009226:	2b00      	cmp	r3, #0
 8009228:	d1e5      	bne.n	80091f6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	3314      	adds	r3, #20
 8009230:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009232:	69bb      	ldr	r3, [r7, #24]
 8009234:	e853 3f00 	ldrex	r3, [r3]
 8009238:	617b      	str	r3, [r7, #20]
   return(result);
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009240:	653b      	str	r3, [r7, #80]	; 0x50
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	3314      	adds	r3, #20
 8009248:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800924a:	627a      	str	r2, [r7, #36]	; 0x24
 800924c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800924e:	6a39      	ldr	r1, [r7, #32]
 8009250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009252:	e841 2300 	strex	r3, r2, [r1]
 8009256:	61fb      	str	r3, [r7, #28]
   return(result);
 8009258:	69fb      	ldr	r3, [r7, #28]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d1e5      	bne.n	800922a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800925e:	2300      	movs	r3, #0
}
 8009260:	4618      	mov	r0, r3
 8009262:	3760      	adds	r7, #96	; 0x60
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}
 8009268:	08008e6d 	.word	0x08008e6d
 800926c:	08008f93 	.word	0x08008f93
 8009270:	08008fc9 	.word	0x08008fc9

08009274 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009274:	b480      	push	{r7}
 8009276:	b089      	sub	sp, #36	; 0x24
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	330c      	adds	r3, #12
 8009282:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	e853 3f00 	ldrex	r3, [r3]
 800928a:	60bb      	str	r3, [r7, #8]
   return(result);
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009292:	61fb      	str	r3, [r7, #28]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	330c      	adds	r3, #12
 800929a:	69fa      	ldr	r2, [r7, #28]
 800929c:	61ba      	str	r2, [r7, #24]
 800929e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a0:	6979      	ldr	r1, [r7, #20]
 80092a2:	69ba      	ldr	r2, [r7, #24]
 80092a4:	e841 2300 	strex	r3, r2, [r1]
 80092a8:	613b      	str	r3, [r7, #16]
   return(result);
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d1e5      	bne.n	800927c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2220      	movs	r2, #32
 80092b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80092b8:	bf00      	nop
 80092ba:	3724      	adds	r7, #36	; 0x24
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr

080092c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b095      	sub	sp, #84	; 0x54
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	330c      	adds	r3, #12
 80092d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092d6:	e853 3f00 	ldrex	r3, [r3]
 80092da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80092dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80092e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	330c      	adds	r3, #12
 80092ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80092ec:	643a      	str	r2, [r7, #64]	; 0x40
 80092ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80092f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80092f4:	e841 2300 	strex	r3, r2, [r1]
 80092f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80092fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d1e5      	bne.n	80092cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	3314      	adds	r3, #20
 8009306:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009308:	6a3b      	ldr	r3, [r7, #32]
 800930a:	e853 3f00 	ldrex	r3, [r3]
 800930e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009310:	69fb      	ldr	r3, [r7, #28]
 8009312:	f023 0301 	bic.w	r3, r3, #1
 8009316:	64bb      	str	r3, [r7, #72]	; 0x48
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	3314      	adds	r3, #20
 800931e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009320:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009322:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009324:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009326:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009328:	e841 2300 	strex	r3, r2, [r1]
 800932c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800932e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009330:	2b00      	cmp	r3, #0
 8009332:	d1e5      	bne.n	8009300 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009338:	2b01      	cmp	r3, #1
 800933a:	d119      	bne.n	8009370 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	330c      	adds	r3, #12
 8009342:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	e853 3f00 	ldrex	r3, [r3]
 800934a:	60bb      	str	r3, [r7, #8]
   return(result);
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	f023 0310 	bic.w	r3, r3, #16
 8009352:	647b      	str	r3, [r7, #68]	; 0x44
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	330c      	adds	r3, #12
 800935a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800935c:	61ba      	str	r2, [r7, #24]
 800935e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009360:	6979      	ldr	r1, [r7, #20]
 8009362:	69ba      	ldr	r2, [r7, #24]
 8009364:	e841 2300 	strex	r3, r2, [r1]
 8009368:	613b      	str	r3, [r7, #16]
   return(result);
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d1e5      	bne.n	800933c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2220      	movs	r2, #32
 8009374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2200      	movs	r2, #0
 800937c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800937e:	bf00      	nop
 8009380:	3754      	adds	r7, #84	; 0x54
 8009382:	46bd      	mov	sp, r7
 8009384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009388:	4770      	bx	lr

0800938a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800938a:	b580      	push	{r7, lr}
 800938c:	b084      	sub	sp, #16
 800938e:	af00      	add	r7, sp, #0
 8009390:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009396:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2200      	movs	r2, #0
 800939c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2200      	movs	r2, #0
 80093a2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093a4:	68f8      	ldr	r0, [r7, #12]
 80093a6:	f7ff fd57 	bl	8008e58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093aa:	bf00      	nop
 80093ac:	3710      	adds	r7, #16
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}

080093b2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80093b2:	b480      	push	{r7}
 80093b4:	b085      	sub	sp, #20
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093c0:	b2db      	uxtb	r3, r3
 80093c2:	2b21      	cmp	r3, #33	; 0x21
 80093c4:	d13e      	bne.n	8009444 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	689b      	ldr	r3, [r3, #8]
 80093ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093ce:	d114      	bne.n	80093fa <UART_Transmit_IT+0x48>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	691b      	ldr	r3, [r3, #16]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d110      	bne.n	80093fa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6a1b      	ldr	r3, [r3, #32]
 80093dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	881b      	ldrh	r3, [r3, #0]
 80093e2:	461a      	mov	r2, r3
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80093ec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6a1b      	ldr	r3, [r3, #32]
 80093f2:	1c9a      	adds	r2, r3, #2
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	621a      	str	r2, [r3, #32]
 80093f8:	e008      	b.n	800940c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6a1b      	ldr	r3, [r3, #32]
 80093fe:	1c59      	adds	r1, r3, #1
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	6211      	str	r1, [r2, #32]
 8009404:	781a      	ldrb	r2, [r3, #0]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009410:	b29b      	uxth	r3, r3
 8009412:	3b01      	subs	r3, #1
 8009414:	b29b      	uxth	r3, r3
 8009416:	687a      	ldr	r2, [r7, #4]
 8009418:	4619      	mov	r1, r3
 800941a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800941c:	2b00      	cmp	r3, #0
 800941e:	d10f      	bne.n	8009440 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	68da      	ldr	r2, [r3, #12]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800942e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	68da      	ldr	r2, [r3, #12]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800943e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009440:	2300      	movs	r3, #0
 8009442:	e000      	b.n	8009446 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009444:	2302      	movs	r3, #2
  }
}
 8009446:	4618      	mov	r0, r3
 8009448:	3714      	adds	r7, #20
 800944a:	46bd      	mov	sp, r7
 800944c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009450:	4770      	bx	lr

08009452 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009452:	b580      	push	{r7, lr}
 8009454:	b082      	sub	sp, #8
 8009456:	af00      	add	r7, sp, #0
 8009458:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	68da      	ldr	r2, [r3, #12]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009468:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2220      	movs	r2, #32
 800946e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f7ff fcd2 	bl	8008e1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009478:	2300      	movs	r3, #0
}
 800947a:	4618      	mov	r0, r3
 800947c:	3708      	adds	r7, #8
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}

08009482 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009482:	b580      	push	{r7, lr}
 8009484:	b08c      	sub	sp, #48	; 0x30
 8009486:	af00      	add	r7, sp, #0
 8009488:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009490:	b2db      	uxtb	r3, r3
 8009492:	2b22      	cmp	r3, #34	; 0x22
 8009494:	f040 80ab 	bne.w	80095ee <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	689b      	ldr	r3, [r3, #8]
 800949c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094a0:	d117      	bne.n	80094d2 <UART_Receive_IT+0x50>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	691b      	ldr	r3, [r3, #16]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d113      	bne.n	80094d2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80094aa:	2300      	movs	r3, #0
 80094ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094b2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	b29b      	uxth	r3, r3
 80094bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094c0:	b29a      	uxth	r2, r3
 80094c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094ca:	1c9a      	adds	r2, r3, #2
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	629a      	str	r2, [r3, #40]	; 0x28
 80094d0:	e026      	b.n	8009520 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80094d8:	2300      	movs	r3, #0
 80094da:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	689b      	ldr	r3, [r3, #8]
 80094e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094e4:	d007      	beq.n	80094f6 <UART_Receive_IT+0x74>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	689b      	ldr	r3, [r3, #8]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d10a      	bne.n	8009504 <UART_Receive_IT+0x82>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	691b      	ldr	r3, [r3, #16]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d106      	bne.n	8009504 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	b2da      	uxtb	r2, r3
 80094fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009500:	701a      	strb	r2, [r3, #0]
 8009502:	e008      	b.n	8009516 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	b2db      	uxtb	r3, r3
 800950c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009510:	b2da      	uxtb	r2, r3
 8009512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009514:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800951a:	1c5a      	adds	r2, r3, #1
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009524:	b29b      	uxth	r3, r3
 8009526:	3b01      	subs	r3, #1
 8009528:	b29b      	uxth	r3, r3
 800952a:	687a      	ldr	r2, [r7, #4]
 800952c:	4619      	mov	r1, r3
 800952e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009530:	2b00      	cmp	r3, #0
 8009532:	d15a      	bne.n	80095ea <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	68da      	ldr	r2, [r3, #12]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f022 0220 	bic.w	r2, r2, #32
 8009542:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	68da      	ldr	r2, [r3, #12]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009552:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	695a      	ldr	r2, [r3, #20]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f022 0201 	bic.w	r2, r2, #1
 8009562:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2220      	movs	r2, #32
 8009568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009570:	2b01      	cmp	r3, #1
 8009572:	d135      	bne.n	80095e0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2200      	movs	r2, #0
 8009578:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	330c      	adds	r3, #12
 8009580:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	e853 3f00 	ldrex	r3, [r3]
 8009588:	613b      	str	r3, [r7, #16]
   return(result);
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	f023 0310 	bic.w	r3, r3, #16
 8009590:	627b      	str	r3, [r7, #36]	; 0x24
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	330c      	adds	r3, #12
 8009598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800959a:	623a      	str	r2, [r7, #32]
 800959c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800959e:	69f9      	ldr	r1, [r7, #28]
 80095a0:	6a3a      	ldr	r2, [r7, #32]
 80095a2:	e841 2300 	strex	r3, r2, [r1]
 80095a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80095a8:	69bb      	ldr	r3, [r7, #24]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d1e5      	bne.n	800957a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f003 0310 	and.w	r3, r3, #16
 80095b8:	2b10      	cmp	r3, #16
 80095ba:	d10a      	bne.n	80095d2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80095bc:	2300      	movs	r3, #0
 80095be:	60fb      	str	r3, [r7, #12]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	60fb      	str	r3, [r7, #12]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	60fb      	str	r3, [r7, #12]
 80095d0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80095d6:	4619      	mov	r1, r3
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f7f8 f977 	bl	80018cc <HAL_UARTEx_RxEventCallback>
 80095de:	e002      	b.n	80095e6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f7ff fc25 	bl	8008e30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80095e6:	2300      	movs	r3, #0
 80095e8:	e002      	b.n	80095f0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80095ea:	2300      	movs	r3, #0
 80095ec:	e000      	b.n	80095f0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80095ee:	2302      	movs	r3, #2
  }
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3730      	adds	r7, #48	; 0x30
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80095f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80095fc:	b0c0      	sub	sp, #256	; 0x100
 80095fe:	af00      	add	r7, sp, #0
 8009600:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	691b      	ldr	r3, [r3, #16]
 800960c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009614:	68d9      	ldr	r1, [r3, #12]
 8009616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800961a:	681a      	ldr	r2, [r3, #0]
 800961c:	ea40 0301 	orr.w	r3, r0, r1
 8009620:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009626:	689a      	ldr	r2, [r3, #8]
 8009628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800962c:	691b      	ldr	r3, [r3, #16]
 800962e:	431a      	orrs	r2, r3
 8009630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009634:	695b      	ldr	r3, [r3, #20]
 8009636:	431a      	orrs	r2, r3
 8009638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800963c:	69db      	ldr	r3, [r3, #28]
 800963e:	4313      	orrs	r3, r2
 8009640:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	68db      	ldr	r3, [r3, #12]
 800964c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009650:	f021 010c 	bic.w	r1, r1, #12
 8009654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009658:	681a      	ldr	r2, [r3, #0]
 800965a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800965e:	430b      	orrs	r3, r1
 8009660:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	695b      	ldr	r3, [r3, #20]
 800966a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800966e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009672:	6999      	ldr	r1, [r3, #24]
 8009674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	ea40 0301 	orr.w	r3, r0, r1
 800967e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009684:	681a      	ldr	r2, [r3, #0]
 8009686:	4b8f      	ldr	r3, [pc, #572]	; (80098c4 <UART_SetConfig+0x2cc>)
 8009688:	429a      	cmp	r2, r3
 800968a:	d005      	beq.n	8009698 <UART_SetConfig+0xa0>
 800968c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009690:	681a      	ldr	r2, [r3, #0]
 8009692:	4b8d      	ldr	r3, [pc, #564]	; (80098c8 <UART_SetConfig+0x2d0>)
 8009694:	429a      	cmp	r2, r3
 8009696:	d104      	bne.n	80096a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009698:	f7fe fb22 	bl	8007ce0 <HAL_RCC_GetPCLK2Freq>
 800969c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80096a0:	e003      	b.n	80096aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80096a2:	f7fe fb09 	bl	8007cb8 <HAL_RCC_GetPCLK1Freq>
 80096a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80096aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096ae:	69db      	ldr	r3, [r3, #28]
 80096b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096b4:	f040 810c 	bne.w	80098d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80096b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096bc:	2200      	movs	r2, #0
 80096be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80096c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80096c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80096ca:	4622      	mov	r2, r4
 80096cc:	462b      	mov	r3, r5
 80096ce:	1891      	adds	r1, r2, r2
 80096d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80096d2:	415b      	adcs	r3, r3
 80096d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80096d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80096da:	4621      	mov	r1, r4
 80096dc:	eb12 0801 	adds.w	r8, r2, r1
 80096e0:	4629      	mov	r1, r5
 80096e2:	eb43 0901 	adc.w	r9, r3, r1
 80096e6:	f04f 0200 	mov.w	r2, #0
 80096ea:	f04f 0300 	mov.w	r3, #0
 80096ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80096f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80096f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80096fa:	4690      	mov	r8, r2
 80096fc:	4699      	mov	r9, r3
 80096fe:	4623      	mov	r3, r4
 8009700:	eb18 0303 	adds.w	r3, r8, r3
 8009704:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009708:	462b      	mov	r3, r5
 800970a:	eb49 0303 	adc.w	r3, r9, r3
 800970e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009716:	685b      	ldr	r3, [r3, #4]
 8009718:	2200      	movs	r2, #0
 800971a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800971e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009722:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009726:	460b      	mov	r3, r1
 8009728:	18db      	adds	r3, r3, r3
 800972a:	653b      	str	r3, [r7, #80]	; 0x50
 800972c:	4613      	mov	r3, r2
 800972e:	eb42 0303 	adc.w	r3, r2, r3
 8009732:	657b      	str	r3, [r7, #84]	; 0x54
 8009734:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009738:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800973c:	f7f7 f9d8 	bl	8000af0 <__aeabi_uldivmod>
 8009740:	4602      	mov	r2, r0
 8009742:	460b      	mov	r3, r1
 8009744:	4b61      	ldr	r3, [pc, #388]	; (80098cc <UART_SetConfig+0x2d4>)
 8009746:	fba3 2302 	umull	r2, r3, r3, r2
 800974a:	095b      	lsrs	r3, r3, #5
 800974c:	011c      	lsls	r4, r3, #4
 800974e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009752:	2200      	movs	r2, #0
 8009754:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009758:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800975c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009760:	4642      	mov	r2, r8
 8009762:	464b      	mov	r3, r9
 8009764:	1891      	adds	r1, r2, r2
 8009766:	64b9      	str	r1, [r7, #72]	; 0x48
 8009768:	415b      	adcs	r3, r3
 800976a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800976c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009770:	4641      	mov	r1, r8
 8009772:	eb12 0a01 	adds.w	sl, r2, r1
 8009776:	4649      	mov	r1, r9
 8009778:	eb43 0b01 	adc.w	fp, r3, r1
 800977c:	f04f 0200 	mov.w	r2, #0
 8009780:	f04f 0300 	mov.w	r3, #0
 8009784:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009788:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800978c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009790:	4692      	mov	sl, r2
 8009792:	469b      	mov	fp, r3
 8009794:	4643      	mov	r3, r8
 8009796:	eb1a 0303 	adds.w	r3, sl, r3
 800979a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800979e:	464b      	mov	r3, r9
 80097a0:	eb4b 0303 	adc.w	r3, fp, r3
 80097a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80097a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	2200      	movs	r2, #0
 80097b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80097b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80097b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80097bc:	460b      	mov	r3, r1
 80097be:	18db      	adds	r3, r3, r3
 80097c0:	643b      	str	r3, [r7, #64]	; 0x40
 80097c2:	4613      	mov	r3, r2
 80097c4:	eb42 0303 	adc.w	r3, r2, r3
 80097c8:	647b      	str	r3, [r7, #68]	; 0x44
 80097ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80097ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80097d2:	f7f7 f98d 	bl	8000af0 <__aeabi_uldivmod>
 80097d6:	4602      	mov	r2, r0
 80097d8:	460b      	mov	r3, r1
 80097da:	4611      	mov	r1, r2
 80097dc:	4b3b      	ldr	r3, [pc, #236]	; (80098cc <UART_SetConfig+0x2d4>)
 80097de:	fba3 2301 	umull	r2, r3, r3, r1
 80097e2:	095b      	lsrs	r3, r3, #5
 80097e4:	2264      	movs	r2, #100	; 0x64
 80097e6:	fb02 f303 	mul.w	r3, r2, r3
 80097ea:	1acb      	subs	r3, r1, r3
 80097ec:	00db      	lsls	r3, r3, #3
 80097ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80097f2:	4b36      	ldr	r3, [pc, #216]	; (80098cc <UART_SetConfig+0x2d4>)
 80097f4:	fba3 2302 	umull	r2, r3, r3, r2
 80097f8:	095b      	lsrs	r3, r3, #5
 80097fa:	005b      	lsls	r3, r3, #1
 80097fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009800:	441c      	add	r4, r3
 8009802:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009806:	2200      	movs	r2, #0
 8009808:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800980c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009810:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009814:	4642      	mov	r2, r8
 8009816:	464b      	mov	r3, r9
 8009818:	1891      	adds	r1, r2, r2
 800981a:	63b9      	str	r1, [r7, #56]	; 0x38
 800981c:	415b      	adcs	r3, r3
 800981e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009820:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009824:	4641      	mov	r1, r8
 8009826:	1851      	adds	r1, r2, r1
 8009828:	6339      	str	r1, [r7, #48]	; 0x30
 800982a:	4649      	mov	r1, r9
 800982c:	414b      	adcs	r3, r1
 800982e:	637b      	str	r3, [r7, #52]	; 0x34
 8009830:	f04f 0200 	mov.w	r2, #0
 8009834:	f04f 0300 	mov.w	r3, #0
 8009838:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800983c:	4659      	mov	r1, fp
 800983e:	00cb      	lsls	r3, r1, #3
 8009840:	4651      	mov	r1, sl
 8009842:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009846:	4651      	mov	r1, sl
 8009848:	00ca      	lsls	r2, r1, #3
 800984a:	4610      	mov	r0, r2
 800984c:	4619      	mov	r1, r3
 800984e:	4603      	mov	r3, r0
 8009850:	4642      	mov	r2, r8
 8009852:	189b      	adds	r3, r3, r2
 8009854:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009858:	464b      	mov	r3, r9
 800985a:	460a      	mov	r2, r1
 800985c:	eb42 0303 	adc.w	r3, r2, r3
 8009860:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009868:	685b      	ldr	r3, [r3, #4]
 800986a:	2200      	movs	r2, #0
 800986c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009870:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009874:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009878:	460b      	mov	r3, r1
 800987a:	18db      	adds	r3, r3, r3
 800987c:	62bb      	str	r3, [r7, #40]	; 0x28
 800987e:	4613      	mov	r3, r2
 8009880:	eb42 0303 	adc.w	r3, r2, r3
 8009884:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009886:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800988a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800988e:	f7f7 f92f 	bl	8000af0 <__aeabi_uldivmod>
 8009892:	4602      	mov	r2, r0
 8009894:	460b      	mov	r3, r1
 8009896:	4b0d      	ldr	r3, [pc, #52]	; (80098cc <UART_SetConfig+0x2d4>)
 8009898:	fba3 1302 	umull	r1, r3, r3, r2
 800989c:	095b      	lsrs	r3, r3, #5
 800989e:	2164      	movs	r1, #100	; 0x64
 80098a0:	fb01 f303 	mul.w	r3, r1, r3
 80098a4:	1ad3      	subs	r3, r2, r3
 80098a6:	00db      	lsls	r3, r3, #3
 80098a8:	3332      	adds	r3, #50	; 0x32
 80098aa:	4a08      	ldr	r2, [pc, #32]	; (80098cc <UART_SetConfig+0x2d4>)
 80098ac:	fba2 2303 	umull	r2, r3, r2, r3
 80098b0:	095b      	lsrs	r3, r3, #5
 80098b2:	f003 0207 	and.w	r2, r3, #7
 80098b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4422      	add	r2, r4
 80098be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80098c0:	e105      	b.n	8009ace <UART_SetConfig+0x4d6>
 80098c2:	bf00      	nop
 80098c4:	40011000 	.word	0x40011000
 80098c8:	40011400 	.word	0x40011400
 80098cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80098d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80098d4:	2200      	movs	r2, #0
 80098d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80098da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80098de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80098e2:	4642      	mov	r2, r8
 80098e4:	464b      	mov	r3, r9
 80098e6:	1891      	adds	r1, r2, r2
 80098e8:	6239      	str	r1, [r7, #32]
 80098ea:	415b      	adcs	r3, r3
 80098ec:	627b      	str	r3, [r7, #36]	; 0x24
 80098ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80098f2:	4641      	mov	r1, r8
 80098f4:	1854      	adds	r4, r2, r1
 80098f6:	4649      	mov	r1, r9
 80098f8:	eb43 0501 	adc.w	r5, r3, r1
 80098fc:	f04f 0200 	mov.w	r2, #0
 8009900:	f04f 0300 	mov.w	r3, #0
 8009904:	00eb      	lsls	r3, r5, #3
 8009906:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800990a:	00e2      	lsls	r2, r4, #3
 800990c:	4614      	mov	r4, r2
 800990e:	461d      	mov	r5, r3
 8009910:	4643      	mov	r3, r8
 8009912:	18e3      	adds	r3, r4, r3
 8009914:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009918:	464b      	mov	r3, r9
 800991a:	eb45 0303 	adc.w	r3, r5, r3
 800991e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	2200      	movs	r2, #0
 800992a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800992e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009932:	f04f 0200 	mov.w	r2, #0
 8009936:	f04f 0300 	mov.w	r3, #0
 800993a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800993e:	4629      	mov	r1, r5
 8009940:	008b      	lsls	r3, r1, #2
 8009942:	4621      	mov	r1, r4
 8009944:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009948:	4621      	mov	r1, r4
 800994a:	008a      	lsls	r2, r1, #2
 800994c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009950:	f7f7 f8ce 	bl	8000af0 <__aeabi_uldivmod>
 8009954:	4602      	mov	r2, r0
 8009956:	460b      	mov	r3, r1
 8009958:	4b60      	ldr	r3, [pc, #384]	; (8009adc <UART_SetConfig+0x4e4>)
 800995a:	fba3 2302 	umull	r2, r3, r3, r2
 800995e:	095b      	lsrs	r3, r3, #5
 8009960:	011c      	lsls	r4, r3, #4
 8009962:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009966:	2200      	movs	r2, #0
 8009968:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800996c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009970:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009974:	4642      	mov	r2, r8
 8009976:	464b      	mov	r3, r9
 8009978:	1891      	adds	r1, r2, r2
 800997a:	61b9      	str	r1, [r7, #24]
 800997c:	415b      	adcs	r3, r3
 800997e:	61fb      	str	r3, [r7, #28]
 8009980:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009984:	4641      	mov	r1, r8
 8009986:	1851      	adds	r1, r2, r1
 8009988:	6139      	str	r1, [r7, #16]
 800998a:	4649      	mov	r1, r9
 800998c:	414b      	adcs	r3, r1
 800998e:	617b      	str	r3, [r7, #20]
 8009990:	f04f 0200 	mov.w	r2, #0
 8009994:	f04f 0300 	mov.w	r3, #0
 8009998:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800999c:	4659      	mov	r1, fp
 800999e:	00cb      	lsls	r3, r1, #3
 80099a0:	4651      	mov	r1, sl
 80099a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80099a6:	4651      	mov	r1, sl
 80099a8:	00ca      	lsls	r2, r1, #3
 80099aa:	4610      	mov	r0, r2
 80099ac:	4619      	mov	r1, r3
 80099ae:	4603      	mov	r3, r0
 80099b0:	4642      	mov	r2, r8
 80099b2:	189b      	adds	r3, r3, r2
 80099b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80099b8:	464b      	mov	r3, r9
 80099ba:	460a      	mov	r2, r1
 80099bc:	eb42 0303 	adc.w	r3, r2, r3
 80099c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80099c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	2200      	movs	r2, #0
 80099cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80099ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80099d0:	f04f 0200 	mov.w	r2, #0
 80099d4:	f04f 0300 	mov.w	r3, #0
 80099d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80099dc:	4649      	mov	r1, r9
 80099de:	008b      	lsls	r3, r1, #2
 80099e0:	4641      	mov	r1, r8
 80099e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80099e6:	4641      	mov	r1, r8
 80099e8:	008a      	lsls	r2, r1, #2
 80099ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80099ee:	f7f7 f87f 	bl	8000af0 <__aeabi_uldivmod>
 80099f2:	4602      	mov	r2, r0
 80099f4:	460b      	mov	r3, r1
 80099f6:	4b39      	ldr	r3, [pc, #228]	; (8009adc <UART_SetConfig+0x4e4>)
 80099f8:	fba3 1302 	umull	r1, r3, r3, r2
 80099fc:	095b      	lsrs	r3, r3, #5
 80099fe:	2164      	movs	r1, #100	; 0x64
 8009a00:	fb01 f303 	mul.w	r3, r1, r3
 8009a04:	1ad3      	subs	r3, r2, r3
 8009a06:	011b      	lsls	r3, r3, #4
 8009a08:	3332      	adds	r3, #50	; 0x32
 8009a0a:	4a34      	ldr	r2, [pc, #208]	; (8009adc <UART_SetConfig+0x4e4>)
 8009a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8009a10:	095b      	lsrs	r3, r3, #5
 8009a12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a16:	441c      	add	r4, r3
 8009a18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	673b      	str	r3, [r7, #112]	; 0x70
 8009a20:	677a      	str	r2, [r7, #116]	; 0x74
 8009a22:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009a26:	4642      	mov	r2, r8
 8009a28:	464b      	mov	r3, r9
 8009a2a:	1891      	adds	r1, r2, r2
 8009a2c:	60b9      	str	r1, [r7, #8]
 8009a2e:	415b      	adcs	r3, r3
 8009a30:	60fb      	str	r3, [r7, #12]
 8009a32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009a36:	4641      	mov	r1, r8
 8009a38:	1851      	adds	r1, r2, r1
 8009a3a:	6039      	str	r1, [r7, #0]
 8009a3c:	4649      	mov	r1, r9
 8009a3e:	414b      	adcs	r3, r1
 8009a40:	607b      	str	r3, [r7, #4]
 8009a42:	f04f 0200 	mov.w	r2, #0
 8009a46:	f04f 0300 	mov.w	r3, #0
 8009a4a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009a4e:	4659      	mov	r1, fp
 8009a50:	00cb      	lsls	r3, r1, #3
 8009a52:	4651      	mov	r1, sl
 8009a54:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a58:	4651      	mov	r1, sl
 8009a5a:	00ca      	lsls	r2, r1, #3
 8009a5c:	4610      	mov	r0, r2
 8009a5e:	4619      	mov	r1, r3
 8009a60:	4603      	mov	r3, r0
 8009a62:	4642      	mov	r2, r8
 8009a64:	189b      	adds	r3, r3, r2
 8009a66:	66bb      	str	r3, [r7, #104]	; 0x68
 8009a68:	464b      	mov	r3, r9
 8009a6a:	460a      	mov	r2, r1
 8009a6c:	eb42 0303 	adc.w	r3, r2, r3
 8009a70:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a76:	685b      	ldr	r3, [r3, #4]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	663b      	str	r3, [r7, #96]	; 0x60
 8009a7c:	667a      	str	r2, [r7, #100]	; 0x64
 8009a7e:	f04f 0200 	mov.w	r2, #0
 8009a82:	f04f 0300 	mov.w	r3, #0
 8009a86:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009a8a:	4649      	mov	r1, r9
 8009a8c:	008b      	lsls	r3, r1, #2
 8009a8e:	4641      	mov	r1, r8
 8009a90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009a94:	4641      	mov	r1, r8
 8009a96:	008a      	lsls	r2, r1, #2
 8009a98:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009a9c:	f7f7 f828 	bl	8000af0 <__aeabi_uldivmod>
 8009aa0:	4602      	mov	r2, r0
 8009aa2:	460b      	mov	r3, r1
 8009aa4:	4b0d      	ldr	r3, [pc, #52]	; (8009adc <UART_SetConfig+0x4e4>)
 8009aa6:	fba3 1302 	umull	r1, r3, r3, r2
 8009aaa:	095b      	lsrs	r3, r3, #5
 8009aac:	2164      	movs	r1, #100	; 0x64
 8009aae:	fb01 f303 	mul.w	r3, r1, r3
 8009ab2:	1ad3      	subs	r3, r2, r3
 8009ab4:	011b      	lsls	r3, r3, #4
 8009ab6:	3332      	adds	r3, #50	; 0x32
 8009ab8:	4a08      	ldr	r2, [pc, #32]	; (8009adc <UART_SetConfig+0x4e4>)
 8009aba:	fba2 2303 	umull	r2, r3, r2, r3
 8009abe:	095b      	lsrs	r3, r3, #5
 8009ac0:	f003 020f 	and.w	r2, r3, #15
 8009ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	4422      	add	r2, r4
 8009acc:	609a      	str	r2, [r3, #8]
}
 8009ace:	bf00      	nop
 8009ad0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ada:	bf00      	nop
 8009adc:	51eb851f 	.word	0x51eb851f

08009ae0 <__errno>:
 8009ae0:	4b01      	ldr	r3, [pc, #4]	; (8009ae8 <__errno+0x8>)
 8009ae2:	6818      	ldr	r0, [r3, #0]
 8009ae4:	4770      	bx	lr
 8009ae6:	bf00      	nop
 8009ae8:	2000003c 	.word	0x2000003c

08009aec <__libc_init_array>:
 8009aec:	b570      	push	{r4, r5, r6, lr}
 8009aee:	4d0d      	ldr	r5, [pc, #52]	; (8009b24 <__libc_init_array+0x38>)
 8009af0:	4c0d      	ldr	r4, [pc, #52]	; (8009b28 <__libc_init_array+0x3c>)
 8009af2:	1b64      	subs	r4, r4, r5
 8009af4:	10a4      	asrs	r4, r4, #2
 8009af6:	2600      	movs	r6, #0
 8009af8:	42a6      	cmp	r6, r4
 8009afa:	d109      	bne.n	8009b10 <__libc_init_array+0x24>
 8009afc:	4d0b      	ldr	r5, [pc, #44]	; (8009b2c <__libc_init_array+0x40>)
 8009afe:	4c0c      	ldr	r4, [pc, #48]	; (8009b30 <__libc_init_array+0x44>)
 8009b00:	f002 f9ec 	bl	800bedc <_init>
 8009b04:	1b64      	subs	r4, r4, r5
 8009b06:	10a4      	asrs	r4, r4, #2
 8009b08:	2600      	movs	r6, #0
 8009b0a:	42a6      	cmp	r6, r4
 8009b0c:	d105      	bne.n	8009b1a <__libc_init_array+0x2e>
 8009b0e:	bd70      	pop	{r4, r5, r6, pc}
 8009b10:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b14:	4798      	blx	r3
 8009b16:	3601      	adds	r6, #1
 8009b18:	e7ee      	b.n	8009af8 <__libc_init_array+0xc>
 8009b1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b1e:	4798      	blx	r3
 8009b20:	3601      	adds	r6, #1
 8009b22:	e7f2      	b.n	8009b0a <__libc_init_array+0x1e>
 8009b24:	0800dc78 	.word	0x0800dc78
 8009b28:	0800dc78 	.word	0x0800dc78
 8009b2c:	0800dc78 	.word	0x0800dc78
 8009b30:	0800dc7c 	.word	0x0800dc7c

08009b34 <memset>:
 8009b34:	4402      	add	r2, r0
 8009b36:	4603      	mov	r3, r0
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d100      	bne.n	8009b3e <memset+0xa>
 8009b3c:	4770      	bx	lr
 8009b3e:	f803 1b01 	strb.w	r1, [r3], #1
 8009b42:	e7f9      	b.n	8009b38 <memset+0x4>
 8009b44:	0000      	movs	r0, r0
	...

08009b48 <cos>:
 8009b48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b4a:	ec53 2b10 	vmov	r2, r3, d0
 8009b4e:	4826      	ldr	r0, [pc, #152]	; (8009be8 <cos+0xa0>)
 8009b50:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009b54:	4281      	cmp	r1, r0
 8009b56:	dc06      	bgt.n	8009b66 <cos+0x1e>
 8009b58:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8009be0 <cos+0x98>
 8009b5c:	b005      	add	sp, #20
 8009b5e:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b62:	f001 b9f9 	b.w	800af58 <__kernel_cos>
 8009b66:	4821      	ldr	r0, [pc, #132]	; (8009bec <cos+0xa4>)
 8009b68:	4281      	cmp	r1, r0
 8009b6a:	dd09      	ble.n	8009b80 <cos+0x38>
 8009b6c:	ee10 0a10 	vmov	r0, s0
 8009b70:	4619      	mov	r1, r3
 8009b72:	f7f6 fb2d 	bl	80001d0 <__aeabi_dsub>
 8009b76:	ec41 0b10 	vmov	d0, r0, r1
 8009b7a:	b005      	add	sp, #20
 8009b7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009b80:	4668      	mov	r0, sp
 8009b82:	f000 ff29 	bl	800a9d8 <__ieee754_rem_pio2>
 8009b86:	f000 0003 	and.w	r0, r0, #3
 8009b8a:	2801      	cmp	r0, #1
 8009b8c:	d00b      	beq.n	8009ba6 <cos+0x5e>
 8009b8e:	2802      	cmp	r0, #2
 8009b90:	d016      	beq.n	8009bc0 <cos+0x78>
 8009b92:	b9e0      	cbnz	r0, 8009bce <cos+0x86>
 8009b94:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009b98:	ed9d 0b00 	vldr	d0, [sp]
 8009b9c:	f001 f9dc 	bl	800af58 <__kernel_cos>
 8009ba0:	ec51 0b10 	vmov	r0, r1, d0
 8009ba4:	e7e7      	b.n	8009b76 <cos+0x2e>
 8009ba6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009baa:	ed9d 0b00 	vldr	d0, [sp]
 8009bae:	f001 fdeb 	bl	800b788 <__kernel_sin>
 8009bb2:	ec53 2b10 	vmov	r2, r3, d0
 8009bb6:	ee10 0a10 	vmov	r0, s0
 8009bba:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009bbe:	e7da      	b.n	8009b76 <cos+0x2e>
 8009bc0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009bc4:	ed9d 0b00 	vldr	d0, [sp]
 8009bc8:	f001 f9c6 	bl	800af58 <__kernel_cos>
 8009bcc:	e7f1      	b.n	8009bb2 <cos+0x6a>
 8009bce:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009bd2:	ed9d 0b00 	vldr	d0, [sp]
 8009bd6:	2001      	movs	r0, #1
 8009bd8:	f001 fdd6 	bl	800b788 <__kernel_sin>
 8009bdc:	e7e0      	b.n	8009ba0 <cos+0x58>
 8009bde:	bf00      	nop
	...
 8009be8:	3fe921fb 	.word	0x3fe921fb
 8009bec:	7fefffff 	.word	0x7fefffff

08009bf0 <sin>:
 8009bf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009bf2:	ec53 2b10 	vmov	r2, r3, d0
 8009bf6:	4828      	ldr	r0, [pc, #160]	; (8009c98 <sin+0xa8>)
 8009bf8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009bfc:	4281      	cmp	r1, r0
 8009bfe:	dc07      	bgt.n	8009c10 <sin+0x20>
 8009c00:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8009c90 <sin+0xa0>
 8009c04:	2000      	movs	r0, #0
 8009c06:	b005      	add	sp, #20
 8009c08:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c0c:	f001 bdbc 	b.w	800b788 <__kernel_sin>
 8009c10:	4822      	ldr	r0, [pc, #136]	; (8009c9c <sin+0xac>)
 8009c12:	4281      	cmp	r1, r0
 8009c14:	dd09      	ble.n	8009c2a <sin+0x3a>
 8009c16:	ee10 0a10 	vmov	r0, s0
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	f7f6 fad8 	bl	80001d0 <__aeabi_dsub>
 8009c20:	ec41 0b10 	vmov	d0, r0, r1
 8009c24:	b005      	add	sp, #20
 8009c26:	f85d fb04 	ldr.w	pc, [sp], #4
 8009c2a:	4668      	mov	r0, sp
 8009c2c:	f000 fed4 	bl	800a9d8 <__ieee754_rem_pio2>
 8009c30:	f000 0003 	and.w	r0, r0, #3
 8009c34:	2801      	cmp	r0, #1
 8009c36:	d00c      	beq.n	8009c52 <sin+0x62>
 8009c38:	2802      	cmp	r0, #2
 8009c3a:	d011      	beq.n	8009c60 <sin+0x70>
 8009c3c:	b9f0      	cbnz	r0, 8009c7c <sin+0x8c>
 8009c3e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009c42:	ed9d 0b00 	vldr	d0, [sp]
 8009c46:	2001      	movs	r0, #1
 8009c48:	f001 fd9e 	bl	800b788 <__kernel_sin>
 8009c4c:	ec51 0b10 	vmov	r0, r1, d0
 8009c50:	e7e6      	b.n	8009c20 <sin+0x30>
 8009c52:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009c56:	ed9d 0b00 	vldr	d0, [sp]
 8009c5a:	f001 f97d 	bl	800af58 <__kernel_cos>
 8009c5e:	e7f5      	b.n	8009c4c <sin+0x5c>
 8009c60:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009c64:	ed9d 0b00 	vldr	d0, [sp]
 8009c68:	2001      	movs	r0, #1
 8009c6a:	f001 fd8d 	bl	800b788 <__kernel_sin>
 8009c6e:	ec53 2b10 	vmov	r2, r3, d0
 8009c72:	ee10 0a10 	vmov	r0, s0
 8009c76:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009c7a:	e7d1      	b.n	8009c20 <sin+0x30>
 8009c7c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009c80:	ed9d 0b00 	vldr	d0, [sp]
 8009c84:	f001 f968 	bl	800af58 <__kernel_cos>
 8009c88:	e7f1      	b.n	8009c6e <sin+0x7e>
 8009c8a:	bf00      	nop
 8009c8c:	f3af 8000 	nop.w
	...
 8009c98:	3fe921fb 	.word	0x3fe921fb
 8009c9c:	7fefffff 	.word	0x7fefffff

08009ca0 <atan2>:
 8009ca0:	f000 b89e 	b.w	8009de0 <__ieee754_atan2>

08009ca4 <pow>:
 8009ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ca6:	ed2d 8b02 	vpush	{d8}
 8009caa:	eeb0 8a40 	vmov.f32	s16, s0
 8009cae:	eef0 8a60 	vmov.f32	s17, s1
 8009cb2:	ec55 4b11 	vmov	r4, r5, d1
 8009cb6:	f000 f95f 	bl	8009f78 <__ieee754_pow>
 8009cba:	4622      	mov	r2, r4
 8009cbc:	462b      	mov	r3, r5
 8009cbe:	4620      	mov	r0, r4
 8009cc0:	4629      	mov	r1, r5
 8009cc2:	ec57 6b10 	vmov	r6, r7, d0
 8009cc6:	f7f6 fed5 	bl	8000a74 <__aeabi_dcmpun>
 8009cca:	2800      	cmp	r0, #0
 8009ccc:	d13b      	bne.n	8009d46 <pow+0xa2>
 8009cce:	ec51 0b18 	vmov	r0, r1, d8
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	f7f6 fe9b 	bl	8000a10 <__aeabi_dcmpeq>
 8009cda:	b1b8      	cbz	r0, 8009d0c <pow+0x68>
 8009cdc:	2200      	movs	r2, #0
 8009cde:	2300      	movs	r3, #0
 8009ce0:	4620      	mov	r0, r4
 8009ce2:	4629      	mov	r1, r5
 8009ce4:	f7f6 fe94 	bl	8000a10 <__aeabi_dcmpeq>
 8009ce8:	2800      	cmp	r0, #0
 8009cea:	d146      	bne.n	8009d7a <pow+0xd6>
 8009cec:	ec45 4b10 	vmov	d0, r4, r5
 8009cf0:	f001 ffe3 	bl	800bcba <finite>
 8009cf4:	b338      	cbz	r0, 8009d46 <pow+0xa2>
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	4620      	mov	r0, r4
 8009cfc:	4629      	mov	r1, r5
 8009cfe:	f7f6 fe91 	bl	8000a24 <__aeabi_dcmplt>
 8009d02:	b300      	cbz	r0, 8009d46 <pow+0xa2>
 8009d04:	f7ff feec 	bl	8009ae0 <__errno>
 8009d08:	2322      	movs	r3, #34	; 0x22
 8009d0a:	e01b      	b.n	8009d44 <pow+0xa0>
 8009d0c:	ec47 6b10 	vmov	d0, r6, r7
 8009d10:	f001 ffd3 	bl	800bcba <finite>
 8009d14:	b9e0      	cbnz	r0, 8009d50 <pow+0xac>
 8009d16:	eeb0 0a48 	vmov.f32	s0, s16
 8009d1a:	eef0 0a68 	vmov.f32	s1, s17
 8009d1e:	f001 ffcc 	bl	800bcba <finite>
 8009d22:	b1a8      	cbz	r0, 8009d50 <pow+0xac>
 8009d24:	ec45 4b10 	vmov	d0, r4, r5
 8009d28:	f001 ffc7 	bl	800bcba <finite>
 8009d2c:	b180      	cbz	r0, 8009d50 <pow+0xac>
 8009d2e:	4632      	mov	r2, r6
 8009d30:	463b      	mov	r3, r7
 8009d32:	4630      	mov	r0, r6
 8009d34:	4639      	mov	r1, r7
 8009d36:	f7f6 fe9d 	bl	8000a74 <__aeabi_dcmpun>
 8009d3a:	2800      	cmp	r0, #0
 8009d3c:	d0e2      	beq.n	8009d04 <pow+0x60>
 8009d3e:	f7ff fecf 	bl	8009ae0 <__errno>
 8009d42:	2321      	movs	r3, #33	; 0x21
 8009d44:	6003      	str	r3, [r0, #0]
 8009d46:	ecbd 8b02 	vpop	{d8}
 8009d4a:	ec47 6b10 	vmov	d0, r6, r7
 8009d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d50:	2200      	movs	r2, #0
 8009d52:	2300      	movs	r3, #0
 8009d54:	4630      	mov	r0, r6
 8009d56:	4639      	mov	r1, r7
 8009d58:	f7f6 fe5a 	bl	8000a10 <__aeabi_dcmpeq>
 8009d5c:	2800      	cmp	r0, #0
 8009d5e:	d0f2      	beq.n	8009d46 <pow+0xa2>
 8009d60:	eeb0 0a48 	vmov.f32	s0, s16
 8009d64:	eef0 0a68 	vmov.f32	s1, s17
 8009d68:	f001 ffa7 	bl	800bcba <finite>
 8009d6c:	2800      	cmp	r0, #0
 8009d6e:	d0ea      	beq.n	8009d46 <pow+0xa2>
 8009d70:	ec45 4b10 	vmov	d0, r4, r5
 8009d74:	f001 ffa1 	bl	800bcba <finite>
 8009d78:	e7c3      	b.n	8009d02 <pow+0x5e>
 8009d7a:	4f01      	ldr	r7, [pc, #4]	; (8009d80 <pow+0xdc>)
 8009d7c:	2600      	movs	r6, #0
 8009d7e:	e7e2      	b.n	8009d46 <pow+0xa2>
 8009d80:	3ff00000 	.word	0x3ff00000

08009d84 <sqrt>:
 8009d84:	b538      	push	{r3, r4, r5, lr}
 8009d86:	ed2d 8b02 	vpush	{d8}
 8009d8a:	ec55 4b10 	vmov	r4, r5, d0
 8009d8e:	f001 f82f 	bl	800adf0 <__ieee754_sqrt>
 8009d92:	4622      	mov	r2, r4
 8009d94:	462b      	mov	r3, r5
 8009d96:	4620      	mov	r0, r4
 8009d98:	4629      	mov	r1, r5
 8009d9a:	eeb0 8a40 	vmov.f32	s16, s0
 8009d9e:	eef0 8a60 	vmov.f32	s17, s1
 8009da2:	f7f6 fe67 	bl	8000a74 <__aeabi_dcmpun>
 8009da6:	b990      	cbnz	r0, 8009dce <sqrt+0x4a>
 8009da8:	2200      	movs	r2, #0
 8009daa:	2300      	movs	r3, #0
 8009dac:	4620      	mov	r0, r4
 8009dae:	4629      	mov	r1, r5
 8009db0:	f7f6 fe38 	bl	8000a24 <__aeabi_dcmplt>
 8009db4:	b158      	cbz	r0, 8009dce <sqrt+0x4a>
 8009db6:	f7ff fe93 	bl	8009ae0 <__errno>
 8009dba:	2321      	movs	r3, #33	; 0x21
 8009dbc:	6003      	str	r3, [r0, #0]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	4610      	mov	r0, r2
 8009dc4:	4619      	mov	r1, r3
 8009dc6:	f7f6 fce5 	bl	8000794 <__aeabi_ddiv>
 8009dca:	ec41 0b18 	vmov	d8, r0, r1
 8009dce:	eeb0 0a48 	vmov.f32	s0, s16
 8009dd2:	eef0 0a68 	vmov.f32	s1, s17
 8009dd6:	ecbd 8b02 	vpop	{d8}
 8009dda:	bd38      	pop	{r3, r4, r5, pc}
 8009ddc:	0000      	movs	r0, r0
	...

08009de0 <__ieee754_atan2>:
 8009de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009de4:	ec57 6b11 	vmov	r6, r7, d1
 8009de8:	4273      	negs	r3, r6
 8009dea:	f8df e184 	ldr.w	lr, [pc, #388]	; 8009f70 <__ieee754_atan2+0x190>
 8009dee:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8009df2:	4333      	orrs	r3, r6
 8009df4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009df8:	4573      	cmp	r3, lr
 8009dfa:	ec51 0b10 	vmov	r0, r1, d0
 8009dfe:	ee11 8a10 	vmov	r8, s2
 8009e02:	d80a      	bhi.n	8009e1a <__ieee754_atan2+0x3a>
 8009e04:	4244      	negs	r4, r0
 8009e06:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009e0a:	4304      	orrs	r4, r0
 8009e0c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8009e10:	4574      	cmp	r4, lr
 8009e12:	ee10 9a10 	vmov	r9, s0
 8009e16:	468c      	mov	ip, r1
 8009e18:	d907      	bls.n	8009e2a <__ieee754_atan2+0x4a>
 8009e1a:	4632      	mov	r2, r6
 8009e1c:	463b      	mov	r3, r7
 8009e1e:	f7f6 f9d9 	bl	80001d4 <__adddf3>
 8009e22:	ec41 0b10 	vmov	d0, r0, r1
 8009e26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e2a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8009e2e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009e32:	4334      	orrs	r4, r6
 8009e34:	d103      	bne.n	8009e3e <__ieee754_atan2+0x5e>
 8009e36:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e3a:	f001 bd95 	b.w	800b968 <atan>
 8009e3e:	17bc      	asrs	r4, r7, #30
 8009e40:	f004 0402 	and.w	r4, r4, #2
 8009e44:	ea53 0909 	orrs.w	r9, r3, r9
 8009e48:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8009e4c:	d107      	bne.n	8009e5e <__ieee754_atan2+0x7e>
 8009e4e:	2c02      	cmp	r4, #2
 8009e50:	d060      	beq.n	8009f14 <__ieee754_atan2+0x134>
 8009e52:	2c03      	cmp	r4, #3
 8009e54:	d1e5      	bne.n	8009e22 <__ieee754_atan2+0x42>
 8009e56:	a142      	add	r1, pc, #264	; (adr r1, 8009f60 <__ieee754_atan2+0x180>)
 8009e58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e5c:	e7e1      	b.n	8009e22 <__ieee754_atan2+0x42>
 8009e5e:	ea52 0808 	orrs.w	r8, r2, r8
 8009e62:	d106      	bne.n	8009e72 <__ieee754_atan2+0x92>
 8009e64:	f1bc 0f00 	cmp.w	ip, #0
 8009e68:	da5f      	bge.n	8009f2a <__ieee754_atan2+0x14a>
 8009e6a:	a13f      	add	r1, pc, #252	; (adr r1, 8009f68 <__ieee754_atan2+0x188>)
 8009e6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e70:	e7d7      	b.n	8009e22 <__ieee754_atan2+0x42>
 8009e72:	4572      	cmp	r2, lr
 8009e74:	d10f      	bne.n	8009e96 <__ieee754_atan2+0xb6>
 8009e76:	4293      	cmp	r3, r2
 8009e78:	f104 34ff 	add.w	r4, r4, #4294967295
 8009e7c:	d107      	bne.n	8009e8e <__ieee754_atan2+0xae>
 8009e7e:	2c02      	cmp	r4, #2
 8009e80:	d84c      	bhi.n	8009f1c <__ieee754_atan2+0x13c>
 8009e82:	4b35      	ldr	r3, [pc, #212]	; (8009f58 <__ieee754_atan2+0x178>)
 8009e84:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8009e88:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009e8c:	e7c9      	b.n	8009e22 <__ieee754_atan2+0x42>
 8009e8e:	2c02      	cmp	r4, #2
 8009e90:	d848      	bhi.n	8009f24 <__ieee754_atan2+0x144>
 8009e92:	4b32      	ldr	r3, [pc, #200]	; (8009f5c <__ieee754_atan2+0x17c>)
 8009e94:	e7f6      	b.n	8009e84 <__ieee754_atan2+0xa4>
 8009e96:	4573      	cmp	r3, lr
 8009e98:	d0e4      	beq.n	8009e64 <__ieee754_atan2+0x84>
 8009e9a:	1a9b      	subs	r3, r3, r2
 8009e9c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8009ea0:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009ea4:	da1e      	bge.n	8009ee4 <__ieee754_atan2+0x104>
 8009ea6:	2f00      	cmp	r7, #0
 8009ea8:	da01      	bge.n	8009eae <__ieee754_atan2+0xce>
 8009eaa:	323c      	adds	r2, #60	; 0x3c
 8009eac:	db1e      	blt.n	8009eec <__ieee754_atan2+0x10c>
 8009eae:	4632      	mov	r2, r6
 8009eb0:	463b      	mov	r3, r7
 8009eb2:	f7f6 fc6f 	bl	8000794 <__aeabi_ddiv>
 8009eb6:	ec41 0b10 	vmov	d0, r0, r1
 8009eba:	f001 fef5 	bl	800bca8 <fabs>
 8009ebe:	f001 fd53 	bl	800b968 <atan>
 8009ec2:	ec51 0b10 	vmov	r0, r1, d0
 8009ec6:	2c01      	cmp	r4, #1
 8009ec8:	d013      	beq.n	8009ef2 <__ieee754_atan2+0x112>
 8009eca:	2c02      	cmp	r4, #2
 8009ecc:	d015      	beq.n	8009efa <__ieee754_atan2+0x11a>
 8009ece:	2c00      	cmp	r4, #0
 8009ed0:	d0a7      	beq.n	8009e22 <__ieee754_atan2+0x42>
 8009ed2:	a319      	add	r3, pc, #100	; (adr r3, 8009f38 <__ieee754_atan2+0x158>)
 8009ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed8:	f7f6 f97a 	bl	80001d0 <__aeabi_dsub>
 8009edc:	a318      	add	r3, pc, #96	; (adr r3, 8009f40 <__ieee754_atan2+0x160>)
 8009ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee2:	e014      	b.n	8009f0e <__ieee754_atan2+0x12e>
 8009ee4:	a118      	add	r1, pc, #96	; (adr r1, 8009f48 <__ieee754_atan2+0x168>)
 8009ee6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009eea:	e7ec      	b.n	8009ec6 <__ieee754_atan2+0xe6>
 8009eec:	2000      	movs	r0, #0
 8009eee:	2100      	movs	r1, #0
 8009ef0:	e7e9      	b.n	8009ec6 <__ieee754_atan2+0xe6>
 8009ef2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	e793      	b.n	8009e22 <__ieee754_atan2+0x42>
 8009efa:	a30f      	add	r3, pc, #60	; (adr r3, 8009f38 <__ieee754_atan2+0x158>)
 8009efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f00:	f7f6 f966 	bl	80001d0 <__aeabi_dsub>
 8009f04:	4602      	mov	r2, r0
 8009f06:	460b      	mov	r3, r1
 8009f08:	a10d      	add	r1, pc, #52	; (adr r1, 8009f40 <__ieee754_atan2+0x160>)
 8009f0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f0e:	f7f6 f95f 	bl	80001d0 <__aeabi_dsub>
 8009f12:	e786      	b.n	8009e22 <__ieee754_atan2+0x42>
 8009f14:	a10a      	add	r1, pc, #40	; (adr r1, 8009f40 <__ieee754_atan2+0x160>)
 8009f16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f1a:	e782      	b.n	8009e22 <__ieee754_atan2+0x42>
 8009f1c:	a10c      	add	r1, pc, #48	; (adr r1, 8009f50 <__ieee754_atan2+0x170>)
 8009f1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f22:	e77e      	b.n	8009e22 <__ieee754_atan2+0x42>
 8009f24:	2000      	movs	r0, #0
 8009f26:	2100      	movs	r1, #0
 8009f28:	e77b      	b.n	8009e22 <__ieee754_atan2+0x42>
 8009f2a:	a107      	add	r1, pc, #28	; (adr r1, 8009f48 <__ieee754_atan2+0x168>)
 8009f2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f30:	e777      	b.n	8009e22 <__ieee754_atan2+0x42>
 8009f32:	bf00      	nop
 8009f34:	f3af 8000 	nop.w
 8009f38:	33145c07 	.word	0x33145c07
 8009f3c:	3ca1a626 	.word	0x3ca1a626
 8009f40:	54442d18 	.word	0x54442d18
 8009f44:	400921fb 	.word	0x400921fb
 8009f48:	54442d18 	.word	0x54442d18
 8009f4c:	3ff921fb 	.word	0x3ff921fb
 8009f50:	54442d18 	.word	0x54442d18
 8009f54:	3fe921fb 	.word	0x3fe921fb
 8009f58:	0800d9f8 	.word	0x0800d9f8
 8009f5c:	0800da10 	.word	0x0800da10
 8009f60:	54442d18 	.word	0x54442d18
 8009f64:	c00921fb 	.word	0xc00921fb
 8009f68:	54442d18 	.word	0x54442d18
 8009f6c:	bff921fb 	.word	0xbff921fb
 8009f70:	7ff00000 	.word	0x7ff00000
 8009f74:	00000000 	.word	0x00000000

08009f78 <__ieee754_pow>:
 8009f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f7c:	ed2d 8b06 	vpush	{d8-d10}
 8009f80:	b089      	sub	sp, #36	; 0x24
 8009f82:	ed8d 1b00 	vstr	d1, [sp]
 8009f86:	e9dd 2900 	ldrd	r2, r9, [sp]
 8009f8a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8009f8e:	ea58 0102 	orrs.w	r1, r8, r2
 8009f92:	ec57 6b10 	vmov	r6, r7, d0
 8009f96:	d115      	bne.n	8009fc4 <__ieee754_pow+0x4c>
 8009f98:	19b3      	adds	r3, r6, r6
 8009f9a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8009f9e:	4152      	adcs	r2, r2
 8009fa0:	4299      	cmp	r1, r3
 8009fa2:	4b89      	ldr	r3, [pc, #548]	; (800a1c8 <__ieee754_pow+0x250>)
 8009fa4:	4193      	sbcs	r3, r2
 8009fa6:	f080 84d2 	bcs.w	800a94e <__ieee754_pow+0x9d6>
 8009faa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009fae:	4630      	mov	r0, r6
 8009fb0:	4639      	mov	r1, r7
 8009fb2:	f7f6 f90f 	bl	80001d4 <__adddf3>
 8009fb6:	ec41 0b10 	vmov	d0, r0, r1
 8009fba:	b009      	add	sp, #36	; 0x24
 8009fbc:	ecbd 8b06 	vpop	{d8-d10}
 8009fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fc4:	4b81      	ldr	r3, [pc, #516]	; (800a1cc <__ieee754_pow+0x254>)
 8009fc6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009fca:	429c      	cmp	r4, r3
 8009fcc:	ee10 aa10 	vmov	sl, s0
 8009fd0:	463d      	mov	r5, r7
 8009fd2:	dc06      	bgt.n	8009fe2 <__ieee754_pow+0x6a>
 8009fd4:	d101      	bne.n	8009fda <__ieee754_pow+0x62>
 8009fd6:	2e00      	cmp	r6, #0
 8009fd8:	d1e7      	bne.n	8009faa <__ieee754_pow+0x32>
 8009fda:	4598      	cmp	r8, r3
 8009fdc:	dc01      	bgt.n	8009fe2 <__ieee754_pow+0x6a>
 8009fde:	d10f      	bne.n	800a000 <__ieee754_pow+0x88>
 8009fe0:	b172      	cbz	r2, 800a000 <__ieee754_pow+0x88>
 8009fe2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8009fe6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8009fea:	ea55 050a 	orrs.w	r5, r5, sl
 8009fee:	d1dc      	bne.n	8009faa <__ieee754_pow+0x32>
 8009ff0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009ff4:	18db      	adds	r3, r3, r3
 8009ff6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8009ffa:	4152      	adcs	r2, r2
 8009ffc:	429d      	cmp	r5, r3
 8009ffe:	e7d0      	b.n	8009fa2 <__ieee754_pow+0x2a>
 800a000:	2d00      	cmp	r5, #0
 800a002:	da3b      	bge.n	800a07c <__ieee754_pow+0x104>
 800a004:	4b72      	ldr	r3, [pc, #456]	; (800a1d0 <__ieee754_pow+0x258>)
 800a006:	4598      	cmp	r8, r3
 800a008:	dc51      	bgt.n	800a0ae <__ieee754_pow+0x136>
 800a00a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a00e:	4598      	cmp	r8, r3
 800a010:	f340 84ac 	ble.w	800a96c <__ieee754_pow+0x9f4>
 800a014:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a018:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a01c:	2b14      	cmp	r3, #20
 800a01e:	dd0f      	ble.n	800a040 <__ieee754_pow+0xc8>
 800a020:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a024:	fa22 f103 	lsr.w	r1, r2, r3
 800a028:	fa01 f303 	lsl.w	r3, r1, r3
 800a02c:	4293      	cmp	r3, r2
 800a02e:	f040 849d 	bne.w	800a96c <__ieee754_pow+0x9f4>
 800a032:	f001 0101 	and.w	r1, r1, #1
 800a036:	f1c1 0302 	rsb	r3, r1, #2
 800a03a:	9304      	str	r3, [sp, #16]
 800a03c:	b182      	cbz	r2, 800a060 <__ieee754_pow+0xe8>
 800a03e:	e05f      	b.n	800a100 <__ieee754_pow+0x188>
 800a040:	2a00      	cmp	r2, #0
 800a042:	d15b      	bne.n	800a0fc <__ieee754_pow+0x184>
 800a044:	f1c3 0314 	rsb	r3, r3, #20
 800a048:	fa48 f103 	asr.w	r1, r8, r3
 800a04c:	fa01 f303 	lsl.w	r3, r1, r3
 800a050:	4543      	cmp	r3, r8
 800a052:	f040 8488 	bne.w	800a966 <__ieee754_pow+0x9ee>
 800a056:	f001 0101 	and.w	r1, r1, #1
 800a05a:	f1c1 0302 	rsb	r3, r1, #2
 800a05e:	9304      	str	r3, [sp, #16]
 800a060:	4b5c      	ldr	r3, [pc, #368]	; (800a1d4 <__ieee754_pow+0x25c>)
 800a062:	4598      	cmp	r8, r3
 800a064:	d132      	bne.n	800a0cc <__ieee754_pow+0x154>
 800a066:	f1b9 0f00 	cmp.w	r9, #0
 800a06a:	f280 8478 	bge.w	800a95e <__ieee754_pow+0x9e6>
 800a06e:	4959      	ldr	r1, [pc, #356]	; (800a1d4 <__ieee754_pow+0x25c>)
 800a070:	4632      	mov	r2, r6
 800a072:	463b      	mov	r3, r7
 800a074:	2000      	movs	r0, #0
 800a076:	f7f6 fb8d 	bl	8000794 <__aeabi_ddiv>
 800a07a:	e79c      	b.n	8009fb6 <__ieee754_pow+0x3e>
 800a07c:	2300      	movs	r3, #0
 800a07e:	9304      	str	r3, [sp, #16]
 800a080:	2a00      	cmp	r2, #0
 800a082:	d13d      	bne.n	800a100 <__ieee754_pow+0x188>
 800a084:	4b51      	ldr	r3, [pc, #324]	; (800a1cc <__ieee754_pow+0x254>)
 800a086:	4598      	cmp	r8, r3
 800a088:	d1ea      	bne.n	800a060 <__ieee754_pow+0xe8>
 800a08a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a08e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a092:	ea53 030a 	orrs.w	r3, r3, sl
 800a096:	f000 845a 	beq.w	800a94e <__ieee754_pow+0x9d6>
 800a09a:	4b4f      	ldr	r3, [pc, #316]	; (800a1d8 <__ieee754_pow+0x260>)
 800a09c:	429c      	cmp	r4, r3
 800a09e:	dd08      	ble.n	800a0b2 <__ieee754_pow+0x13a>
 800a0a0:	f1b9 0f00 	cmp.w	r9, #0
 800a0a4:	f2c0 8457 	blt.w	800a956 <__ieee754_pow+0x9de>
 800a0a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a0ac:	e783      	b.n	8009fb6 <__ieee754_pow+0x3e>
 800a0ae:	2302      	movs	r3, #2
 800a0b0:	e7e5      	b.n	800a07e <__ieee754_pow+0x106>
 800a0b2:	f1b9 0f00 	cmp.w	r9, #0
 800a0b6:	f04f 0000 	mov.w	r0, #0
 800a0ba:	f04f 0100 	mov.w	r1, #0
 800a0be:	f6bf af7a 	bge.w	8009fb6 <__ieee754_pow+0x3e>
 800a0c2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a0c6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a0ca:	e774      	b.n	8009fb6 <__ieee754_pow+0x3e>
 800a0cc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800a0d0:	d106      	bne.n	800a0e0 <__ieee754_pow+0x168>
 800a0d2:	4632      	mov	r2, r6
 800a0d4:	463b      	mov	r3, r7
 800a0d6:	4630      	mov	r0, r6
 800a0d8:	4639      	mov	r1, r7
 800a0da:	f7f6 fa31 	bl	8000540 <__aeabi_dmul>
 800a0de:	e76a      	b.n	8009fb6 <__ieee754_pow+0x3e>
 800a0e0:	4b3e      	ldr	r3, [pc, #248]	; (800a1dc <__ieee754_pow+0x264>)
 800a0e2:	4599      	cmp	r9, r3
 800a0e4:	d10c      	bne.n	800a100 <__ieee754_pow+0x188>
 800a0e6:	2d00      	cmp	r5, #0
 800a0e8:	db0a      	blt.n	800a100 <__ieee754_pow+0x188>
 800a0ea:	ec47 6b10 	vmov	d0, r6, r7
 800a0ee:	b009      	add	sp, #36	; 0x24
 800a0f0:	ecbd 8b06 	vpop	{d8-d10}
 800a0f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0f8:	f000 be7a 	b.w	800adf0 <__ieee754_sqrt>
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	9304      	str	r3, [sp, #16]
 800a100:	ec47 6b10 	vmov	d0, r6, r7
 800a104:	f001 fdd0 	bl	800bca8 <fabs>
 800a108:	ec51 0b10 	vmov	r0, r1, d0
 800a10c:	f1ba 0f00 	cmp.w	sl, #0
 800a110:	d129      	bne.n	800a166 <__ieee754_pow+0x1ee>
 800a112:	b124      	cbz	r4, 800a11e <__ieee754_pow+0x1a6>
 800a114:	4b2f      	ldr	r3, [pc, #188]	; (800a1d4 <__ieee754_pow+0x25c>)
 800a116:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d123      	bne.n	800a166 <__ieee754_pow+0x1ee>
 800a11e:	f1b9 0f00 	cmp.w	r9, #0
 800a122:	da05      	bge.n	800a130 <__ieee754_pow+0x1b8>
 800a124:	4602      	mov	r2, r0
 800a126:	460b      	mov	r3, r1
 800a128:	2000      	movs	r0, #0
 800a12a:	492a      	ldr	r1, [pc, #168]	; (800a1d4 <__ieee754_pow+0x25c>)
 800a12c:	f7f6 fb32 	bl	8000794 <__aeabi_ddiv>
 800a130:	2d00      	cmp	r5, #0
 800a132:	f6bf af40 	bge.w	8009fb6 <__ieee754_pow+0x3e>
 800a136:	9b04      	ldr	r3, [sp, #16]
 800a138:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a13c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a140:	4323      	orrs	r3, r4
 800a142:	d108      	bne.n	800a156 <__ieee754_pow+0x1de>
 800a144:	4602      	mov	r2, r0
 800a146:	460b      	mov	r3, r1
 800a148:	4610      	mov	r0, r2
 800a14a:	4619      	mov	r1, r3
 800a14c:	f7f6 f840 	bl	80001d0 <__aeabi_dsub>
 800a150:	4602      	mov	r2, r0
 800a152:	460b      	mov	r3, r1
 800a154:	e78f      	b.n	800a076 <__ieee754_pow+0xfe>
 800a156:	9b04      	ldr	r3, [sp, #16]
 800a158:	2b01      	cmp	r3, #1
 800a15a:	f47f af2c 	bne.w	8009fb6 <__ieee754_pow+0x3e>
 800a15e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a162:	4619      	mov	r1, r3
 800a164:	e727      	b.n	8009fb6 <__ieee754_pow+0x3e>
 800a166:	0feb      	lsrs	r3, r5, #31
 800a168:	3b01      	subs	r3, #1
 800a16a:	9306      	str	r3, [sp, #24]
 800a16c:	9a06      	ldr	r2, [sp, #24]
 800a16e:	9b04      	ldr	r3, [sp, #16]
 800a170:	4313      	orrs	r3, r2
 800a172:	d102      	bne.n	800a17a <__ieee754_pow+0x202>
 800a174:	4632      	mov	r2, r6
 800a176:	463b      	mov	r3, r7
 800a178:	e7e6      	b.n	800a148 <__ieee754_pow+0x1d0>
 800a17a:	4b19      	ldr	r3, [pc, #100]	; (800a1e0 <__ieee754_pow+0x268>)
 800a17c:	4598      	cmp	r8, r3
 800a17e:	f340 80fb 	ble.w	800a378 <__ieee754_pow+0x400>
 800a182:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a186:	4598      	cmp	r8, r3
 800a188:	4b13      	ldr	r3, [pc, #76]	; (800a1d8 <__ieee754_pow+0x260>)
 800a18a:	dd0c      	ble.n	800a1a6 <__ieee754_pow+0x22e>
 800a18c:	429c      	cmp	r4, r3
 800a18e:	dc0f      	bgt.n	800a1b0 <__ieee754_pow+0x238>
 800a190:	f1b9 0f00 	cmp.w	r9, #0
 800a194:	da0f      	bge.n	800a1b6 <__ieee754_pow+0x23e>
 800a196:	2000      	movs	r0, #0
 800a198:	b009      	add	sp, #36	; 0x24
 800a19a:	ecbd 8b06 	vpop	{d8-d10}
 800a19e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1a2:	f001 bbd6 	b.w	800b952 <__math_oflow>
 800a1a6:	429c      	cmp	r4, r3
 800a1a8:	dbf2      	blt.n	800a190 <__ieee754_pow+0x218>
 800a1aa:	4b0a      	ldr	r3, [pc, #40]	; (800a1d4 <__ieee754_pow+0x25c>)
 800a1ac:	429c      	cmp	r4, r3
 800a1ae:	dd19      	ble.n	800a1e4 <__ieee754_pow+0x26c>
 800a1b0:	f1b9 0f00 	cmp.w	r9, #0
 800a1b4:	dcef      	bgt.n	800a196 <__ieee754_pow+0x21e>
 800a1b6:	2000      	movs	r0, #0
 800a1b8:	b009      	add	sp, #36	; 0x24
 800a1ba:	ecbd 8b06 	vpop	{d8-d10}
 800a1be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1c2:	f001 bbbd 	b.w	800b940 <__math_uflow>
 800a1c6:	bf00      	nop
 800a1c8:	fff00000 	.word	0xfff00000
 800a1cc:	7ff00000 	.word	0x7ff00000
 800a1d0:	433fffff 	.word	0x433fffff
 800a1d4:	3ff00000 	.word	0x3ff00000
 800a1d8:	3fefffff 	.word	0x3fefffff
 800a1dc:	3fe00000 	.word	0x3fe00000
 800a1e0:	41e00000 	.word	0x41e00000
 800a1e4:	4b60      	ldr	r3, [pc, #384]	; (800a368 <__ieee754_pow+0x3f0>)
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	f7f5 fff2 	bl	80001d0 <__aeabi_dsub>
 800a1ec:	a354      	add	r3, pc, #336	; (adr r3, 800a340 <__ieee754_pow+0x3c8>)
 800a1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f2:	4604      	mov	r4, r0
 800a1f4:	460d      	mov	r5, r1
 800a1f6:	f7f6 f9a3 	bl	8000540 <__aeabi_dmul>
 800a1fa:	a353      	add	r3, pc, #332	; (adr r3, 800a348 <__ieee754_pow+0x3d0>)
 800a1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a200:	4606      	mov	r6, r0
 800a202:	460f      	mov	r7, r1
 800a204:	4620      	mov	r0, r4
 800a206:	4629      	mov	r1, r5
 800a208:	f7f6 f99a 	bl	8000540 <__aeabi_dmul>
 800a20c:	4b57      	ldr	r3, [pc, #348]	; (800a36c <__ieee754_pow+0x3f4>)
 800a20e:	4682      	mov	sl, r0
 800a210:	468b      	mov	fp, r1
 800a212:	2200      	movs	r2, #0
 800a214:	4620      	mov	r0, r4
 800a216:	4629      	mov	r1, r5
 800a218:	f7f6 f992 	bl	8000540 <__aeabi_dmul>
 800a21c:	4602      	mov	r2, r0
 800a21e:	460b      	mov	r3, r1
 800a220:	a14b      	add	r1, pc, #300	; (adr r1, 800a350 <__ieee754_pow+0x3d8>)
 800a222:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a226:	f7f5 ffd3 	bl	80001d0 <__aeabi_dsub>
 800a22a:	4622      	mov	r2, r4
 800a22c:	462b      	mov	r3, r5
 800a22e:	f7f6 f987 	bl	8000540 <__aeabi_dmul>
 800a232:	4602      	mov	r2, r0
 800a234:	460b      	mov	r3, r1
 800a236:	2000      	movs	r0, #0
 800a238:	494d      	ldr	r1, [pc, #308]	; (800a370 <__ieee754_pow+0x3f8>)
 800a23a:	f7f5 ffc9 	bl	80001d0 <__aeabi_dsub>
 800a23e:	4622      	mov	r2, r4
 800a240:	4680      	mov	r8, r0
 800a242:	4689      	mov	r9, r1
 800a244:	462b      	mov	r3, r5
 800a246:	4620      	mov	r0, r4
 800a248:	4629      	mov	r1, r5
 800a24a:	f7f6 f979 	bl	8000540 <__aeabi_dmul>
 800a24e:	4602      	mov	r2, r0
 800a250:	460b      	mov	r3, r1
 800a252:	4640      	mov	r0, r8
 800a254:	4649      	mov	r1, r9
 800a256:	f7f6 f973 	bl	8000540 <__aeabi_dmul>
 800a25a:	a33f      	add	r3, pc, #252	; (adr r3, 800a358 <__ieee754_pow+0x3e0>)
 800a25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a260:	f7f6 f96e 	bl	8000540 <__aeabi_dmul>
 800a264:	4602      	mov	r2, r0
 800a266:	460b      	mov	r3, r1
 800a268:	4650      	mov	r0, sl
 800a26a:	4659      	mov	r1, fp
 800a26c:	f7f5 ffb0 	bl	80001d0 <__aeabi_dsub>
 800a270:	4602      	mov	r2, r0
 800a272:	460b      	mov	r3, r1
 800a274:	4680      	mov	r8, r0
 800a276:	4689      	mov	r9, r1
 800a278:	4630      	mov	r0, r6
 800a27a:	4639      	mov	r1, r7
 800a27c:	f7f5 ffaa 	bl	80001d4 <__adddf3>
 800a280:	2000      	movs	r0, #0
 800a282:	4632      	mov	r2, r6
 800a284:	463b      	mov	r3, r7
 800a286:	4604      	mov	r4, r0
 800a288:	460d      	mov	r5, r1
 800a28a:	f7f5 ffa1 	bl	80001d0 <__aeabi_dsub>
 800a28e:	4602      	mov	r2, r0
 800a290:	460b      	mov	r3, r1
 800a292:	4640      	mov	r0, r8
 800a294:	4649      	mov	r1, r9
 800a296:	f7f5 ff9b 	bl	80001d0 <__aeabi_dsub>
 800a29a:	9b04      	ldr	r3, [sp, #16]
 800a29c:	9a06      	ldr	r2, [sp, #24]
 800a29e:	3b01      	subs	r3, #1
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	4682      	mov	sl, r0
 800a2a4:	468b      	mov	fp, r1
 800a2a6:	f040 81e7 	bne.w	800a678 <__ieee754_pow+0x700>
 800a2aa:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800a360 <__ieee754_pow+0x3e8>
 800a2ae:	eeb0 8a47 	vmov.f32	s16, s14
 800a2b2:	eef0 8a67 	vmov.f32	s17, s15
 800a2b6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a2ba:	2600      	movs	r6, #0
 800a2bc:	4632      	mov	r2, r6
 800a2be:	463b      	mov	r3, r7
 800a2c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a2c4:	f7f5 ff84 	bl	80001d0 <__aeabi_dsub>
 800a2c8:	4622      	mov	r2, r4
 800a2ca:	462b      	mov	r3, r5
 800a2cc:	f7f6 f938 	bl	8000540 <__aeabi_dmul>
 800a2d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2d4:	4680      	mov	r8, r0
 800a2d6:	4689      	mov	r9, r1
 800a2d8:	4650      	mov	r0, sl
 800a2da:	4659      	mov	r1, fp
 800a2dc:	f7f6 f930 	bl	8000540 <__aeabi_dmul>
 800a2e0:	4602      	mov	r2, r0
 800a2e2:	460b      	mov	r3, r1
 800a2e4:	4640      	mov	r0, r8
 800a2e6:	4649      	mov	r1, r9
 800a2e8:	f7f5 ff74 	bl	80001d4 <__adddf3>
 800a2ec:	4632      	mov	r2, r6
 800a2ee:	463b      	mov	r3, r7
 800a2f0:	4680      	mov	r8, r0
 800a2f2:	4689      	mov	r9, r1
 800a2f4:	4620      	mov	r0, r4
 800a2f6:	4629      	mov	r1, r5
 800a2f8:	f7f6 f922 	bl	8000540 <__aeabi_dmul>
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	4604      	mov	r4, r0
 800a300:	460d      	mov	r5, r1
 800a302:	4602      	mov	r2, r0
 800a304:	4649      	mov	r1, r9
 800a306:	4640      	mov	r0, r8
 800a308:	f7f5 ff64 	bl	80001d4 <__adddf3>
 800a30c:	4b19      	ldr	r3, [pc, #100]	; (800a374 <__ieee754_pow+0x3fc>)
 800a30e:	4299      	cmp	r1, r3
 800a310:	ec45 4b19 	vmov	d9, r4, r5
 800a314:	4606      	mov	r6, r0
 800a316:	460f      	mov	r7, r1
 800a318:	468b      	mov	fp, r1
 800a31a:	f340 82f1 	ble.w	800a900 <__ieee754_pow+0x988>
 800a31e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a322:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a326:	4303      	orrs	r3, r0
 800a328:	f000 81e4 	beq.w	800a6f4 <__ieee754_pow+0x77c>
 800a32c:	ec51 0b18 	vmov	r0, r1, d8
 800a330:	2200      	movs	r2, #0
 800a332:	2300      	movs	r3, #0
 800a334:	f7f6 fb76 	bl	8000a24 <__aeabi_dcmplt>
 800a338:	3800      	subs	r0, #0
 800a33a:	bf18      	it	ne
 800a33c:	2001      	movne	r0, #1
 800a33e:	e72b      	b.n	800a198 <__ieee754_pow+0x220>
 800a340:	60000000 	.word	0x60000000
 800a344:	3ff71547 	.word	0x3ff71547
 800a348:	f85ddf44 	.word	0xf85ddf44
 800a34c:	3e54ae0b 	.word	0x3e54ae0b
 800a350:	55555555 	.word	0x55555555
 800a354:	3fd55555 	.word	0x3fd55555
 800a358:	652b82fe 	.word	0x652b82fe
 800a35c:	3ff71547 	.word	0x3ff71547
 800a360:	00000000 	.word	0x00000000
 800a364:	bff00000 	.word	0xbff00000
 800a368:	3ff00000 	.word	0x3ff00000
 800a36c:	3fd00000 	.word	0x3fd00000
 800a370:	3fe00000 	.word	0x3fe00000
 800a374:	408fffff 	.word	0x408fffff
 800a378:	4bd5      	ldr	r3, [pc, #852]	; (800a6d0 <__ieee754_pow+0x758>)
 800a37a:	402b      	ands	r3, r5
 800a37c:	2200      	movs	r2, #0
 800a37e:	b92b      	cbnz	r3, 800a38c <__ieee754_pow+0x414>
 800a380:	4bd4      	ldr	r3, [pc, #848]	; (800a6d4 <__ieee754_pow+0x75c>)
 800a382:	f7f6 f8dd 	bl	8000540 <__aeabi_dmul>
 800a386:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a38a:	460c      	mov	r4, r1
 800a38c:	1523      	asrs	r3, r4, #20
 800a38e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a392:	4413      	add	r3, r2
 800a394:	9305      	str	r3, [sp, #20]
 800a396:	4bd0      	ldr	r3, [pc, #832]	; (800a6d8 <__ieee754_pow+0x760>)
 800a398:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a39c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a3a0:	429c      	cmp	r4, r3
 800a3a2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a3a6:	dd08      	ble.n	800a3ba <__ieee754_pow+0x442>
 800a3a8:	4bcc      	ldr	r3, [pc, #816]	; (800a6dc <__ieee754_pow+0x764>)
 800a3aa:	429c      	cmp	r4, r3
 800a3ac:	f340 8162 	ble.w	800a674 <__ieee754_pow+0x6fc>
 800a3b0:	9b05      	ldr	r3, [sp, #20]
 800a3b2:	3301      	adds	r3, #1
 800a3b4:	9305      	str	r3, [sp, #20]
 800a3b6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a3ba:	2400      	movs	r4, #0
 800a3bc:	00e3      	lsls	r3, r4, #3
 800a3be:	9307      	str	r3, [sp, #28]
 800a3c0:	4bc7      	ldr	r3, [pc, #796]	; (800a6e0 <__ieee754_pow+0x768>)
 800a3c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a3c6:	ed93 7b00 	vldr	d7, [r3]
 800a3ca:	4629      	mov	r1, r5
 800a3cc:	ec53 2b17 	vmov	r2, r3, d7
 800a3d0:	eeb0 9a47 	vmov.f32	s18, s14
 800a3d4:	eef0 9a67 	vmov.f32	s19, s15
 800a3d8:	4682      	mov	sl, r0
 800a3da:	f7f5 fef9 	bl	80001d0 <__aeabi_dsub>
 800a3de:	4652      	mov	r2, sl
 800a3e0:	4606      	mov	r6, r0
 800a3e2:	460f      	mov	r7, r1
 800a3e4:	462b      	mov	r3, r5
 800a3e6:	ec51 0b19 	vmov	r0, r1, d9
 800a3ea:	f7f5 fef3 	bl	80001d4 <__adddf3>
 800a3ee:	4602      	mov	r2, r0
 800a3f0:	460b      	mov	r3, r1
 800a3f2:	2000      	movs	r0, #0
 800a3f4:	49bb      	ldr	r1, [pc, #748]	; (800a6e4 <__ieee754_pow+0x76c>)
 800a3f6:	f7f6 f9cd 	bl	8000794 <__aeabi_ddiv>
 800a3fa:	ec41 0b1a 	vmov	d10, r0, r1
 800a3fe:	4602      	mov	r2, r0
 800a400:	460b      	mov	r3, r1
 800a402:	4630      	mov	r0, r6
 800a404:	4639      	mov	r1, r7
 800a406:	f7f6 f89b 	bl	8000540 <__aeabi_dmul>
 800a40a:	2300      	movs	r3, #0
 800a40c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a410:	9302      	str	r3, [sp, #8]
 800a412:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a416:	46ab      	mov	fp, r5
 800a418:	106d      	asrs	r5, r5, #1
 800a41a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a41e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a422:	ec41 0b18 	vmov	d8, r0, r1
 800a426:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800a42a:	2200      	movs	r2, #0
 800a42c:	4640      	mov	r0, r8
 800a42e:	4649      	mov	r1, r9
 800a430:	4614      	mov	r4, r2
 800a432:	461d      	mov	r5, r3
 800a434:	f7f6 f884 	bl	8000540 <__aeabi_dmul>
 800a438:	4602      	mov	r2, r0
 800a43a:	460b      	mov	r3, r1
 800a43c:	4630      	mov	r0, r6
 800a43e:	4639      	mov	r1, r7
 800a440:	f7f5 fec6 	bl	80001d0 <__aeabi_dsub>
 800a444:	ec53 2b19 	vmov	r2, r3, d9
 800a448:	4606      	mov	r6, r0
 800a44a:	460f      	mov	r7, r1
 800a44c:	4620      	mov	r0, r4
 800a44e:	4629      	mov	r1, r5
 800a450:	f7f5 febe 	bl	80001d0 <__aeabi_dsub>
 800a454:	4602      	mov	r2, r0
 800a456:	460b      	mov	r3, r1
 800a458:	4650      	mov	r0, sl
 800a45a:	4659      	mov	r1, fp
 800a45c:	f7f5 feb8 	bl	80001d0 <__aeabi_dsub>
 800a460:	4642      	mov	r2, r8
 800a462:	464b      	mov	r3, r9
 800a464:	f7f6 f86c 	bl	8000540 <__aeabi_dmul>
 800a468:	4602      	mov	r2, r0
 800a46a:	460b      	mov	r3, r1
 800a46c:	4630      	mov	r0, r6
 800a46e:	4639      	mov	r1, r7
 800a470:	f7f5 feae 	bl	80001d0 <__aeabi_dsub>
 800a474:	ec53 2b1a 	vmov	r2, r3, d10
 800a478:	f7f6 f862 	bl	8000540 <__aeabi_dmul>
 800a47c:	ec53 2b18 	vmov	r2, r3, d8
 800a480:	ec41 0b19 	vmov	d9, r0, r1
 800a484:	ec51 0b18 	vmov	r0, r1, d8
 800a488:	f7f6 f85a 	bl	8000540 <__aeabi_dmul>
 800a48c:	a37c      	add	r3, pc, #496	; (adr r3, 800a680 <__ieee754_pow+0x708>)
 800a48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a492:	4604      	mov	r4, r0
 800a494:	460d      	mov	r5, r1
 800a496:	f7f6 f853 	bl	8000540 <__aeabi_dmul>
 800a49a:	a37b      	add	r3, pc, #492	; (adr r3, 800a688 <__ieee754_pow+0x710>)
 800a49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a0:	f7f5 fe98 	bl	80001d4 <__adddf3>
 800a4a4:	4622      	mov	r2, r4
 800a4a6:	462b      	mov	r3, r5
 800a4a8:	f7f6 f84a 	bl	8000540 <__aeabi_dmul>
 800a4ac:	a378      	add	r3, pc, #480	; (adr r3, 800a690 <__ieee754_pow+0x718>)
 800a4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b2:	f7f5 fe8f 	bl	80001d4 <__adddf3>
 800a4b6:	4622      	mov	r2, r4
 800a4b8:	462b      	mov	r3, r5
 800a4ba:	f7f6 f841 	bl	8000540 <__aeabi_dmul>
 800a4be:	a376      	add	r3, pc, #472	; (adr r3, 800a698 <__ieee754_pow+0x720>)
 800a4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c4:	f7f5 fe86 	bl	80001d4 <__adddf3>
 800a4c8:	4622      	mov	r2, r4
 800a4ca:	462b      	mov	r3, r5
 800a4cc:	f7f6 f838 	bl	8000540 <__aeabi_dmul>
 800a4d0:	a373      	add	r3, pc, #460	; (adr r3, 800a6a0 <__ieee754_pow+0x728>)
 800a4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d6:	f7f5 fe7d 	bl	80001d4 <__adddf3>
 800a4da:	4622      	mov	r2, r4
 800a4dc:	462b      	mov	r3, r5
 800a4de:	f7f6 f82f 	bl	8000540 <__aeabi_dmul>
 800a4e2:	a371      	add	r3, pc, #452	; (adr r3, 800a6a8 <__ieee754_pow+0x730>)
 800a4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e8:	f7f5 fe74 	bl	80001d4 <__adddf3>
 800a4ec:	4622      	mov	r2, r4
 800a4ee:	4606      	mov	r6, r0
 800a4f0:	460f      	mov	r7, r1
 800a4f2:	462b      	mov	r3, r5
 800a4f4:	4620      	mov	r0, r4
 800a4f6:	4629      	mov	r1, r5
 800a4f8:	f7f6 f822 	bl	8000540 <__aeabi_dmul>
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	460b      	mov	r3, r1
 800a500:	4630      	mov	r0, r6
 800a502:	4639      	mov	r1, r7
 800a504:	f7f6 f81c 	bl	8000540 <__aeabi_dmul>
 800a508:	4642      	mov	r2, r8
 800a50a:	4604      	mov	r4, r0
 800a50c:	460d      	mov	r5, r1
 800a50e:	464b      	mov	r3, r9
 800a510:	ec51 0b18 	vmov	r0, r1, d8
 800a514:	f7f5 fe5e 	bl	80001d4 <__adddf3>
 800a518:	ec53 2b19 	vmov	r2, r3, d9
 800a51c:	f7f6 f810 	bl	8000540 <__aeabi_dmul>
 800a520:	4622      	mov	r2, r4
 800a522:	462b      	mov	r3, r5
 800a524:	f7f5 fe56 	bl	80001d4 <__adddf3>
 800a528:	4642      	mov	r2, r8
 800a52a:	4682      	mov	sl, r0
 800a52c:	468b      	mov	fp, r1
 800a52e:	464b      	mov	r3, r9
 800a530:	4640      	mov	r0, r8
 800a532:	4649      	mov	r1, r9
 800a534:	f7f6 f804 	bl	8000540 <__aeabi_dmul>
 800a538:	4b6b      	ldr	r3, [pc, #428]	; (800a6e8 <__ieee754_pow+0x770>)
 800a53a:	2200      	movs	r2, #0
 800a53c:	4606      	mov	r6, r0
 800a53e:	460f      	mov	r7, r1
 800a540:	f7f5 fe48 	bl	80001d4 <__adddf3>
 800a544:	4652      	mov	r2, sl
 800a546:	465b      	mov	r3, fp
 800a548:	f7f5 fe44 	bl	80001d4 <__adddf3>
 800a54c:	2000      	movs	r0, #0
 800a54e:	4604      	mov	r4, r0
 800a550:	460d      	mov	r5, r1
 800a552:	4602      	mov	r2, r0
 800a554:	460b      	mov	r3, r1
 800a556:	4640      	mov	r0, r8
 800a558:	4649      	mov	r1, r9
 800a55a:	f7f5 fff1 	bl	8000540 <__aeabi_dmul>
 800a55e:	4b62      	ldr	r3, [pc, #392]	; (800a6e8 <__ieee754_pow+0x770>)
 800a560:	4680      	mov	r8, r0
 800a562:	4689      	mov	r9, r1
 800a564:	2200      	movs	r2, #0
 800a566:	4620      	mov	r0, r4
 800a568:	4629      	mov	r1, r5
 800a56a:	f7f5 fe31 	bl	80001d0 <__aeabi_dsub>
 800a56e:	4632      	mov	r2, r6
 800a570:	463b      	mov	r3, r7
 800a572:	f7f5 fe2d 	bl	80001d0 <__aeabi_dsub>
 800a576:	4602      	mov	r2, r0
 800a578:	460b      	mov	r3, r1
 800a57a:	4650      	mov	r0, sl
 800a57c:	4659      	mov	r1, fp
 800a57e:	f7f5 fe27 	bl	80001d0 <__aeabi_dsub>
 800a582:	ec53 2b18 	vmov	r2, r3, d8
 800a586:	f7f5 ffdb 	bl	8000540 <__aeabi_dmul>
 800a58a:	4622      	mov	r2, r4
 800a58c:	4606      	mov	r6, r0
 800a58e:	460f      	mov	r7, r1
 800a590:	462b      	mov	r3, r5
 800a592:	ec51 0b19 	vmov	r0, r1, d9
 800a596:	f7f5 ffd3 	bl	8000540 <__aeabi_dmul>
 800a59a:	4602      	mov	r2, r0
 800a59c:	460b      	mov	r3, r1
 800a59e:	4630      	mov	r0, r6
 800a5a0:	4639      	mov	r1, r7
 800a5a2:	f7f5 fe17 	bl	80001d4 <__adddf3>
 800a5a6:	4606      	mov	r6, r0
 800a5a8:	460f      	mov	r7, r1
 800a5aa:	4602      	mov	r2, r0
 800a5ac:	460b      	mov	r3, r1
 800a5ae:	4640      	mov	r0, r8
 800a5b0:	4649      	mov	r1, r9
 800a5b2:	f7f5 fe0f 	bl	80001d4 <__adddf3>
 800a5b6:	a33e      	add	r3, pc, #248	; (adr r3, 800a6b0 <__ieee754_pow+0x738>)
 800a5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5bc:	2000      	movs	r0, #0
 800a5be:	4604      	mov	r4, r0
 800a5c0:	460d      	mov	r5, r1
 800a5c2:	f7f5 ffbd 	bl	8000540 <__aeabi_dmul>
 800a5c6:	4642      	mov	r2, r8
 800a5c8:	ec41 0b18 	vmov	d8, r0, r1
 800a5cc:	464b      	mov	r3, r9
 800a5ce:	4620      	mov	r0, r4
 800a5d0:	4629      	mov	r1, r5
 800a5d2:	f7f5 fdfd 	bl	80001d0 <__aeabi_dsub>
 800a5d6:	4602      	mov	r2, r0
 800a5d8:	460b      	mov	r3, r1
 800a5da:	4630      	mov	r0, r6
 800a5dc:	4639      	mov	r1, r7
 800a5de:	f7f5 fdf7 	bl	80001d0 <__aeabi_dsub>
 800a5e2:	a335      	add	r3, pc, #212	; (adr r3, 800a6b8 <__ieee754_pow+0x740>)
 800a5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e8:	f7f5 ffaa 	bl	8000540 <__aeabi_dmul>
 800a5ec:	a334      	add	r3, pc, #208	; (adr r3, 800a6c0 <__ieee754_pow+0x748>)
 800a5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f2:	4606      	mov	r6, r0
 800a5f4:	460f      	mov	r7, r1
 800a5f6:	4620      	mov	r0, r4
 800a5f8:	4629      	mov	r1, r5
 800a5fa:	f7f5 ffa1 	bl	8000540 <__aeabi_dmul>
 800a5fe:	4602      	mov	r2, r0
 800a600:	460b      	mov	r3, r1
 800a602:	4630      	mov	r0, r6
 800a604:	4639      	mov	r1, r7
 800a606:	f7f5 fde5 	bl	80001d4 <__adddf3>
 800a60a:	9a07      	ldr	r2, [sp, #28]
 800a60c:	4b37      	ldr	r3, [pc, #220]	; (800a6ec <__ieee754_pow+0x774>)
 800a60e:	4413      	add	r3, r2
 800a610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a614:	f7f5 fdde 	bl	80001d4 <__adddf3>
 800a618:	4682      	mov	sl, r0
 800a61a:	9805      	ldr	r0, [sp, #20]
 800a61c:	468b      	mov	fp, r1
 800a61e:	f7f5 ff25 	bl	800046c <__aeabi_i2d>
 800a622:	9a07      	ldr	r2, [sp, #28]
 800a624:	4b32      	ldr	r3, [pc, #200]	; (800a6f0 <__ieee754_pow+0x778>)
 800a626:	4413      	add	r3, r2
 800a628:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a62c:	4606      	mov	r6, r0
 800a62e:	460f      	mov	r7, r1
 800a630:	4652      	mov	r2, sl
 800a632:	465b      	mov	r3, fp
 800a634:	ec51 0b18 	vmov	r0, r1, d8
 800a638:	f7f5 fdcc 	bl	80001d4 <__adddf3>
 800a63c:	4642      	mov	r2, r8
 800a63e:	464b      	mov	r3, r9
 800a640:	f7f5 fdc8 	bl	80001d4 <__adddf3>
 800a644:	4632      	mov	r2, r6
 800a646:	463b      	mov	r3, r7
 800a648:	f7f5 fdc4 	bl	80001d4 <__adddf3>
 800a64c:	2000      	movs	r0, #0
 800a64e:	4632      	mov	r2, r6
 800a650:	463b      	mov	r3, r7
 800a652:	4604      	mov	r4, r0
 800a654:	460d      	mov	r5, r1
 800a656:	f7f5 fdbb 	bl	80001d0 <__aeabi_dsub>
 800a65a:	4642      	mov	r2, r8
 800a65c:	464b      	mov	r3, r9
 800a65e:	f7f5 fdb7 	bl	80001d0 <__aeabi_dsub>
 800a662:	ec53 2b18 	vmov	r2, r3, d8
 800a666:	f7f5 fdb3 	bl	80001d0 <__aeabi_dsub>
 800a66a:	4602      	mov	r2, r0
 800a66c:	460b      	mov	r3, r1
 800a66e:	4650      	mov	r0, sl
 800a670:	4659      	mov	r1, fp
 800a672:	e610      	b.n	800a296 <__ieee754_pow+0x31e>
 800a674:	2401      	movs	r4, #1
 800a676:	e6a1      	b.n	800a3bc <__ieee754_pow+0x444>
 800a678:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800a6c8 <__ieee754_pow+0x750>
 800a67c:	e617      	b.n	800a2ae <__ieee754_pow+0x336>
 800a67e:	bf00      	nop
 800a680:	4a454eef 	.word	0x4a454eef
 800a684:	3fca7e28 	.word	0x3fca7e28
 800a688:	93c9db65 	.word	0x93c9db65
 800a68c:	3fcd864a 	.word	0x3fcd864a
 800a690:	a91d4101 	.word	0xa91d4101
 800a694:	3fd17460 	.word	0x3fd17460
 800a698:	518f264d 	.word	0x518f264d
 800a69c:	3fd55555 	.word	0x3fd55555
 800a6a0:	db6fabff 	.word	0xdb6fabff
 800a6a4:	3fdb6db6 	.word	0x3fdb6db6
 800a6a8:	33333303 	.word	0x33333303
 800a6ac:	3fe33333 	.word	0x3fe33333
 800a6b0:	e0000000 	.word	0xe0000000
 800a6b4:	3feec709 	.word	0x3feec709
 800a6b8:	dc3a03fd 	.word	0xdc3a03fd
 800a6bc:	3feec709 	.word	0x3feec709
 800a6c0:	145b01f5 	.word	0x145b01f5
 800a6c4:	be3e2fe0 	.word	0xbe3e2fe0
 800a6c8:	00000000 	.word	0x00000000
 800a6cc:	3ff00000 	.word	0x3ff00000
 800a6d0:	7ff00000 	.word	0x7ff00000
 800a6d4:	43400000 	.word	0x43400000
 800a6d8:	0003988e 	.word	0x0003988e
 800a6dc:	000bb679 	.word	0x000bb679
 800a6e0:	0800da28 	.word	0x0800da28
 800a6e4:	3ff00000 	.word	0x3ff00000
 800a6e8:	40080000 	.word	0x40080000
 800a6ec:	0800da48 	.word	0x0800da48
 800a6f0:	0800da38 	.word	0x0800da38
 800a6f4:	a3b5      	add	r3, pc, #724	; (adr r3, 800a9cc <__ieee754_pow+0xa54>)
 800a6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6fa:	4640      	mov	r0, r8
 800a6fc:	4649      	mov	r1, r9
 800a6fe:	f7f5 fd69 	bl	80001d4 <__adddf3>
 800a702:	4622      	mov	r2, r4
 800a704:	ec41 0b1a 	vmov	d10, r0, r1
 800a708:	462b      	mov	r3, r5
 800a70a:	4630      	mov	r0, r6
 800a70c:	4639      	mov	r1, r7
 800a70e:	f7f5 fd5f 	bl	80001d0 <__aeabi_dsub>
 800a712:	4602      	mov	r2, r0
 800a714:	460b      	mov	r3, r1
 800a716:	ec51 0b1a 	vmov	r0, r1, d10
 800a71a:	f7f6 f9a1 	bl	8000a60 <__aeabi_dcmpgt>
 800a71e:	2800      	cmp	r0, #0
 800a720:	f47f ae04 	bne.w	800a32c <__ieee754_pow+0x3b4>
 800a724:	4aa4      	ldr	r2, [pc, #656]	; (800a9b8 <__ieee754_pow+0xa40>)
 800a726:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a72a:	4293      	cmp	r3, r2
 800a72c:	f340 8108 	ble.w	800a940 <__ieee754_pow+0x9c8>
 800a730:	151b      	asrs	r3, r3, #20
 800a732:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a736:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a73a:	fa4a f303 	asr.w	r3, sl, r3
 800a73e:	445b      	add	r3, fp
 800a740:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a744:	4e9d      	ldr	r6, [pc, #628]	; (800a9bc <__ieee754_pow+0xa44>)
 800a746:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a74a:	4116      	asrs	r6, r2
 800a74c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a750:	2000      	movs	r0, #0
 800a752:	ea23 0106 	bic.w	r1, r3, r6
 800a756:	f1c2 0214 	rsb	r2, r2, #20
 800a75a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a75e:	fa4a fa02 	asr.w	sl, sl, r2
 800a762:	f1bb 0f00 	cmp.w	fp, #0
 800a766:	4602      	mov	r2, r0
 800a768:	460b      	mov	r3, r1
 800a76a:	4620      	mov	r0, r4
 800a76c:	4629      	mov	r1, r5
 800a76e:	bfb8      	it	lt
 800a770:	f1ca 0a00 	rsblt	sl, sl, #0
 800a774:	f7f5 fd2c 	bl	80001d0 <__aeabi_dsub>
 800a778:	ec41 0b19 	vmov	d9, r0, r1
 800a77c:	4642      	mov	r2, r8
 800a77e:	464b      	mov	r3, r9
 800a780:	ec51 0b19 	vmov	r0, r1, d9
 800a784:	f7f5 fd26 	bl	80001d4 <__adddf3>
 800a788:	a37b      	add	r3, pc, #492	; (adr r3, 800a978 <__ieee754_pow+0xa00>)
 800a78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a78e:	2000      	movs	r0, #0
 800a790:	4604      	mov	r4, r0
 800a792:	460d      	mov	r5, r1
 800a794:	f7f5 fed4 	bl	8000540 <__aeabi_dmul>
 800a798:	ec53 2b19 	vmov	r2, r3, d9
 800a79c:	4606      	mov	r6, r0
 800a79e:	460f      	mov	r7, r1
 800a7a0:	4620      	mov	r0, r4
 800a7a2:	4629      	mov	r1, r5
 800a7a4:	f7f5 fd14 	bl	80001d0 <__aeabi_dsub>
 800a7a8:	4602      	mov	r2, r0
 800a7aa:	460b      	mov	r3, r1
 800a7ac:	4640      	mov	r0, r8
 800a7ae:	4649      	mov	r1, r9
 800a7b0:	f7f5 fd0e 	bl	80001d0 <__aeabi_dsub>
 800a7b4:	a372      	add	r3, pc, #456	; (adr r3, 800a980 <__ieee754_pow+0xa08>)
 800a7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ba:	f7f5 fec1 	bl	8000540 <__aeabi_dmul>
 800a7be:	a372      	add	r3, pc, #456	; (adr r3, 800a988 <__ieee754_pow+0xa10>)
 800a7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c4:	4680      	mov	r8, r0
 800a7c6:	4689      	mov	r9, r1
 800a7c8:	4620      	mov	r0, r4
 800a7ca:	4629      	mov	r1, r5
 800a7cc:	f7f5 feb8 	bl	8000540 <__aeabi_dmul>
 800a7d0:	4602      	mov	r2, r0
 800a7d2:	460b      	mov	r3, r1
 800a7d4:	4640      	mov	r0, r8
 800a7d6:	4649      	mov	r1, r9
 800a7d8:	f7f5 fcfc 	bl	80001d4 <__adddf3>
 800a7dc:	4604      	mov	r4, r0
 800a7de:	460d      	mov	r5, r1
 800a7e0:	4602      	mov	r2, r0
 800a7e2:	460b      	mov	r3, r1
 800a7e4:	4630      	mov	r0, r6
 800a7e6:	4639      	mov	r1, r7
 800a7e8:	f7f5 fcf4 	bl	80001d4 <__adddf3>
 800a7ec:	4632      	mov	r2, r6
 800a7ee:	463b      	mov	r3, r7
 800a7f0:	4680      	mov	r8, r0
 800a7f2:	4689      	mov	r9, r1
 800a7f4:	f7f5 fcec 	bl	80001d0 <__aeabi_dsub>
 800a7f8:	4602      	mov	r2, r0
 800a7fa:	460b      	mov	r3, r1
 800a7fc:	4620      	mov	r0, r4
 800a7fe:	4629      	mov	r1, r5
 800a800:	f7f5 fce6 	bl	80001d0 <__aeabi_dsub>
 800a804:	4642      	mov	r2, r8
 800a806:	4606      	mov	r6, r0
 800a808:	460f      	mov	r7, r1
 800a80a:	464b      	mov	r3, r9
 800a80c:	4640      	mov	r0, r8
 800a80e:	4649      	mov	r1, r9
 800a810:	f7f5 fe96 	bl	8000540 <__aeabi_dmul>
 800a814:	a35e      	add	r3, pc, #376	; (adr r3, 800a990 <__ieee754_pow+0xa18>)
 800a816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a81a:	4604      	mov	r4, r0
 800a81c:	460d      	mov	r5, r1
 800a81e:	f7f5 fe8f 	bl	8000540 <__aeabi_dmul>
 800a822:	a35d      	add	r3, pc, #372	; (adr r3, 800a998 <__ieee754_pow+0xa20>)
 800a824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a828:	f7f5 fcd2 	bl	80001d0 <__aeabi_dsub>
 800a82c:	4622      	mov	r2, r4
 800a82e:	462b      	mov	r3, r5
 800a830:	f7f5 fe86 	bl	8000540 <__aeabi_dmul>
 800a834:	a35a      	add	r3, pc, #360	; (adr r3, 800a9a0 <__ieee754_pow+0xa28>)
 800a836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a83a:	f7f5 fccb 	bl	80001d4 <__adddf3>
 800a83e:	4622      	mov	r2, r4
 800a840:	462b      	mov	r3, r5
 800a842:	f7f5 fe7d 	bl	8000540 <__aeabi_dmul>
 800a846:	a358      	add	r3, pc, #352	; (adr r3, 800a9a8 <__ieee754_pow+0xa30>)
 800a848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84c:	f7f5 fcc0 	bl	80001d0 <__aeabi_dsub>
 800a850:	4622      	mov	r2, r4
 800a852:	462b      	mov	r3, r5
 800a854:	f7f5 fe74 	bl	8000540 <__aeabi_dmul>
 800a858:	a355      	add	r3, pc, #340	; (adr r3, 800a9b0 <__ieee754_pow+0xa38>)
 800a85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a85e:	f7f5 fcb9 	bl	80001d4 <__adddf3>
 800a862:	4622      	mov	r2, r4
 800a864:	462b      	mov	r3, r5
 800a866:	f7f5 fe6b 	bl	8000540 <__aeabi_dmul>
 800a86a:	4602      	mov	r2, r0
 800a86c:	460b      	mov	r3, r1
 800a86e:	4640      	mov	r0, r8
 800a870:	4649      	mov	r1, r9
 800a872:	f7f5 fcad 	bl	80001d0 <__aeabi_dsub>
 800a876:	4604      	mov	r4, r0
 800a878:	460d      	mov	r5, r1
 800a87a:	4602      	mov	r2, r0
 800a87c:	460b      	mov	r3, r1
 800a87e:	4640      	mov	r0, r8
 800a880:	4649      	mov	r1, r9
 800a882:	f7f5 fe5d 	bl	8000540 <__aeabi_dmul>
 800a886:	2200      	movs	r2, #0
 800a888:	ec41 0b19 	vmov	d9, r0, r1
 800a88c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a890:	4620      	mov	r0, r4
 800a892:	4629      	mov	r1, r5
 800a894:	f7f5 fc9c 	bl	80001d0 <__aeabi_dsub>
 800a898:	4602      	mov	r2, r0
 800a89a:	460b      	mov	r3, r1
 800a89c:	ec51 0b19 	vmov	r0, r1, d9
 800a8a0:	f7f5 ff78 	bl	8000794 <__aeabi_ddiv>
 800a8a4:	4632      	mov	r2, r6
 800a8a6:	4604      	mov	r4, r0
 800a8a8:	460d      	mov	r5, r1
 800a8aa:	463b      	mov	r3, r7
 800a8ac:	4640      	mov	r0, r8
 800a8ae:	4649      	mov	r1, r9
 800a8b0:	f7f5 fe46 	bl	8000540 <__aeabi_dmul>
 800a8b4:	4632      	mov	r2, r6
 800a8b6:	463b      	mov	r3, r7
 800a8b8:	f7f5 fc8c 	bl	80001d4 <__adddf3>
 800a8bc:	4602      	mov	r2, r0
 800a8be:	460b      	mov	r3, r1
 800a8c0:	4620      	mov	r0, r4
 800a8c2:	4629      	mov	r1, r5
 800a8c4:	f7f5 fc84 	bl	80001d0 <__aeabi_dsub>
 800a8c8:	4642      	mov	r2, r8
 800a8ca:	464b      	mov	r3, r9
 800a8cc:	f7f5 fc80 	bl	80001d0 <__aeabi_dsub>
 800a8d0:	460b      	mov	r3, r1
 800a8d2:	4602      	mov	r2, r0
 800a8d4:	493a      	ldr	r1, [pc, #232]	; (800a9c0 <__ieee754_pow+0xa48>)
 800a8d6:	2000      	movs	r0, #0
 800a8d8:	f7f5 fc7a 	bl	80001d0 <__aeabi_dsub>
 800a8dc:	ec41 0b10 	vmov	d0, r0, r1
 800a8e0:	ee10 3a90 	vmov	r3, s1
 800a8e4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a8e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a8ec:	da2b      	bge.n	800a946 <__ieee754_pow+0x9ce>
 800a8ee:	4650      	mov	r0, sl
 800a8f0:	f001 fa6e 	bl	800bdd0 <scalbn>
 800a8f4:	ec51 0b10 	vmov	r0, r1, d0
 800a8f8:	ec53 2b18 	vmov	r2, r3, d8
 800a8fc:	f7ff bbed 	b.w	800a0da <__ieee754_pow+0x162>
 800a900:	4b30      	ldr	r3, [pc, #192]	; (800a9c4 <__ieee754_pow+0xa4c>)
 800a902:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a906:	429e      	cmp	r6, r3
 800a908:	f77f af0c 	ble.w	800a724 <__ieee754_pow+0x7ac>
 800a90c:	4b2e      	ldr	r3, [pc, #184]	; (800a9c8 <__ieee754_pow+0xa50>)
 800a90e:	440b      	add	r3, r1
 800a910:	4303      	orrs	r3, r0
 800a912:	d009      	beq.n	800a928 <__ieee754_pow+0x9b0>
 800a914:	ec51 0b18 	vmov	r0, r1, d8
 800a918:	2200      	movs	r2, #0
 800a91a:	2300      	movs	r3, #0
 800a91c:	f7f6 f882 	bl	8000a24 <__aeabi_dcmplt>
 800a920:	3800      	subs	r0, #0
 800a922:	bf18      	it	ne
 800a924:	2001      	movne	r0, #1
 800a926:	e447      	b.n	800a1b8 <__ieee754_pow+0x240>
 800a928:	4622      	mov	r2, r4
 800a92a:	462b      	mov	r3, r5
 800a92c:	f7f5 fc50 	bl	80001d0 <__aeabi_dsub>
 800a930:	4642      	mov	r2, r8
 800a932:	464b      	mov	r3, r9
 800a934:	f7f6 f88a 	bl	8000a4c <__aeabi_dcmpge>
 800a938:	2800      	cmp	r0, #0
 800a93a:	f43f aef3 	beq.w	800a724 <__ieee754_pow+0x7ac>
 800a93e:	e7e9      	b.n	800a914 <__ieee754_pow+0x99c>
 800a940:	f04f 0a00 	mov.w	sl, #0
 800a944:	e71a      	b.n	800a77c <__ieee754_pow+0x804>
 800a946:	ec51 0b10 	vmov	r0, r1, d0
 800a94a:	4619      	mov	r1, r3
 800a94c:	e7d4      	b.n	800a8f8 <__ieee754_pow+0x980>
 800a94e:	491c      	ldr	r1, [pc, #112]	; (800a9c0 <__ieee754_pow+0xa48>)
 800a950:	2000      	movs	r0, #0
 800a952:	f7ff bb30 	b.w	8009fb6 <__ieee754_pow+0x3e>
 800a956:	2000      	movs	r0, #0
 800a958:	2100      	movs	r1, #0
 800a95a:	f7ff bb2c 	b.w	8009fb6 <__ieee754_pow+0x3e>
 800a95e:	4630      	mov	r0, r6
 800a960:	4639      	mov	r1, r7
 800a962:	f7ff bb28 	b.w	8009fb6 <__ieee754_pow+0x3e>
 800a966:	9204      	str	r2, [sp, #16]
 800a968:	f7ff bb7a 	b.w	800a060 <__ieee754_pow+0xe8>
 800a96c:	2300      	movs	r3, #0
 800a96e:	f7ff bb64 	b.w	800a03a <__ieee754_pow+0xc2>
 800a972:	bf00      	nop
 800a974:	f3af 8000 	nop.w
 800a978:	00000000 	.word	0x00000000
 800a97c:	3fe62e43 	.word	0x3fe62e43
 800a980:	fefa39ef 	.word	0xfefa39ef
 800a984:	3fe62e42 	.word	0x3fe62e42
 800a988:	0ca86c39 	.word	0x0ca86c39
 800a98c:	be205c61 	.word	0xbe205c61
 800a990:	72bea4d0 	.word	0x72bea4d0
 800a994:	3e663769 	.word	0x3e663769
 800a998:	c5d26bf1 	.word	0xc5d26bf1
 800a99c:	3ebbbd41 	.word	0x3ebbbd41
 800a9a0:	af25de2c 	.word	0xaf25de2c
 800a9a4:	3f11566a 	.word	0x3f11566a
 800a9a8:	16bebd93 	.word	0x16bebd93
 800a9ac:	3f66c16c 	.word	0x3f66c16c
 800a9b0:	5555553e 	.word	0x5555553e
 800a9b4:	3fc55555 	.word	0x3fc55555
 800a9b8:	3fe00000 	.word	0x3fe00000
 800a9bc:	000fffff 	.word	0x000fffff
 800a9c0:	3ff00000 	.word	0x3ff00000
 800a9c4:	4090cbff 	.word	0x4090cbff
 800a9c8:	3f6f3400 	.word	0x3f6f3400
 800a9cc:	652b82fe 	.word	0x652b82fe
 800a9d0:	3c971547 	.word	0x3c971547
 800a9d4:	00000000 	.word	0x00000000

0800a9d8 <__ieee754_rem_pio2>:
 800a9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9dc:	ed2d 8b02 	vpush	{d8}
 800a9e0:	ec55 4b10 	vmov	r4, r5, d0
 800a9e4:	4bca      	ldr	r3, [pc, #808]	; (800ad10 <__ieee754_rem_pio2+0x338>)
 800a9e6:	b08b      	sub	sp, #44	; 0x2c
 800a9e8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a9ec:	4598      	cmp	r8, r3
 800a9ee:	4682      	mov	sl, r0
 800a9f0:	9502      	str	r5, [sp, #8]
 800a9f2:	dc08      	bgt.n	800aa06 <__ieee754_rem_pio2+0x2e>
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	ed80 0b00 	vstr	d0, [r0]
 800a9fc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800aa00:	f04f 0b00 	mov.w	fp, #0
 800aa04:	e028      	b.n	800aa58 <__ieee754_rem_pio2+0x80>
 800aa06:	4bc3      	ldr	r3, [pc, #780]	; (800ad14 <__ieee754_rem_pio2+0x33c>)
 800aa08:	4598      	cmp	r8, r3
 800aa0a:	dc78      	bgt.n	800aafe <__ieee754_rem_pio2+0x126>
 800aa0c:	9b02      	ldr	r3, [sp, #8]
 800aa0e:	4ec2      	ldr	r6, [pc, #776]	; (800ad18 <__ieee754_rem_pio2+0x340>)
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	ee10 0a10 	vmov	r0, s0
 800aa16:	a3b0      	add	r3, pc, #704	; (adr r3, 800acd8 <__ieee754_rem_pio2+0x300>)
 800aa18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa1c:	4629      	mov	r1, r5
 800aa1e:	dd39      	ble.n	800aa94 <__ieee754_rem_pio2+0xbc>
 800aa20:	f7f5 fbd6 	bl	80001d0 <__aeabi_dsub>
 800aa24:	45b0      	cmp	r8, r6
 800aa26:	4604      	mov	r4, r0
 800aa28:	460d      	mov	r5, r1
 800aa2a:	d01b      	beq.n	800aa64 <__ieee754_rem_pio2+0x8c>
 800aa2c:	a3ac      	add	r3, pc, #688	; (adr r3, 800ace0 <__ieee754_rem_pio2+0x308>)
 800aa2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa32:	f7f5 fbcd 	bl	80001d0 <__aeabi_dsub>
 800aa36:	4602      	mov	r2, r0
 800aa38:	460b      	mov	r3, r1
 800aa3a:	e9ca 2300 	strd	r2, r3, [sl]
 800aa3e:	4620      	mov	r0, r4
 800aa40:	4629      	mov	r1, r5
 800aa42:	f7f5 fbc5 	bl	80001d0 <__aeabi_dsub>
 800aa46:	a3a6      	add	r3, pc, #664	; (adr r3, 800ace0 <__ieee754_rem_pio2+0x308>)
 800aa48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4c:	f7f5 fbc0 	bl	80001d0 <__aeabi_dsub>
 800aa50:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800aa54:	f04f 0b01 	mov.w	fp, #1
 800aa58:	4658      	mov	r0, fp
 800aa5a:	b00b      	add	sp, #44	; 0x2c
 800aa5c:	ecbd 8b02 	vpop	{d8}
 800aa60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa64:	a3a0      	add	r3, pc, #640	; (adr r3, 800ace8 <__ieee754_rem_pio2+0x310>)
 800aa66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa6a:	f7f5 fbb1 	bl	80001d0 <__aeabi_dsub>
 800aa6e:	a3a0      	add	r3, pc, #640	; (adr r3, 800acf0 <__ieee754_rem_pio2+0x318>)
 800aa70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa74:	4604      	mov	r4, r0
 800aa76:	460d      	mov	r5, r1
 800aa78:	f7f5 fbaa 	bl	80001d0 <__aeabi_dsub>
 800aa7c:	4602      	mov	r2, r0
 800aa7e:	460b      	mov	r3, r1
 800aa80:	e9ca 2300 	strd	r2, r3, [sl]
 800aa84:	4620      	mov	r0, r4
 800aa86:	4629      	mov	r1, r5
 800aa88:	f7f5 fba2 	bl	80001d0 <__aeabi_dsub>
 800aa8c:	a398      	add	r3, pc, #608	; (adr r3, 800acf0 <__ieee754_rem_pio2+0x318>)
 800aa8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa92:	e7db      	b.n	800aa4c <__ieee754_rem_pio2+0x74>
 800aa94:	f7f5 fb9e 	bl	80001d4 <__adddf3>
 800aa98:	45b0      	cmp	r8, r6
 800aa9a:	4604      	mov	r4, r0
 800aa9c:	460d      	mov	r5, r1
 800aa9e:	d016      	beq.n	800aace <__ieee754_rem_pio2+0xf6>
 800aaa0:	a38f      	add	r3, pc, #572	; (adr r3, 800ace0 <__ieee754_rem_pio2+0x308>)
 800aaa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa6:	f7f5 fb95 	bl	80001d4 <__adddf3>
 800aaaa:	4602      	mov	r2, r0
 800aaac:	460b      	mov	r3, r1
 800aaae:	e9ca 2300 	strd	r2, r3, [sl]
 800aab2:	4620      	mov	r0, r4
 800aab4:	4629      	mov	r1, r5
 800aab6:	f7f5 fb8b 	bl	80001d0 <__aeabi_dsub>
 800aaba:	a389      	add	r3, pc, #548	; (adr r3, 800ace0 <__ieee754_rem_pio2+0x308>)
 800aabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac0:	f7f5 fb88 	bl	80001d4 <__adddf3>
 800aac4:	f04f 3bff 	mov.w	fp, #4294967295
 800aac8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800aacc:	e7c4      	b.n	800aa58 <__ieee754_rem_pio2+0x80>
 800aace:	a386      	add	r3, pc, #536	; (adr r3, 800ace8 <__ieee754_rem_pio2+0x310>)
 800aad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad4:	f7f5 fb7e 	bl	80001d4 <__adddf3>
 800aad8:	a385      	add	r3, pc, #532	; (adr r3, 800acf0 <__ieee754_rem_pio2+0x318>)
 800aada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aade:	4604      	mov	r4, r0
 800aae0:	460d      	mov	r5, r1
 800aae2:	f7f5 fb77 	bl	80001d4 <__adddf3>
 800aae6:	4602      	mov	r2, r0
 800aae8:	460b      	mov	r3, r1
 800aaea:	e9ca 2300 	strd	r2, r3, [sl]
 800aaee:	4620      	mov	r0, r4
 800aaf0:	4629      	mov	r1, r5
 800aaf2:	f7f5 fb6d 	bl	80001d0 <__aeabi_dsub>
 800aaf6:	a37e      	add	r3, pc, #504	; (adr r3, 800acf0 <__ieee754_rem_pio2+0x318>)
 800aaf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aafc:	e7e0      	b.n	800aac0 <__ieee754_rem_pio2+0xe8>
 800aafe:	4b87      	ldr	r3, [pc, #540]	; (800ad1c <__ieee754_rem_pio2+0x344>)
 800ab00:	4598      	cmp	r8, r3
 800ab02:	f300 80d9 	bgt.w	800acb8 <__ieee754_rem_pio2+0x2e0>
 800ab06:	f001 f8cf 	bl	800bca8 <fabs>
 800ab0a:	ec55 4b10 	vmov	r4, r5, d0
 800ab0e:	ee10 0a10 	vmov	r0, s0
 800ab12:	a379      	add	r3, pc, #484	; (adr r3, 800acf8 <__ieee754_rem_pio2+0x320>)
 800ab14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab18:	4629      	mov	r1, r5
 800ab1a:	f7f5 fd11 	bl	8000540 <__aeabi_dmul>
 800ab1e:	4b80      	ldr	r3, [pc, #512]	; (800ad20 <__ieee754_rem_pio2+0x348>)
 800ab20:	2200      	movs	r2, #0
 800ab22:	f7f5 fb57 	bl	80001d4 <__adddf3>
 800ab26:	f7f5 ffbb 	bl	8000aa0 <__aeabi_d2iz>
 800ab2a:	4683      	mov	fp, r0
 800ab2c:	f7f5 fc9e 	bl	800046c <__aeabi_i2d>
 800ab30:	4602      	mov	r2, r0
 800ab32:	460b      	mov	r3, r1
 800ab34:	ec43 2b18 	vmov	d8, r2, r3
 800ab38:	a367      	add	r3, pc, #412	; (adr r3, 800acd8 <__ieee754_rem_pio2+0x300>)
 800ab3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab3e:	f7f5 fcff 	bl	8000540 <__aeabi_dmul>
 800ab42:	4602      	mov	r2, r0
 800ab44:	460b      	mov	r3, r1
 800ab46:	4620      	mov	r0, r4
 800ab48:	4629      	mov	r1, r5
 800ab4a:	f7f5 fb41 	bl	80001d0 <__aeabi_dsub>
 800ab4e:	a364      	add	r3, pc, #400	; (adr r3, 800ace0 <__ieee754_rem_pio2+0x308>)
 800ab50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab54:	4606      	mov	r6, r0
 800ab56:	460f      	mov	r7, r1
 800ab58:	ec51 0b18 	vmov	r0, r1, d8
 800ab5c:	f7f5 fcf0 	bl	8000540 <__aeabi_dmul>
 800ab60:	f1bb 0f1f 	cmp.w	fp, #31
 800ab64:	4604      	mov	r4, r0
 800ab66:	460d      	mov	r5, r1
 800ab68:	dc0d      	bgt.n	800ab86 <__ieee754_rem_pio2+0x1ae>
 800ab6a:	4b6e      	ldr	r3, [pc, #440]	; (800ad24 <__ieee754_rem_pio2+0x34c>)
 800ab6c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800ab70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab74:	4543      	cmp	r3, r8
 800ab76:	d006      	beq.n	800ab86 <__ieee754_rem_pio2+0x1ae>
 800ab78:	4622      	mov	r2, r4
 800ab7a:	462b      	mov	r3, r5
 800ab7c:	4630      	mov	r0, r6
 800ab7e:	4639      	mov	r1, r7
 800ab80:	f7f5 fb26 	bl	80001d0 <__aeabi_dsub>
 800ab84:	e00f      	b.n	800aba6 <__ieee754_rem_pio2+0x1ce>
 800ab86:	462b      	mov	r3, r5
 800ab88:	4622      	mov	r2, r4
 800ab8a:	4630      	mov	r0, r6
 800ab8c:	4639      	mov	r1, r7
 800ab8e:	f7f5 fb1f 	bl	80001d0 <__aeabi_dsub>
 800ab92:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ab96:	9303      	str	r3, [sp, #12]
 800ab98:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ab9c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800aba0:	f1b8 0f10 	cmp.w	r8, #16
 800aba4:	dc02      	bgt.n	800abac <__ieee754_rem_pio2+0x1d4>
 800aba6:	e9ca 0100 	strd	r0, r1, [sl]
 800abaa:	e039      	b.n	800ac20 <__ieee754_rem_pio2+0x248>
 800abac:	a34e      	add	r3, pc, #312	; (adr r3, 800ace8 <__ieee754_rem_pio2+0x310>)
 800abae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb2:	ec51 0b18 	vmov	r0, r1, d8
 800abb6:	f7f5 fcc3 	bl	8000540 <__aeabi_dmul>
 800abba:	4604      	mov	r4, r0
 800abbc:	460d      	mov	r5, r1
 800abbe:	4602      	mov	r2, r0
 800abc0:	460b      	mov	r3, r1
 800abc2:	4630      	mov	r0, r6
 800abc4:	4639      	mov	r1, r7
 800abc6:	f7f5 fb03 	bl	80001d0 <__aeabi_dsub>
 800abca:	4602      	mov	r2, r0
 800abcc:	460b      	mov	r3, r1
 800abce:	4680      	mov	r8, r0
 800abd0:	4689      	mov	r9, r1
 800abd2:	4630      	mov	r0, r6
 800abd4:	4639      	mov	r1, r7
 800abd6:	f7f5 fafb 	bl	80001d0 <__aeabi_dsub>
 800abda:	4622      	mov	r2, r4
 800abdc:	462b      	mov	r3, r5
 800abde:	f7f5 faf7 	bl	80001d0 <__aeabi_dsub>
 800abe2:	a343      	add	r3, pc, #268	; (adr r3, 800acf0 <__ieee754_rem_pio2+0x318>)
 800abe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe8:	4604      	mov	r4, r0
 800abea:	460d      	mov	r5, r1
 800abec:	ec51 0b18 	vmov	r0, r1, d8
 800abf0:	f7f5 fca6 	bl	8000540 <__aeabi_dmul>
 800abf4:	4622      	mov	r2, r4
 800abf6:	462b      	mov	r3, r5
 800abf8:	f7f5 faea 	bl	80001d0 <__aeabi_dsub>
 800abfc:	4602      	mov	r2, r0
 800abfe:	460b      	mov	r3, r1
 800ac00:	4604      	mov	r4, r0
 800ac02:	460d      	mov	r5, r1
 800ac04:	4640      	mov	r0, r8
 800ac06:	4649      	mov	r1, r9
 800ac08:	f7f5 fae2 	bl	80001d0 <__aeabi_dsub>
 800ac0c:	9a03      	ldr	r2, [sp, #12]
 800ac0e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ac12:	1ad3      	subs	r3, r2, r3
 800ac14:	2b31      	cmp	r3, #49	; 0x31
 800ac16:	dc24      	bgt.n	800ac62 <__ieee754_rem_pio2+0x28a>
 800ac18:	e9ca 0100 	strd	r0, r1, [sl]
 800ac1c:	4646      	mov	r6, r8
 800ac1e:	464f      	mov	r7, r9
 800ac20:	e9da 8900 	ldrd	r8, r9, [sl]
 800ac24:	4630      	mov	r0, r6
 800ac26:	4642      	mov	r2, r8
 800ac28:	464b      	mov	r3, r9
 800ac2a:	4639      	mov	r1, r7
 800ac2c:	f7f5 fad0 	bl	80001d0 <__aeabi_dsub>
 800ac30:	462b      	mov	r3, r5
 800ac32:	4622      	mov	r2, r4
 800ac34:	f7f5 facc 	bl	80001d0 <__aeabi_dsub>
 800ac38:	9b02      	ldr	r3, [sp, #8]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ac40:	f6bf af0a 	bge.w	800aa58 <__ieee754_rem_pio2+0x80>
 800ac44:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ac48:	f8ca 3004 	str.w	r3, [sl, #4]
 800ac4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ac50:	f8ca 8000 	str.w	r8, [sl]
 800ac54:	f8ca 0008 	str.w	r0, [sl, #8]
 800ac58:	f8ca 300c 	str.w	r3, [sl, #12]
 800ac5c:	f1cb 0b00 	rsb	fp, fp, #0
 800ac60:	e6fa      	b.n	800aa58 <__ieee754_rem_pio2+0x80>
 800ac62:	a327      	add	r3, pc, #156	; (adr r3, 800ad00 <__ieee754_rem_pio2+0x328>)
 800ac64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac68:	ec51 0b18 	vmov	r0, r1, d8
 800ac6c:	f7f5 fc68 	bl	8000540 <__aeabi_dmul>
 800ac70:	4604      	mov	r4, r0
 800ac72:	460d      	mov	r5, r1
 800ac74:	4602      	mov	r2, r0
 800ac76:	460b      	mov	r3, r1
 800ac78:	4640      	mov	r0, r8
 800ac7a:	4649      	mov	r1, r9
 800ac7c:	f7f5 faa8 	bl	80001d0 <__aeabi_dsub>
 800ac80:	4602      	mov	r2, r0
 800ac82:	460b      	mov	r3, r1
 800ac84:	4606      	mov	r6, r0
 800ac86:	460f      	mov	r7, r1
 800ac88:	4640      	mov	r0, r8
 800ac8a:	4649      	mov	r1, r9
 800ac8c:	f7f5 faa0 	bl	80001d0 <__aeabi_dsub>
 800ac90:	4622      	mov	r2, r4
 800ac92:	462b      	mov	r3, r5
 800ac94:	f7f5 fa9c 	bl	80001d0 <__aeabi_dsub>
 800ac98:	a31b      	add	r3, pc, #108	; (adr r3, 800ad08 <__ieee754_rem_pio2+0x330>)
 800ac9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac9e:	4604      	mov	r4, r0
 800aca0:	460d      	mov	r5, r1
 800aca2:	ec51 0b18 	vmov	r0, r1, d8
 800aca6:	f7f5 fc4b 	bl	8000540 <__aeabi_dmul>
 800acaa:	4622      	mov	r2, r4
 800acac:	462b      	mov	r3, r5
 800acae:	f7f5 fa8f 	bl	80001d0 <__aeabi_dsub>
 800acb2:	4604      	mov	r4, r0
 800acb4:	460d      	mov	r5, r1
 800acb6:	e75f      	b.n	800ab78 <__ieee754_rem_pio2+0x1a0>
 800acb8:	4b1b      	ldr	r3, [pc, #108]	; (800ad28 <__ieee754_rem_pio2+0x350>)
 800acba:	4598      	cmp	r8, r3
 800acbc:	dd36      	ble.n	800ad2c <__ieee754_rem_pio2+0x354>
 800acbe:	ee10 2a10 	vmov	r2, s0
 800acc2:	462b      	mov	r3, r5
 800acc4:	4620      	mov	r0, r4
 800acc6:	4629      	mov	r1, r5
 800acc8:	f7f5 fa82 	bl	80001d0 <__aeabi_dsub>
 800accc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800acd0:	e9ca 0100 	strd	r0, r1, [sl]
 800acd4:	e694      	b.n	800aa00 <__ieee754_rem_pio2+0x28>
 800acd6:	bf00      	nop
 800acd8:	54400000 	.word	0x54400000
 800acdc:	3ff921fb 	.word	0x3ff921fb
 800ace0:	1a626331 	.word	0x1a626331
 800ace4:	3dd0b461 	.word	0x3dd0b461
 800ace8:	1a600000 	.word	0x1a600000
 800acec:	3dd0b461 	.word	0x3dd0b461
 800acf0:	2e037073 	.word	0x2e037073
 800acf4:	3ba3198a 	.word	0x3ba3198a
 800acf8:	6dc9c883 	.word	0x6dc9c883
 800acfc:	3fe45f30 	.word	0x3fe45f30
 800ad00:	2e000000 	.word	0x2e000000
 800ad04:	3ba3198a 	.word	0x3ba3198a
 800ad08:	252049c1 	.word	0x252049c1
 800ad0c:	397b839a 	.word	0x397b839a
 800ad10:	3fe921fb 	.word	0x3fe921fb
 800ad14:	4002d97b 	.word	0x4002d97b
 800ad18:	3ff921fb 	.word	0x3ff921fb
 800ad1c:	413921fb 	.word	0x413921fb
 800ad20:	3fe00000 	.word	0x3fe00000
 800ad24:	0800da58 	.word	0x0800da58
 800ad28:	7fefffff 	.word	0x7fefffff
 800ad2c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800ad30:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800ad34:	ee10 0a10 	vmov	r0, s0
 800ad38:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800ad3c:	ee10 6a10 	vmov	r6, s0
 800ad40:	460f      	mov	r7, r1
 800ad42:	f7f5 fead 	bl	8000aa0 <__aeabi_d2iz>
 800ad46:	f7f5 fb91 	bl	800046c <__aeabi_i2d>
 800ad4a:	4602      	mov	r2, r0
 800ad4c:	460b      	mov	r3, r1
 800ad4e:	4630      	mov	r0, r6
 800ad50:	4639      	mov	r1, r7
 800ad52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ad56:	f7f5 fa3b 	bl	80001d0 <__aeabi_dsub>
 800ad5a:	4b23      	ldr	r3, [pc, #140]	; (800ade8 <__ieee754_rem_pio2+0x410>)
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	f7f5 fbef 	bl	8000540 <__aeabi_dmul>
 800ad62:	460f      	mov	r7, r1
 800ad64:	4606      	mov	r6, r0
 800ad66:	f7f5 fe9b 	bl	8000aa0 <__aeabi_d2iz>
 800ad6a:	f7f5 fb7f 	bl	800046c <__aeabi_i2d>
 800ad6e:	4602      	mov	r2, r0
 800ad70:	460b      	mov	r3, r1
 800ad72:	4630      	mov	r0, r6
 800ad74:	4639      	mov	r1, r7
 800ad76:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ad7a:	f7f5 fa29 	bl	80001d0 <__aeabi_dsub>
 800ad7e:	4b1a      	ldr	r3, [pc, #104]	; (800ade8 <__ieee754_rem_pio2+0x410>)
 800ad80:	2200      	movs	r2, #0
 800ad82:	f7f5 fbdd 	bl	8000540 <__aeabi_dmul>
 800ad86:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ad8a:	ad04      	add	r5, sp, #16
 800ad8c:	f04f 0803 	mov.w	r8, #3
 800ad90:	46a9      	mov	r9, r5
 800ad92:	2600      	movs	r6, #0
 800ad94:	2700      	movs	r7, #0
 800ad96:	4632      	mov	r2, r6
 800ad98:	463b      	mov	r3, r7
 800ad9a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800ad9e:	46c3      	mov	fp, r8
 800ada0:	3d08      	subs	r5, #8
 800ada2:	f108 38ff 	add.w	r8, r8, #4294967295
 800ada6:	f7f5 fe33 	bl	8000a10 <__aeabi_dcmpeq>
 800adaa:	2800      	cmp	r0, #0
 800adac:	d1f3      	bne.n	800ad96 <__ieee754_rem_pio2+0x3be>
 800adae:	4b0f      	ldr	r3, [pc, #60]	; (800adec <__ieee754_rem_pio2+0x414>)
 800adb0:	9301      	str	r3, [sp, #4]
 800adb2:	2302      	movs	r3, #2
 800adb4:	9300      	str	r3, [sp, #0]
 800adb6:	4622      	mov	r2, r4
 800adb8:	465b      	mov	r3, fp
 800adba:	4651      	mov	r1, sl
 800adbc:	4648      	mov	r0, r9
 800adbe:	f000 f993 	bl	800b0e8 <__kernel_rem_pio2>
 800adc2:	9b02      	ldr	r3, [sp, #8]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	4683      	mov	fp, r0
 800adc8:	f6bf ae46 	bge.w	800aa58 <__ieee754_rem_pio2+0x80>
 800adcc:	e9da 2100 	ldrd	r2, r1, [sl]
 800add0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800add4:	e9ca 2300 	strd	r2, r3, [sl]
 800add8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800addc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ade0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800ade4:	e73a      	b.n	800ac5c <__ieee754_rem_pio2+0x284>
 800ade6:	bf00      	nop
 800ade8:	41700000 	.word	0x41700000
 800adec:	0800dad8 	.word	0x0800dad8

0800adf0 <__ieee754_sqrt>:
 800adf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adf4:	ec55 4b10 	vmov	r4, r5, d0
 800adf8:	4e55      	ldr	r6, [pc, #340]	; (800af50 <__ieee754_sqrt+0x160>)
 800adfa:	43ae      	bics	r6, r5
 800adfc:	ee10 0a10 	vmov	r0, s0
 800ae00:	ee10 3a10 	vmov	r3, s0
 800ae04:	462a      	mov	r2, r5
 800ae06:	4629      	mov	r1, r5
 800ae08:	d110      	bne.n	800ae2c <__ieee754_sqrt+0x3c>
 800ae0a:	ee10 2a10 	vmov	r2, s0
 800ae0e:	462b      	mov	r3, r5
 800ae10:	f7f5 fb96 	bl	8000540 <__aeabi_dmul>
 800ae14:	4602      	mov	r2, r0
 800ae16:	460b      	mov	r3, r1
 800ae18:	4620      	mov	r0, r4
 800ae1a:	4629      	mov	r1, r5
 800ae1c:	f7f5 f9da 	bl	80001d4 <__adddf3>
 800ae20:	4604      	mov	r4, r0
 800ae22:	460d      	mov	r5, r1
 800ae24:	ec45 4b10 	vmov	d0, r4, r5
 800ae28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae2c:	2d00      	cmp	r5, #0
 800ae2e:	dc10      	bgt.n	800ae52 <__ieee754_sqrt+0x62>
 800ae30:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ae34:	4330      	orrs	r0, r6
 800ae36:	d0f5      	beq.n	800ae24 <__ieee754_sqrt+0x34>
 800ae38:	b15d      	cbz	r5, 800ae52 <__ieee754_sqrt+0x62>
 800ae3a:	ee10 2a10 	vmov	r2, s0
 800ae3e:	462b      	mov	r3, r5
 800ae40:	ee10 0a10 	vmov	r0, s0
 800ae44:	f7f5 f9c4 	bl	80001d0 <__aeabi_dsub>
 800ae48:	4602      	mov	r2, r0
 800ae4a:	460b      	mov	r3, r1
 800ae4c:	f7f5 fca2 	bl	8000794 <__aeabi_ddiv>
 800ae50:	e7e6      	b.n	800ae20 <__ieee754_sqrt+0x30>
 800ae52:	1512      	asrs	r2, r2, #20
 800ae54:	d074      	beq.n	800af40 <__ieee754_sqrt+0x150>
 800ae56:	07d4      	lsls	r4, r2, #31
 800ae58:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ae5c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800ae60:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800ae64:	bf5e      	ittt	pl
 800ae66:	0fda      	lsrpl	r2, r3, #31
 800ae68:	005b      	lslpl	r3, r3, #1
 800ae6a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800ae6e:	2400      	movs	r4, #0
 800ae70:	0fda      	lsrs	r2, r3, #31
 800ae72:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800ae76:	107f      	asrs	r7, r7, #1
 800ae78:	005b      	lsls	r3, r3, #1
 800ae7a:	2516      	movs	r5, #22
 800ae7c:	4620      	mov	r0, r4
 800ae7e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ae82:	1886      	adds	r6, r0, r2
 800ae84:	428e      	cmp	r6, r1
 800ae86:	bfde      	ittt	le
 800ae88:	1b89      	suble	r1, r1, r6
 800ae8a:	18b0      	addle	r0, r6, r2
 800ae8c:	18a4      	addle	r4, r4, r2
 800ae8e:	0049      	lsls	r1, r1, #1
 800ae90:	3d01      	subs	r5, #1
 800ae92:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800ae96:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800ae9a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ae9e:	d1f0      	bne.n	800ae82 <__ieee754_sqrt+0x92>
 800aea0:	462a      	mov	r2, r5
 800aea2:	f04f 0e20 	mov.w	lr, #32
 800aea6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800aeaa:	4281      	cmp	r1, r0
 800aeac:	eb06 0c05 	add.w	ip, r6, r5
 800aeb0:	dc02      	bgt.n	800aeb8 <__ieee754_sqrt+0xc8>
 800aeb2:	d113      	bne.n	800aedc <__ieee754_sqrt+0xec>
 800aeb4:	459c      	cmp	ip, r3
 800aeb6:	d811      	bhi.n	800aedc <__ieee754_sqrt+0xec>
 800aeb8:	f1bc 0f00 	cmp.w	ip, #0
 800aebc:	eb0c 0506 	add.w	r5, ip, r6
 800aec0:	da43      	bge.n	800af4a <__ieee754_sqrt+0x15a>
 800aec2:	2d00      	cmp	r5, #0
 800aec4:	db41      	blt.n	800af4a <__ieee754_sqrt+0x15a>
 800aec6:	f100 0801 	add.w	r8, r0, #1
 800aeca:	1a09      	subs	r1, r1, r0
 800aecc:	459c      	cmp	ip, r3
 800aece:	bf88      	it	hi
 800aed0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800aed4:	eba3 030c 	sub.w	r3, r3, ip
 800aed8:	4432      	add	r2, r6
 800aeda:	4640      	mov	r0, r8
 800aedc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800aee0:	f1be 0e01 	subs.w	lr, lr, #1
 800aee4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800aee8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800aeec:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800aef0:	d1db      	bne.n	800aeaa <__ieee754_sqrt+0xba>
 800aef2:	430b      	orrs	r3, r1
 800aef4:	d006      	beq.n	800af04 <__ieee754_sqrt+0x114>
 800aef6:	1c50      	adds	r0, r2, #1
 800aef8:	bf13      	iteet	ne
 800aefa:	3201      	addne	r2, #1
 800aefc:	3401      	addeq	r4, #1
 800aefe:	4672      	moveq	r2, lr
 800af00:	f022 0201 	bicne.w	r2, r2, #1
 800af04:	1063      	asrs	r3, r4, #1
 800af06:	0852      	lsrs	r2, r2, #1
 800af08:	07e1      	lsls	r1, r4, #31
 800af0a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800af0e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800af12:	bf48      	it	mi
 800af14:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800af18:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800af1c:	4614      	mov	r4, r2
 800af1e:	e781      	b.n	800ae24 <__ieee754_sqrt+0x34>
 800af20:	0ad9      	lsrs	r1, r3, #11
 800af22:	3815      	subs	r0, #21
 800af24:	055b      	lsls	r3, r3, #21
 800af26:	2900      	cmp	r1, #0
 800af28:	d0fa      	beq.n	800af20 <__ieee754_sqrt+0x130>
 800af2a:	02cd      	lsls	r5, r1, #11
 800af2c:	d50a      	bpl.n	800af44 <__ieee754_sqrt+0x154>
 800af2e:	f1c2 0420 	rsb	r4, r2, #32
 800af32:	fa23 f404 	lsr.w	r4, r3, r4
 800af36:	1e55      	subs	r5, r2, #1
 800af38:	4093      	lsls	r3, r2
 800af3a:	4321      	orrs	r1, r4
 800af3c:	1b42      	subs	r2, r0, r5
 800af3e:	e78a      	b.n	800ae56 <__ieee754_sqrt+0x66>
 800af40:	4610      	mov	r0, r2
 800af42:	e7f0      	b.n	800af26 <__ieee754_sqrt+0x136>
 800af44:	0049      	lsls	r1, r1, #1
 800af46:	3201      	adds	r2, #1
 800af48:	e7ef      	b.n	800af2a <__ieee754_sqrt+0x13a>
 800af4a:	4680      	mov	r8, r0
 800af4c:	e7bd      	b.n	800aeca <__ieee754_sqrt+0xda>
 800af4e:	bf00      	nop
 800af50:	7ff00000 	.word	0x7ff00000
 800af54:	00000000 	.word	0x00000000

0800af58 <__kernel_cos>:
 800af58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af5c:	ec57 6b10 	vmov	r6, r7, d0
 800af60:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800af64:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800af68:	ed8d 1b00 	vstr	d1, [sp]
 800af6c:	da07      	bge.n	800af7e <__kernel_cos+0x26>
 800af6e:	ee10 0a10 	vmov	r0, s0
 800af72:	4639      	mov	r1, r7
 800af74:	f7f5 fd94 	bl	8000aa0 <__aeabi_d2iz>
 800af78:	2800      	cmp	r0, #0
 800af7a:	f000 8088 	beq.w	800b08e <__kernel_cos+0x136>
 800af7e:	4632      	mov	r2, r6
 800af80:	463b      	mov	r3, r7
 800af82:	4630      	mov	r0, r6
 800af84:	4639      	mov	r1, r7
 800af86:	f7f5 fadb 	bl	8000540 <__aeabi_dmul>
 800af8a:	4b51      	ldr	r3, [pc, #324]	; (800b0d0 <__kernel_cos+0x178>)
 800af8c:	2200      	movs	r2, #0
 800af8e:	4604      	mov	r4, r0
 800af90:	460d      	mov	r5, r1
 800af92:	f7f5 fad5 	bl	8000540 <__aeabi_dmul>
 800af96:	a340      	add	r3, pc, #256	; (adr r3, 800b098 <__kernel_cos+0x140>)
 800af98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af9c:	4682      	mov	sl, r0
 800af9e:	468b      	mov	fp, r1
 800afa0:	4620      	mov	r0, r4
 800afa2:	4629      	mov	r1, r5
 800afa4:	f7f5 facc 	bl	8000540 <__aeabi_dmul>
 800afa8:	a33d      	add	r3, pc, #244	; (adr r3, 800b0a0 <__kernel_cos+0x148>)
 800afaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afae:	f7f5 f911 	bl	80001d4 <__adddf3>
 800afb2:	4622      	mov	r2, r4
 800afb4:	462b      	mov	r3, r5
 800afb6:	f7f5 fac3 	bl	8000540 <__aeabi_dmul>
 800afba:	a33b      	add	r3, pc, #236	; (adr r3, 800b0a8 <__kernel_cos+0x150>)
 800afbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc0:	f7f5 f906 	bl	80001d0 <__aeabi_dsub>
 800afc4:	4622      	mov	r2, r4
 800afc6:	462b      	mov	r3, r5
 800afc8:	f7f5 faba 	bl	8000540 <__aeabi_dmul>
 800afcc:	a338      	add	r3, pc, #224	; (adr r3, 800b0b0 <__kernel_cos+0x158>)
 800afce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd2:	f7f5 f8ff 	bl	80001d4 <__adddf3>
 800afd6:	4622      	mov	r2, r4
 800afd8:	462b      	mov	r3, r5
 800afda:	f7f5 fab1 	bl	8000540 <__aeabi_dmul>
 800afde:	a336      	add	r3, pc, #216	; (adr r3, 800b0b8 <__kernel_cos+0x160>)
 800afe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe4:	f7f5 f8f4 	bl	80001d0 <__aeabi_dsub>
 800afe8:	4622      	mov	r2, r4
 800afea:	462b      	mov	r3, r5
 800afec:	f7f5 faa8 	bl	8000540 <__aeabi_dmul>
 800aff0:	a333      	add	r3, pc, #204	; (adr r3, 800b0c0 <__kernel_cos+0x168>)
 800aff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff6:	f7f5 f8ed 	bl	80001d4 <__adddf3>
 800affa:	4622      	mov	r2, r4
 800affc:	462b      	mov	r3, r5
 800affe:	f7f5 fa9f 	bl	8000540 <__aeabi_dmul>
 800b002:	4622      	mov	r2, r4
 800b004:	462b      	mov	r3, r5
 800b006:	f7f5 fa9b 	bl	8000540 <__aeabi_dmul>
 800b00a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b00e:	4604      	mov	r4, r0
 800b010:	460d      	mov	r5, r1
 800b012:	4630      	mov	r0, r6
 800b014:	4639      	mov	r1, r7
 800b016:	f7f5 fa93 	bl	8000540 <__aeabi_dmul>
 800b01a:	460b      	mov	r3, r1
 800b01c:	4602      	mov	r2, r0
 800b01e:	4629      	mov	r1, r5
 800b020:	4620      	mov	r0, r4
 800b022:	f7f5 f8d5 	bl	80001d0 <__aeabi_dsub>
 800b026:	4b2b      	ldr	r3, [pc, #172]	; (800b0d4 <__kernel_cos+0x17c>)
 800b028:	4598      	cmp	r8, r3
 800b02a:	4606      	mov	r6, r0
 800b02c:	460f      	mov	r7, r1
 800b02e:	dc10      	bgt.n	800b052 <__kernel_cos+0xfa>
 800b030:	4602      	mov	r2, r0
 800b032:	460b      	mov	r3, r1
 800b034:	4650      	mov	r0, sl
 800b036:	4659      	mov	r1, fp
 800b038:	f7f5 f8ca 	bl	80001d0 <__aeabi_dsub>
 800b03c:	460b      	mov	r3, r1
 800b03e:	4926      	ldr	r1, [pc, #152]	; (800b0d8 <__kernel_cos+0x180>)
 800b040:	4602      	mov	r2, r0
 800b042:	2000      	movs	r0, #0
 800b044:	f7f5 f8c4 	bl	80001d0 <__aeabi_dsub>
 800b048:	ec41 0b10 	vmov	d0, r0, r1
 800b04c:	b003      	add	sp, #12
 800b04e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b052:	4b22      	ldr	r3, [pc, #136]	; (800b0dc <__kernel_cos+0x184>)
 800b054:	4920      	ldr	r1, [pc, #128]	; (800b0d8 <__kernel_cos+0x180>)
 800b056:	4598      	cmp	r8, r3
 800b058:	bfcc      	ite	gt
 800b05a:	4d21      	ldrgt	r5, [pc, #132]	; (800b0e0 <__kernel_cos+0x188>)
 800b05c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800b060:	2400      	movs	r4, #0
 800b062:	4622      	mov	r2, r4
 800b064:	462b      	mov	r3, r5
 800b066:	2000      	movs	r0, #0
 800b068:	f7f5 f8b2 	bl	80001d0 <__aeabi_dsub>
 800b06c:	4622      	mov	r2, r4
 800b06e:	4680      	mov	r8, r0
 800b070:	4689      	mov	r9, r1
 800b072:	462b      	mov	r3, r5
 800b074:	4650      	mov	r0, sl
 800b076:	4659      	mov	r1, fp
 800b078:	f7f5 f8aa 	bl	80001d0 <__aeabi_dsub>
 800b07c:	4632      	mov	r2, r6
 800b07e:	463b      	mov	r3, r7
 800b080:	f7f5 f8a6 	bl	80001d0 <__aeabi_dsub>
 800b084:	4602      	mov	r2, r0
 800b086:	460b      	mov	r3, r1
 800b088:	4640      	mov	r0, r8
 800b08a:	4649      	mov	r1, r9
 800b08c:	e7da      	b.n	800b044 <__kernel_cos+0xec>
 800b08e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800b0c8 <__kernel_cos+0x170>
 800b092:	e7db      	b.n	800b04c <__kernel_cos+0xf4>
 800b094:	f3af 8000 	nop.w
 800b098:	be8838d4 	.word	0xbe8838d4
 800b09c:	bda8fae9 	.word	0xbda8fae9
 800b0a0:	bdb4b1c4 	.word	0xbdb4b1c4
 800b0a4:	3e21ee9e 	.word	0x3e21ee9e
 800b0a8:	809c52ad 	.word	0x809c52ad
 800b0ac:	3e927e4f 	.word	0x3e927e4f
 800b0b0:	19cb1590 	.word	0x19cb1590
 800b0b4:	3efa01a0 	.word	0x3efa01a0
 800b0b8:	16c15177 	.word	0x16c15177
 800b0bc:	3f56c16c 	.word	0x3f56c16c
 800b0c0:	5555554c 	.word	0x5555554c
 800b0c4:	3fa55555 	.word	0x3fa55555
 800b0c8:	00000000 	.word	0x00000000
 800b0cc:	3ff00000 	.word	0x3ff00000
 800b0d0:	3fe00000 	.word	0x3fe00000
 800b0d4:	3fd33332 	.word	0x3fd33332
 800b0d8:	3ff00000 	.word	0x3ff00000
 800b0dc:	3fe90000 	.word	0x3fe90000
 800b0e0:	3fd20000 	.word	0x3fd20000
 800b0e4:	00000000 	.word	0x00000000

0800b0e8 <__kernel_rem_pio2>:
 800b0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0ec:	ed2d 8b02 	vpush	{d8}
 800b0f0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800b0f4:	f112 0f14 	cmn.w	r2, #20
 800b0f8:	9308      	str	r3, [sp, #32]
 800b0fa:	9101      	str	r1, [sp, #4]
 800b0fc:	4bc4      	ldr	r3, [pc, #784]	; (800b410 <__kernel_rem_pio2+0x328>)
 800b0fe:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800b100:	900b      	str	r0, [sp, #44]	; 0x2c
 800b102:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b106:	9302      	str	r3, [sp, #8]
 800b108:	9b08      	ldr	r3, [sp, #32]
 800b10a:	f103 33ff 	add.w	r3, r3, #4294967295
 800b10e:	bfa8      	it	ge
 800b110:	1ed4      	subge	r4, r2, #3
 800b112:	9306      	str	r3, [sp, #24]
 800b114:	bfb2      	itee	lt
 800b116:	2400      	movlt	r4, #0
 800b118:	2318      	movge	r3, #24
 800b11a:	fb94 f4f3 	sdivge	r4, r4, r3
 800b11e:	f06f 0317 	mvn.w	r3, #23
 800b122:	fb04 3303 	mla	r3, r4, r3, r3
 800b126:	eb03 0a02 	add.w	sl, r3, r2
 800b12a:	9b02      	ldr	r3, [sp, #8]
 800b12c:	9a06      	ldr	r2, [sp, #24]
 800b12e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800b400 <__kernel_rem_pio2+0x318>
 800b132:	eb03 0802 	add.w	r8, r3, r2
 800b136:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b138:	1aa7      	subs	r7, r4, r2
 800b13a:	ae22      	add	r6, sp, #136	; 0x88
 800b13c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b140:	2500      	movs	r5, #0
 800b142:	4545      	cmp	r5, r8
 800b144:	dd13      	ble.n	800b16e <__kernel_rem_pio2+0x86>
 800b146:	9b08      	ldr	r3, [sp, #32]
 800b148:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800b400 <__kernel_rem_pio2+0x318>
 800b14c:	aa22      	add	r2, sp, #136	; 0x88
 800b14e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b152:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800b156:	f04f 0800 	mov.w	r8, #0
 800b15a:	9b02      	ldr	r3, [sp, #8]
 800b15c:	4598      	cmp	r8, r3
 800b15e:	dc2f      	bgt.n	800b1c0 <__kernel_rem_pio2+0xd8>
 800b160:	ed8d 8b04 	vstr	d8, [sp, #16]
 800b164:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800b168:	462f      	mov	r7, r5
 800b16a:	2600      	movs	r6, #0
 800b16c:	e01b      	b.n	800b1a6 <__kernel_rem_pio2+0xbe>
 800b16e:	42ef      	cmn	r7, r5
 800b170:	d407      	bmi.n	800b182 <__kernel_rem_pio2+0x9a>
 800b172:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b176:	f7f5 f979 	bl	800046c <__aeabi_i2d>
 800b17a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b17e:	3501      	adds	r5, #1
 800b180:	e7df      	b.n	800b142 <__kernel_rem_pio2+0x5a>
 800b182:	ec51 0b18 	vmov	r0, r1, d8
 800b186:	e7f8      	b.n	800b17a <__kernel_rem_pio2+0x92>
 800b188:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b18c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b190:	f7f5 f9d6 	bl	8000540 <__aeabi_dmul>
 800b194:	4602      	mov	r2, r0
 800b196:	460b      	mov	r3, r1
 800b198:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b19c:	f7f5 f81a 	bl	80001d4 <__adddf3>
 800b1a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b1a4:	3601      	adds	r6, #1
 800b1a6:	9b06      	ldr	r3, [sp, #24]
 800b1a8:	429e      	cmp	r6, r3
 800b1aa:	f1a7 0708 	sub.w	r7, r7, #8
 800b1ae:	ddeb      	ble.n	800b188 <__kernel_rem_pio2+0xa0>
 800b1b0:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b1b4:	f108 0801 	add.w	r8, r8, #1
 800b1b8:	ecab 7b02 	vstmia	fp!, {d7}
 800b1bc:	3508      	adds	r5, #8
 800b1be:	e7cc      	b.n	800b15a <__kernel_rem_pio2+0x72>
 800b1c0:	9b02      	ldr	r3, [sp, #8]
 800b1c2:	aa0e      	add	r2, sp, #56	; 0x38
 800b1c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b1c8:	930d      	str	r3, [sp, #52]	; 0x34
 800b1ca:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b1cc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b1d0:	9c02      	ldr	r4, [sp, #8]
 800b1d2:	930c      	str	r3, [sp, #48]	; 0x30
 800b1d4:	00e3      	lsls	r3, r4, #3
 800b1d6:	930a      	str	r3, [sp, #40]	; 0x28
 800b1d8:	ab9a      	add	r3, sp, #616	; 0x268
 800b1da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b1de:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800b1e2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800b1e6:	ab72      	add	r3, sp, #456	; 0x1c8
 800b1e8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800b1ec:	46c3      	mov	fp, r8
 800b1ee:	46a1      	mov	r9, r4
 800b1f0:	f1b9 0f00 	cmp.w	r9, #0
 800b1f4:	f1a5 0508 	sub.w	r5, r5, #8
 800b1f8:	dc77      	bgt.n	800b2ea <__kernel_rem_pio2+0x202>
 800b1fa:	ec47 6b10 	vmov	d0, r6, r7
 800b1fe:	4650      	mov	r0, sl
 800b200:	f000 fde6 	bl	800bdd0 <scalbn>
 800b204:	ec57 6b10 	vmov	r6, r7, d0
 800b208:	2200      	movs	r2, #0
 800b20a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b20e:	ee10 0a10 	vmov	r0, s0
 800b212:	4639      	mov	r1, r7
 800b214:	f7f5 f994 	bl	8000540 <__aeabi_dmul>
 800b218:	ec41 0b10 	vmov	d0, r0, r1
 800b21c:	f000 fd58 	bl	800bcd0 <floor>
 800b220:	4b7c      	ldr	r3, [pc, #496]	; (800b414 <__kernel_rem_pio2+0x32c>)
 800b222:	ec51 0b10 	vmov	r0, r1, d0
 800b226:	2200      	movs	r2, #0
 800b228:	f7f5 f98a 	bl	8000540 <__aeabi_dmul>
 800b22c:	4602      	mov	r2, r0
 800b22e:	460b      	mov	r3, r1
 800b230:	4630      	mov	r0, r6
 800b232:	4639      	mov	r1, r7
 800b234:	f7f4 ffcc 	bl	80001d0 <__aeabi_dsub>
 800b238:	460f      	mov	r7, r1
 800b23a:	4606      	mov	r6, r0
 800b23c:	f7f5 fc30 	bl	8000aa0 <__aeabi_d2iz>
 800b240:	9004      	str	r0, [sp, #16]
 800b242:	f7f5 f913 	bl	800046c <__aeabi_i2d>
 800b246:	4602      	mov	r2, r0
 800b248:	460b      	mov	r3, r1
 800b24a:	4630      	mov	r0, r6
 800b24c:	4639      	mov	r1, r7
 800b24e:	f7f4 ffbf 	bl	80001d0 <__aeabi_dsub>
 800b252:	f1ba 0f00 	cmp.w	sl, #0
 800b256:	4606      	mov	r6, r0
 800b258:	460f      	mov	r7, r1
 800b25a:	dd6d      	ble.n	800b338 <__kernel_rem_pio2+0x250>
 800b25c:	1e62      	subs	r2, r4, #1
 800b25e:	ab0e      	add	r3, sp, #56	; 0x38
 800b260:	9d04      	ldr	r5, [sp, #16]
 800b262:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b266:	f1ca 0118 	rsb	r1, sl, #24
 800b26a:	fa40 f301 	asr.w	r3, r0, r1
 800b26e:	441d      	add	r5, r3
 800b270:	408b      	lsls	r3, r1
 800b272:	1ac0      	subs	r0, r0, r3
 800b274:	ab0e      	add	r3, sp, #56	; 0x38
 800b276:	9504      	str	r5, [sp, #16]
 800b278:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b27c:	f1ca 0317 	rsb	r3, sl, #23
 800b280:	fa40 fb03 	asr.w	fp, r0, r3
 800b284:	f1bb 0f00 	cmp.w	fp, #0
 800b288:	dd65      	ble.n	800b356 <__kernel_rem_pio2+0x26e>
 800b28a:	9b04      	ldr	r3, [sp, #16]
 800b28c:	2200      	movs	r2, #0
 800b28e:	3301      	adds	r3, #1
 800b290:	9304      	str	r3, [sp, #16]
 800b292:	4615      	mov	r5, r2
 800b294:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b298:	4294      	cmp	r4, r2
 800b29a:	f300 809c 	bgt.w	800b3d6 <__kernel_rem_pio2+0x2ee>
 800b29e:	f1ba 0f00 	cmp.w	sl, #0
 800b2a2:	dd07      	ble.n	800b2b4 <__kernel_rem_pio2+0x1cc>
 800b2a4:	f1ba 0f01 	cmp.w	sl, #1
 800b2a8:	f000 80c0 	beq.w	800b42c <__kernel_rem_pio2+0x344>
 800b2ac:	f1ba 0f02 	cmp.w	sl, #2
 800b2b0:	f000 80c6 	beq.w	800b440 <__kernel_rem_pio2+0x358>
 800b2b4:	f1bb 0f02 	cmp.w	fp, #2
 800b2b8:	d14d      	bne.n	800b356 <__kernel_rem_pio2+0x26e>
 800b2ba:	4632      	mov	r2, r6
 800b2bc:	463b      	mov	r3, r7
 800b2be:	4956      	ldr	r1, [pc, #344]	; (800b418 <__kernel_rem_pio2+0x330>)
 800b2c0:	2000      	movs	r0, #0
 800b2c2:	f7f4 ff85 	bl	80001d0 <__aeabi_dsub>
 800b2c6:	4606      	mov	r6, r0
 800b2c8:	460f      	mov	r7, r1
 800b2ca:	2d00      	cmp	r5, #0
 800b2cc:	d043      	beq.n	800b356 <__kernel_rem_pio2+0x26e>
 800b2ce:	4650      	mov	r0, sl
 800b2d0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800b408 <__kernel_rem_pio2+0x320>
 800b2d4:	f000 fd7c 	bl	800bdd0 <scalbn>
 800b2d8:	4630      	mov	r0, r6
 800b2da:	4639      	mov	r1, r7
 800b2dc:	ec53 2b10 	vmov	r2, r3, d0
 800b2e0:	f7f4 ff76 	bl	80001d0 <__aeabi_dsub>
 800b2e4:	4606      	mov	r6, r0
 800b2e6:	460f      	mov	r7, r1
 800b2e8:	e035      	b.n	800b356 <__kernel_rem_pio2+0x26e>
 800b2ea:	4b4c      	ldr	r3, [pc, #304]	; (800b41c <__kernel_rem_pio2+0x334>)
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	4630      	mov	r0, r6
 800b2f0:	4639      	mov	r1, r7
 800b2f2:	f7f5 f925 	bl	8000540 <__aeabi_dmul>
 800b2f6:	f7f5 fbd3 	bl	8000aa0 <__aeabi_d2iz>
 800b2fa:	f7f5 f8b7 	bl	800046c <__aeabi_i2d>
 800b2fe:	4602      	mov	r2, r0
 800b300:	460b      	mov	r3, r1
 800b302:	ec43 2b18 	vmov	d8, r2, r3
 800b306:	4b46      	ldr	r3, [pc, #280]	; (800b420 <__kernel_rem_pio2+0x338>)
 800b308:	2200      	movs	r2, #0
 800b30a:	f7f5 f919 	bl	8000540 <__aeabi_dmul>
 800b30e:	4602      	mov	r2, r0
 800b310:	460b      	mov	r3, r1
 800b312:	4630      	mov	r0, r6
 800b314:	4639      	mov	r1, r7
 800b316:	f7f4 ff5b 	bl	80001d0 <__aeabi_dsub>
 800b31a:	f7f5 fbc1 	bl	8000aa0 <__aeabi_d2iz>
 800b31e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b322:	f84b 0b04 	str.w	r0, [fp], #4
 800b326:	ec51 0b18 	vmov	r0, r1, d8
 800b32a:	f7f4 ff53 	bl	80001d4 <__adddf3>
 800b32e:	f109 39ff 	add.w	r9, r9, #4294967295
 800b332:	4606      	mov	r6, r0
 800b334:	460f      	mov	r7, r1
 800b336:	e75b      	b.n	800b1f0 <__kernel_rem_pio2+0x108>
 800b338:	d106      	bne.n	800b348 <__kernel_rem_pio2+0x260>
 800b33a:	1e63      	subs	r3, r4, #1
 800b33c:	aa0e      	add	r2, sp, #56	; 0x38
 800b33e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b342:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800b346:	e79d      	b.n	800b284 <__kernel_rem_pio2+0x19c>
 800b348:	4b36      	ldr	r3, [pc, #216]	; (800b424 <__kernel_rem_pio2+0x33c>)
 800b34a:	2200      	movs	r2, #0
 800b34c:	f7f5 fb7e 	bl	8000a4c <__aeabi_dcmpge>
 800b350:	2800      	cmp	r0, #0
 800b352:	d13d      	bne.n	800b3d0 <__kernel_rem_pio2+0x2e8>
 800b354:	4683      	mov	fp, r0
 800b356:	2200      	movs	r2, #0
 800b358:	2300      	movs	r3, #0
 800b35a:	4630      	mov	r0, r6
 800b35c:	4639      	mov	r1, r7
 800b35e:	f7f5 fb57 	bl	8000a10 <__aeabi_dcmpeq>
 800b362:	2800      	cmp	r0, #0
 800b364:	f000 80c0 	beq.w	800b4e8 <__kernel_rem_pio2+0x400>
 800b368:	1e65      	subs	r5, r4, #1
 800b36a:	462b      	mov	r3, r5
 800b36c:	2200      	movs	r2, #0
 800b36e:	9902      	ldr	r1, [sp, #8]
 800b370:	428b      	cmp	r3, r1
 800b372:	da6c      	bge.n	800b44e <__kernel_rem_pio2+0x366>
 800b374:	2a00      	cmp	r2, #0
 800b376:	f000 8089 	beq.w	800b48c <__kernel_rem_pio2+0x3a4>
 800b37a:	ab0e      	add	r3, sp, #56	; 0x38
 800b37c:	f1aa 0a18 	sub.w	sl, sl, #24
 800b380:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b384:	2b00      	cmp	r3, #0
 800b386:	f000 80ad 	beq.w	800b4e4 <__kernel_rem_pio2+0x3fc>
 800b38a:	4650      	mov	r0, sl
 800b38c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800b408 <__kernel_rem_pio2+0x320>
 800b390:	f000 fd1e 	bl	800bdd0 <scalbn>
 800b394:	ab9a      	add	r3, sp, #616	; 0x268
 800b396:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b39a:	ec57 6b10 	vmov	r6, r7, d0
 800b39e:	00ec      	lsls	r4, r5, #3
 800b3a0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800b3a4:	46aa      	mov	sl, r5
 800b3a6:	f1ba 0f00 	cmp.w	sl, #0
 800b3aa:	f280 80d6 	bge.w	800b55a <__kernel_rem_pio2+0x472>
 800b3ae:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800b400 <__kernel_rem_pio2+0x318>
 800b3b2:	462e      	mov	r6, r5
 800b3b4:	2e00      	cmp	r6, #0
 800b3b6:	f2c0 8104 	blt.w	800b5c2 <__kernel_rem_pio2+0x4da>
 800b3ba:	ab72      	add	r3, sp, #456	; 0x1c8
 800b3bc:	ed8d 8b06 	vstr	d8, [sp, #24]
 800b3c0:	f8df a064 	ldr.w	sl, [pc, #100]	; 800b428 <__kernel_rem_pio2+0x340>
 800b3c4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800b3c8:	f04f 0800 	mov.w	r8, #0
 800b3cc:	1baf      	subs	r7, r5, r6
 800b3ce:	e0ea      	b.n	800b5a6 <__kernel_rem_pio2+0x4be>
 800b3d0:	f04f 0b02 	mov.w	fp, #2
 800b3d4:	e759      	b.n	800b28a <__kernel_rem_pio2+0x1a2>
 800b3d6:	f8d8 3000 	ldr.w	r3, [r8]
 800b3da:	b955      	cbnz	r5, 800b3f2 <__kernel_rem_pio2+0x30a>
 800b3dc:	b123      	cbz	r3, 800b3e8 <__kernel_rem_pio2+0x300>
 800b3de:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b3e2:	f8c8 3000 	str.w	r3, [r8]
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	3201      	adds	r2, #1
 800b3ea:	f108 0804 	add.w	r8, r8, #4
 800b3ee:	461d      	mov	r5, r3
 800b3f0:	e752      	b.n	800b298 <__kernel_rem_pio2+0x1b0>
 800b3f2:	1acb      	subs	r3, r1, r3
 800b3f4:	f8c8 3000 	str.w	r3, [r8]
 800b3f8:	462b      	mov	r3, r5
 800b3fa:	e7f5      	b.n	800b3e8 <__kernel_rem_pio2+0x300>
 800b3fc:	f3af 8000 	nop.w
	...
 800b40c:	3ff00000 	.word	0x3ff00000
 800b410:	0800dc20 	.word	0x0800dc20
 800b414:	40200000 	.word	0x40200000
 800b418:	3ff00000 	.word	0x3ff00000
 800b41c:	3e700000 	.word	0x3e700000
 800b420:	41700000 	.word	0x41700000
 800b424:	3fe00000 	.word	0x3fe00000
 800b428:	0800dbe0 	.word	0x0800dbe0
 800b42c:	1e62      	subs	r2, r4, #1
 800b42e:	ab0e      	add	r3, sp, #56	; 0x38
 800b430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b434:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b438:	a90e      	add	r1, sp, #56	; 0x38
 800b43a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b43e:	e739      	b.n	800b2b4 <__kernel_rem_pio2+0x1cc>
 800b440:	1e62      	subs	r2, r4, #1
 800b442:	ab0e      	add	r3, sp, #56	; 0x38
 800b444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b448:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b44c:	e7f4      	b.n	800b438 <__kernel_rem_pio2+0x350>
 800b44e:	a90e      	add	r1, sp, #56	; 0x38
 800b450:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b454:	3b01      	subs	r3, #1
 800b456:	430a      	orrs	r2, r1
 800b458:	e789      	b.n	800b36e <__kernel_rem_pio2+0x286>
 800b45a:	3301      	adds	r3, #1
 800b45c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b460:	2900      	cmp	r1, #0
 800b462:	d0fa      	beq.n	800b45a <__kernel_rem_pio2+0x372>
 800b464:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b466:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800b46a:	446a      	add	r2, sp
 800b46c:	3a98      	subs	r2, #152	; 0x98
 800b46e:	920a      	str	r2, [sp, #40]	; 0x28
 800b470:	9a08      	ldr	r2, [sp, #32]
 800b472:	18e3      	adds	r3, r4, r3
 800b474:	18a5      	adds	r5, r4, r2
 800b476:	aa22      	add	r2, sp, #136	; 0x88
 800b478:	f104 0801 	add.w	r8, r4, #1
 800b47c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800b480:	9304      	str	r3, [sp, #16]
 800b482:	9b04      	ldr	r3, [sp, #16]
 800b484:	4543      	cmp	r3, r8
 800b486:	da04      	bge.n	800b492 <__kernel_rem_pio2+0x3aa>
 800b488:	461c      	mov	r4, r3
 800b48a:	e6a3      	b.n	800b1d4 <__kernel_rem_pio2+0xec>
 800b48c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b48e:	2301      	movs	r3, #1
 800b490:	e7e4      	b.n	800b45c <__kernel_rem_pio2+0x374>
 800b492:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b494:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b498:	f7f4 ffe8 	bl	800046c <__aeabi_i2d>
 800b49c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800b4a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4a2:	46ab      	mov	fp, r5
 800b4a4:	461c      	mov	r4, r3
 800b4a6:	f04f 0900 	mov.w	r9, #0
 800b4aa:	2600      	movs	r6, #0
 800b4ac:	2700      	movs	r7, #0
 800b4ae:	9b06      	ldr	r3, [sp, #24]
 800b4b0:	4599      	cmp	r9, r3
 800b4b2:	dd06      	ble.n	800b4c2 <__kernel_rem_pio2+0x3da>
 800b4b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4b6:	e8e3 6702 	strd	r6, r7, [r3], #8
 800b4ba:	f108 0801 	add.w	r8, r8, #1
 800b4be:	930a      	str	r3, [sp, #40]	; 0x28
 800b4c0:	e7df      	b.n	800b482 <__kernel_rem_pio2+0x39a>
 800b4c2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b4c6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b4ca:	f7f5 f839 	bl	8000540 <__aeabi_dmul>
 800b4ce:	4602      	mov	r2, r0
 800b4d0:	460b      	mov	r3, r1
 800b4d2:	4630      	mov	r0, r6
 800b4d4:	4639      	mov	r1, r7
 800b4d6:	f7f4 fe7d 	bl	80001d4 <__adddf3>
 800b4da:	f109 0901 	add.w	r9, r9, #1
 800b4de:	4606      	mov	r6, r0
 800b4e0:	460f      	mov	r7, r1
 800b4e2:	e7e4      	b.n	800b4ae <__kernel_rem_pio2+0x3c6>
 800b4e4:	3d01      	subs	r5, #1
 800b4e6:	e748      	b.n	800b37a <__kernel_rem_pio2+0x292>
 800b4e8:	ec47 6b10 	vmov	d0, r6, r7
 800b4ec:	f1ca 0000 	rsb	r0, sl, #0
 800b4f0:	f000 fc6e 	bl	800bdd0 <scalbn>
 800b4f4:	ec57 6b10 	vmov	r6, r7, d0
 800b4f8:	4ba0      	ldr	r3, [pc, #640]	; (800b77c <__kernel_rem_pio2+0x694>)
 800b4fa:	ee10 0a10 	vmov	r0, s0
 800b4fe:	2200      	movs	r2, #0
 800b500:	4639      	mov	r1, r7
 800b502:	f7f5 faa3 	bl	8000a4c <__aeabi_dcmpge>
 800b506:	b1f8      	cbz	r0, 800b548 <__kernel_rem_pio2+0x460>
 800b508:	4b9d      	ldr	r3, [pc, #628]	; (800b780 <__kernel_rem_pio2+0x698>)
 800b50a:	2200      	movs	r2, #0
 800b50c:	4630      	mov	r0, r6
 800b50e:	4639      	mov	r1, r7
 800b510:	f7f5 f816 	bl	8000540 <__aeabi_dmul>
 800b514:	f7f5 fac4 	bl	8000aa0 <__aeabi_d2iz>
 800b518:	4680      	mov	r8, r0
 800b51a:	f7f4 ffa7 	bl	800046c <__aeabi_i2d>
 800b51e:	4b97      	ldr	r3, [pc, #604]	; (800b77c <__kernel_rem_pio2+0x694>)
 800b520:	2200      	movs	r2, #0
 800b522:	f7f5 f80d 	bl	8000540 <__aeabi_dmul>
 800b526:	460b      	mov	r3, r1
 800b528:	4602      	mov	r2, r0
 800b52a:	4639      	mov	r1, r7
 800b52c:	4630      	mov	r0, r6
 800b52e:	f7f4 fe4f 	bl	80001d0 <__aeabi_dsub>
 800b532:	f7f5 fab5 	bl	8000aa0 <__aeabi_d2iz>
 800b536:	1c65      	adds	r5, r4, #1
 800b538:	ab0e      	add	r3, sp, #56	; 0x38
 800b53a:	f10a 0a18 	add.w	sl, sl, #24
 800b53e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b542:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800b546:	e720      	b.n	800b38a <__kernel_rem_pio2+0x2a2>
 800b548:	4630      	mov	r0, r6
 800b54a:	4639      	mov	r1, r7
 800b54c:	f7f5 faa8 	bl	8000aa0 <__aeabi_d2iz>
 800b550:	ab0e      	add	r3, sp, #56	; 0x38
 800b552:	4625      	mov	r5, r4
 800b554:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b558:	e717      	b.n	800b38a <__kernel_rem_pio2+0x2a2>
 800b55a:	ab0e      	add	r3, sp, #56	; 0x38
 800b55c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800b560:	f7f4 ff84 	bl	800046c <__aeabi_i2d>
 800b564:	4632      	mov	r2, r6
 800b566:	463b      	mov	r3, r7
 800b568:	f7f4 ffea 	bl	8000540 <__aeabi_dmul>
 800b56c:	4b84      	ldr	r3, [pc, #528]	; (800b780 <__kernel_rem_pio2+0x698>)
 800b56e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800b572:	2200      	movs	r2, #0
 800b574:	4630      	mov	r0, r6
 800b576:	4639      	mov	r1, r7
 800b578:	f7f4 ffe2 	bl	8000540 <__aeabi_dmul>
 800b57c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b580:	4606      	mov	r6, r0
 800b582:	460f      	mov	r7, r1
 800b584:	e70f      	b.n	800b3a6 <__kernel_rem_pio2+0x2be>
 800b586:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800b58a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800b58e:	f7f4 ffd7 	bl	8000540 <__aeabi_dmul>
 800b592:	4602      	mov	r2, r0
 800b594:	460b      	mov	r3, r1
 800b596:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b59a:	f7f4 fe1b 	bl	80001d4 <__adddf3>
 800b59e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b5a2:	f108 0801 	add.w	r8, r8, #1
 800b5a6:	9b02      	ldr	r3, [sp, #8]
 800b5a8:	4598      	cmp	r8, r3
 800b5aa:	dc01      	bgt.n	800b5b0 <__kernel_rem_pio2+0x4c8>
 800b5ac:	45b8      	cmp	r8, r7
 800b5ae:	ddea      	ble.n	800b586 <__kernel_rem_pio2+0x49e>
 800b5b0:	ed9d 7b06 	vldr	d7, [sp, #24]
 800b5b4:	ab4a      	add	r3, sp, #296	; 0x128
 800b5b6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b5ba:	ed87 7b00 	vstr	d7, [r7]
 800b5be:	3e01      	subs	r6, #1
 800b5c0:	e6f8      	b.n	800b3b4 <__kernel_rem_pio2+0x2cc>
 800b5c2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b5c4:	2b02      	cmp	r3, #2
 800b5c6:	dc0b      	bgt.n	800b5e0 <__kernel_rem_pio2+0x4f8>
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	dc35      	bgt.n	800b638 <__kernel_rem_pio2+0x550>
 800b5cc:	d059      	beq.n	800b682 <__kernel_rem_pio2+0x59a>
 800b5ce:	9b04      	ldr	r3, [sp, #16]
 800b5d0:	f003 0007 	and.w	r0, r3, #7
 800b5d4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800b5d8:	ecbd 8b02 	vpop	{d8}
 800b5dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5e0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b5e2:	2b03      	cmp	r3, #3
 800b5e4:	d1f3      	bne.n	800b5ce <__kernel_rem_pio2+0x4e6>
 800b5e6:	ab4a      	add	r3, sp, #296	; 0x128
 800b5e8:	4423      	add	r3, r4
 800b5ea:	9306      	str	r3, [sp, #24]
 800b5ec:	461c      	mov	r4, r3
 800b5ee:	469a      	mov	sl, r3
 800b5f0:	9502      	str	r5, [sp, #8]
 800b5f2:	9b02      	ldr	r3, [sp, #8]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	f1aa 0a08 	sub.w	sl, sl, #8
 800b5fa:	dc6b      	bgt.n	800b6d4 <__kernel_rem_pio2+0x5ec>
 800b5fc:	46aa      	mov	sl, r5
 800b5fe:	f1ba 0f01 	cmp.w	sl, #1
 800b602:	f1a4 0408 	sub.w	r4, r4, #8
 800b606:	f300 8085 	bgt.w	800b714 <__kernel_rem_pio2+0x62c>
 800b60a:	9c06      	ldr	r4, [sp, #24]
 800b60c:	2000      	movs	r0, #0
 800b60e:	3408      	adds	r4, #8
 800b610:	2100      	movs	r1, #0
 800b612:	2d01      	cmp	r5, #1
 800b614:	f300 809d 	bgt.w	800b752 <__kernel_rem_pio2+0x66a>
 800b618:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800b61c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800b620:	f1bb 0f00 	cmp.w	fp, #0
 800b624:	f040 809b 	bne.w	800b75e <__kernel_rem_pio2+0x676>
 800b628:	9b01      	ldr	r3, [sp, #4]
 800b62a:	e9c3 5600 	strd	r5, r6, [r3]
 800b62e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800b632:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b636:	e7ca      	b.n	800b5ce <__kernel_rem_pio2+0x4e6>
 800b638:	3408      	adds	r4, #8
 800b63a:	ab4a      	add	r3, sp, #296	; 0x128
 800b63c:	441c      	add	r4, r3
 800b63e:	462e      	mov	r6, r5
 800b640:	2000      	movs	r0, #0
 800b642:	2100      	movs	r1, #0
 800b644:	2e00      	cmp	r6, #0
 800b646:	da36      	bge.n	800b6b6 <__kernel_rem_pio2+0x5ce>
 800b648:	f1bb 0f00 	cmp.w	fp, #0
 800b64c:	d039      	beq.n	800b6c2 <__kernel_rem_pio2+0x5da>
 800b64e:	4602      	mov	r2, r0
 800b650:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b654:	9c01      	ldr	r4, [sp, #4]
 800b656:	e9c4 2300 	strd	r2, r3, [r4]
 800b65a:	4602      	mov	r2, r0
 800b65c:	460b      	mov	r3, r1
 800b65e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800b662:	f7f4 fdb5 	bl	80001d0 <__aeabi_dsub>
 800b666:	ae4c      	add	r6, sp, #304	; 0x130
 800b668:	2401      	movs	r4, #1
 800b66a:	42a5      	cmp	r5, r4
 800b66c:	da2c      	bge.n	800b6c8 <__kernel_rem_pio2+0x5e0>
 800b66e:	f1bb 0f00 	cmp.w	fp, #0
 800b672:	d002      	beq.n	800b67a <__kernel_rem_pio2+0x592>
 800b674:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b678:	4619      	mov	r1, r3
 800b67a:	9b01      	ldr	r3, [sp, #4]
 800b67c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b680:	e7a5      	b.n	800b5ce <__kernel_rem_pio2+0x4e6>
 800b682:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800b686:	eb0d 0403 	add.w	r4, sp, r3
 800b68a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800b68e:	2000      	movs	r0, #0
 800b690:	2100      	movs	r1, #0
 800b692:	2d00      	cmp	r5, #0
 800b694:	da09      	bge.n	800b6aa <__kernel_rem_pio2+0x5c2>
 800b696:	f1bb 0f00 	cmp.w	fp, #0
 800b69a:	d002      	beq.n	800b6a2 <__kernel_rem_pio2+0x5ba>
 800b69c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b6a0:	4619      	mov	r1, r3
 800b6a2:	9b01      	ldr	r3, [sp, #4]
 800b6a4:	e9c3 0100 	strd	r0, r1, [r3]
 800b6a8:	e791      	b.n	800b5ce <__kernel_rem_pio2+0x4e6>
 800b6aa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b6ae:	f7f4 fd91 	bl	80001d4 <__adddf3>
 800b6b2:	3d01      	subs	r5, #1
 800b6b4:	e7ed      	b.n	800b692 <__kernel_rem_pio2+0x5aa>
 800b6b6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b6ba:	f7f4 fd8b 	bl	80001d4 <__adddf3>
 800b6be:	3e01      	subs	r6, #1
 800b6c0:	e7c0      	b.n	800b644 <__kernel_rem_pio2+0x55c>
 800b6c2:	4602      	mov	r2, r0
 800b6c4:	460b      	mov	r3, r1
 800b6c6:	e7c5      	b.n	800b654 <__kernel_rem_pio2+0x56c>
 800b6c8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800b6cc:	f7f4 fd82 	bl	80001d4 <__adddf3>
 800b6d0:	3401      	adds	r4, #1
 800b6d2:	e7ca      	b.n	800b66a <__kernel_rem_pio2+0x582>
 800b6d4:	e9da 8900 	ldrd	r8, r9, [sl]
 800b6d8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800b6dc:	9b02      	ldr	r3, [sp, #8]
 800b6de:	3b01      	subs	r3, #1
 800b6e0:	9302      	str	r3, [sp, #8]
 800b6e2:	4632      	mov	r2, r6
 800b6e4:	463b      	mov	r3, r7
 800b6e6:	4640      	mov	r0, r8
 800b6e8:	4649      	mov	r1, r9
 800b6ea:	f7f4 fd73 	bl	80001d4 <__adddf3>
 800b6ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b6f2:	4602      	mov	r2, r0
 800b6f4:	460b      	mov	r3, r1
 800b6f6:	4640      	mov	r0, r8
 800b6f8:	4649      	mov	r1, r9
 800b6fa:	f7f4 fd69 	bl	80001d0 <__aeabi_dsub>
 800b6fe:	4632      	mov	r2, r6
 800b700:	463b      	mov	r3, r7
 800b702:	f7f4 fd67 	bl	80001d4 <__adddf3>
 800b706:	ed9d 7b08 	vldr	d7, [sp, #32]
 800b70a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b70e:	ed8a 7b00 	vstr	d7, [sl]
 800b712:	e76e      	b.n	800b5f2 <__kernel_rem_pio2+0x50a>
 800b714:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b718:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800b71c:	4640      	mov	r0, r8
 800b71e:	4632      	mov	r2, r6
 800b720:	463b      	mov	r3, r7
 800b722:	4649      	mov	r1, r9
 800b724:	f7f4 fd56 	bl	80001d4 <__adddf3>
 800b728:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b72c:	4602      	mov	r2, r0
 800b72e:	460b      	mov	r3, r1
 800b730:	4640      	mov	r0, r8
 800b732:	4649      	mov	r1, r9
 800b734:	f7f4 fd4c 	bl	80001d0 <__aeabi_dsub>
 800b738:	4632      	mov	r2, r6
 800b73a:	463b      	mov	r3, r7
 800b73c:	f7f4 fd4a 	bl	80001d4 <__adddf3>
 800b740:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b744:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b748:	ed84 7b00 	vstr	d7, [r4]
 800b74c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b750:	e755      	b.n	800b5fe <__kernel_rem_pio2+0x516>
 800b752:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b756:	f7f4 fd3d 	bl	80001d4 <__adddf3>
 800b75a:	3d01      	subs	r5, #1
 800b75c:	e759      	b.n	800b612 <__kernel_rem_pio2+0x52a>
 800b75e:	9b01      	ldr	r3, [sp, #4]
 800b760:	9a01      	ldr	r2, [sp, #4]
 800b762:	601d      	str	r5, [r3, #0]
 800b764:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800b768:	605c      	str	r4, [r3, #4]
 800b76a:	609f      	str	r7, [r3, #8]
 800b76c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800b770:	60d3      	str	r3, [r2, #12]
 800b772:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b776:	6110      	str	r0, [r2, #16]
 800b778:	6153      	str	r3, [r2, #20]
 800b77a:	e728      	b.n	800b5ce <__kernel_rem_pio2+0x4e6>
 800b77c:	41700000 	.word	0x41700000
 800b780:	3e700000 	.word	0x3e700000
 800b784:	00000000 	.word	0x00000000

0800b788 <__kernel_sin>:
 800b788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b78c:	ed2d 8b04 	vpush	{d8-d9}
 800b790:	eeb0 8a41 	vmov.f32	s16, s2
 800b794:	eef0 8a61 	vmov.f32	s17, s3
 800b798:	ec55 4b10 	vmov	r4, r5, d0
 800b79c:	b083      	sub	sp, #12
 800b79e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b7a2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b7a6:	9001      	str	r0, [sp, #4]
 800b7a8:	da06      	bge.n	800b7b8 <__kernel_sin+0x30>
 800b7aa:	ee10 0a10 	vmov	r0, s0
 800b7ae:	4629      	mov	r1, r5
 800b7b0:	f7f5 f976 	bl	8000aa0 <__aeabi_d2iz>
 800b7b4:	2800      	cmp	r0, #0
 800b7b6:	d051      	beq.n	800b85c <__kernel_sin+0xd4>
 800b7b8:	4622      	mov	r2, r4
 800b7ba:	462b      	mov	r3, r5
 800b7bc:	4620      	mov	r0, r4
 800b7be:	4629      	mov	r1, r5
 800b7c0:	f7f4 febe 	bl	8000540 <__aeabi_dmul>
 800b7c4:	4682      	mov	sl, r0
 800b7c6:	468b      	mov	fp, r1
 800b7c8:	4602      	mov	r2, r0
 800b7ca:	460b      	mov	r3, r1
 800b7cc:	4620      	mov	r0, r4
 800b7ce:	4629      	mov	r1, r5
 800b7d0:	f7f4 feb6 	bl	8000540 <__aeabi_dmul>
 800b7d4:	a341      	add	r3, pc, #260	; (adr r3, 800b8dc <__kernel_sin+0x154>)
 800b7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7da:	4680      	mov	r8, r0
 800b7dc:	4689      	mov	r9, r1
 800b7de:	4650      	mov	r0, sl
 800b7e0:	4659      	mov	r1, fp
 800b7e2:	f7f4 fead 	bl	8000540 <__aeabi_dmul>
 800b7e6:	a33f      	add	r3, pc, #252	; (adr r3, 800b8e4 <__kernel_sin+0x15c>)
 800b7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ec:	f7f4 fcf0 	bl	80001d0 <__aeabi_dsub>
 800b7f0:	4652      	mov	r2, sl
 800b7f2:	465b      	mov	r3, fp
 800b7f4:	f7f4 fea4 	bl	8000540 <__aeabi_dmul>
 800b7f8:	a33c      	add	r3, pc, #240	; (adr r3, 800b8ec <__kernel_sin+0x164>)
 800b7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7fe:	f7f4 fce9 	bl	80001d4 <__adddf3>
 800b802:	4652      	mov	r2, sl
 800b804:	465b      	mov	r3, fp
 800b806:	f7f4 fe9b 	bl	8000540 <__aeabi_dmul>
 800b80a:	a33a      	add	r3, pc, #232	; (adr r3, 800b8f4 <__kernel_sin+0x16c>)
 800b80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b810:	f7f4 fcde 	bl	80001d0 <__aeabi_dsub>
 800b814:	4652      	mov	r2, sl
 800b816:	465b      	mov	r3, fp
 800b818:	f7f4 fe92 	bl	8000540 <__aeabi_dmul>
 800b81c:	a337      	add	r3, pc, #220	; (adr r3, 800b8fc <__kernel_sin+0x174>)
 800b81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b822:	f7f4 fcd7 	bl	80001d4 <__adddf3>
 800b826:	9b01      	ldr	r3, [sp, #4]
 800b828:	4606      	mov	r6, r0
 800b82a:	460f      	mov	r7, r1
 800b82c:	b9eb      	cbnz	r3, 800b86a <__kernel_sin+0xe2>
 800b82e:	4602      	mov	r2, r0
 800b830:	460b      	mov	r3, r1
 800b832:	4650      	mov	r0, sl
 800b834:	4659      	mov	r1, fp
 800b836:	f7f4 fe83 	bl	8000540 <__aeabi_dmul>
 800b83a:	a325      	add	r3, pc, #148	; (adr r3, 800b8d0 <__kernel_sin+0x148>)
 800b83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b840:	f7f4 fcc6 	bl	80001d0 <__aeabi_dsub>
 800b844:	4642      	mov	r2, r8
 800b846:	464b      	mov	r3, r9
 800b848:	f7f4 fe7a 	bl	8000540 <__aeabi_dmul>
 800b84c:	4602      	mov	r2, r0
 800b84e:	460b      	mov	r3, r1
 800b850:	4620      	mov	r0, r4
 800b852:	4629      	mov	r1, r5
 800b854:	f7f4 fcbe 	bl	80001d4 <__adddf3>
 800b858:	4604      	mov	r4, r0
 800b85a:	460d      	mov	r5, r1
 800b85c:	ec45 4b10 	vmov	d0, r4, r5
 800b860:	b003      	add	sp, #12
 800b862:	ecbd 8b04 	vpop	{d8-d9}
 800b866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b86a:	4b1b      	ldr	r3, [pc, #108]	; (800b8d8 <__kernel_sin+0x150>)
 800b86c:	ec51 0b18 	vmov	r0, r1, d8
 800b870:	2200      	movs	r2, #0
 800b872:	f7f4 fe65 	bl	8000540 <__aeabi_dmul>
 800b876:	4632      	mov	r2, r6
 800b878:	ec41 0b19 	vmov	d9, r0, r1
 800b87c:	463b      	mov	r3, r7
 800b87e:	4640      	mov	r0, r8
 800b880:	4649      	mov	r1, r9
 800b882:	f7f4 fe5d 	bl	8000540 <__aeabi_dmul>
 800b886:	4602      	mov	r2, r0
 800b888:	460b      	mov	r3, r1
 800b88a:	ec51 0b19 	vmov	r0, r1, d9
 800b88e:	f7f4 fc9f 	bl	80001d0 <__aeabi_dsub>
 800b892:	4652      	mov	r2, sl
 800b894:	465b      	mov	r3, fp
 800b896:	f7f4 fe53 	bl	8000540 <__aeabi_dmul>
 800b89a:	ec53 2b18 	vmov	r2, r3, d8
 800b89e:	f7f4 fc97 	bl	80001d0 <__aeabi_dsub>
 800b8a2:	a30b      	add	r3, pc, #44	; (adr r3, 800b8d0 <__kernel_sin+0x148>)
 800b8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a8:	4606      	mov	r6, r0
 800b8aa:	460f      	mov	r7, r1
 800b8ac:	4640      	mov	r0, r8
 800b8ae:	4649      	mov	r1, r9
 800b8b0:	f7f4 fe46 	bl	8000540 <__aeabi_dmul>
 800b8b4:	4602      	mov	r2, r0
 800b8b6:	460b      	mov	r3, r1
 800b8b8:	4630      	mov	r0, r6
 800b8ba:	4639      	mov	r1, r7
 800b8bc:	f7f4 fc8a 	bl	80001d4 <__adddf3>
 800b8c0:	4602      	mov	r2, r0
 800b8c2:	460b      	mov	r3, r1
 800b8c4:	4620      	mov	r0, r4
 800b8c6:	4629      	mov	r1, r5
 800b8c8:	f7f4 fc82 	bl	80001d0 <__aeabi_dsub>
 800b8cc:	e7c4      	b.n	800b858 <__kernel_sin+0xd0>
 800b8ce:	bf00      	nop
 800b8d0:	55555549 	.word	0x55555549
 800b8d4:	3fc55555 	.word	0x3fc55555
 800b8d8:	3fe00000 	.word	0x3fe00000
 800b8dc:	5acfd57c 	.word	0x5acfd57c
 800b8e0:	3de5d93a 	.word	0x3de5d93a
 800b8e4:	8a2b9ceb 	.word	0x8a2b9ceb
 800b8e8:	3e5ae5e6 	.word	0x3e5ae5e6
 800b8ec:	57b1fe7d 	.word	0x57b1fe7d
 800b8f0:	3ec71de3 	.word	0x3ec71de3
 800b8f4:	19c161d5 	.word	0x19c161d5
 800b8f8:	3f2a01a0 	.word	0x3f2a01a0
 800b8fc:	1110f8a6 	.word	0x1110f8a6
 800b900:	3f811111 	.word	0x3f811111

0800b904 <with_errno>:
 800b904:	b570      	push	{r4, r5, r6, lr}
 800b906:	4604      	mov	r4, r0
 800b908:	460d      	mov	r5, r1
 800b90a:	4616      	mov	r6, r2
 800b90c:	f7fe f8e8 	bl	8009ae0 <__errno>
 800b910:	4629      	mov	r1, r5
 800b912:	6006      	str	r6, [r0, #0]
 800b914:	4620      	mov	r0, r4
 800b916:	bd70      	pop	{r4, r5, r6, pc}

0800b918 <xflow>:
 800b918:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b91a:	4614      	mov	r4, r2
 800b91c:	461d      	mov	r5, r3
 800b91e:	b108      	cbz	r0, 800b924 <xflow+0xc>
 800b920:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b924:	e9cd 2300 	strd	r2, r3, [sp]
 800b928:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b92c:	4620      	mov	r0, r4
 800b92e:	4629      	mov	r1, r5
 800b930:	f7f4 fe06 	bl	8000540 <__aeabi_dmul>
 800b934:	2222      	movs	r2, #34	; 0x22
 800b936:	b003      	add	sp, #12
 800b938:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b93c:	f7ff bfe2 	b.w	800b904 <with_errno>

0800b940 <__math_uflow>:
 800b940:	b508      	push	{r3, lr}
 800b942:	2200      	movs	r2, #0
 800b944:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b948:	f7ff ffe6 	bl	800b918 <xflow>
 800b94c:	ec41 0b10 	vmov	d0, r0, r1
 800b950:	bd08      	pop	{r3, pc}

0800b952 <__math_oflow>:
 800b952:	b508      	push	{r3, lr}
 800b954:	2200      	movs	r2, #0
 800b956:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800b95a:	f7ff ffdd 	bl	800b918 <xflow>
 800b95e:	ec41 0b10 	vmov	d0, r0, r1
 800b962:	bd08      	pop	{r3, pc}
 800b964:	0000      	movs	r0, r0
	...

0800b968 <atan>:
 800b968:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b96c:	ec55 4b10 	vmov	r4, r5, d0
 800b970:	4bc3      	ldr	r3, [pc, #780]	; (800bc80 <atan+0x318>)
 800b972:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b976:	429e      	cmp	r6, r3
 800b978:	46ab      	mov	fp, r5
 800b97a:	dd18      	ble.n	800b9ae <atan+0x46>
 800b97c:	4bc1      	ldr	r3, [pc, #772]	; (800bc84 <atan+0x31c>)
 800b97e:	429e      	cmp	r6, r3
 800b980:	dc01      	bgt.n	800b986 <atan+0x1e>
 800b982:	d109      	bne.n	800b998 <atan+0x30>
 800b984:	b144      	cbz	r4, 800b998 <atan+0x30>
 800b986:	4622      	mov	r2, r4
 800b988:	462b      	mov	r3, r5
 800b98a:	4620      	mov	r0, r4
 800b98c:	4629      	mov	r1, r5
 800b98e:	f7f4 fc21 	bl	80001d4 <__adddf3>
 800b992:	4604      	mov	r4, r0
 800b994:	460d      	mov	r5, r1
 800b996:	e006      	b.n	800b9a6 <atan+0x3e>
 800b998:	f1bb 0f00 	cmp.w	fp, #0
 800b99c:	f300 8131 	bgt.w	800bc02 <atan+0x29a>
 800b9a0:	a59b      	add	r5, pc, #620	; (adr r5, 800bc10 <atan+0x2a8>)
 800b9a2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b9a6:	ec45 4b10 	vmov	d0, r4, r5
 800b9aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9ae:	4bb6      	ldr	r3, [pc, #728]	; (800bc88 <atan+0x320>)
 800b9b0:	429e      	cmp	r6, r3
 800b9b2:	dc14      	bgt.n	800b9de <atan+0x76>
 800b9b4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b9b8:	429e      	cmp	r6, r3
 800b9ba:	dc0d      	bgt.n	800b9d8 <atan+0x70>
 800b9bc:	a396      	add	r3, pc, #600	; (adr r3, 800bc18 <atan+0x2b0>)
 800b9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c2:	ee10 0a10 	vmov	r0, s0
 800b9c6:	4629      	mov	r1, r5
 800b9c8:	f7f4 fc04 	bl	80001d4 <__adddf3>
 800b9cc:	4baf      	ldr	r3, [pc, #700]	; (800bc8c <atan+0x324>)
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	f7f5 f846 	bl	8000a60 <__aeabi_dcmpgt>
 800b9d4:	2800      	cmp	r0, #0
 800b9d6:	d1e6      	bne.n	800b9a6 <atan+0x3e>
 800b9d8:	f04f 3aff 	mov.w	sl, #4294967295
 800b9dc:	e02b      	b.n	800ba36 <atan+0xce>
 800b9de:	f000 f963 	bl	800bca8 <fabs>
 800b9e2:	4bab      	ldr	r3, [pc, #684]	; (800bc90 <atan+0x328>)
 800b9e4:	429e      	cmp	r6, r3
 800b9e6:	ec55 4b10 	vmov	r4, r5, d0
 800b9ea:	f300 80bf 	bgt.w	800bb6c <atan+0x204>
 800b9ee:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b9f2:	429e      	cmp	r6, r3
 800b9f4:	f300 80a0 	bgt.w	800bb38 <atan+0x1d0>
 800b9f8:	ee10 2a10 	vmov	r2, s0
 800b9fc:	ee10 0a10 	vmov	r0, s0
 800ba00:	462b      	mov	r3, r5
 800ba02:	4629      	mov	r1, r5
 800ba04:	f7f4 fbe6 	bl	80001d4 <__adddf3>
 800ba08:	4ba0      	ldr	r3, [pc, #640]	; (800bc8c <atan+0x324>)
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	f7f4 fbe0 	bl	80001d0 <__aeabi_dsub>
 800ba10:	2200      	movs	r2, #0
 800ba12:	4606      	mov	r6, r0
 800ba14:	460f      	mov	r7, r1
 800ba16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ba1a:	4620      	mov	r0, r4
 800ba1c:	4629      	mov	r1, r5
 800ba1e:	f7f4 fbd9 	bl	80001d4 <__adddf3>
 800ba22:	4602      	mov	r2, r0
 800ba24:	460b      	mov	r3, r1
 800ba26:	4630      	mov	r0, r6
 800ba28:	4639      	mov	r1, r7
 800ba2a:	f7f4 feb3 	bl	8000794 <__aeabi_ddiv>
 800ba2e:	f04f 0a00 	mov.w	sl, #0
 800ba32:	4604      	mov	r4, r0
 800ba34:	460d      	mov	r5, r1
 800ba36:	4622      	mov	r2, r4
 800ba38:	462b      	mov	r3, r5
 800ba3a:	4620      	mov	r0, r4
 800ba3c:	4629      	mov	r1, r5
 800ba3e:	f7f4 fd7f 	bl	8000540 <__aeabi_dmul>
 800ba42:	4602      	mov	r2, r0
 800ba44:	460b      	mov	r3, r1
 800ba46:	4680      	mov	r8, r0
 800ba48:	4689      	mov	r9, r1
 800ba4a:	f7f4 fd79 	bl	8000540 <__aeabi_dmul>
 800ba4e:	a374      	add	r3, pc, #464	; (adr r3, 800bc20 <atan+0x2b8>)
 800ba50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba54:	4606      	mov	r6, r0
 800ba56:	460f      	mov	r7, r1
 800ba58:	f7f4 fd72 	bl	8000540 <__aeabi_dmul>
 800ba5c:	a372      	add	r3, pc, #456	; (adr r3, 800bc28 <atan+0x2c0>)
 800ba5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba62:	f7f4 fbb7 	bl	80001d4 <__adddf3>
 800ba66:	4632      	mov	r2, r6
 800ba68:	463b      	mov	r3, r7
 800ba6a:	f7f4 fd69 	bl	8000540 <__aeabi_dmul>
 800ba6e:	a370      	add	r3, pc, #448	; (adr r3, 800bc30 <atan+0x2c8>)
 800ba70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba74:	f7f4 fbae 	bl	80001d4 <__adddf3>
 800ba78:	4632      	mov	r2, r6
 800ba7a:	463b      	mov	r3, r7
 800ba7c:	f7f4 fd60 	bl	8000540 <__aeabi_dmul>
 800ba80:	a36d      	add	r3, pc, #436	; (adr r3, 800bc38 <atan+0x2d0>)
 800ba82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba86:	f7f4 fba5 	bl	80001d4 <__adddf3>
 800ba8a:	4632      	mov	r2, r6
 800ba8c:	463b      	mov	r3, r7
 800ba8e:	f7f4 fd57 	bl	8000540 <__aeabi_dmul>
 800ba92:	a36b      	add	r3, pc, #428	; (adr r3, 800bc40 <atan+0x2d8>)
 800ba94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba98:	f7f4 fb9c 	bl	80001d4 <__adddf3>
 800ba9c:	4632      	mov	r2, r6
 800ba9e:	463b      	mov	r3, r7
 800baa0:	f7f4 fd4e 	bl	8000540 <__aeabi_dmul>
 800baa4:	a368      	add	r3, pc, #416	; (adr r3, 800bc48 <atan+0x2e0>)
 800baa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baaa:	f7f4 fb93 	bl	80001d4 <__adddf3>
 800baae:	4642      	mov	r2, r8
 800bab0:	464b      	mov	r3, r9
 800bab2:	f7f4 fd45 	bl	8000540 <__aeabi_dmul>
 800bab6:	a366      	add	r3, pc, #408	; (adr r3, 800bc50 <atan+0x2e8>)
 800bab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800babc:	4680      	mov	r8, r0
 800babe:	4689      	mov	r9, r1
 800bac0:	4630      	mov	r0, r6
 800bac2:	4639      	mov	r1, r7
 800bac4:	f7f4 fd3c 	bl	8000540 <__aeabi_dmul>
 800bac8:	a363      	add	r3, pc, #396	; (adr r3, 800bc58 <atan+0x2f0>)
 800baca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bace:	f7f4 fb7f 	bl	80001d0 <__aeabi_dsub>
 800bad2:	4632      	mov	r2, r6
 800bad4:	463b      	mov	r3, r7
 800bad6:	f7f4 fd33 	bl	8000540 <__aeabi_dmul>
 800bada:	a361      	add	r3, pc, #388	; (adr r3, 800bc60 <atan+0x2f8>)
 800badc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae0:	f7f4 fb76 	bl	80001d0 <__aeabi_dsub>
 800bae4:	4632      	mov	r2, r6
 800bae6:	463b      	mov	r3, r7
 800bae8:	f7f4 fd2a 	bl	8000540 <__aeabi_dmul>
 800baec:	a35e      	add	r3, pc, #376	; (adr r3, 800bc68 <atan+0x300>)
 800baee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baf2:	f7f4 fb6d 	bl	80001d0 <__aeabi_dsub>
 800baf6:	4632      	mov	r2, r6
 800baf8:	463b      	mov	r3, r7
 800bafa:	f7f4 fd21 	bl	8000540 <__aeabi_dmul>
 800bafe:	a35c      	add	r3, pc, #368	; (adr r3, 800bc70 <atan+0x308>)
 800bb00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb04:	f7f4 fb64 	bl	80001d0 <__aeabi_dsub>
 800bb08:	4632      	mov	r2, r6
 800bb0a:	463b      	mov	r3, r7
 800bb0c:	f7f4 fd18 	bl	8000540 <__aeabi_dmul>
 800bb10:	4602      	mov	r2, r0
 800bb12:	460b      	mov	r3, r1
 800bb14:	4640      	mov	r0, r8
 800bb16:	4649      	mov	r1, r9
 800bb18:	f7f4 fb5c 	bl	80001d4 <__adddf3>
 800bb1c:	4622      	mov	r2, r4
 800bb1e:	462b      	mov	r3, r5
 800bb20:	f7f4 fd0e 	bl	8000540 <__aeabi_dmul>
 800bb24:	f1ba 3fff 	cmp.w	sl, #4294967295
 800bb28:	4602      	mov	r2, r0
 800bb2a:	460b      	mov	r3, r1
 800bb2c:	d14b      	bne.n	800bbc6 <atan+0x25e>
 800bb2e:	4620      	mov	r0, r4
 800bb30:	4629      	mov	r1, r5
 800bb32:	f7f4 fb4d 	bl	80001d0 <__aeabi_dsub>
 800bb36:	e72c      	b.n	800b992 <atan+0x2a>
 800bb38:	ee10 0a10 	vmov	r0, s0
 800bb3c:	4b53      	ldr	r3, [pc, #332]	; (800bc8c <atan+0x324>)
 800bb3e:	2200      	movs	r2, #0
 800bb40:	4629      	mov	r1, r5
 800bb42:	f7f4 fb45 	bl	80001d0 <__aeabi_dsub>
 800bb46:	4b51      	ldr	r3, [pc, #324]	; (800bc8c <atan+0x324>)
 800bb48:	4606      	mov	r6, r0
 800bb4a:	460f      	mov	r7, r1
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	4620      	mov	r0, r4
 800bb50:	4629      	mov	r1, r5
 800bb52:	f7f4 fb3f 	bl	80001d4 <__adddf3>
 800bb56:	4602      	mov	r2, r0
 800bb58:	460b      	mov	r3, r1
 800bb5a:	4630      	mov	r0, r6
 800bb5c:	4639      	mov	r1, r7
 800bb5e:	f7f4 fe19 	bl	8000794 <__aeabi_ddiv>
 800bb62:	f04f 0a01 	mov.w	sl, #1
 800bb66:	4604      	mov	r4, r0
 800bb68:	460d      	mov	r5, r1
 800bb6a:	e764      	b.n	800ba36 <atan+0xce>
 800bb6c:	4b49      	ldr	r3, [pc, #292]	; (800bc94 <atan+0x32c>)
 800bb6e:	429e      	cmp	r6, r3
 800bb70:	da1d      	bge.n	800bbae <atan+0x246>
 800bb72:	ee10 0a10 	vmov	r0, s0
 800bb76:	4b48      	ldr	r3, [pc, #288]	; (800bc98 <atan+0x330>)
 800bb78:	2200      	movs	r2, #0
 800bb7a:	4629      	mov	r1, r5
 800bb7c:	f7f4 fb28 	bl	80001d0 <__aeabi_dsub>
 800bb80:	4b45      	ldr	r3, [pc, #276]	; (800bc98 <atan+0x330>)
 800bb82:	4606      	mov	r6, r0
 800bb84:	460f      	mov	r7, r1
 800bb86:	2200      	movs	r2, #0
 800bb88:	4620      	mov	r0, r4
 800bb8a:	4629      	mov	r1, r5
 800bb8c:	f7f4 fcd8 	bl	8000540 <__aeabi_dmul>
 800bb90:	4b3e      	ldr	r3, [pc, #248]	; (800bc8c <atan+0x324>)
 800bb92:	2200      	movs	r2, #0
 800bb94:	f7f4 fb1e 	bl	80001d4 <__adddf3>
 800bb98:	4602      	mov	r2, r0
 800bb9a:	460b      	mov	r3, r1
 800bb9c:	4630      	mov	r0, r6
 800bb9e:	4639      	mov	r1, r7
 800bba0:	f7f4 fdf8 	bl	8000794 <__aeabi_ddiv>
 800bba4:	f04f 0a02 	mov.w	sl, #2
 800bba8:	4604      	mov	r4, r0
 800bbaa:	460d      	mov	r5, r1
 800bbac:	e743      	b.n	800ba36 <atan+0xce>
 800bbae:	462b      	mov	r3, r5
 800bbb0:	ee10 2a10 	vmov	r2, s0
 800bbb4:	4939      	ldr	r1, [pc, #228]	; (800bc9c <atan+0x334>)
 800bbb6:	2000      	movs	r0, #0
 800bbb8:	f7f4 fdec 	bl	8000794 <__aeabi_ddiv>
 800bbbc:	f04f 0a03 	mov.w	sl, #3
 800bbc0:	4604      	mov	r4, r0
 800bbc2:	460d      	mov	r5, r1
 800bbc4:	e737      	b.n	800ba36 <atan+0xce>
 800bbc6:	4b36      	ldr	r3, [pc, #216]	; (800bca0 <atan+0x338>)
 800bbc8:	4e36      	ldr	r6, [pc, #216]	; (800bca4 <atan+0x33c>)
 800bbca:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800bbce:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800bbd2:	e9da 2300 	ldrd	r2, r3, [sl]
 800bbd6:	f7f4 fafb 	bl	80001d0 <__aeabi_dsub>
 800bbda:	4622      	mov	r2, r4
 800bbdc:	462b      	mov	r3, r5
 800bbde:	f7f4 faf7 	bl	80001d0 <__aeabi_dsub>
 800bbe2:	4602      	mov	r2, r0
 800bbe4:	460b      	mov	r3, r1
 800bbe6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800bbea:	f7f4 faf1 	bl	80001d0 <__aeabi_dsub>
 800bbee:	f1bb 0f00 	cmp.w	fp, #0
 800bbf2:	4604      	mov	r4, r0
 800bbf4:	460d      	mov	r5, r1
 800bbf6:	f6bf aed6 	bge.w	800b9a6 <atan+0x3e>
 800bbfa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bbfe:	461d      	mov	r5, r3
 800bc00:	e6d1      	b.n	800b9a6 <atan+0x3e>
 800bc02:	a51d      	add	r5, pc, #116	; (adr r5, 800bc78 <atan+0x310>)
 800bc04:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bc08:	e6cd      	b.n	800b9a6 <atan+0x3e>
 800bc0a:	bf00      	nop
 800bc0c:	f3af 8000 	nop.w
 800bc10:	54442d18 	.word	0x54442d18
 800bc14:	bff921fb 	.word	0xbff921fb
 800bc18:	8800759c 	.word	0x8800759c
 800bc1c:	7e37e43c 	.word	0x7e37e43c
 800bc20:	e322da11 	.word	0xe322da11
 800bc24:	3f90ad3a 	.word	0x3f90ad3a
 800bc28:	24760deb 	.word	0x24760deb
 800bc2c:	3fa97b4b 	.word	0x3fa97b4b
 800bc30:	a0d03d51 	.word	0xa0d03d51
 800bc34:	3fb10d66 	.word	0x3fb10d66
 800bc38:	c54c206e 	.word	0xc54c206e
 800bc3c:	3fb745cd 	.word	0x3fb745cd
 800bc40:	920083ff 	.word	0x920083ff
 800bc44:	3fc24924 	.word	0x3fc24924
 800bc48:	5555550d 	.word	0x5555550d
 800bc4c:	3fd55555 	.word	0x3fd55555
 800bc50:	2c6a6c2f 	.word	0x2c6a6c2f
 800bc54:	bfa2b444 	.word	0xbfa2b444
 800bc58:	52defd9a 	.word	0x52defd9a
 800bc5c:	3fadde2d 	.word	0x3fadde2d
 800bc60:	af749a6d 	.word	0xaf749a6d
 800bc64:	3fb3b0f2 	.word	0x3fb3b0f2
 800bc68:	fe231671 	.word	0xfe231671
 800bc6c:	3fbc71c6 	.word	0x3fbc71c6
 800bc70:	9998ebc4 	.word	0x9998ebc4
 800bc74:	3fc99999 	.word	0x3fc99999
 800bc78:	54442d18 	.word	0x54442d18
 800bc7c:	3ff921fb 	.word	0x3ff921fb
 800bc80:	440fffff 	.word	0x440fffff
 800bc84:	7ff00000 	.word	0x7ff00000
 800bc88:	3fdbffff 	.word	0x3fdbffff
 800bc8c:	3ff00000 	.word	0x3ff00000
 800bc90:	3ff2ffff 	.word	0x3ff2ffff
 800bc94:	40038000 	.word	0x40038000
 800bc98:	3ff80000 	.word	0x3ff80000
 800bc9c:	bff00000 	.word	0xbff00000
 800bca0:	0800dc50 	.word	0x0800dc50
 800bca4:	0800dc30 	.word	0x0800dc30

0800bca8 <fabs>:
 800bca8:	ec51 0b10 	vmov	r0, r1, d0
 800bcac:	ee10 2a10 	vmov	r2, s0
 800bcb0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bcb4:	ec43 2b10 	vmov	d0, r2, r3
 800bcb8:	4770      	bx	lr

0800bcba <finite>:
 800bcba:	b082      	sub	sp, #8
 800bcbc:	ed8d 0b00 	vstr	d0, [sp]
 800bcc0:	9801      	ldr	r0, [sp, #4]
 800bcc2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800bcc6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800bcca:	0fc0      	lsrs	r0, r0, #31
 800bccc:	b002      	add	sp, #8
 800bcce:	4770      	bx	lr

0800bcd0 <floor>:
 800bcd0:	ec51 0b10 	vmov	r0, r1, d0
 800bcd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcd8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800bcdc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800bce0:	2e13      	cmp	r6, #19
 800bce2:	ee10 5a10 	vmov	r5, s0
 800bce6:	ee10 8a10 	vmov	r8, s0
 800bcea:	460c      	mov	r4, r1
 800bcec:	dc32      	bgt.n	800bd54 <floor+0x84>
 800bcee:	2e00      	cmp	r6, #0
 800bcf0:	da14      	bge.n	800bd1c <floor+0x4c>
 800bcf2:	a333      	add	r3, pc, #204	; (adr r3, 800bdc0 <floor+0xf0>)
 800bcf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf8:	f7f4 fa6c 	bl	80001d4 <__adddf3>
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	2300      	movs	r3, #0
 800bd00:	f7f4 feae 	bl	8000a60 <__aeabi_dcmpgt>
 800bd04:	b138      	cbz	r0, 800bd16 <floor+0x46>
 800bd06:	2c00      	cmp	r4, #0
 800bd08:	da57      	bge.n	800bdba <floor+0xea>
 800bd0a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800bd0e:	431d      	orrs	r5, r3
 800bd10:	d001      	beq.n	800bd16 <floor+0x46>
 800bd12:	4c2d      	ldr	r4, [pc, #180]	; (800bdc8 <floor+0xf8>)
 800bd14:	2500      	movs	r5, #0
 800bd16:	4621      	mov	r1, r4
 800bd18:	4628      	mov	r0, r5
 800bd1a:	e025      	b.n	800bd68 <floor+0x98>
 800bd1c:	4f2b      	ldr	r7, [pc, #172]	; (800bdcc <floor+0xfc>)
 800bd1e:	4137      	asrs	r7, r6
 800bd20:	ea01 0307 	and.w	r3, r1, r7
 800bd24:	4303      	orrs	r3, r0
 800bd26:	d01f      	beq.n	800bd68 <floor+0x98>
 800bd28:	a325      	add	r3, pc, #148	; (adr r3, 800bdc0 <floor+0xf0>)
 800bd2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd2e:	f7f4 fa51 	bl	80001d4 <__adddf3>
 800bd32:	2200      	movs	r2, #0
 800bd34:	2300      	movs	r3, #0
 800bd36:	f7f4 fe93 	bl	8000a60 <__aeabi_dcmpgt>
 800bd3a:	2800      	cmp	r0, #0
 800bd3c:	d0eb      	beq.n	800bd16 <floor+0x46>
 800bd3e:	2c00      	cmp	r4, #0
 800bd40:	bfbe      	ittt	lt
 800bd42:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800bd46:	fa43 f606 	asrlt.w	r6, r3, r6
 800bd4a:	19a4      	addlt	r4, r4, r6
 800bd4c:	ea24 0407 	bic.w	r4, r4, r7
 800bd50:	2500      	movs	r5, #0
 800bd52:	e7e0      	b.n	800bd16 <floor+0x46>
 800bd54:	2e33      	cmp	r6, #51	; 0x33
 800bd56:	dd0b      	ble.n	800bd70 <floor+0xa0>
 800bd58:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800bd5c:	d104      	bne.n	800bd68 <floor+0x98>
 800bd5e:	ee10 2a10 	vmov	r2, s0
 800bd62:	460b      	mov	r3, r1
 800bd64:	f7f4 fa36 	bl	80001d4 <__adddf3>
 800bd68:	ec41 0b10 	vmov	d0, r0, r1
 800bd6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd70:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800bd74:	f04f 33ff 	mov.w	r3, #4294967295
 800bd78:	fa23 f707 	lsr.w	r7, r3, r7
 800bd7c:	4207      	tst	r7, r0
 800bd7e:	d0f3      	beq.n	800bd68 <floor+0x98>
 800bd80:	a30f      	add	r3, pc, #60	; (adr r3, 800bdc0 <floor+0xf0>)
 800bd82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd86:	f7f4 fa25 	bl	80001d4 <__adddf3>
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	f7f4 fe67 	bl	8000a60 <__aeabi_dcmpgt>
 800bd92:	2800      	cmp	r0, #0
 800bd94:	d0bf      	beq.n	800bd16 <floor+0x46>
 800bd96:	2c00      	cmp	r4, #0
 800bd98:	da02      	bge.n	800bda0 <floor+0xd0>
 800bd9a:	2e14      	cmp	r6, #20
 800bd9c:	d103      	bne.n	800bda6 <floor+0xd6>
 800bd9e:	3401      	adds	r4, #1
 800bda0:	ea25 0507 	bic.w	r5, r5, r7
 800bda4:	e7b7      	b.n	800bd16 <floor+0x46>
 800bda6:	2301      	movs	r3, #1
 800bda8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800bdac:	fa03 f606 	lsl.w	r6, r3, r6
 800bdb0:	4435      	add	r5, r6
 800bdb2:	4545      	cmp	r5, r8
 800bdb4:	bf38      	it	cc
 800bdb6:	18e4      	addcc	r4, r4, r3
 800bdb8:	e7f2      	b.n	800bda0 <floor+0xd0>
 800bdba:	2500      	movs	r5, #0
 800bdbc:	462c      	mov	r4, r5
 800bdbe:	e7aa      	b.n	800bd16 <floor+0x46>
 800bdc0:	8800759c 	.word	0x8800759c
 800bdc4:	7e37e43c 	.word	0x7e37e43c
 800bdc8:	bff00000 	.word	0xbff00000
 800bdcc:	000fffff 	.word	0x000fffff

0800bdd0 <scalbn>:
 800bdd0:	b570      	push	{r4, r5, r6, lr}
 800bdd2:	ec55 4b10 	vmov	r4, r5, d0
 800bdd6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800bdda:	4606      	mov	r6, r0
 800bddc:	462b      	mov	r3, r5
 800bdde:	b99a      	cbnz	r2, 800be08 <scalbn+0x38>
 800bde0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bde4:	4323      	orrs	r3, r4
 800bde6:	d036      	beq.n	800be56 <scalbn+0x86>
 800bde8:	4b39      	ldr	r3, [pc, #228]	; (800bed0 <scalbn+0x100>)
 800bdea:	4629      	mov	r1, r5
 800bdec:	ee10 0a10 	vmov	r0, s0
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	f7f4 fba5 	bl	8000540 <__aeabi_dmul>
 800bdf6:	4b37      	ldr	r3, [pc, #220]	; (800bed4 <scalbn+0x104>)
 800bdf8:	429e      	cmp	r6, r3
 800bdfa:	4604      	mov	r4, r0
 800bdfc:	460d      	mov	r5, r1
 800bdfe:	da10      	bge.n	800be22 <scalbn+0x52>
 800be00:	a32b      	add	r3, pc, #172	; (adr r3, 800beb0 <scalbn+0xe0>)
 800be02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be06:	e03a      	b.n	800be7e <scalbn+0xae>
 800be08:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800be0c:	428a      	cmp	r2, r1
 800be0e:	d10c      	bne.n	800be2a <scalbn+0x5a>
 800be10:	ee10 2a10 	vmov	r2, s0
 800be14:	4620      	mov	r0, r4
 800be16:	4629      	mov	r1, r5
 800be18:	f7f4 f9dc 	bl	80001d4 <__adddf3>
 800be1c:	4604      	mov	r4, r0
 800be1e:	460d      	mov	r5, r1
 800be20:	e019      	b.n	800be56 <scalbn+0x86>
 800be22:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800be26:	460b      	mov	r3, r1
 800be28:	3a36      	subs	r2, #54	; 0x36
 800be2a:	4432      	add	r2, r6
 800be2c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800be30:	428a      	cmp	r2, r1
 800be32:	dd08      	ble.n	800be46 <scalbn+0x76>
 800be34:	2d00      	cmp	r5, #0
 800be36:	a120      	add	r1, pc, #128	; (adr r1, 800beb8 <scalbn+0xe8>)
 800be38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be3c:	da1c      	bge.n	800be78 <scalbn+0xa8>
 800be3e:	a120      	add	r1, pc, #128	; (adr r1, 800bec0 <scalbn+0xf0>)
 800be40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be44:	e018      	b.n	800be78 <scalbn+0xa8>
 800be46:	2a00      	cmp	r2, #0
 800be48:	dd08      	ble.n	800be5c <scalbn+0x8c>
 800be4a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800be4e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800be52:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800be56:	ec45 4b10 	vmov	d0, r4, r5
 800be5a:	bd70      	pop	{r4, r5, r6, pc}
 800be5c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800be60:	da19      	bge.n	800be96 <scalbn+0xc6>
 800be62:	f24c 3350 	movw	r3, #50000	; 0xc350
 800be66:	429e      	cmp	r6, r3
 800be68:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800be6c:	dd0a      	ble.n	800be84 <scalbn+0xb4>
 800be6e:	a112      	add	r1, pc, #72	; (adr r1, 800beb8 <scalbn+0xe8>)
 800be70:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d1e2      	bne.n	800be3e <scalbn+0x6e>
 800be78:	a30f      	add	r3, pc, #60	; (adr r3, 800beb8 <scalbn+0xe8>)
 800be7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be7e:	f7f4 fb5f 	bl	8000540 <__aeabi_dmul>
 800be82:	e7cb      	b.n	800be1c <scalbn+0x4c>
 800be84:	a10a      	add	r1, pc, #40	; (adr r1, 800beb0 <scalbn+0xe0>)
 800be86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d0b8      	beq.n	800be00 <scalbn+0x30>
 800be8e:	a10e      	add	r1, pc, #56	; (adr r1, 800bec8 <scalbn+0xf8>)
 800be90:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be94:	e7b4      	b.n	800be00 <scalbn+0x30>
 800be96:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800be9a:	3236      	adds	r2, #54	; 0x36
 800be9c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bea0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800bea4:	4620      	mov	r0, r4
 800bea6:	4b0c      	ldr	r3, [pc, #48]	; (800bed8 <scalbn+0x108>)
 800bea8:	2200      	movs	r2, #0
 800beaa:	e7e8      	b.n	800be7e <scalbn+0xae>
 800beac:	f3af 8000 	nop.w
 800beb0:	c2f8f359 	.word	0xc2f8f359
 800beb4:	01a56e1f 	.word	0x01a56e1f
 800beb8:	8800759c 	.word	0x8800759c
 800bebc:	7e37e43c 	.word	0x7e37e43c
 800bec0:	8800759c 	.word	0x8800759c
 800bec4:	fe37e43c 	.word	0xfe37e43c
 800bec8:	c2f8f359 	.word	0xc2f8f359
 800becc:	81a56e1f 	.word	0x81a56e1f
 800bed0:	43500000 	.word	0x43500000
 800bed4:	ffff3cb0 	.word	0xffff3cb0
 800bed8:	3c900000 	.word	0x3c900000

0800bedc <_init>:
 800bedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bede:	bf00      	nop
 800bee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bee2:	bc08      	pop	{r3}
 800bee4:	469e      	mov	lr, r3
 800bee6:	4770      	bx	lr

0800bee8 <_fini>:
 800bee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beea:	bf00      	nop
 800beec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800beee:	bc08      	pop	{r3}
 800bef0:	469e      	mov	lr, r3
 800bef2:	4770      	bx	lr
