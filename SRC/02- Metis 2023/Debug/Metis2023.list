
Metis2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009684  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a28  08009810  08009810  00019810  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a238  0800a238  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a238  0800a238  0001a238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a240  0800a240  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a240  0800a240  0001a240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a244  0800a244  0001a244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800a248  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
 10 .bss          000006b8  2000008c  2000008c  0002008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000744  20000744  0002008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001206b  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000225c  00000000  00000000  00032127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010d0  00000000  00000000  00034388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001020  00000000  00000000  00035458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022cd5  00000000  00000000  00036478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014486  00000000  00000000  0005914d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da110  00000000  00000000  0006d5d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001476e3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ffc  00000000  00000000  00147734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000008c 	.word	0x2000008c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080097f4 	.word	0x080097f4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000090 	.word	0x20000090
 80001c4:	080097f4 	.word	0x080097f4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_uldivmod>:
 8000af0:	b953      	cbnz	r3, 8000b08 <__aeabi_uldivmod+0x18>
 8000af2:	b94a      	cbnz	r2, 8000b08 <__aeabi_uldivmod+0x18>
 8000af4:	2900      	cmp	r1, #0
 8000af6:	bf08      	it	eq
 8000af8:	2800      	cmpeq	r0, #0
 8000afa:	bf1c      	itt	ne
 8000afc:	f04f 31ff 	movne.w	r1, #4294967295
 8000b00:	f04f 30ff 	movne.w	r0, #4294967295
 8000b04:	f000 b974 	b.w	8000df0 <__aeabi_idiv0>
 8000b08:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b10:	f000 f806 	bl	8000b20 <__udivmoddi4>
 8000b14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b1c:	b004      	add	sp, #16
 8000b1e:	4770      	bx	lr

08000b20 <__udivmoddi4>:
 8000b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b24:	9d08      	ldr	r5, [sp, #32]
 8000b26:	4604      	mov	r4, r0
 8000b28:	468e      	mov	lr, r1
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d14d      	bne.n	8000bca <__udivmoddi4+0xaa>
 8000b2e:	428a      	cmp	r2, r1
 8000b30:	4694      	mov	ip, r2
 8000b32:	d969      	bls.n	8000c08 <__udivmoddi4+0xe8>
 8000b34:	fab2 f282 	clz	r2, r2
 8000b38:	b152      	cbz	r2, 8000b50 <__udivmoddi4+0x30>
 8000b3a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b3e:	f1c2 0120 	rsb	r1, r2, #32
 8000b42:	fa20 f101 	lsr.w	r1, r0, r1
 8000b46:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b4a:	ea41 0e03 	orr.w	lr, r1, r3
 8000b4e:	4094      	lsls	r4, r2
 8000b50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b54:	0c21      	lsrs	r1, r4, #16
 8000b56:	fbbe f6f8 	udiv	r6, lr, r8
 8000b5a:	fa1f f78c 	uxth.w	r7, ip
 8000b5e:	fb08 e316 	mls	r3, r8, r6, lr
 8000b62:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b66:	fb06 f107 	mul.w	r1, r6, r7
 8000b6a:	4299      	cmp	r1, r3
 8000b6c:	d90a      	bls.n	8000b84 <__udivmoddi4+0x64>
 8000b6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b76:	f080 811f 	bcs.w	8000db8 <__udivmoddi4+0x298>
 8000b7a:	4299      	cmp	r1, r3
 8000b7c:	f240 811c 	bls.w	8000db8 <__udivmoddi4+0x298>
 8000b80:	3e02      	subs	r6, #2
 8000b82:	4463      	add	r3, ip
 8000b84:	1a5b      	subs	r3, r3, r1
 8000b86:	b2a4      	uxth	r4, r4
 8000b88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000b90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b94:	fb00 f707 	mul.w	r7, r0, r7
 8000b98:	42a7      	cmp	r7, r4
 8000b9a:	d90a      	bls.n	8000bb2 <__udivmoddi4+0x92>
 8000b9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ba0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ba4:	f080 810a 	bcs.w	8000dbc <__udivmoddi4+0x29c>
 8000ba8:	42a7      	cmp	r7, r4
 8000baa:	f240 8107 	bls.w	8000dbc <__udivmoddi4+0x29c>
 8000bae:	4464      	add	r4, ip
 8000bb0:	3802      	subs	r0, #2
 8000bb2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bb6:	1be4      	subs	r4, r4, r7
 8000bb8:	2600      	movs	r6, #0
 8000bba:	b11d      	cbz	r5, 8000bc4 <__udivmoddi4+0xa4>
 8000bbc:	40d4      	lsrs	r4, r2
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000bc4:	4631      	mov	r1, r6
 8000bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bca:	428b      	cmp	r3, r1
 8000bcc:	d909      	bls.n	8000be2 <__udivmoddi4+0xc2>
 8000bce:	2d00      	cmp	r5, #0
 8000bd0:	f000 80ef 	beq.w	8000db2 <__udivmoddi4+0x292>
 8000bd4:	2600      	movs	r6, #0
 8000bd6:	e9c5 0100 	strd	r0, r1, [r5]
 8000bda:	4630      	mov	r0, r6
 8000bdc:	4631      	mov	r1, r6
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	fab3 f683 	clz	r6, r3
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	d14a      	bne.n	8000c80 <__udivmoddi4+0x160>
 8000bea:	428b      	cmp	r3, r1
 8000bec:	d302      	bcc.n	8000bf4 <__udivmoddi4+0xd4>
 8000bee:	4282      	cmp	r2, r0
 8000bf0:	f200 80f9 	bhi.w	8000de6 <__udivmoddi4+0x2c6>
 8000bf4:	1a84      	subs	r4, r0, r2
 8000bf6:	eb61 0303 	sbc.w	r3, r1, r3
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	469e      	mov	lr, r3
 8000bfe:	2d00      	cmp	r5, #0
 8000c00:	d0e0      	beq.n	8000bc4 <__udivmoddi4+0xa4>
 8000c02:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c06:	e7dd      	b.n	8000bc4 <__udivmoddi4+0xa4>
 8000c08:	b902      	cbnz	r2, 8000c0c <__udivmoddi4+0xec>
 8000c0a:	deff      	udf	#255	; 0xff
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	2a00      	cmp	r2, #0
 8000c12:	f040 8092 	bne.w	8000d3a <__udivmoddi4+0x21a>
 8000c16:	eba1 010c 	sub.w	r1, r1, ip
 8000c1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1e:	fa1f fe8c 	uxth.w	lr, ip
 8000c22:	2601      	movs	r6, #1
 8000c24:	0c20      	lsrs	r0, r4, #16
 8000c26:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c2a:	fb07 1113 	mls	r1, r7, r3, r1
 8000c2e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c32:	fb0e f003 	mul.w	r0, lr, r3
 8000c36:	4288      	cmp	r0, r1
 8000c38:	d908      	bls.n	8000c4c <__udivmoddi4+0x12c>
 8000c3a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c3e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c42:	d202      	bcs.n	8000c4a <__udivmoddi4+0x12a>
 8000c44:	4288      	cmp	r0, r1
 8000c46:	f200 80cb 	bhi.w	8000de0 <__udivmoddi4+0x2c0>
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	1a09      	subs	r1, r1, r0
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c54:	fb07 1110 	mls	r1, r7, r0, r1
 8000c58:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000c60:	45a6      	cmp	lr, r4
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x156>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6c:	d202      	bcs.n	8000c74 <__udivmoddi4+0x154>
 8000c6e:	45a6      	cmp	lr, r4
 8000c70:	f200 80bb 	bhi.w	8000dea <__udivmoddi4+0x2ca>
 8000c74:	4608      	mov	r0, r1
 8000c76:	eba4 040e 	sub.w	r4, r4, lr
 8000c7a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c7e:	e79c      	b.n	8000bba <__udivmoddi4+0x9a>
 8000c80:	f1c6 0720 	rsb	r7, r6, #32
 8000c84:	40b3      	lsls	r3, r6
 8000c86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c8e:	fa20 f407 	lsr.w	r4, r0, r7
 8000c92:	fa01 f306 	lsl.w	r3, r1, r6
 8000c96:	431c      	orrs	r4, r3
 8000c98:	40f9      	lsrs	r1, r7
 8000c9a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c9e:	fa00 f306 	lsl.w	r3, r0, r6
 8000ca2:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ca6:	0c20      	lsrs	r0, r4, #16
 8000ca8:	fa1f fe8c 	uxth.w	lr, ip
 8000cac:	fb09 1118 	mls	r1, r9, r8, r1
 8000cb0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cb4:	fb08 f00e 	mul.w	r0, r8, lr
 8000cb8:	4288      	cmp	r0, r1
 8000cba:	fa02 f206 	lsl.w	r2, r2, r6
 8000cbe:	d90b      	bls.n	8000cd8 <__udivmoddi4+0x1b8>
 8000cc0:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cc8:	f080 8088 	bcs.w	8000ddc <__udivmoddi4+0x2bc>
 8000ccc:	4288      	cmp	r0, r1
 8000cce:	f240 8085 	bls.w	8000ddc <__udivmoddi4+0x2bc>
 8000cd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000cd6:	4461      	add	r1, ip
 8000cd8:	1a09      	subs	r1, r1, r0
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ce0:	fb09 1110 	mls	r1, r9, r0, r1
 8000ce4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	458e      	cmp	lr, r1
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x1e2>
 8000cf0:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cf8:	d26c      	bcs.n	8000dd4 <__udivmoddi4+0x2b4>
 8000cfa:	458e      	cmp	lr, r1
 8000cfc:	d96a      	bls.n	8000dd4 <__udivmoddi4+0x2b4>
 8000cfe:	3802      	subs	r0, #2
 8000d00:	4461      	add	r1, ip
 8000d02:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d06:	fba0 9402 	umull	r9, r4, r0, r2
 8000d0a:	eba1 010e 	sub.w	r1, r1, lr
 8000d0e:	42a1      	cmp	r1, r4
 8000d10:	46c8      	mov	r8, r9
 8000d12:	46a6      	mov	lr, r4
 8000d14:	d356      	bcc.n	8000dc4 <__udivmoddi4+0x2a4>
 8000d16:	d053      	beq.n	8000dc0 <__udivmoddi4+0x2a0>
 8000d18:	b15d      	cbz	r5, 8000d32 <__udivmoddi4+0x212>
 8000d1a:	ebb3 0208 	subs.w	r2, r3, r8
 8000d1e:	eb61 010e 	sbc.w	r1, r1, lr
 8000d22:	fa01 f707 	lsl.w	r7, r1, r7
 8000d26:	fa22 f306 	lsr.w	r3, r2, r6
 8000d2a:	40f1      	lsrs	r1, r6
 8000d2c:	431f      	orrs	r7, r3
 8000d2e:	e9c5 7100 	strd	r7, r1, [r5]
 8000d32:	2600      	movs	r6, #0
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	f1c2 0320 	rsb	r3, r2, #32
 8000d3e:	40d8      	lsrs	r0, r3
 8000d40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d44:	fa21 f303 	lsr.w	r3, r1, r3
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4301      	orrs	r1, r0
 8000d4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d50:	fa1f fe8c 	uxth.w	lr, ip
 8000d54:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d58:	fb07 3610 	mls	r6, r7, r0, r3
 8000d5c:	0c0b      	lsrs	r3, r1, #16
 8000d5e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d62:	fb00 f60e 	mul.w	r6, r0, lr
 8000d66:	429e      	cmp	r6, r3
 8000d68:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6c:	d908      	bls.n	8000d80 <__udivmoddi4+0x260>
 8000d6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d76:	d22f      	bcs.n	8000dd8 <__udivmoddi4+0x2b8>
 8000d78:	429e      	cmp	r6, r3
 8000d7a:	d92d      	bls.n	8000dd8 <__udivmoddi4+0x2b8>
 8000d7c:	3802      	subs	r0, #2
 8000d7e:	4463      	add	r3, ip
 8000d80:	1b9b      	subs	r3, r3, r6
 8000d82:	b289      	uxth	r1, r1
 8000d84:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d88:	fb07 3316 	mls	r3, r7, r6, r3
 8000d8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d90:	fb06 f30e 	mul.w	r3, r6, lr
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x28a>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000da0:	d216      	bcs.n	8000dd0 <__udivmoddi4+0x2b0>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d914      	bls.n	8000dd0 <__udivmoddi4+0x2b0>
 8000da6:	3e02      	subs	r6, #2
 8000da8:	4461      	add	r1, ip
 8000daa:	1ac9      	subs	r1, r1, r3
 8000dac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000db0:	e738      	b.n	8000c24 <__udivmoddi4+0x104>
 8000db2:	462e      	mov	r6, r5
 8000db4:	4628      	mov	r0, r5
 8000db6:	e705      	b.n	8000bc4 <__udivmoddi4+0xa4>
 8000db8:	4606      	mov	r6, r0
 8000dba:	e6e3      	b.n	8000b84 <__udivmoddi4+0x64>
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	e6f8      	b.n	8000bb2 <__udivmoddi4+0x92>
 8000dc0:	454b      	cmp	r3, r9
 8000dc2:	d2a9      	bcs.n	8000d18 <__udivmoddi4+0x1f8>
 8000dc4:	ebb9 0802 	subs.w	r8, r9, r2
 8000dc8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000dcc:	3801      	subs	r0, #1
 8000dce:	e7a3      	b.n	8000d18 <__udivmoddi4+0x1f8>
 8000dd0:	4646      	mov	r6, r8
 8000dd2:	e7ea      	b.n	8000daa <__udivmoddi4+0x28a>
 8000dd4:	4620      	mov	r0, r4
 8000dd6:	e794      	b.n	8000d02 <__udivmoddi4+0x1e2>
 8000dd8:	4640      	mov	r0, r8
 8000dda:	e7d1      	b.n	8000d80 <__udivmoddi4+0x260>
 8000ddc:	46d0      	mov	r8, sl
 8000dde:	e77b      	b.n	8000cd8 <__udivmoddi4+0x1b8>
 8000de0:	3b02      	subs	r3, #2
 8000de2:	4461      	add	r1, ip
 8000de4:	e732      	b.n	8000c4c <__udivmoddi4+0x12c>
 8000de6:	4630      	mov	r0, r6
 8000de8:	e709      	b.n	8000bfe <__udivmoddi4+0xde>
 8000dea:	4464      	add	r4, ip
 8000dec:	3802      	subs	r0, #2
 8000dee:	e742      	b.n	8000c76 <__udivmoddi4+0x156>

08000df0 <__aeabi_idiv0>:
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop

08000df4 <readGY>:
	HAL_Delay(500);
	HAL_UART_Transmit(&huart2, GY_A5, 1, 100);
	HAL_UART_Transmit(&huart2, GY_55, 1, 100);
	HAL_Delay(500);
}
void readGY(){
 8000df4:	b5b0      	push	{r4, r5, r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, GY_A5, 1, 100);
 8000dfa:	2364      	movs	r3, #100	; 0x64
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	496e      	ldr	r1, [pc, #440]	; (8000fb8 <readGY+0x1c4>)
 8000e00:	486e      	ldr	r0, [pc, #440]	; (8000fbc <readGY+0x1c8>)
 8000e02:	f005 fee4 	bl	8006bce <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, GY_51, 1, 100);
 8000e06:	2364      	movs	r3, #100	; 0x64
 8000e08:	2201      	movs	r2, #1
 8000e0a:	496d      	ldr	r1, [pc, #436]	; (8000fc0 <readGY+0x1cc>)
 8000e0c:	486b      	ldr	r0, [pc, #428]	; (8000fbc <readGY+0x1c8>)
 8000e0e:	f005 fede 	bl	8006bce <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, Rx2_Buff, RX2_Size, 100);
 8000e12:	2364      	movs	r3, #100	; 0x64
 8000e14:	2208      	movs	r2, #8
 8000e16:	496b      	ldr	r1, [pc, #428]	; (8000fc4 <readGY+0x1d0>)
 8000e18:	4868      	ldr	r0, [pc, #416]	; (8000fbc <readGY+0x1c8>)
 8000e1a:	f005 ff6a 	bl	8006cf2 <HAL_UART_Receive>
	for(int i=0; i<RX2_Size; i++){
 8000e1e:	2300      	movs	r3, #0
 8000e20:	607b      	str	r3, [r7, #4]
 8000e22:	e0bf      	b.n	8000fa4 <readGY+0x1b0>
		if(Rx2_Buff[i] == 0xAA){
 8000e24:	4a67      	ldr	r2, [pc, #412]	; (8000fc4 <readGY+0x1d0>)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4413      	add	r3, r2
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2baa      	cmp	r3, #170	; 0xaa
 8000e2e:	f040 80b6 	bne.w	8000f9e <readGY+0x1aa>
			Heading = (int16_t)(Rx2_Buff[(i+1)%8]<<8 | Rx2_Buff[(i+2)%8])/100.00 + rotation_fix;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	3301      	adds	r3, #1
 8000e36:	425a      	negs	r2, r3
 8000e38:	f003 0307 	and.w	r3, r3, #7
 8000e3c:	f002 0207 	and.w	r2, r2, #7
 8000e40:	bf58      	it	pl
 8000e42:	4253      	negpl	r3, r2
 8000e44:	4a5f      	ldr	r2, [pc, #380]	; (8000fc4 <readGY+0x1d0>)
 8000e46:	5cd3      	ldrb	r3, [r2, r3]
 8000e48:	021b      	lsls	r3, r3, #8
 8000e4a:	b21a      	sxth	r2, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3302      	adds	r3, #2
 8000e50:	4259      	negs	r1, r3
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	f001 0107 	and.w	r1, r1, #7
 8000e5a:	bf58      	it	pl
 8000e5c:	424b      	negpl	r3, r1
 8000e5e:	4959      	ldr	r1, [pc, #356]	; (8000fc4 <readGY+0x1d0>)
 8000e60:	5ccb      	ldrb	r3, [r1, r3]
 8000e62:	b21b      	sxth	r3, r3
 8000e64:	4313      	orrs	r3, r2
 8000e66:	b21b      	sxth	r3, r3
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff faff 	bl	800046c <__aeabi_i2d>
 8000e6e:	f04f 0200 	mov.w	r2, #0
 8000e72:	4b55      	ldr	r3, [pc, #340]	; (8000fc8 <readGY+0x1d4>)
 8000e74:	f7ff fc8e 	bl	8000794 <__aeabi_ddiv>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	4614      	mov	r4, r2
 8000e7e:	461d      	mov	r5, r3
 8000e80:	4b52      	ldr	r3, [pc, #328]	; (8000fcc <readGY+0x1d8>)
 8000e82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff faf0 	bl	800046c <__aeabi_i2d>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	460b      	mov	r3, r1
 8000e90:	4620      	mov	r0, r4
 8000e92:	4629      	mov	r1, r5
 8000e94:	f7ff f99e 	bl	80001d4 <__adddf3>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	f7ff fdfe 	bl	8000aa0 <__aeabi_d2iz>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	b21a      	sxth	r2, r3
 8000ea8:	4b49      	ldr	r3, [pc, #292]	; (8000fd0 <readGY+0x1dc>)
 8000eaa:	801a      	strh	r2, [r3, #0]
			Pitch = (int16_t)(Rx2_Buff[(i+3)%8]<<8 | Rx2_Buff[(i+4)%8])/100.00;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3303      	adds	r3, #3
 8000eb0:	425a      	negs	r2, r3
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	f002 0207 	and.w	r2, r2, #7
 8000eba:	bf58      	it	pl
 8000ebc:	4253      	negpl	r3, r2
 8000ebe:	4a41      	ldr	r2, [pc, #260]	; (8000fc4 <readGY+0x1d0>)
 8000ec0:	5cd3      	ldrb	r3, [r2, r3]
 8000ec2:	021b      	lsls	r3, r3, #8
 8000ec4:	b21a      	sxth	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	3304      	adds	r3, #4
 8000eca:	4259      	negs	r1, r3
 8000ecc:	f003 0307 	and.w	r3, r3, #7
 8000ed0:	f001 0107 	and.w	r1, r1, #7
 8000ed4:	bf58      	it	pl
 8000ed6:	424b      	negpl	r3, r1
 8000ed8:	493a      	ldr	r1, [pc, #232]	; (8000fc4 <readGY+0x1d0>)
 8000eda:	5ccb      	ldrb	r3, [r1, r3]
 8000edc:	b21b      	sxth	r3, r3
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	b21b      	sxth	r3, r3
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fac2 	bl	800046c <__aeabi_i2d>
 8000ee8:	f04f 0200 	mov.w	r2, #0
 8000eec:	4b36      	ldr	r3, [pc, #216]	; (8000fc8 <readGY+0x1d4>)
 8000eee:	f7ff fc51 	bl	8000794 <__aeabi_ddiv>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	4610      	mov	r0, r2
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f7ff fdd1 	bl	8000aa0 <__aeabi_d2iz>
 8000efe:	4603      	mov	r3, r0
 8000f00:	b21a      	sxth	r2, r3
 8000f02:	4b34      	ldr	r3, [pc, #208]	; (8000fd4 <readGY+0x1e0>)
 8000f04:	801a      	strh	r2, [r3, #0]
			Roll = (int16_t)(Rx2_Buff[(i+5)%8]<<8 | Rx2_Buff[(i+6)%8])/100.00;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	3305      	adds	r3, #5
 8000f0a:	425a      	negs	r2, r3
 8000f0c:	f003 0307 	and.w	r3, r3, #7
 8000f10:	f002 0207 	and.w	r2, r2, #7
 8000f14:	bf58      	it	pl
 8000f16:	4253      	negpl	r3, r2
 8000f18:	4a2a      	ldr	r2, [pc, #168]	; (8000fc4 <readGY+0x1d0>)
 8000f1a:	5cd3      	ldrb	r3, [r2, r3]
 8000f1c:	021b      	lsls	r3, r3, #8
 8000f1e:	b21a      	sxth	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3306      	adds	r3, #6
 8000f24:	4259      	negs	r1, r3
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	f001 0107 	and.w	r1, r1, #7
 8000f2e:	bf58      	it	pl
 8000f30:	424b      	negpl	r3, r1
 8000f32:	4924      	ldr	r1, [pc, #144]	; (8000fc4 <readGY+0x1d0>)
 8000f34:	5ccb      	ldrb	r3, [r1, r3]
 8000f36:	b21b      	sxth	r3, r3
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	b21b      	sxth	r3, r3
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fa95 	bl	800046c <__aeabi_i2d>
 8000f42:	f04f 0200 	mov.w	r2, #0
 8000f46:	4b20      	ldr	r3, [pc, #128]	; (8000fc8 <readGY+0x1d4>)
 8000f48:	f7ff fc24 	bl	8000794 <__aeabi_ddiv>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	460b      	mov	r3, r1
 8000f50:	4610      	mov	r0, r2
 8000f52:	4619      	mov	r1, r3
 8000f54:	f7ff fda4 	bl	8000aa0 <__aeabi_d2iz>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	b21a      	sxth	r2, r3
 8000f5c:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <readGY+0x1e4>)
 8000f5e:	801a      	strh	r2, [r3, #0]
			if(Heading > 180) Heading -= 360;
 8000f60:	4b1b      	ldr	r3, [pc, #108]	; (8000fd0 <readGY+0x1dc>)
 8000f62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f66:	2bb4      	cmp	r3, #180	; 0xb4
 8000f68:	dd09      	ble.n	8000f7e <readGY+0x18a>
 8000f6a:	4b19      	ldr	r3, [pc, #100]	; (8000fd0 <readGY+0x1dc>)
 8000f6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	b21a      	sxth	r2, r3
 8000f7a:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <readGY+0x1dc>)
 8000f7c:	801a      	strh	r2, [r3, #0]
			if(Heading <-180) Heading += 360;
 8000f7e:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <readGY+0x1dc>)
 8000f80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f84:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 8000f88:	da09      	bge.n	8000f9e <readGY+0x1aa>
 8000f8a:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <readGY+0x1dc>)
 8000f8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	b21a      	sxth	r2, r3
 8000f9a:	4b0d      	ldr	r3, [pc, #52]	; (8000fd0 <readGY+0x1dc>)
 8000f9c:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<RX2_Size; i++){
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2b07      	cmp	r3, #7
 8000fa8:	f77f af3c 	ble.w	8000e24 <readGY+0x30>

		}
	}
}
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bdb0      	pop	{r4, r5, r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000014 	.word	0x20000014
 8000fbc:	200001e0 	.word	0x200001e0
 8000fc0:	20000018 	.word	0x20000018
 8000fc4:	2000028c 	.word	0x2000028c
 8000fc8:	40590000 	.word	0x40590000
 8000fcc:	2000029a 	.word	0x2000029a
 8000fd0:	20000298 	.word	0x20000298
 8000fd4:	20000294 	.word	0x20000294
 8000fd8:	20000296 	.word	0x20000296

08000fdc <print_num>:
void print_num(char* label, int num, int x, int y){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
 8000fe8:	603b      	str	r3, [r7, #0]
	SSD1306_GotoXY(x, y);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	683a      	ldr	r2, [r7, #0]
 8000ff0:	b292      	uxth	r2, r2
 8000ff2:	4611      	mov	r1, r2
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f002 f8e1 	bl	80031bc <SSD1306_GotoXY>
	SSD1306_Puts(label, &Font_7x10, SSD1306_COLOR_WHITE);
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	496d      	ldr	r1, [pc, #436]	; (80011b4 <print_num+0x1d8>)
 8000ffe:	68f8      	ldr	r0, [r7, #12]
 8001000:	f002 f972 	bl	80032e8 <SSD1306_Puts>
	if(num >= 0){
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	2b00      	cmp	r3, #0
 8001008:	db67      	blt.n	80010da <print_num+0xfe>
		SSD1306_Putc('+', &Font_7x10, SSD1306_COLOR_WHITE);
 800100a:	2201      	movs	r2, #1
 800100c:	4969      	ldr	r1, [pc, #420]	; (80011b4 <print_num+0x1d8>)
 800100e:	202b      	movs	r0, #43	; 0x2b
 8001010:	f002 f8ea 	bl	80031e8 <SSD1306_Putc>
		SSD1306_Putc((num/1000)%10+'0', &Font_7x10, SSD1306_COLOR_WHITE);
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	4a68      	ldr	r2, [pc, #416]	; (80011b8 <print_num+0x1dc>)
 8001018:	fb82 1203 	smull	r1, r2, r2, r3
 800101c:	1192      	asrs	r2, r2, #6
 800101e:	17db      	asrs	r3, r3, #31
 8001020:	1ad2      	subs	r2, r2, r3
 8001022:	4b66      	ldr	r3, [pc, #408]	; (80011bc <print_num+0x1e0>)
 8001024:	fb83 1302 	smull	r1, r3, r3, r2
 8001028:	1099      	asrs	r1, r3, #2
 800102a:	17d3      	asrs	r3, r2, #31
 800102c:	1ac9      	subs	r1, r1, r3
 800102e:	460b      	mov	r3, r1
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	440b      	add	r3, r1
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	1ad1      	subs	r1, r2, r3
 8001038:	b2cb      	uxtb	r3, r1
 800103a:	3330      	adds	r3, #48	; 0x30
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2201      	movs	r2, #1
 8001040:	495c      	ldr	r1, [pc, #368]	; (80011b4 <print_num+0x1d8>)
 8001042:	4618      	mov	r0, r3
 8001044:	f002 f8d0 	bl	80031e8 <SSD1306_Putc>
		SSD1306_Putc((num/100)%10+'0', &Font_7x10, SSD1306_COLOR_WHITE);
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	4a5d      	ldr	r2, [pc, #372]	; (80011c0 <print_num+0x1e4>)
 800104c:	fb82 1203 	smull	r1, r2, r2, r3
 8001050:	1152      	asrs	r2, r2, #5
 8001052:	17db      	asrs	r3, r3, #31
 8001054:	1ad2      	subs	r2, r2, r3
 8001056:	4b59      	ldr	r3, [pc, #356]	; (80011bc <print_num+0x1e0>)
 8001058:	fb83 1302 	smull	r1, r3, r3, r2
 800105c:	1099      	asrs	r1, r3, #2
 800105e:	17d3      	asrs	r3, r2, #31
 8001060:	1ac9      	subs	r1, r1, r3
 8001062:	460b      	mov	r3, r1
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	440b      	add	r3, r1
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	1ad1      	subs	r1, r2, r3
 800106c:	b2cb      	uxtb	r3, r1
 800106e:	3330      	adds	r3, #48	; 0x30
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2201      	movs	r2, #1
 8001074:	494f      	ldr	r1, [pc, #316]	; (80011b4 <print_num+0x1d8>)
 8001076:	4618      	mov	r0, r3
 8001078:	f002 f8b6 	bl	80031e8 <SSD1306_Putc>
		SSD1306_Putc((num/10)%10+'0', &Font_7x10, SSD1306_COLOR_WHITE);
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	4a4f      	ldr	r2, [pc, #316]	; (80011bc <print_num+0x1e0>)
 8001080:	fb82 1203 	smull	r1, r2, r2, r3
 8001084:	1092      	asrs	r2, r2, #2
 8001086:	17db      	asrs	r3, r3, #31
 8001088:	1ad2      	subs	r2, r2, r3
 800108a:	4b4c      	ldr	r3, [pc, #304]	; (80011bc <print_num+0x1e0>)
 800108c:	fb83 1302 	smull	r1, r3, r3, r2
 8001090:	1099      	asrs	r1, r3, #2
 8001092:	17d3      	asrs	r3, r2, #31
 8001094:	1ac9      	subs	r1, r1, r3
 8001096:	460b      	mov	r3, r1
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	440b      	add	r3, r1
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	1ad1      	subs	r1, r2, r3
 80010a0:	b2cb      	uxtb	r3, r1
 80010a2:	3330      	adds	r3, #48	; 0x30
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2201      	movs	r2, #1
 80010a8:	4942      	ldr	r1, [pc, #264]	; (80011b4 <print_num+0x1d8>)
 80010aa:	4618      	mov	r0, r3
 80010ac:	f002 f89c 	bl	80031e8 <SSD1306_Putc>
		SSD1306_Putc((num/1)%10+'0', &Font_7x10, SSD1306_COLOR_WHITE);
 80010b0:	68ba      	ldr	r2, [r7, #8]
 80010b2:	4b42      	ldr	r3, [pc, #264]	; (80011bc <print_num+0x1e0>)
 80010b4:	fb83 1302 	smull	r1, r3, r3, r2
 80010b8:	1099      	asrs	r1, r3, #2
 80010ba:	17d3      	asrs	r3, r2, #31
 80010bc:	1ac9      	subs	r1, r1, r3
 80010be:	460b      	mov	r3, r1
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	440b      	add	r3, r1
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	1ad1      	subs	r1, r2, r3
 80010c8:	b2cb      	uxtb	r3, r1
 80010ca:	3330      	adds	r3, #48	; 0x30
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2201      	movs	r2, #1
 80010d0:	4938      	ldr	r1, [pc, #224]	; (80011b4 <print_num+0x1d8>)
 80010d2:	4618      	mov	r0, r3
 80010d4:	f002 f888 	bl	80031e8 <SSD1306_Putc>
		SSD1306_Putc((-num/1000)%10+'0', &Font_7x10, SSD1306_COLOR_WHITE);
		SSD1306_Putc((-num/100)%10+'0', &Font_7x10, SSD1306_COLOR_WHITE);
		SSD1306_Putc((-num/10)%10+'0', &Font_7x10, SSD1306_COLOR_WHITE);
		SSD1306_Putc((-num/1)%10+'0', &Font_7x10, SSD1306_COLOR_WHITE);
	}
}
 80010d8:	e067      	b.n	80011aa <print_num+0x1ce>
		SSD1306_Putc('-', &Font_7x10, SSD1306_COLOR_WHITE);
 80010da:	2201      	movs	r2, #1
 80010dc:	4935      	ldr	r1, [pc, #212]	; (80011b4 <print_num+0x1d8>)
 80010de:	202d      	movs	r0, #45	; 0x2d
 80010e0:	f002 f882 	bl	80031e8 <SSD1306_Putc>
		SSD1306_Putc((-num/1000)%10+'0', &Font_7x10, SSD1306_COLOR_WHITE);
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	4a34      	ldr	r2, [pc, #208]	; (80011b8 <print_num+0x1dc>)
 80010e8:	fb82 1203 	smull	r1, r2, r2, r3
 80010ec:	1192      	asrs	r2, r2, #6
 80010ee:	17db      	asrs	r3, r3, #31
 80010f0:	1a9a      	subs	r2, r3, r2
 80010f2:	4b32      	ldr	r3, [pc, #200]	; (80011bc <print_num+0x1e0>)
 80010f4:	fb83 1302 	smull	r1, r3, r3, r2
 80010f8:	1099      	asrs	r1, r3, #2
 80010fa:	17d3      	asrs	r3, r2, #31
 80010fc:	1ac9      	subs	r1, r1, r3
 80010fe:	460b      	mov	r3, r1
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	440b      	add	r3, r1
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	1ad1      	subs	r1, r2, r3
 8001108:	b2cb      	uxtb	r3, r1
 800110a:	3330      	adds	r3, #48	; 0x30
 800110c:	b2db      	uxtb	r3, r3
 800110e:	2201      	movs	r2, #1
 8001110:	4928      	ldr	r1, [pc, #160]	; (80011b4 <print_num+0x1d8>)
 8001112:	4618      	mov	r0, r3
 8001114:	f002 f868 	bl	80031e8 <SSD1306_Putc>
		SSD1306_Putc((-num/100)%10+'0', &Font_7x10, SSD1306_COLOR_WHITE);
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	4a29      	ldr	r2, [pc, #164]	; (80011c0 <print_num+0x1e4>)
 800111c:	fb82 1203 	smull	r1, r2, r2, r3
 8001120:	1152      	asrs	r2, r2, #5
 8001122:	17db      	asrs	r3, r3, #31
 8001124:	1a9a      	subs	r2, r3, r2
 8001126:	4b25      	ldr	r3, [pc, #148]	; (80011bc <print_num+0x1e0>)
 8001128:	fb83 1302 	smull	r1, r3, r3, r2
 800112c:	1099      	asrs	r1, r3, #2
 800112e:	17d3      	asrs	r3, r2, #31
 8001130:	1ac9      	subs	r1, r1, r3
 8001132:	460b      	mov	r3, r1
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	440b      	add	r3, r1
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	1ad1      	subs	r1, r2, r3
 800113c:	b2cb      	uxtb	r3, r1
 800113e:	3330      	adds	r3, #48	; 0x30
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2201      	movs	r2, #1
 8001144:	491b      	ldr	r1, [pc, #108]	; (80011b4 <print_num+0x1d8>)
 8001146:	4618      	mov	r0, r3
 8001148:	f002 f84e 	bl	80031e8 <SSD1306_Putc>
		SSD1306_Putc((-num/10)%10+'0', &Font_7x10, SSD1306_COLOR_WHITE);
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	4a1b      	ldr	r2, [pc, #108]	; (80011bc <print_num+0x1e0>)
 8001150:	fb82 1203 	smull	r1, r2, r2, r3
 8001154:	1092      	asrs	r2, r2, #2
 8001156:	17db      	asrs	r3, r3, #31
 8001158:	1a9a      	subs	r2, r3, r2
 800115a:	4b18      	ldr	r3, [pc, #96]	; (80011bc <print_num+0x1e0>)
 800115c:	fb83 1302 	smull	r1, r3, r3, r2
 8001160:	1099      	asrs	r1, r3, #2
 8001162:	17d3      	asrs	r3, r2, #31
 8001164:	1ac9      	subs	r1, r1, r3
 8001166:	460b      	mov	r3, r1
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	440b      	add	r3, r1
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	1ad1      	subs	r1, r2, r3
 8001170:	b2cb      	uxtb	r3, r1
 8001172:	3330      	adds	r3, #48	; 0x30
 8001174:	b2db      	uxtb	r3, r3
 8001176:	2201      	movs	r2, #1
 8001178:	490e      	ldr	r1, [pc, #56]	; (80011b4 <print_num+0x1d8>)
 800117a:	4618      	mov	r0, r3
 800117c:	f002 f834 	bl	80031e8 <SSD1306_Putc>
		SSD1306_Putc((-num/1)%10+'0', &Font_7x10, SSD1306_COLOR_WHITE);
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	425a      	negs	r2, r3
 8001184:	4b0d      	ldr	r3, [pc, #52]	; (80011bc <print_num+0x1e0>)
 8001186:	fb83 1302 	smull	r1, r3, r3, r2
 800118a:	1099      	asrs	r1, r3, #2
 800118c:	17d3      	asrs	r3, r2, #31
 800118e:	1ac9      	subs	r1, r1, r3
 8001190:	460b      	mov	r3, r1
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	440b      	add	r3, r1
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	1ad1      	subs	r1, r2, r3
 800119a:	b2cb      	uxtb	r3, r1
 800119c:	3330      	adds	r3, #48	; 0x30
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	2201      	movs	r2, #1
 80011a2:	4904      	ldr	r1, [pc, #16]	; (80011b4 <print_num+0x1d8>)
 80011a4:	4618      	mov	r0, r3
 80011a6:	f002 f81f 	bl	80031e8 <SSD1306_Putc>
}
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000000 	.word	0x20000000
 80011b8:	10624dd3 	.word	0x10624dd3
 80011bc:	66666667 	.word	0x66666667
 80011c0:	51eb851f 	.word	0x51eb851f

080011c4 <read_adc>:
uint32_t read_adc(uint32_t channel){
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b088      	sub	sp, #32
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 80011cc:	f107 030c 	add.w	r3, r7, #12
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80011da:	2301      	movs	r3, #1
 80011dc:	617b      	str	r3, [r7, #20]
	sConfig.Channel = channel;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	60fb      	str	r3, [r7, #12]
	sConfig.Rank = 1;
 80011e2:	2301      	movs	r3, #1
 80011e4:	613b      	str	r3, [r7, #16]
	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80011e6:	f107 030c 	add.w	r3, r7, #12
 80011ea:	4619      	mov	r1, r3
 80011ec:	4809      	ldr	r0, [pc, #36]	; (8001214 <read_adc+0x50>)
 80011ee:	f002 fd95 	bl	8003d1c <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 80011f2:	4808      	ldr	r0, [pc, #32]	; (8001214 <read_adc+0x50>)
 80011f4:	f002 fc28 	bl	8003a48 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80011f8:	f04f 31ff 	mov.w	r1, #4294967295
 80011fc:	4805      	ldr	r0, [pc, #20]	; (8001214 <read_adc+0x50>)
 80011fe:	f002 fcf5 	bl	8003bec <HAL_ADC_PollForConversion>
	uint32_t val = HAL_ADC_GetValue(&hadc1);
 8001202:	4804      	ldr	r0, [pc, #16]	; (8001214 <read_adc+0x50>)
 8001204:	f002 fd7d 	bl	8003d02 <HAL_ADC_GetValue>
 8001208:	61f8      	str	r0, [r7, #28]
	return val;
 800120a:	69fb      	ldr	r3, [r7, #28]
}
 800120c:	4618      	mov	r0, r3
 800120e:	3720      	adds	r7, #32
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	200000a8 	.word	0x200000a8

08001218 <motor>:
void motor(int l1, int l2, int r2, int r1){
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
 8001224:	603b      	str	r3, [r7, #0]
	int c;
	if(look_dir == 'F') c = Heading;
 8001226:	4ba7      	ldr	r3, [pc, #668]	; (80014c4 <motor+0x2ac>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b46      	cmp	r3, #70	; 0x46
 800122c:	d103      	bne.n	8001236 <motor+0x1e>
 800122e:	4ba6      	ldr	r3, [pc, #664]	; (80014c8 <motor+0x2b0>)
 8001230:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001234:	617b      	str	r3, [r7, #20]
	if(look_dir == 'B') c = Heading + 180;
 8001236:	4ba3      	ldr	r3, [pc, #652]	; (80014c4 <motor+0x2ac>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2b42      	cmp	r3, #66	; 0x42
 800123c:	d104      	bne.n	8001248 <motor+0x30>
 800123e:	4ba2      	ldr	r3, [pc, #648]	; (80014c8 <motor+0x2b0>)
 8001240:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001244:	33b4      	adds	r3, #180	; 0xb4
 8001246:	617b      	str	r3, [r7, #20]
	if(c > 180)  c -= 360;
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	2bb4      	cmp	r3, #180	; 0xb4
 800124c:	dd03      	ble.n	8001256 <motor+0x3e>
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001254:	617b      	str	r3, [r7, #20]
	if(c < -180) c += 360;
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 800125c:	da03      	bge.n	8001266 <motor+0x4e>
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001264:	617b      	str	r3, [r7, #20]

	if(c > 70)  c = 70;
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	2b46      	cmp	r3, #70	; 0x46
 800126a:	dd01      	ble.n	8001270 <motor+0x58>
 800126c:	2346      	movs	r3, #70	; 0x46
 800126e:	617b      	str	r3, [r7, #20]
	if(c < -70) c = -70;
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	f113 0f46 	cmn.w	r3, #70	; 0x46
 8001276:	da02      	bge.n	800127e <motor+0x66>
 8001278:	f06f 0345 	mvn.w	r3, #69	; 0x45
 800127c:	617b      	str	r3, [r7, #20]
	l1+=c;
 800127e:	68fa      	ldr	r2, [r7, #12]
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	4413      	add	r3, r2
 8001284:	60fb      	str	r3, [r7, #12]
	l2+=c;
 8001286:	68ba      	ldr	r2, [r7, #8]
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	4413      	add	r3, r2
 800128c:	60bb      	str	r3, [r7, #8]
	r1+=c;
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	4413      	add	r3, r2
 8001294:	603b      	str	r3, [r7, #0]
	r2+=c;
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	4413      	add	r3, r2
 800129c:	607b      	str	r3, [r7, #4]

	l1 *= 210;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	22d2      	movs	r2, #210	; 0xd2
 80012a2:	fb02 f303 	mul.w	r3, r2, r3
 80012a6:	60fb      	str	r3, [r7, #12]
	l2 *= 250;
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	22fa      	movs	r2, #250	; 0xfa
 80012ac:	fb02 f303 	mul.w	r3, r2, r3
 80012b0:	60bb      	str	r3, [r7, #8]
	r2 *= 250;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	22fa      	movs	r2, #250	; 0xfa
 80012b6:	fb02 f303 	mul.w	r3, r2, r3
 80012ba:	607b      	str	r3, [r7, #4]
	r1 *= 210;
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	22d2      	movs	r2, #210	; 0xd2
 80012c0:	fb02 f303 	mul.w	r3, r2, r3
 80012c4:	603b      	str	r3, [r7, #0]

	if(l1 > 65535)  l1 = 65535;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012cc:	db02      	blt.n	80012d4 <motor+0xbc>
 80012ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012d2:	60fb      	str	r3, [r7, #12]
	if(l2 > 65535)  l2 = 65535;
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012da:	db02      	blt.n	80012e2 <motor+0xca>
 80012dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012e0:	60bb      	str	r3, [r7, #8]
	if(r1 > 65535)  r1 = 65535;
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012e8:	db02      	blt.n	80012f0 <motor+0xd8>
 80012ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012ee:	603b      	str	r3, [r7, #0]
	if(r2 > 65535)  r2 = 65535;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012f6:	db02      	blt.n	80012fe <motor+0xe6>
 80012f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012fc:	607b      	str	r3, [r7, #4]
	if(l1 < -65535) l1 = -65535;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001304:	dc01      	bgt.n	800130a <motor+0xf2>
 8001306:	4b71      	ldr	r3, [pc, #452]	; (80014cc <motor+0x2b4>)
 8001308:	60fb      	str	r3, [r7, #12]
	if(l2 < -65535) l2 = -65535;
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001310:	dc01      	bgt.n	8001316 <motor+0xfe>
 8001312:	4b6e      	ldr	r3, [pc, #440]	; (80014cc <motor+0x2b4>)
 8001314:	60bb      	str	r3, [r7, #8]
	if(r1 < -65535) r1 = -65535;
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800131c:	dc01      	bgt.n	8001322 <motor+0x10a>
 800131e:	4b6b      	ldr	r3, [pc, #428]	; (80014cc <motor+0x2b4>)
 8001320:	603b      	str	r3, [r7, #0]
	if(r2 < -65535) r2 = -65535;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001328:	dc01      	bgt.n	800132e <motor+0x116>
 800132a:	4b68      	ldr	r3, [pc, #416]	; (80014cc <motor+0x2b4>)
 800132c:	607b      	str	r3, [r7, #4]

	// ------------- Motor L1
	if(l1 > 0){
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	2b00      	cmp	r3, #0
 8001332:	dd0f      	ble.n	8001354 <motor+0x13c>
		HAL_GPIO_WritePin(L1A_GPIO_Port, L1A_Pin, 1);
 8001334:	2201      	movs	r2, #1
 8001336:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800133a:	4865      	ldr	r0, [pc, #404]	; (80014d0 <motor+0x2b8>)
 800133c:	f003 f9a6 	bl	800468c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L1B_GPIO_Port, L1B_Pin, 0);
 8001340:	2200      	movs	r2, #0
 8001342:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001346:	4862      	ldr	r0, [pc, #392]	; (80014d0 <motor+0x2b8>)
 8001348:	f003 f9a0 	bl	800468c <HAL_GPIO_WritePin>
		TIM1->CCR1 = l1;
 800134c:	4a61      	ldr	r2, [pc, #388]	; (80014d4 <motor+0x2bc>)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	6353      	str	r3, [r2, #52]	; 0x34
 8001352:	e01f      	b.n	8001394 <motor+0x17c>
	}
	else if(l1 < 0){
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2b00      	cmp	r3, #0
 8001358:	da10      	bge.n	800137c <motor+0x164>
		HAL_GPIO_WritePin(L1A_GPIO_Port, L1A_Pin, 0);
 800135a:	2200      	movs	r2, #0
 800135c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001360:	485b      	ldr	r0, [pc, #364]	; (80014d0 <motor+0x2b8>)
 8001362:	f003 f993 	bl	800468c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L1B_GPIO_Port, L1B_Pin, 1);
 8001366:	2201      	movs	r2, #1
 8001368:	f44f 7180 	mov.w	r1, #256	; 0x100
 800136c:	4858      	ldr	r0, [pc, #352]	; (80014d0 <motor+0x2b8>)
 800136e:	f003 f98d 	bl	800468c <HAL_GPIO_WritePin>
		TIM1->CCR1 = -l1;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	425a      	negs	r2, r3
 8001376:	4b57      	ldr	r3, [pc, #348]	; (80014d4 <motor+0x2bc>)
 8001378:	635a      	str	r2, [r3, #52]	; 0x34
 800137a:	e00b      	b.n	8001394 <motor+0x17c>
	}
	else{
		HAL_GPIO_WritePin(L1A_GPIO_Port, L1A_Pin, 1);
 800137c:	2201      	movs	r2, #1
 800137e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001382:	4853      	ldr	r0, [pc, #332]	; (80014d0 <motor+0x2b8>)
 8001384:	f003 f982 	bl	800468c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L1B_GPIO_Port, L1B_Pin, 1);
 8001388:	2201      	movs	r2, #1
 800138a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800138e:	4850      	ldr	r0, [pc, #320]	; (80014d0 <motor+0x2b8>)
 8001390:	f003 f97c 	bl	800468c <HAL_GPIO_WritePin>
	}
	// ------------- Motor L2
	if(l2 > 0){
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	2b00      	cmp	r3, #0
 8001398:	dd0e      	ble.n	80013b8 <motor+0x1a0>
		HAL_GPIO_WritePin(L2A_GPIO_Port, L2A_Pin, 1);
 800139a:	2201      	movs	r2, #1
 800139c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013a0:	484b      	ldr	r0, [pc, #300]	; (80014d0 <motor+0x2b8>)
 80013a2:	f003 f973 	bl	800468c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L2B_GPIO_Port, L2B_Pin, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2180      	movs	r1, #128	; 0x80
 80013aa:	4849      	ldr	r0, [pc, #292]	; (80014d0 <motor+0x2b8>)
 80013ac:	f003 f96e 	bl	800468c <HAL_GPIO_WritePin>
		TIM1->CCR2 = l2;
 80013b0:	4a48      	ldr	r2, [pc, #288]	; (80014d4 <motor+0x2bc>)
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	6393      	str	r3, [r2, #56]	; 0x38
 80013b6:	e01d      	b.n	80013f4 <motor+0x1dc>
	}
	else if(l2 < 0){
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	da0f      	bge.n	80013de <motor+0x1c6>
		HAL_GPIO_WritePin(L2A_GPIO_Port, L2A_Pin, 0);
 80013be:	2200      	movs	r2, #0
 80013c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013c4:	4842      	ldr	r0, [pc, #264]	; (80014d0 <motor+0x2b8>)
 80013c6:	f003 f961 	bl	800468c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L2B_GPIO_Port, L2B_Pin, 1);
 80013ca:	2201      	movs	r2, #1
 80013cc:	2180      	movs	r1, #128	; 0x80
 80013ce:	4840      	ldr	r0, [pc, #256]	; (80014d0 <motor+0x2b8>)
 80013d0:	f003 f95c 	bl	800468c <HAL_GPIO_WritePin>
		TIM1->CCR2 = -l2;
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	425a      	negs	r2, r3
 80013d8:	4b3e      	ldr	r3, [pc, #248]	; (80014d4 <motor+0x2bc>)
 80013da:	639a      	str	r2, [r3, #56]	; 0x38
 80013dc:	e00a      	b.n	80013f4 <motor+0x1dc>
	}
	else{
		HAL_GPIO_WritePin(L2A_GPIO_Port, L2A_Pin, 1);
 80013de:	2201      	movs	r2, #1
 80013e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013e4:	483a      	ldr	r0, [pc, #232]	; (80014d0 <motor+0x2b8>)
 80013e6:	f003 f951 	bl	800468c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L2B_GPIO_Port, L2B_Pin, 1);
 80013ea:	2201      	movs	r2, #1
 80013ec:	2180      	movs	r1, #128	; 0x80
 80013ee:	4838      	ldr	r0, [pc, #224]	; (80014d0 <motor+0x2b8>)
 80013f0:	f003 f94c 	bl	800468c <HAL_GPIO_WritePin>
	}

	// ------------- Motor R1
	if(r1 > 0){
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	dd0e      	ble.n	8001418 <motor+0x200>
		HAL_GPIO_WritePin(R1A_GPIO_Port, R1A_Pin, 1);
 80013fa:	2201      	movs	r2, #1
 80013fc:	2140      	movs	r1, #64	; 0x40
 80013fe:	4836      	ldr	r0, [pc, #216]	; (80014d8 <motor+0x2c0>)
 8001400:	f003 f944 	bl	800468c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R1B_GPIO_Port, R1B_Pin, 0);
 8001404:	2200      	movs	r2, #0
 8001406:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800140a:	4834      	ldr	r0, [pc, #208]	; (80014dc <motor+0x2c4>)
 800140c:	f003 f93e 	bl	800468c <HAL_GPIO_WritePin>
		TIM1->CCR4 = r1;
 8001410:	4a30      	ldr	r2, [pc, #192]	; (80014d4 <motor+0x2bc>)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	6413      	str	r3, [r2, #64]	; 0x40
 8001416:	e01d      	b.n	8001454 <motor+0x23c>
	}
	else if(r1 < 0){
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	da0f      	bge.n	800143e <motor+0x226>
		HAL_GPIO_WritePin(R1A_GPIO_Port, R1A_Pin, 0);
 800141e:	2200      	movs	r2, #0
 8001420:	2140      	movs	r1, #64	; 0x40
 8001422:	482d      	ldr	r0, [pc, #180]	; (80014d8 <motor+0x2c0>)
 8001424:	f003 f932 	bl	800468c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R1B_GPIO_Port, R1B_Pin, 1);
 8001428:	2201      	movs	r2, #1
 800142a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800142e:	482b      	ldr	r0, [pc, #172]	; (80014dc <motor+0x2c4>)
 8001430:	f003 f92c 	bl	800468c <HAL_GPIO_WritePin>
		TIM1->CCR4 = -r1;
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	425a      	negs	r2, r3
 8001438:	4b26      	ldr	r3, [pc, #152]	; (80014d4 <motor+0x2bc>)
 800143a:	641a      	str	r2, [r3, #64]	; 0x40
 800143c:	e00a      	b.n	8001454 <motor+0x23c>
	}
	else{
		HAL_GPIO_WritePin(R1A_GPIO_Port, R1A_Pin, 1);
 800143e:	2201      	movs	r2, #1
 8001440:	2140      	movs	r1, #64	; 0x40
 8001442:	4825      	ldr	r0, [pc, #148]	; (80014d8 <motor+0x2c0>)
 8001444:	f003 f922 	bl	800468c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R1B_GPIO_Port, R1B_Pin, 1);
 8001448:	2201      	movs	r2, #1
 800144a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800144e:	4823      	ldr	r0, [pc, #140]	; (80014dc <motor+0x2c4>)
 8001450:	f003 f91c 	bl	800468c <HAL_GPIO_WritePin>
	}
	// ------------- Motor R2
	if(r2 > 0){
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	dd0f      	ble.n	800147a <motor+0x262>
		HAL_GPIO_WritePin(R2A_GPIO_Port, R2A_Pin, 1);
 800145a:	2201      	movs	r2, #1
 800145c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001460:	481e      	ldr	r0, [pc, #120]	; (80014dc <motor+0x2c4>)
 8001462:	f003 f913 	bl	800468c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R2B_GPIO_Port, R2B_Pin, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800146c:	481b      	ldr	r0, [pc, #108]	; (80014dc <motor+0x2c4>)
 800146e:	f003 f90d 	bl	800468c <HAL_GPIO_WritePin>
		TIM1->CCR3 = r2;
 8001472:	4a18      	ldr	r2, [pc, #96]	; (80014d4 <motor+0x2bc>)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	63d3      	str	r3, [r2, #60]	; 0x3c
	}
	else{
		HAL_GPIO_WritePin(R2A_GPIO_Port, R2A_Pin, 1);
		HAL_GPIO_WritePin(R2B_GPIO_Port, R2B_Pin, 1);
	}
}
 8001478:	e01f      	b.n	80014ba <motor+0x2a2>
	else if(r2 < 0){
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2b00      	cmp	r3, #0
 800147e:	da10      	bge.n	80014a2 <motor+0x28a>
		HAL_GPIO_WritePin(R2A_GPIO_Port, R2A_Pin, 0);
 8001480:	2200      	movs	r2, #0
 8001482:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001486:	4815      	ldr	r0, [pc, #84]	; (80014dc <motor+0x2c4>)
 8001488:	f003 f900 	bl	800468c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R2B_GPIO_Port, R2B_Pin, 1);
 800148c:	2201      	movs	r2, #1
 800148e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001492:	4812      	ldr	r0, [pc, #72]	; (80014dc <motor+0x2c4>)
 8001494:	f003 f8fa 	bl	800468c <HAL_GPIO_WritePin>
		TIM1->CCR3 = -r2;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	425a      	negs	r2, r3
 800149c:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <motor+0x2bc>)
 800149e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80014a0:	e00b      	b.n	80014ba <motor+0x2a2>
		HAL_GPIO_WritePin(R2A_GPIO_Port, R2A_Pin, 1);
 80014a2:	2201      	movs	r2, #1
 80014a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014a8:	480c      	ldr	r0, [pc, #48]	; (80014dc <motor+0x2c4>)
 80014aa:	f003 f8ef 	bl	800468c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R2B_GPIO_Port, R2B_Pin, 1);
 80014ae:	2201      	movs	r2, #1
 80014b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014b4:	4809      	ldr	r0, [pc, #36]	; (80014dc <motor+0x2c4>)
 80014b6:	f003 f8e9 	bl	800468c <HAL_GPIO_WritePin>
}
 80014ba:	bf00      	nop
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000019 	.word	0x20000019
 80014c8:	20000298 	.word	0x20000298
 80014cc:	ffff0001 	.word	0xffff0001
 80014d0:	40021000 	.word	0x40021000
 80014d4:	40010000 	.word	0x40010000
 80014d8:	40020800 	.word	0x40020800
 80014dc:	40020c00 	.word	0x40020c00

080014e0 <motor_without_correction>:
void motor_without_correction(int l1, int l2, int r2, int r1){
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
 80014ec:	603b      	str	r3, [r7, #0]
	l1 *= 255;
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	4613      	mov	r3, r2
 80014f2:	021b      	lsls	r3, r3, #8
 80014f4:	1a9b      	subs	r3, r3, r2
 80014f6:	60fb      	str	r3, [r7, #12]
	l2 *= 255;
 80014f8:	68ba      	ldr	r2, [r7, #8]
 80014fa:	4613      	mov	r3, r2
 80014fc:	021b      	lsls	r3, r3, #8
 80014fe:	1a9b      	subs	r3, r3, r2
 8001500:	60bb      	str	r3, [r7, #8]
	r1 *= 255;
 8001502:	683a      	ldr	r2, [r7, #0]
 8001504:	4613      	mov	r3, r2
 8001506:	021b      	lsls	r3, r3, #8
 8001508:	1a9b      	subs	r3, r3, r2
 800150a:	603b      	str	r3, [r7, #0]
	r2 *= 255;
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	4613      	mov	r3, r2
 8001510:	021b      	lsls	r3, r3, #8
 8001512:	1a9b      	subs	r3, r3, r2
 8001514:	607b      	str	r3, [r7, #4]

	if(l1 > 65535)  l1 = 65535;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800151c:	db02      	blt.n	8001524 <motor_without_correction+0x44>
 800151e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001522:	60fb      	str	r3, [r7, #12]
	if(l2 > 65535)  l2 = 65535;
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800152a:	db02      	blt.n	8001532 <motor_without_correction+0x52>
 800152c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001530:	60bb      	str	r3, [r7, #8]
	if(r1 > 65535)  r1 = 65535;
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001538:	db02      	blt.n	8001540 <motor_without_correction+0x60>
 800153a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800153e:	603b      	str	r3, [r7, #0]
	if(r2 > 65535)  r2 = 65535;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001546:	db02      	blt.n	800154e <motor_without_correction+0x6e>
 8001548:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800154c:	607b      	str	r3, [r7, #4]
	if(l1 < -65535) l1 = -65535;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001554:	dc01      	bgt.n	800155a <motor_without_correction+0x7a>
 8001556:	4b6f      	ldr	r3, [pc, #444]	; (8001714 <motor_without_correction+0x234>)
 8001558:	60fb      	str	r3, [r7, #12]
	if(l2 < -65535) l2 = -65535;
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001560:	dc01      	bgt.n	8001566 <motor_without_correction+0x86>
 8001562:	4b6c      	ldr	r3, [pc, #432]	; (8001714 <motor_without_correction+0x234>)
 8001564:	60bb      	str	r3, [r7, #8]
	if(r1 < -65535) r1 = -65535;
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800156c:	dc01      	bgt.n	8001572 <motor_without_correction+0x92>
 800156e:	4b69      	ldr	r3, [pc, #420]	; (8001714 <motor_without_correction+0x234>)
 8001570:	603b      	str	r3, [r7, #0]
	if(r2 < -65535) r2 = -65535;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001578:	dc01      	bgt.n	800157e <motor_without_correction+0x9e>
 800157a:	4b66      	ldr	r3, [pc, #408]	; (8001714 <motor_without_correction+0x234>)
 800157c:	607b      	str	r3, [r7, #4]

	// ------------- Motor L1
	if(l1 > 0){
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2b00      	cmp	r3, #0
 8001582:	dd0f      	ble.n	80015a4 <motor_without_correction+0xc4>
		HAL_GPIO_WritePin(L1A_GPIO_Port, L1A_Pin, 1);
 8001584:	2201      	movs	r2, #1
 8001586:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800158a:	4863      	ldr	r0, [pc, #396]	; (8001718 <motor_without_correction+0x238>)
 800158c:	f003 f87e 	bl	800468c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L1B_GPIO_Port, L1B_Pin, 0);
 8001590:	2200      	movs	r2, #0
 8001592:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001596:	4860      	ldr	r0, [pc, #384]	; (8001718 <motor_without_correction+0x238>)
 8001598:	f003 f878 	bl	800468c <HAL_GPIO_WritePin>
		TIM1->CCR1 = l1;
 800159c:	4a5f      	ldr	r2, [pc, #380]	; (800171c <motor_without_correction+0x23c>)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	6353      	str	r3, [r2, #52]	; 0x34
 80015a2:	e01f      	b.n	80015e4 <motor_without_correction+0x104>
	}
	else if(l1 < 0){
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	da10      	bge.n	80015cc <motor_without_correction+0xec>
		HAL_GPIO_WritePin(L1A_GPIO_Port, L1A_Pin, 0);
 80015aa:	2200      	movs	r2, #0
 80015ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015b0:	4859      	ldr	r0, [pc, #356]	; (8001718 <motor_without_correction+0x238>)
 80015b2:	f003 f86b 	bl	800468c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L1B_GPIO_Port, L1B_Pin, 1);
 80015b6:	2201      	movs	r2, #1
 80015b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015bc:	4856      	ldr	r0, [pc, #344]	; (8001718 <motor_without_correction+0x238>)
 80015be:	f003 f865 	bl	800468c <HAL_GPIO_WritePin>
		TIM1->CCR1 = -l1;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	425a      	negs	r2, r3
 80015c6:	4b55      	ldr	r3, [pc, #340]	; (800171c <motor_without_correction+0x23c>)
 80015c8:	635a      	str	r2, [r3, #52]	; 0x34
 80015ca:	e00b      	b.n	80015e4 <motor_without_correction+0x104>
	}
	else{
		HAL_GPIO_WritePin(L1A_GPIO_Port, L1A_Pin, 1);
 80015cc:	2201      	movs	r2, #1
 80015ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015d2:	4851      	ldr	r0, [pc, #324]	; (8001718 <motor_without_correction+0x238>)
 80015d4:	f003 f85a 	bl	800468c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L1B_GPIO_Port, L1B_Pin, 1);
 80015d8:	2201      	movs	r2, #1
 80015da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015de:	484e      	ldr	r0, [pc, #312]	; (8001718 <motor_without_correction+0x238>)
 80015e0:	f003 f854 	bl	800468c <HAL_GPIO_WritePin>
	}
	// ------------- Motor L2
	if(l2 > 0){
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	dd0e      	ble.n	8001608 <motor_without_correction+0x128>
		HAL_GPIO_WritePin(L2A_GPIO_Port, L2A_Pin, 1);
 80015ea:	2201      	movs	r2, #1
 80015ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015f0:	4849      	ldr	r0, [pc, #292]	; (8001718 <motor_without_correction+0x238>)
 80015f2:	f003 f84b 	bl	800468c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L2B_GPIO_Port, L2B_Pin, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2180      	movs	r1, #128	; 0x80
 80015fa:	4847      	ldr	r0, [pc, #284]	; (8001718 <motor_without_correction+0x238>)
 80015fc:	f003 f846 	bl	800468c <HAL_GPIO_WritePin>
		TIM1->CCR2 = l2;
 8001600:	4a46      	ldr	r2, [pc, #280]	; (800171c <motor_without_correction+0x23c>)
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	6393      	str	r3, [r2, #56]	; 0x38
 8001606:	e01d      	b.n	8001644 <motor_without_correction+0x164>
	}
	else if(l2 < 0){
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	2b00      	cmp	r3, #0
 800160c:	da0f      	bge.n	800162e <motor_without_correction+0x14e>
		HAL_GPIO_WritePin(L2A_GPIO_Port, L2A_Pin, 0);
 800160e:	2200      	movs	r2, #0
 8001610:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001614:	4840      	ldr	r0, [pc, #256]	; (8001718 <motor_without_correction+0x238>)
 8001616:	f003 f839 	bl	800468c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L2B_GPIO_Port, L2B_Pin, 1);
 800161a:	2201      	movs	r2, #1
 800161c:	2180      	movs	r1, #128	; 0x80
 800161e:	483e      	ldr	r0, [pc, #248]	; (8001718 <motor_without_correction+0x238>)
 8001620:	f003 f834 	bl	800468c <HAL_GPIO_WritePin>
		TIM1->CCR2 = -l2;
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	425a      	negs	r2, r3
 8001628:	4b3c      	ldr	r3, [pc, #240]	; (800171c <motor_without_correction+0x23c>)
 800162a:	639a      	str	r2, [r3, #56]	; 0x38
 800162c:	e00a      	b.n	8001644 <motor_without_correction+0x164>
	}
	else{
		HAL_GPIO_WritePin(L2A_GPIO_Port, L2A_Pin, 1);
 800162e:	2201      	movs	r2, #1
 8001630:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001634:	4838      	ldr	r0, [pc, #224]	; (8001718 <motor_without_correction+0x238>)
 8001636:	f003 f829 	bl	800468c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L2B_GPIO_Port, L2B_Pin, 1);
 800163a:	2201      	movs	r2, #1
 800163c:	2180      	movs	r1, #128	; 0x80
 800163e:	4836      	ldr	r0, [pc, #216]	; (8001718 <motor_without_correction+0x238>)
 8001640:	f003 f824 	bl	800468c <HAL_GPIO_WritePin>
	}

	// ------------- Motor R1
	if(r1 > 0){
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	dd0e      	ble.n	8001668 <motor_without_correction+0x188>
		HAL_GPIO_WritePin(R1A_GPIO_Port, R1A_Pin, 1);
 800164a:	2201      	movs	r2, #1
 800164c:	2140      	movs	r1, #64	; 0x40
 800164e:	4834      	ldr	r0, [pc, #208]	; (8001720 <motor_without_correction+0x240>)
 8001650:	f003 f81c 	bl	800468c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R1B_GPIO_Port, R1B_Pin, 0);
 8001654:	2200      	movs	r2, #0
 8001656:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800165a:	4832      	ldr	r0, [pc, #200]	; (8001724 <motor_without_correction+0x244>)
 800165c:	f003 f816 	bl	800468c <HAL_GPIO_WritePin>
		TIM1->CCR4 = r1;
 8001660:	4a2e      	ldr	r2, [pc, #184]	; (800171c <motor_without_correction+0x23c>)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	6413      	str	r3, [r2, #64]	; 0x40
 8001666:	e01d      	b.n	80016a4 <motor_without_correction+0x1c4>
	}
	else if(r1 < 0){
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	da0f      	bge.n	800168e <motor_without_correction+0x1ae>
		HAL_GPIO_WritePin(R1A_GPIO_Port, R1A_Pin, 0);
 800166e:	2200      	movs	r2, #0
 8001670:	2140      	movs	r1, #64	; 0x40
 8001672:	482b      	ldr	r0, [pc, #172]	; (8001720 <motor_without_correction+0x240>)
 8001674:	f003 f80a 	bl	800468c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R1B_GPIO_Port, R1B_Pin, 1);
 8001678:	2201      	movs	r2, #1
 800167a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800167e:	4829      	ldr	r0, [pc, #164]	; (8001724 <motor_without_correction+0x244>)
 8001680:	f003 f804 	bl	800468c <HAL_GPIO_WritePin>
		TIM1->CCR4 = -r1;
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	425a      	negs	r2, r3
 8001688:	4b24      	ldr	r3, [pc, #144]	; (800171c <motor_without_correction+0x23c>)
 800168a:	641a      	str	r2, [r3, #64]	; 0x40
 800168c:	e00a      	b.n	80016a4 <motor_without_correction+0x1c4>
	}
	else{
		HAL_GPIO_WritePin(R1A_GPIO_Port, R1A_Pin, 1);
 800168e:	2201      	movs	r2, #1
 8001690:	2140      	movs	r1, #64	; 0x40
 8001692:	4823      	ldr	r0, [pc, #140]	; (8001720 <motor_without_correction+0x240>)
 8001694:	f002 fffa 	bl	800468c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R1B_GPIO_Port, R1B_Pin, 1);
 8001698:	2201      	movs	r2, #1
 800169a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800169e:	4821      	ldr	r0, [pc, #132]	; (8001724 <motor_without_correction+0x244>)
 80016a0:	f002 fff4 	bl	800468c <HAL_GPIO_WritePin>
	}
	// ------------- Motor R2
	if(r2 > 0){
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	dd0f      	ble.n	80016ca <motor_without_correction+0x1ea>
		HAL_GPIO_WritePin(R2A_GPIO_Port, R2A_Pin, 1);
 80016aa:	2201      	movs	r2, #1
 80016ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016b0:	481c      	ldr	r0, [pc, #112]	; (8001724 <motor_without_correction+0x244>)
 80016b2:	f002 ffeb 	bl	800468c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R2B_GPIO_Port, R2B_Pin, 0);
 80016b6:	2200      	movs	r2, #0
 80016b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016bc:	4819      	ldr	r0, [pc, #100]	; (8001724 <motor_without_correction+0x244>)
 80016be:	f002 ffe5 	bl	800468c <HAL_GPIO_WritePin>
		TIM1->CCR3 = r2;
 80016c2:	4a16      	ldr	r2, [pc, #88]	; (800171c <motor_without_correction+0x23c>)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	63d3      	str	r3, [r2, #60]	; 0x3c
	}
	else{
		HAL_GPIO_WritePin(R2A_GPIO_Port, R2A_Pin, 1);
		HAL_GPIO_WritePin(R2B_GPIO_Port, R2B_Pin, 1);
	}
}
 80016c8:	e01f      	b.n	800170a <motor_without_correction+0x22a>
	else if(r2 < 0){
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	da10      	bge.n	80016f2 <motor_without_correction+0x212>
		HAL_GPIO_WritePin(R2A_GPIO_Port, R2A_Pin, 0);
 80016d0:	2200      	movs	r2, #0
 80016d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016d6:	4813      	ldr	r0, [pc, #76]	; (8001724 <motor_without_correction+0x244>)
 80016d8:	f002 ffd8 	bl	800468c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R2B_GPIO_Port, R2B_Pin, 1);
 80016dc:	2201      	movs	r2, #1
 80016de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016e2:	4810      	ldr	r0, [pc, #64]	; (8001724 <motor_without_correction+0x244>)
 80016e4:	f002 ffd2 	bl	800468c <HAL_GPIO_WritePin>
		TIM1->CCR3 = -r2;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	425a      	negs	r2, r3
 80016ec:	4b0b      	ldr	r3, [pc, #44]	; (800171c <motor_without_correction+0x23c>)
 80016ee:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80016f0:	e00b      	b.n	800170a <motor_without_correction+0x22a>
		HAL_GPIO_WritePin(R2A_GPIO_Port, R2A_Pin, 1);
 80016f2:	2201      	movs	r2, #1
 80016f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016f8:	480a      	ldr	r0, [pc, #40]	; (8001724 <motor_without_correction+0x244>)
 80016fa:	f002 ffc7 	bl	800468c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R2B_GPIO_Port, R2B_Pin, 1);
 80016fe:	2201      	movs	r2, #1
 8001700:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001704:	4807      	ldr	r0, [pc, #28]	; (8001724 <motor_without_correction+0x244>)
 8001706:	f002 ffc1 	bl	800468c <HAL_GPIO_WritePin>
}
 800170a:	bf00      	nop
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	ffff0001 	.word	0xffff0001
 8001718:	40021000 	.word	0x40021000
 800171c:	40010000 	.word	0x40010000
 8001720:	40020800 	.word	0x40020800
 8001724:	40020c00 	.word	0x40020c00

08001728 <fast_stop>:
void fast_stop(){
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(L1A_GPIO_Port, L1A_Pin, 1);
 800172c:	2201      	movs	r2, #1
 800172e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001732:	4816      	ldr	r0, [pc, #88]	; (800178c <fast_stop+0x64>)
 8001734:	f002 ffaa 	bl	800468c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(L1B_GPIO_Port, L1B_Pin, 1);
 8001738:	2201      	movs	r2, #1
 800173a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800173e:	4813      	ldr	r0, [pc, #76]	; (800178c <fast_stop+0x64>)
 8001740:	f002 ffa4 	bl	800468c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(L2A_GPIO_Port, L2A_Pin, 1);
 8001744:	2201      	movs	r2, #1
 8001746:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800174a:	4810      	ldr	r0, [pc, #64]	; (800178c <fast_stop+0x64>)
 800174c:	f002 ff9e 	bl	800468c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(L2B_GPIO_Port, L2B_Pin, 1);
 8001750:	2201      	movs	r2, #1
 8001752:	2180      	movs	r1, #128	; 0x80
 8001754:	480d      	ldr	r0, [pc, #52]	; (800178c <fast_stop+0x64>)
 8001756:	f002 ff99 	bl	800468c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(R1A_GPIO_Port, R1A_Pin, 1);
 800175a:	2201      	movs	r2, #1
 800175c:	2140      	movs	r1, #64	; 0x40
 800175e:	480c      	ldr	r0, [pc, #48]	; (8001790 <fast_stop+0x68>)
 8001760:	f002 ff94 	bl	800468c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(R1B_GPIO_Port, R1B_Pin, 1);
 8001764:	2201      	movs	r2, #1
 8001766:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800176a:	480a      	ldr	r0, [pc, #40]	; (8001794 <fast_stop+0x6c>)
 800176c:	f002 ff8e 	bl	800468c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(R2A_GPIO_Port, R2A_Pin, 1);
 8001770:	2201      	movs	r2, #1
 8001772:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001776:	4807      	ldr	r0, [pc, #28]	; (8001794 <fast_stop+0x6c>)
 8001778:	f002 ff88 	bl	800468c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(R2B_GPIO_Port, R2B_Pin, 1);
 800177c:	2201      	movs	r2, #1
 800177e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001782:	4804      	ldr	r0, [pc, #16]	; (8001794 <fast_stop+0x6c>)
 8001784:	f002 ff82 	bl	800468c <HAL_GPIO_WritePin>
}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40021000 	.word	0x40021000
 8001790:	40020800 	.word	0x40020800
 8001794:	40020c00 	.word	0x40020c00

08001798 <stop>:
void stop() {
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
	motor(0,0,0,0);
 800179c:	2300      	movs	r3, #0
 800179e:	2200      	movs	r2, #0
 80017a0:	2100      	movs	r1, #0
 80017a2:	2000      	movs	r0, #0
 80017a4:	f7ff fd38 	bl	8001218 <motor>
}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	0000      	movs	r0, r0
	...

080017b0 <move>:
void move(int a){
 80017b0:	b5b0      	push	{r4, r5, r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
	if(a>360)     a-=360;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80017be:	dd03      	ble.n	80017c8 <move+0x18>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80017c6:	607b      	str	r3, [r7, #4]
	if(a<0)       a+=360;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	da03      	bge.n	80017d6 <move+0x26>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017d4:	607b      	str	r3, [r7, #4]
	int x = v * cos(a * M_PI / 180);
 80017d6:	4b3c      	ldr	r3, [pc, #240]	; (80018c8 <move+0x118>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7fe fe46 	bl	800046c <__aeabi_i2d>
 80017e0:	4604      	mov	r4, r0
 80017e2:	460d      	mov	r5, r1
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7fe fe41 	bl	800046c <__aeabi_i2d>
 80017ea:	a335      	add	r3, pc, #212	; (adr r3, 80018c0 <move+0x110>)
 80017ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f0:	f7fe fea6 	bl	8000540 <__aeabi_dmul>
 80017f4:	4602      	mov	r2, r0
 80017f6:	460b      	mov	r3, r1
 80017f8:	4610      	mov	r0, r2
 80017fa:	4619      	mov	r1, r3
 80017fc:	f04f 0200 	mov.w	r2, #0
 8001800:	4b32      	ldr	r3, [pc, #200]	; (80018cc <move+0x11c>)
 8001802:	f7fe ffc7 	bl	8000794 <__aeabi_ddiv>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	ec43 2b17 	vmov	d7, r2, r3
 800180e:	eeb0 0a47 	vmov.f32	s0, s14
 8001812:	eef0 0a67 	vmov.f32	s1, s15
 8001816:	f005 fe23 	bl	8007460 <cos>
 800181a:	ec53 2b10 	vmov	r2, r3, d0
 800181e:	4620      	mov	r0, r4
 8001820:	4629      	mov	r1, r5
 8001822:	f7fe fe8d 	bl	8000540 <__aeabi_dmul>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	4610      	mov	r0, r2
 800182c:	4619      	mov	r1, r3
 800182e:	f7ff f937 	bl	8000aa0 <__aeabi_d2iz>
 8001832:	4603      	mov	r3, r0
 8001834:	60fb      	str	r3, [r7, #12]
	int y = v * sin(a * M_PI / 180);
 8001836:	4b24      	ldr	r3, [pc, #144]	; (80018c8 <move+0x118>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f7fe fe16 	bl	800046c <__aeabi_i2d>
 8001840:	4604      	mov	r4, r0
 8001842:	460d      	mov	r5, r1
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7fe fe11 	bl	800046c <__aeabi_i2d>
 800184a:	a31d      	add	r3, pc, #116	; (adr r3, 80018c0 <move+0x110>)
 800184c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001850:	f7fe fe76 	bl	8000540 <__aeabi_dmul>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4610      	mov	r0, r2
 800185a:	4619      	mov	r1, r3
 800185c:	f04f 0200 	mov.w	r2, #0
 8001860:	4b1a      	ldr	r3, [pc, #104]	; (80018cc <move+0x11c>)
 8001862:	f7fe ff97 	bl	8000794 <__aeabi_ddiv>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	ec43 2b17 	vmov	d7, r2, r3
 800186e:	eeb0 0a47 	vmov.f32	s0, s14
 8001872:	eef0 0a67 	vmov.f32	s1, s15
 8001876:	f005 fe47 	bl	8007508 <sin>
 800187a:	ec53 2b10 	vmov	r2, r3, d0
 800187e:	4620      	mov	r0, r4
 8001880:	4629      	mov	r1, r5
 8001882:	f7fe fe5d 	bl	8000540 <__aeabi_dmul>
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	4610      	mov	r0, r2
 800188c:	4619      	mov	r1, r3
 800188e:	f7ff f907 	bl	8000aa0 <__aeabi_d2iz>
 8001892:	4603      	mov	r3, r0
 8001894:	60bb      	str	r3, [r7, #8]
	motor((x + y) , (x - y) , (- x - y), (y - x));
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	18d0      	adds	r0, r2, r3
 800189c:	68fa      	ldr	r2, [r7, #12]
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	1ad1      	subs	r1, r2, r3
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	425a      	negs	r2, r3
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	1ad4      	subs	r4, r2, r3
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	4622      	mov	r2, r4
 80018b2:	f7ff fcb1 	bl	8001218 <motor>
}
 80018b6:	bf00      	nop
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bdb0      	pop	{r4, r5, r7, pc}
 80018be:	bf00      	nop
 80018c0:	54442d18 	.word	0x54442d18
 80018c4:	400921fb 	.word	0x400921fb
 80018c8:	20000008 	.word	0x20000008
 80018cc:	40668000 	.word	0x40668000

080018d0 <read_pixy>:
	if(a<0)       a+=360;
	int x = v * cos(a * M_PI / 180);
	int y = v * sin(a * M_PI / 180);
	motor_without_correction((x + y) , (x - y) , (- x - y), (y - x));
}
void read_pixy(){
 80018d0:	b5b0      	push	{r4, r5, r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af02      	add	r7, sp, #8
	if (HAL_I2C_Master_Receive(&hi2c1, 0x54 << 1,i2c_rx_data, sizeof(i2c_rx_data), 100) == HAL_OK){
 80018d6:	2364      	movs	r3, #100	; 0x64
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	2340      	movs	r3, #64	; 0x40
 80018dc:	4a9c      	ldr	r2, [pc, #624]	; (8001b50 <read_pixy+0x280>)
 80018de:	21a8      	movs	r1, #168	; 0xa8
 80018e0:	489c      	ldr	r0, [pc, #624]	; (8001b54 <read_pixy+0x284>)
 80018e2:	f003 f92f 	bl	8004b44 <HAL_I2C_Master_Receive>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f040 8213 	bne.w	8001d14 <read_pixy+0x444>
		is_ball = 0;
 80018ee:	4b9a      	ldr	r3, [pc, #616]	; (8001b58 <read_pixy+0x288>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
		is_goal = 0;
 80018f4:	4b99      	ldr	r3, [pc, #612]	; (8001b5c <read_pixy+0x28c>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
		for (int i = sizeof(i2c_rx_data)-10; i >=0 ; i--) {
 80018fa:	2336      	movs	r3, #54	; 0x36
 80018fc:	607b      	str	r3, [r7, #4]
 80018fe:	e205      	b.n	8001d0c <read_pixy+0x43c>
			if(i2c_rx_data[i] == 0x55 && i2c_rx_data[i+1] == 0xaa && i2c_rx_data[i+2] != 0xaa && i2c_rx_data[i+2] != 0x55 ){
 8001900:	4a93      	ldr	r2, [pc, #588]	; (8001b50 <read_pixy+0x280>)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4413      	add	r3, r2
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b55      	cmp	r3, #85	; 0x55
 800190a:	f040 81fc 	bne.w	8001d06 <read_pixy+0x436>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	3301      	adds	r3, #1
 8001912:	4a8f      	ldr	r2, [pc, #572]	; (8001b50 <read_pixy+0x280>)
 8001914:	5cd3      	ldrb	r3, [r2, r3]
 8001916:	2baa      	cmp	r3, #170	; 0xaa
 8001918:	f040 81f5 	bne.w	8001d06 <read_pixy+0x436>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3302      	adds	r3, #2
 8001920:	4a8b      	ldr	r2, [pc, #556]	; (8001b50 <read_pixy+0x280>)
 8001922:	5cd3      	ldrb	r3, [r2, r3]
 8001924:	2baa      	cmp	r3, #170	; 0xaa
 8001926:	f000 81ee 	beq.w	8001d06 <read_pixy+0x436>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	3302      	adds	r3, #2
 800192e:	4a88      	ldr	r2, [pc, #544]	; (8001b50 <read_pixy+0x280>)
 8001930:	5cd3      	ldrb	r3, [r2, r3]
 8001932:	2b55      	cmp	r3, #85	; 0x55
 8001934:	f000 81e7 	beq.w	8001d06 <read_pixy+0x436>
				checksum  = i2c_rx_data[i+2]  | (i2c_rx_data[i+3] << 8);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3302      	adds	r3, #2
 800193c:	4a84      	ldr	r2, [pc, #528]	; (8001b50 <read_pixy+0x280>)
 800193e:	5cd3      	ldrb	r3, [r2, r3]
 8001940:	b21a      	sxth	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	3303      	adds	r3, #3
 8001946:	4982      	ldr	r1, [pc, #520]	; (8001b50 <read_pixy+0x280>)
 8001948:	5ccb      	ldrb	r3, [r1, r3]
 800194a:	021b      	lsls	r3, r3, #8
 800194c:	b21b      	sxth	r3, r3
 800194e:	4313      	orrs	r3, r2
 8001950:	b21b      	sxth	r3, r3
 8001952:	b29a      	uxth	r2, r3
 8001954:	4b82      	ldr	r3, [pc, #520]	; (8001b60 <read_pixy+0x290>)
 8001956:	801a      	strh	r2, [r3, #0]
				if(checksum == (i2c_rx_data[i+4]  | (i2c_rx_data[i+5] << 8)) + (i2c_rx_data[i+6]  | (i2c_rx_data[i+7] << 8)) + (i2c_rx_data[i+8]  | (i2c_rx_data[i+9] << 8)) + (i2c_rx_data[i+10] | (i2c_rx_data[i+11]<< 8)) + (i2c_rx_data[i+12] | (i2c_rx_data[i+13]<< 8))){
 8001958:	4b81      	ldr	r3, [pc, #516]	; (8001b60 <read_pixy+0x290>)
 800195a:	881b      	ldrh	r3, [r3, #0]
 800195c:	4618      	mov	r0, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	3304      	adds	r3, #4
 8001962:	4a7b      	ldr	r2, [pc, #492]	; (8001b50 <read_pixy+0x280>)
 8001964:	5cd3      	ldrb	r3, [r2, r3]
 8001966:	4619      	mov	r1, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	3305      	adds	r3, #5
 800196c:	4a78      	ldr	r2, [pc, #480]	; (8001b50 <read_pixy+0x280>)
 800196e:	5cd3      	ldrb	r3, [r2, r3]
 8001970:	021b      	lsls	r3, r3, #8
 8001972:	ea41 0203 	orr.w	r2, r1, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	3306      	adds	r3, #6
 800197a:	4975      	ldr	r1, [pc, #468]	; (8001b50 <read_pixy+0x280>)
 800197c:	5ccb      	ldrb	r3, [r1, r3]
 800197e:	461c      	mov	r4, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3307      	adds	r3, #7
 8001984:	4972      	ldr	r1, [pc, #456]	; (8001b50 <read_pixy+0x280>)
 8001986:	5ccb      	ldrb	r3, [r1, r3]
 8001988:	021b      	lsls	r3, r3, #8
 800198a:	4323      	orrs	r3, r4
 800198c:	441a      	add	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	3308      	adds	r3, #8
 8001992:	496f      	ldr	r1, [pc, #444]	; (8001b50 <read_pixy+0x280>)
 8001994:	5ccb      	ldrb	r3, [r1, r3]
 8001996:	461c      	mov	r4, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3309      	adds	r3, #9
 800199c:	496c      	ldr	r1, [pc, #432]	; (8001b50 <read_pixy+0x280>)
 800199e:	5ccb      	ldrb	r3, [r1, r3]
 80019a0:	021b      	lsls	r3, r3, #8
 80019a2:	4323      	orrs	r3, r4
 80019a4:	441a      	add	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	330a      	adds	r3, #10
 80019aa:	4969      	ldr	r1, [pc, #420]	; (8001b50 <read_pixy+0x280>)
 80019ac:	5ccb      	ldrb	r3, [r1, r3]
 80019ae:	461c      	mov	r4, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	330b      	adds	r3, #11
 80019b4:	4966      	ldr	r1, [pc, #408]	; (8001b50 <read_pixy+0x280>)
 80019b6:	5ccb      	ldrb	r3, [r1, r3]
 80019b8:	021b      	lsls	r3, r3, #8
 80019ba:	4323      	orrs	r3, r4
 80019bc:	441a      	add	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	330c      	adds	r3, #12
 80019c2:	4963      	ldr	r1, [pc, #396]	; (8001b50 <read_pixy+0x280>)
 80019c4:	5ccb      	ldrb	r3, [r1, r3]
 80019c6:	461c      	mov	r4, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	330d      	adds	r3, #13
 80019cc:	4960      	ldr	r1, [pc, #384]	; (8001b50 <read_pixy+0x280>)
 80019ce:	5ccb      	ldrb	r3, [r1, r3]
 80019d0:	021b      	lsls	r3, r3, #8
 80019d2:	4323      	orrs	r3, r4
 80019d4:	4413      	add	r3, r2
 80019d6:	4298      	cmp	r0, r3
 80019d8:	f040 8195 	bne.w	8001d06 <read_pixy+0x436>
					signature = i2c_rx_data[i+4]  | (i2c_rx_data[i+5] << 8);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3304      	adds	r3, #4
 80019e0:	4a5b      	ldr	r2, [pc, #364]	; (8001b50 <read_pixy+0x280>)
 80019e2:	5cd3      	ldrb	r3, [r2, r3]
 80019e4:	b21a      	sxth	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	3305      	adds	r3, #5
 80019ea:	4959      	ldr	r1, [pc, #356]	; (8001b50 <read_pixy+0x280>)
 80019ec:	5ccb      	ldrb	r3, [r1, r3]
 80019ee:	021b      	lsls	r3, r3, #8
 80019f0:	b21b      	sxth	r3, r3
 80019f2:	4313      	orrs	r3, r2
 80019f4:	b21b      	sxth	r3, r3
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	4b5a      	ldr	r3, [pc, #360]	; (8001b64 <read_pixy+0x294>)
 80019fa:	801a      	strh	r2, [r3, #0]
					if(signature == 1){
 80019fc:	4b59      	ldr	r3, [pc, #356]	; (8001b64 <read_pixy+0x294>)
 80019fe:	881b      	ldrh	r3, [r3, #0]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	f040 80bf 	bne.w	8001b84 <read_pixy+0x2b4>
						x_ball    = i2c_rx_data[i+6]  | (i2c_rx_data[i+7] << 8);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	3306      	adds	r3, #6
 8001a0a:	4a51      	ldr	r2, [pc, #324]	; (8001b50 <read_pixy+0x280>)
 8001a0c:	5cd3      	ldrb	r3, [r2, r3]
 8001a0e:	b21a      	sxth	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3307      	adds	r3, #7
 8001a14:	494e      	ldr	r1, [pc, #312]	; (8001b50 <read_pixy+0x280>)
 8001a16:	5ccb      	ldrb	r3, [r1, r3]
 8001a18:	021b      	lsls	r3, r3, #8
 8001a1a:	b21b      	sxth	r3, r3
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	b21b      	sxth	r3, r3
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	4b51      	ldr	r3, [pc, #324]	; (8001b68 <read_pixy+0x298>)
 8001a24:	801a      	strh	r2, [r3, #0]
						y_ball 	  = i2c_rx_data[i+8]  | (i2c_rx_data[i+9] << 8);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	3308      	adds	r3, #8
 8001a2a:	4a49      	ldr	r2, [pc, #292]	; (8001b50 <read_pixy+0x280>)
 8001a2c:	5cd3      	ldrb	r3, [r2, r3]
 8001a2e:	b21a      	sxth	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3309      	adds	r3, #9
 8001a34:	4946      	ldr	r1, [pc, #280]	; (8001b50 <read_pixy+0x280>)
 8001a36:	5ccb      	ldrb	r3, [r1, r3]
 8001a38:	021b      	lsls	r3, r3, #8
 8001a3a:	b21b      	sxth	r3, r3
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	b21b      	sxth	r3, r3
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	4b4a      	ldr	r3, [pc, #296]	; (8001b6c <read_pixy+0x29c>)
 8001a44:	801a      	strh	r2, [r3, #0]
						ball_angle     = atan2(y_ball - y_robot, x_robot - x_ball) * 180 / M_PI;
 8001a46:	4b49      	ldr	r3, [pc, #292]	; (8001b6c <read_pixy+0x29c>)
 8001a48:	881b      	ldrh	r3, [r3, #0]
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	4b48      	ldr	r3, [pc, #288]	; (8001b70 <read_pixy+0x2a0>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7fe fd0a 	bl	800046c <__aeabi_i2d>
 8001a58:	4604      	mov	r4, r0
 8001a5a:	460d      	mov	r5, r1
 8001a5c:	4b45      	ldr	r3, [pc, #276]	; (8001b74 <read_pixy+0x2a4>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a41      	ldr	r2, [pc, #260]	; (8001b68 <read_pixy+0x298>)
 8001a62:	8812      	ldrh	r2, [r2, #0]
 8001a64:	1a9b      	subs	r3, r3, r2
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7fe fd00 	bl	800046c <__aeabi_i2d>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	ec43 2b11 	vmov	d1, r2, r3
 8001a74:	ec45 4b10 	vmov	d0, r4, r5
 8001a78:	f005 fd9e 	bl	80075b8 <atan2>
 8001a7c:	ec51 0b10 	vmov	r0, r1, d0
 8001a80:	f04f 0200 	mov.w	r2, #0
 8001a84:	4b3c      	ldr	r3, [pc, #240]	; (8001b78 <read_pixy+0x2a8>)
 8001a86:	f7fe fd5b 	bl	8000540 <__aeabi_dmul>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	4610      	mov	r0, r2
 8001a90:	4619      	mov	r1, r3
 8001a92:	a32b      	add	r3, pc, #172	; (adr r3, 8001b40 <read_pixy+0x270>)
 8001a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a98:	f7fe fe7c 	bl	8000794 <__aeabi_ddiv>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4610      	mov	r0, r2
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	f7fe fffc 	bl	8000aa0 <__aeabi_d2iz>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	4a34      	ldr	r2, [pc, #208]	; (8001b7c <read_pixy+0x2ac>)
 8001aac:	6013      	str	r3, [r2, #0]
						if(ball_angle < 0)   ball_angle = ball_angle + 360;
 8001aae:	4b33      	ldr	r3, [pc, #204]	; (8001b7c <read_pixy+0x2ac>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	da05      	bge.n	8001ac2 <read_pixy+0x1f2>
 8001ab6:	4b31      	ldr	r3, [pc, #196]	; (8001b7c <read_pixy+0x2ac>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001abe:	4a2f      	ldr	r2, [pc, #188]	; (8001b7c <read_pixy+0x2ac>)
 8001ac0:	6013      	str	r3, [r2, #0]
						ball_dist = sqrt(pow(x_robot - x_ball , 2) + pow(y_robot - y_ball , 2));
 8001ac2:	4b2c      	ldr	r3, [pc, #176]	; (8001b74 <read_pixy+0x2a4>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a28      	ldr	r2, [pc, #160]	; (8001b68 <read_pixy+0x298>)
 8001ac8:	8812      	ldrh	r2, [r2, #0]
 8001aca:	1a9b      	subs	r3, r3, r2
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7fe fccd 	bl	800046c <__aeabi_i2d>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8001b48 <read_pixy+0x278>
 8001ada:	ec43 2b10 	vmov	d0, r2, r3
 8001ade:	f005 fd6d 	bl	80075bc <pow>
 8001ae2:	ec55 4b10 	vmov	r4, r5, d0
 8001ae6:	4b22      	ldr	r3, [pc, #136]	; (8001b70 <read_pixy+0x2a0>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a20      	ldr	r2, [pc, #128]	; (8001b6c <read_pixy+0x29c>)
 8001aec:	8812      	ldrh	r2, [r2, #0]
 8001aee:	1a9b      	subs	r3, r3, r2
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe fcbb 	bl	800046c <__aeabi_i2d>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8001b48 <read_pixy+0x278>
 8001afe:	ec43 2b10 	vmov	d0, r2, r3
 8001b02:	f005 fd5b 	bl	80075bc <pow>
 8001b06:	ec53 2b10 	vmov	r2, r3, d0
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	4629      	mov	r1, r5
 8001b0e:	f7fe fb61 	bl	80001d4 <__adddf3>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	ec43 2b17 	vmov	d7, r2, r3
 8001b1a:	eeb0 0a47 	vmov.f32	s0, s14
 8001b1e:	eef0 0a67 	vmov.f32	s1, s15
 8001b22:	f005 fdbb 	bl	800769c <sqrt>
 8001b26:	ec53 2b10 	vmov	r2, r3, d0
 8001b2a:	4610      	mov	r0, r2
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	f7fe ffb7 	bl	8000aa0 <__aeabi_d2iz>
 8001b32:	4603      	mov	r3, r0
 8001b34:	4a12      	ldr	r2, [pc, #72]	; (8001b80 <read_pixy+0x2b0>)
 8001b36:	6013      	str	r3, [r2, #0]
						is_ball = 1;
 8001b38:	4b07      	ldr	r3, [pc, #28]	; (8001b58 <read_pixy+0x288>)
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	e0e2      	b.n	8001d06 <read_pixy+0x436>
 8001b40:	54442d18 	.word	0x54442d18
 8001b44:	400921fb 	.word	0x400921fb
 8001b48:	00000000 	.word	0x00000000
 8001b4c:	40000000 	.word	0x40000000
 8001b50:	20000224 	.word	0x20000224
 8001b54:	200000f0 	.word	0x200000f0
 8001b58:	2000027c 	.word	0x2000027c
 8001b5c:	20000288 	.word	0x20000288
 8001b60:	20000264 	.word	0x20000264
 8001b64:	20000266 	.word	0x20000266
 8001b68:	20000268 	.word	0x20000268
 8001b6c:	2000026a 	.word	0x2000026a
 8001b70:	20000010 	.word	0x20000010
 8001b74:	2000000c 	.word	0x2000000c
 8001b78:	40668000 	.word	0x40668000
 8001b7c:	20000274 	.word	0x20000274
 8001b80:	20000278 	.word	0x20000278
					}
					else if(signature == 2){
 8001b84:	4b6a      	ldr	r3, [pc, #424]	; (8001d30 <read_pixy+0x460>)
 8001b86:	881b      	ldrh	r3, [r3, #0]
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	f040 80bc 	bne.w	8001d06 <read_pixy+0x436>
						x_goal    = i2c_rx_data[i+6]  | (i2c_rx_data[i+7] << 8);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	3306      	adds	r3, #6
 8001b92:	4a68      	ldr	r2, [pc, #416]	; (8001d34 <read_pixy+0x464>)
 8001b94:	5cd3      	ldrb	r3, [r2, r3]
 8001b96:	b21a      	sxth	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3307      	adds	r3, #7
 8001b9c:	4965      	ldr	r1, [pc, #404]	; (8001d34 <read_pixy+0x464>)
 8001b9e:	5ccb      	ldrb	r3, [r1, r3]
 8001ba0:	021b      	lsls	r3, r3, #8
 8001ba2:	b21b      	sxth	r3, r3
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	b21b      	sxth	r3, r3
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	4b63      	ldr	r3, [pc, #396]	; (8001d38 <read_pixy+0x468>)
 8001bac:	801a      	strh	r2, [r3, #0]
						y_goal 	  = i2c_rx_data[i+8]  | (i2c_rx_data[i+9] << 8);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	3308      	adds	r3, #8
 8001bb2:	4a60      	ldr	r2, [pc, #384]	; (8001d34 <read_pixy+0x464>)
 8001bb4:	5cd3      	ldrb	r3, [r2, r3]
 8001bb6:	b21a      	sxth	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3309      	adds	r3, #9
 8001bbc:	495d      	ldr	r1, [pc, #372]	; (8001d34 <read_pixy+0x464>)
 8001bbe:	5ccb      	ldrb	r3, [r1, r3]
 8001bc0:	021b      	lsls	r3, r3, #8
 8001bc2:	b21b      	sxth	r3, r3
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	b21b      	sxth	r3, r3
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	4b5c      	ldr	r3, [pc, #368]	; (8001d3c <read_pixy+0x46c>)
 8001bcc:	801a      	strh	r2, [r3, #0]
						w_goal 	  = i2c_rx_data[i+10] | (i2c_rx_data[i+11]<< 8);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	330a      	adds	r3, #10
 8001bd2:	4a58      	ldr	r2, [pc, #352]	; (8001d34 <read_pixy+0x464>)
 8001bd4:	5cd3      	ldrb	r3, [r2, r3]
 8001bd6:	b21a      	sxth	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	330b      	adds	r3, #11
 8001bdc:	4955      	ldr	r1, [pc, #340]	; (8001d34 <read_pixy+0x464>)
 8001bde:	5ccb      	ldrb	r3, [r1, r3]
 8001be0:	021b      	lsls	r3, r3, #8
 8001be2:	b21b      	sxth	r3, r3
 8001be4:	4313      	orrs	r3, r2
 8001be6:	b21b      	sxth	r3, r3
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	4b55      	ldr	r3, [pc, #340]	; (8001d40 <read_pixy+0x470>)
 8001bec:	801a      	strh	r2, [r3, #0]
						h_goal 	  = i2c_rx_data[i+12] | (i2c_rx_data[i+13]<< 8);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	330c      	adds	r3, #12
 8001bf2:	4a50      	ldr	r2, [pc, #320]	; (8001d34 <read_pixy+0x464>)
 8001bf4:	5cd3      	ldrb	r3, [r2, r3]
 8001bf6:	b21a      	sxth	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	330d      	adds	r3, #13
 8001bfc:	494d      	ldr	r1, [pc, #308]	; (8001d34 <read_pixy+0x464>)
 8001bfe:	5ccb      	ldrb	r3, [r1, r3]
 8001c00:	021b      	lsls	r3, r3, #8
 8001c02:	b21b      	sxth	r3, r3
 8001c04:	4313      	orrs	r3, r2
 8001c06:	b21b      	sxth	r3, r3
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	4b4e      	ldr	r3, [pc, #312]	; (8001d44 <read_pixy+0x474>)
 8001c0c:	801a      	strh	r2, [r3, #0]
						goal_angle     = atan2(y_goal - y_robot, x_robot - x_goal) * 180 / M_PI;
 8001c0e:	4b4b      	ldr	r3, [pc, #300]	; (8001d3c <read_pixy+0x46c>)
 8001c10:	881b      	ldrh	r3, [r3, #0]
 8001c12:	461a      	mov	r2, r3
 8001c14:	4b4c      	ldr	r3, [pc, #304]	; (8001d48 <read_pixy+0x478>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7fe fc26 	bl	800046c <__aeabi_i2d>
 8001c20:	4604      	mov	r4, r0
 8001c22:	460d      	mov	r5, r1
 8001c24:	4b49      	ldr	r3, [pc, #292]	; (8001d4c <read_pixy+0x47c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a43      	ldr	r2, [pc, #268]	; (8001d38 <read_pixy+0x468>)
 8001c2a:	8812      	ldrh	r2, [r2, #0]
 8001c2c:	1a9b      	subs	r3, r3, r2
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7fe fc1c 	bl	800046c <__aeabi_i2d>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	ec43 2b11 	vmov	d1, r2, r3
 8001c3c:	ec45 4b10 	vmov	d0, r4, r5
 8001c40:	f005 fcba 	bl	80075b8 <atan2>
 8001c44:	ec51 0b10 	vmov	r0, r1, d0
 8001c48:	f04f 0200 	mov.w	r2, #0
 8001c4c:	4b40      	ldr	r3, [pc, #256]	; (8001d50 <read_pixy+0x480>)
 8001c4e:	f7fe fc77 	bl	8000540 <__aeabi_dmul>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	4610      	mov	r0, r2
 8001c58:	4619      	mov	r1, r3
 8001c5a:	a331      	add	r3, pc, #196	; (adr r3, 8001d20 <read_pixy+0x450>)
 8001c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c60:	f7fe fd98 	bl	8000794 <__aeabi_ddiv>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4610      	mov	r0, r2
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	f7fe ff18 	bl	8000aa0 <__aeabi_d2iz>
 8001c70:	4603      	mov	r3, r0
 8001c72:	4a38      	ldr	r2, [pc, #224]	; (8001d54 <read_pixy+0x484>)
 8001c74:	6013      	str	r3, [r2, #0]
						if(goal_angle < 0)   goal_angle = goal_angle + 360;
 8001c76:	4b37      	ldr	r3, [pc, #220]	; (8001d54 <read_pixy+0x484>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	da05      	bge.n	8001c8a <read_pixy+0x3ba>
 8001c7e:	4b35      	ldr	r3, [pc, #212]	; (8001d54 <read_pixy+0x484>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c86:	4a33      	ldr	r2, [pc, #204]	; (8001d54 <read_pixy+0x484>)
 8001c88:	6013      	str	r3, [r2, #0]
						goal_dist = sqrt(pow(x_robot - x_goal , 2) + pow(y_robot - y_goal , 2));
 8001c8a:	4b30      	ldr	r3, [pc, #192]	; (8001d4c <read_pixy+0x47c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a2a      	ldr	r2, [pc, #168]	; (8001d38 <read_pixy+0x468>)
 8001c90:	8812      	ldrh	r2, [r2, #0]
 8001c92:	1a9b      	subs	r3, r3, r2
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7fe fbe9 	bl	800046c <__aeabi_i2d>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	ed9f 1b22 	vldr	d1, [pc, #136]	; 8001d28 <read_pixy+0x458>
 8001ca2:	ec43 2b10 	vmov	d0, r2, r3
 8001ca6:	f005 fc89 	bl	80075bc <pow>
 8001caa:	ec55 4b10 	vmov	r4, r5, d0
 8001cae:	4b26      	ldr	r3, [pc, #152]	; (8001d48 <read_pixy+0x478>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a22      	ldr	r2, [pc, #136]	; (8001d3c <read_pixy+0x46c>)
 8001cb4:	8812      	ldrh	r2, [r2, #0]
 8001cb6:	1a9b      	subs	r3, r3, r2
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7fe fbd7 	bl	800046c <__aeabi_i2d>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8001d28 <read_pixy+0x458>
 8001cc6:	ec43 2b10 	vmov	d0, r2, r3
 8001cca:	f005 fc77 	bl	80075bc <pow>
 8001cce:	ec53 2b10 	vmov	r2, r3, d0
 8001cd2:	4620      	mov	r0, r4
 8001cd4:	4629      	mov	r1, r5
 8001cd6:	f7fe fa7d 	bl	80001d4 <__adddf3>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	460b      	mov	r3, r1
 8001cde:	ec43 2b17 	vmov	d7, r2, r3
 8001ce2:	eeb0 0a47 	vmov.f32	s0, s14
 8001ce6:	eef0 0a67 	vmov.f32	s1, s15
 8001cea:	f005 fcd7 	bl	800769c <sqrt>
 8001cee:	ec53 2b10 	vmov	r2, r3, d0
 8001cf2:	4610      	mov	r0, r2
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	f7fe fed3 	bl	8000aa0 <__aeabi_d2iz>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	4a16      	ldr	r2, [pc, #88]	; (8001d58 <read_pixy+0x488>)
 8001cfe:	6013      	str	r3, [r2, #0]
						is_goal = 1;
 8001d00:	4b16      	ldr	r3, [pc, #88]	; (8001d5c <read_pixy+0x48c>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	601a      	str	r2, [r3, #0]
		for (int i = sizeof(i2c_rx_data)-10; i >=0 ; i--) {
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	607b      	str	r3, [r7, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f6bf adf6 	bge.w	8001900 <read_pixy+0x30>
					}
				}
			}
		}
	}
}
 8001d14:	bf00      	nop
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bdb0      	pop	{r4, r5, r7, pc}
 8001d1c:	f3af 8000 	nop.w
 8001d20:	54442d18 	.word	0x54442d18
 8001d24:	400921fb 	.word	0x400921fb
 8001d28:	00000000 	.word	0x00000000
 8001d2c:	40000000 	.word	0x40000000
 8001d30:	20000266 	.word	0x20000266
 8001d34:	20000224 	.word	0x20000224
 8001d38:	20000270 	.word	0x20000270
 8001d3c:	20000272 	.word	0x20000272
 8001d40:	2000026c 	.word	0x2000026c
 8001d44:	2000026e 	.word	0x2000026e
 8001d48:	20000010 	.word	0x20000010
 8001d4c:	2000000c 	.word	0x2000000c
 8001d50:	40668000 	.word	0x40668000
 8001d54:	20000280 	.word	0x20000280
 8001d58:	20000284 	.word	0x20000284
 8001d5c:	20000288 	.word	0x20000288

08001d60 <read_sensors>:
void read_sensors(){
 8001d60:	b590      	push	{r4, r7, lr}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin)){
 8001d66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d6a:	483b      	ldr	r0, [pc, #236]	; (8001e58 <read_sensors+0xf8>)
 8001d6c:	f002 fc76 	bl	800465c <HAL_GPIO_ReadPin>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d06d      	beq.n	8001e52 <read_sensors+0xf2>
		RED_ON;
 8001d76:	2201      	movs	r2, #1
 8001d78:	2120      	movs	r1, #32
 8001d7a:	4837      	ldr	r0, [pc, #220]	; (8001e58 <read_sensors+0xf8>)
 8001d7c:	f002 fc86 	bl	800468c <HAL_GPIO_WritePin>
		BUZZER_ON;
 8001d80:	2201      	movs	r2, #1
 8001d82:	2108      	movs	r1, #8
 8001d84:	4834      	ldr	r0, [pc, #208]	; (8001e58 <read_sensors+0xf8>)
 8001d86:	f002 fc81 	bl	800468c <HAL_GPIO_WritePin>
		for(int i=0; i<16; i++){
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	e04a      	b.n	8001e26 <read_sensors+0xc6>
			HAL_GPIO_WritePin(ADD0_GPIO_Port, ADD0_Pin, (i/1)%2);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	bfb8      	it	lt
 8001d9a:	425b      	neglt	r3, r3
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	461a      	mov	r2, r3
 8001da0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001da4:	482d      	ldr	r0, [pc, #180]	; (8001e5c <read_sensors+0xfc>)
 8001da6:	f002 fc71 	bl	800468c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ADD1_GPIO_Port, ADD1_Pin, (i/2)%2);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	0fda      	lsrs	r2, r3, #31
 8001dae:	4413      	add	r3, r2
 8001db0:	105b      	asrs	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	bfb8      	it	lt
 8001dba:	425b      	neglt	r3, r3
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001dc4:	4825      	ldr	r0, [pc, #148]	; (8001e5c <read_sensors+0xfc>)
 8001dc6:	f002 fc61 	bl	800468c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ADD2_GPIO_Port, ADD2_Pin, (i/4)%2);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	da00      	bge.n	8001dd2 <read_sensors+0x72>
 8001dd0:	3303      	adds	r3, #3
 8001dd2:	109b      	asrs	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	bfb8      	it	lt
 8001ddc:	425b      	neglt	r3, r3
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	461a      	mov	r2, r3
 8001de2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001de6:	481d      	ldr	r0, [pc, #116]	; (8001e5c <read_sensors+0xfc>)
 8001de8:	f002 fc50 	bl	800468c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ADD3_GPIO_Port, ADD3_Pin, (i/8)%2);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	da00      	bge.n	8001df4 <read_sensors+0x94>
 8001df2:	3307      	adds	r3, #7
 8001df4:	10db      	asrs	r3, r3, #3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	bfb8      	it	lt
 8001dfe:	425b      	neglt	r3, r3
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	461a      	mov	r2, r3
 8001e04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e08:	4814      	ldr	r0, [pc, #80]	; (8001e5c <read_sensors+0xfc>)
 8001e0a:	f002 fc3f 	bl	800468c <HAL_GPIO_WritePin>
			kaf_set[i] = read_adc(ADC_CHANNEL_14);
 8001e0e:	200e      	movs	r0, #14
 8001e10:	f7ff f9d8 	bl	80011c4 <read_adc>
 8001e14:	4603      	mov	r3, r0
 8001e16:	4619      	mov	r1, r3
 8001e18:	4a11      	ldr	r2, [pc, #68]	; (8001e60 <read_sensors+0x100>)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i=0; i<16; i++){
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	3301      	adds	r3, #1
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2b0f      	cmp	r3, #15
 8001e2a:	ddb1      	ble.n	8001d90 <read_sensors+0x30>
		}
		while(HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin));
 8001e2c:	bf00      	nop
 8001e2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e32:	4809      	ldr	r0, [pc, #36]	; (8001e58 <read_sensors+0xf8>)
 8001e34:	f002 fc12 	bl	800465c <HAL_GPIO_ReadPin>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f7      	bne.n	8001e2e <read_sensors+0xce>
		RED_OFF;
 8001e3e:	2200      	movs	r2, #0
 8001e40:	2120      	movs	r1, #32
 8001e42:	4805      	ldr	r0, [pc, #20]	; (8001e58 <read_sensors+0xf8>)
 8001e44:	f002 fc22 	bl	800468c <HAL_GPIO_WritePin>
		BUZZER_OFF;
 8001e48:	2200      	movs	r2, #0
 8001e4a:	2108      	movs	r1, #8
 8001e4c:	4802      	ldr	r0, [pc, #8]	; (8001e58 <read_sensors+0xf8>)
 8001e4e:	f002 fc1d 	bl	800468c <HAL_GPIO_WritePin>
	}
	for(int i=0; i<16; i++){
 8001e52:	2300      	movs	r3, #0
 8001e54:	60bb      	str	r3, [r7, #8]
 8001e56:	e147      	b.n	80020e8 <read_sensors+0x388>
 8001e58:	40020400 	.word	0x40020400
 8001e5c:	40020c00 	.word	0x40020c00
 8001e60:	200002dc 	.word	0x200002dc
		HAL_GPIO_WritePin(ADD0_GPIO_Port, ADD0_Pin, (i/1)%2);
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	bfb8      	it	lt
 8001e6e:	425b      	neglt	r3, r3
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	461a      	mov	r2, r3
 8001e74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e78:	48a4      	ldr	r0, [pc, #656]	; (800210c <read_sensors+0x3ac>)
 8001e7a:	f002 fc07 	bl	800468c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ADD1_GPIO_Port, ADD1_Pin, (i/2)%2);
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	0fda      	lsrs	r2, r3, #31
 8001e82:	4413      	add	r3, r2
 8001e84:	105b      	asrs	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	bfb8      	it	lt
 8001e8e:	425b      	neglt	r3, r3
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	461a      	mov	r2, r3
 8001e94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e98:	489c      	ldr	r0, [pc, #624]	; (800210c <read_sensors+0x3ac>)
 8001e9a:	f002 fbf7 	bl	800468c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ADD2_GPIO_Port, ADD2_Pin, (i/4)%2);
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	da00      	bge.n	8001ea6 <read_sensors+0x146>
 8001ea4:	3303      	adds	r3, #3
 8001ea6:	109b      	asrs	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	bfb8      	it	lt
 8001eb0:	425b      	neglt	r3, r3
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001eba:	4894      	ldr	r0, [pc, #592]	; (800210c <read_sensors+0x3ac>)
 8001ebc:	f002 fbe6 	bl	800468c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ADD3_GPIO_Port, ADD3_Pin, (i/8)%2);
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	da00      	bge.n	8001ec8 <read_sensors+0x168>
 8001ec6:	3307      	adds	r3, #7
 8001ec8:	10db      	asrs	r3, r3, #3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	bfb8      	it	lt
 8001ed2:	425b      	neglt	r3, r3
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001edc:	488b      	ldr	r0, [pc, #556]	; (800210c <read_sensors+0x3ac>)
 8001ede:	f002 fbd5 	bl	800468c <HAL_GPIO_WritePin>
		if(i == 5)  kaf[0]  = kaf_set[i] - read_adc(ADC_CHANNEL_14);
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	2b05      	cmp	r3, #5
 8001ee6:	d10c      	bne.n	8001f02 <read_sensors+0x1a2>
 8001ee8:	4a89      	ldr	r2, [pc, #548]	; (8002110 <read_sensors+0x3b0>)
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef0:	461c      	mov	r4, r3
 8001ef2:	200e      	movs	r0, #14
 8001ef4:	f7ff f966 	bl	80011c4 <read_adc>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	1ae3      	subs	r3, r4, r3
 8001efc:	461a      	mov	r2, r3
 8001efe:	4b85      	ldr	r3, [pc, #532]	; (8002114 <read_sensors+0x3b4>)
 8001f00:	601a      	str	r2, [r3, #0]
		if(i == 9)  kaf[1]  = kaf_set[i] - read_adc(ADC_CHANNEL_14);
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	2b09      	cmp	r3, #9
 8001f06:	d10c      	bne.n	8001f22 <read_sensors+0x1c2>
 8001f08:	4a81      	ldr	r2, [pc, #516]	; (8002110 <read_sensors+0x3b0>)
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f10:	461c      	mov	r4, r3
 8001f12:	200e      	movs	r0, #14
 8001f14:	f7ff f956 	bl	80011c4 <read_adc>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	1ae3      	subs	r3, r4, r3
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4b7d      	ldr	r3, [pc, #500]	; (8002114 <read_sensors+0x3b4>)
 8001f20:	605a      	str	r2, [r3, #4]
		if(i == 11) kaf[2]  = kaf_set[i] - read_adc(ADC_CHANNEL_14);
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	2b0b      	cmp	r3, #11
 8001f26:	d10c      	bne.n	8001f42 <read_sensors+0x1e2>
 8001f28:	4a79      	ldr	r2, [pc, #484]	; (8002110 <read_sensors+0x3b0>)
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f30:	461c      	mov	r4, r3
 8001f32:	200e      	movs	r0, #14
 8001f34:	f7ff f946 	bl	80011c4 <read_adc>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	1ae3      	subs	r3, r4, r3
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	4b75      	ldr	r3, [pc, #468]	; (8002114 <read_sensors+0x3b4>)
 8001f40:	609a      	str	r2, [r3, #8]
		if(i == 4)  kaf[3]  = kaf_set[i] - read_adc(ADC_CHANNEL_14);
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	2b04      	cmp	r3, #4
 8001f46:	d10c      	bne.n	8001f62 <read_sensors+0x202>
 8001f48:	4a71      	ldr	r2, [pc, #452]	; (8002110 <read_sensors+0x3b0>)
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f50:	461c      	mov	r4, r3
 8001f52:	200e      	movs	r0, #14
 8001f54:	f7ff f936 	bl	80011c4 <read_adc>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	1ae3      	subs	r3, r4, r3
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4b6d      	ldr	r3, [pc, #436]	; (8002114 <read_sensors+0x3b4>)
 8001f60:	60da      	str	r2, [r3, #12]
		if(i == 6)  kaf[4]  = kaf_set[i] - read_adc(ADC_CHANNEL_14);
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	2b06      	cmp	r3, #6
 8001f66:	d10c      	bne.n	8001f82 <read_sensors+0x222>
 8001f68:	4a69      	ldr	r2, [pc, #420]	; (8002110 <read_sensors+0x3b0>)
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f70:	461c      	mov	r4, r3
 8001f72:	200e      	movs	r0, #14
 8001f74:	f7ff f926 	bl	80011c4 <read_adc>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	1ae3      	subs	r3, r4, r3
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	4b65      	ldr	r3, [pc, #404]	; (8002114 <read_sensors+0x3b4>)
 8001f80:	611a      	str	r2, [r3, #16]
		if(i == 8)  kaf[5]  = kaf_set[i] - read_adc(ADC_CHANNEL_14);
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	2b08      	cmp	r3, #8
 8001f86:	d10c      	bne.n	8001fa2 <read_sensors+0x242>
 8001f88:	4a61      	ldr	r2, [pc, #388]	; (8002110 <read_sensors+0x3b0>)
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f90:	461c      	mov	r4, r3
 8001f92:	200e      	movs	r0, #14
 8001f94:	f7ff f916 	bl	80011c4 <read_adc>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	1ae3      	subs	r3, r4, r3
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4b5d      	ldr	r3, [pc, #372]	; (8002114 <read_sensors+0x3b4>)
 8001fa0:	615a      	str	r2, [r3, #20]
		if(i == 12) kaf[6]  = kaf_set[i] - read_adc(ADC_CHANNEL_14);
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	2b0c      	cmp	r3, #12
 8001fa6:	d10c      	bne.n	8001fc2 <read_sensors+0x262>
 8001fa8:	4a59      	ldr	r2, [pc, #356]	; (8002110 <read_sensors+0x3b0>)
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb0:	461c      	mov	r4, r3
 8001fb2:	200e      	movs	r0, #14
 8001fb4:	f7ff f906 	bl	80011c4 <read_adc>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	1ae3      	subs	r3, r4, r3
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	4b55      	ldr	r3, [pc, #340]	; (8002114 <read_sensors+0x3b4>)
 8001fc0:	619a      	str	r2, [r3, #24]
		if(i == 7)  kaf[7]  = kaf_set[i] - read_adc(ADC_CHANNEL_14);
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	2b07      	cmp	r3, #7
 8001fc6:	d10c      	bne.n	8001fe2 <read_sensors+0x282>
 8001fc8:	4a51      	ldr	r2, [pc, #324]	; (8002110 <read_sensors+0x3b0>)
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd0:	461c      	mov	r4, r3
 8001fd2:	200e      	movs	r0, #14
 8001fd4:	f7ff f8f6 	bl	80011c4 <read_adc>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	1ae3      	subs	r3, r4, r3
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4b4d      	ldr	r3, [pc, #308]	; (8002114 <read_sensors+0x3b4>)
 8001fe0:	61da      	str	r2, [r3, #28]
		if(i == 3)  kaf[8]  = kaf_set[i] - read_adc(ADC_CHANNEL_14);
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	2b03      	cmp	r3, #3
 8001fe6:	d10c      	bne.n	8002002 <read_sensors+0x2a2>
 8001fe8:	4a49      	ldr	r2, [pc, #292]	; (8002110 <read_sensors+0x3b0>)
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff0:	461c      	mov	r4, r3
 8001ff2:	200e      	movs	r0, #14
 8001ff4:	f7ff f8e6 	bl	80011c4 <read_adc>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	1ae3      	subs	r3, r4, r3
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4b45      	ldr	r3, [pc, #276]	; (8002114 <read_sensors+0x3b4>)
 8002000:	621a      	str	r2, [r3, #32]
		if(i == 1)  kaf[9]  = kaf_set[i] - read_adc(ADC_CHANNEL_14);
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d10c      	bne.n	8002022 <read_sensors+0x2c2>
 8002008:	4a41      	ldr	r2, [pc, #260]	; (8002110 <read_sensors+0x3b0>)
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002010:	461c      	mov	r4, r3
 8002012:	200e      	movs	r0, #14
 8002014:	f7ff f8d6 	bl	80011c4 <read_adc>
 8002018:	4603      	mov	r3, r0
 800201a:	1ae3      	subs	r3, r4, r3
 800201c:	461a      	mov	r2, r3
 800201e:	4b3d      	ldr	r3, [pc, #244]	; (8002114 <read_sensors+0x3b4>)
 8002020:	625a      	str	r2, [r3, #36]	; 0x24
		if(i == 14) kaf[10] = kaf_set[i] - read_adc(ADC_CHANNEL_14);
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	2b0e      	cmp	r3, #14
 8002026:	d10c      	bne.n	8002042 <read_sensors+0x2e2>
 8002028:	4a39      	ldr	r2, [pc, #228]	; (8002110 <read_sensors+0x3b0>)
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002030:	461c      	mov	r4, r3
 8002032:	200e      	movs	r0, #14
 8002034:	f7ff f8c6 	bl	80011c4 <read_adc>
 8002038:	4603      	mov	r3, r0
 800203a:	1ae3      	subs	r3, r4, r3
 800203c:	461a      	mov	r2, r3
 800203e:	4b35      	ldr	r3, [pc, #212]	; (8002114 <read_sensors+0x3b4>)
 8002040:	629a      	str	r2, [r3, #40]	; 0x28
		if(i == 10) kaf[11] = kaf_set[i] - read_adc(ADC_CHANNEL_14);
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	2b0a      	cmp	r3, #10
 8002046:	d10c      	bne.n	8002062 <read_sensors+0x302>
 8002048:	4a31      	ldr	r2, [pc, #196]	; (8002110 <read_sensors+0x3b0>)
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002050:	461c      	mov	r4, r3
 8002052:	200e      	movs	r0, #14
 8002054:	f7ff f8b6 	bl	80011c4 <read_adc>
 8002058:	4603      	mov	r3, r0
 800205a:	1ae3      	subs	r3, r4, r3
 800205c:	461a      	mov	r2, r3
 800205e:	4b2d      	ldr	r3, [pc, #180]	; (8002114 <read_sensors+0x3b4>)
 8002060:	62da      	str	r2, [r3, #44]	; 0x2c
		if(i == 2)  kaf[12] = kaf_set[i] - read_adc(ADC_CHANNEL_14);
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	2b02      	cmp	r3, #2
 8002066:	d10c      	bne.n	8002082 <read_sensors+0x322>
 8002068:	4a29      	ldr	r2, [pc, #164]	; (8002110 <read_sensors+0x3b0>)
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002070:	461c      	mov	r4, r3
 8002072:	200e      	movs	r0, #14
 8002074:	f7ff f8a6 	bl	80011c4 <read_adc>
 8002078:	4603      	mov	r3, r0
 800207a:	1ae3      	subs	r3, r4, r3
 800207c:	461a      	mov	r2, r3
 800207e:	4b25      	ldr	r3, [pc, #148]	; (8002114 <read_sensors+0x3b4>)
 8002080:	631a      	str	r2, [r3, #48]	; 0x30
		if(i == 15) kaf[13] = kaf_set[i] - read_adc(ADC_CHANNEL_14);
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	2b0f      	cmp	r3, #15
 8002086:	d10c      	bne.n	80020a2 <read_sensors+0x342>
 8002088:	4a21      	ldr	r2, [pc, #132]	; (8002110 <read_sensors+0x3b0>)
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002090:	461c      	mov	r4, r3
 8002092:	200e      	movs	r0, #14
 8002094:	f7ff f896 	bl	80011c4 <read_adc>
 8002098:	4603      	mov	r3, r0
 800209a:	1ae3      	subs	r3, r4, r3
 800209c:	461a      	mov	r2, r3
 800209e:	4b1d      	ldr	r3, [pc, #116]	; (8002114 <read_sensors+0x3b4>)
 80020a0:	635a      	str	r2, [r3, #52]	; 0x34
		if(i == 13) kaf[14] = kaf_set[i] - read_adc(ADC_CHANNEL_14);
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	2b0d      	cmp	r3, #13
 80020a6:	d10c      	bne.n	80020c2 <read_sensors+0x362>
 80020a8:	4a19      	ldr	r2, [pc, #100]	; (8002110 <read_sensors+0x3b0>)
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b0:	461c      	mov	r4, r3
 80020b2:	200e      	movs	r0, #14
 80020b4:	f7ff f886 	bl	80011c4 <read_adc>
 80020b8:	4603      	mov	r3, r0
 80020ba:	1ae3      	subs	r3, r4, r3
 80020bc:	461a      	mov	r2, r3
 80020be:	4b15      	ldr	r3, [pc, #84]	; (8002114 <read_sensors+0x3b4>)
 80020c0:	639a      	str	r2, [r3, #56]	; 0x38
		if(i == 0)  kaf[15] = kaf_set[i] - read_adc(ADC_CHANNEL_14);
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d10c      	bne.n	80020e2 <read_sensors+0x382>
 80020c8:	4a11      	ldr	r2, [pc, #68]	; (8002110 <read_sensors+0x3b0>)
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020d0:	461c      	mov	r4, r3
 80020d2:	200e      	movs	r0, #14
 80020d4:	f7ff f876 	bl	80011c4 <read_adc>
 80020d8:	4603      	mov	r3, r0
 80020da:	1ae3      	subs	r3, r4, r3
 80020dc:	461a      	mov	r2, r3
 80020de:	4b0d      	ldr	r3, [pc, #52]	; (8002114 <read_sensors+0x3b4>)
 80020e0:	63da      	str	r2, [r3, #60]	; 0x3c
	for(int i=0; i<16; i++){
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	3301      	adds	r3, #1
 80020e6:	60bb      	str	r3, [r7, #8]
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	2b0f      	cmp	r3, #15
 80020ec:	f77f aeba 	ble.w	8001e64 <read_sensors+0x104>
	}
	int shoot_sens   = read_adc(ADC_CHANNEL_10);
 80020f0:	200a      	movs	r0, #10
 80020f2:	f7ff f867 	bl	80011c4 <read_adc>
 80020f6:	4603      	mov	r3, r0
 80020f8:	607b      	str	r3, [r7, #4]
	if(shoot_sens < 2500) ball_in_kicker = 1;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8002100:	4293      	cmp	r3, r2
 8002102:	dc0b      	bgt.n	800211c <read_sensors+0x3bc>
 8002104:	4b04      	ldr	r3, [pc, #16]	; (8002118 <read_sensors+0x3b8>)
 8002106:	2201      	movs	r2, #1
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	e00a      	b.n	8002122 <read_sensors+0x3c2>
 800210c:	40020c00 	.word	0x40020c00
 8002110:	200002dc 	.word	0x200002dc
 8002114:	2000029c 	.word	0x2000029c
 8002118:	20000320 	.word	0x20000320
	else 				  ball_in_kicker = 0;
 800211c:	4b27      	ldr	r3, [pc, #156]	; (80021bc <read_sensors+0x45c>)
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
//	int battery_volt = read_adc(ADC_CHANNEL_7) * 0.044;
	read_pixy();
 8002122:	f7ff fbd5 	bl	80018d0 <read_pixy>
	readGY();
 8002126:	f7fe fe65 	bl	8000df4 <readGY>

	print_num("GY:", Heading, 0, 0);
 800212a:	4b25      	ldr	r3, [pc, #148]	; (80021c0 <read_sensors+0x460>)
 800212c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002130:	4619      	mov	r1, r3
 8002132:	2300      	movs	r3, #0
 8002134:	2200      	movs	r2, #0
 8002136:	4823      	ldr	r0, [pc, #140]	; (80021c4 <read_sensors+0x464>)
 8002138:	f7fe ff50 	bl	8000fdc <print_num>
	print_num("XB:", x_ball, 0, 10);
 800213c:	4b22      	ldr	r3, [pc, #136]	; (80021c8 <read_sensors+0x468>)
 800213e:	881b      	ldrh	r3, [r3, #0]
 8002140:	4619      	mov	r1, r3
 8002142:	230a      	movs	r3, #10
 8002144:	2200      	movs	r2, #0
 8002146:	4821      	ldr	r0, [pc, #132]	; (80021cc <read_sensors+0x46c>)
 8002148:	f7fe ff48 	bl	8000fdc <print_num>
	print_num("YB:", y_ball, 0, 20);
 800214c:	4b20      	ldr	r3, [pc, #128]	; (80021d0 <read_sensors+0x470>)
 800214e:	881b      	ldrh	r3, [r3, #0]
 8002150:	4619      	mov	r1, r3
 8002152:	2314      	movs	r3, #20
 8002154:	2200      	movs	r2, #0
 8002156:	481f      	ldr	r0, [pc, #124]	; (80021d4 <read_sensors+0x474>)
 8002158:	f7fe ff40 	bl	8000fdc <print_num>
	print_num("BA:", ball_angle, 0, 30);
 800215c:	4b1e      	ldr	r3, [pc, #120]	; (80021d8 <read_sensors+0x478>)
 800215e:	6819      	ldr	r1, [r3, #0]
 8002160:	231e      	movs	r3, #30
 8002162:	2200      	movs	r2, #0
 8002164:	481d      	ldr	r0, [pc, #116]	; (80021dc <read_sensors+0x47c>)
 8002166:	f7fe ff39 	bl	8000fdc <print_num>
	print_num("BD", ball_dist, 0, 40);
 800216a:	4b1d      	ldr	r3, [pc, #116]	; (80021e0 <read_sensors+0x480>)
 800216c:	6819      	ldr	r1, [r3, #0]
 800216e:	2328      	movs	r3, #40	; 0x28
 8002170:	2200      	movs	r2, #0
 8002172:	481c      	ldr	r0, [pc, #112]	; (80021e4 <read_sensors+0x484>)
 8002174:	f7fe ff32 	bl	8000fdc <print_num>
	print_num("SH", shoot_sens, 0, 50);
 8002178:	2332      	movs	r3, #50	; 0x32
 800217a:	2200      	movs	r2, #0
 800217c:	6879      	ldr	r1, [r7, #4]
 800217e:	481a      	ldr	r0, [pc, #104]	; (80021e8 <read_sensors+0x488>)
 8002180:	f7fe ff2c 	bl	8000fdc <print_num>
	SSD1306_GotoXY(64, 0);
 8002184:	2100      	movs	r1, #0
 8002186:	2040      	movs	r0, #64	; 0x40
 8002188:	f001 f818 	bl	80031bc <SSD1306_GotoXY>
	if(HAL_GPIO_ReadPin(DIP1_GPIO_Port, DIP1_Pin))
 800218c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002190:	4816      	ldr	r0, [pc, #88]	; (80021ec <read_sensors+0x48c>)
 8002192:	f002 fa63 	bl	800465c <HAL_GPIO_ReadPin>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d005      	beq.n	80021a8 <read_sensors+0x448>
		SSD1306_Puts("Rotate", &Font_7x10, 1);
 800219c:	2201      	movs	r2, #1
 800219e:	4914      	ldr	r1, [pc, #80]	; (80021f0 <read_sensors+0x490>)
 80021a0:	4814      	ldr	r0, [pc, #80]	; (80021f4 <read_sensors+0x494>)
 80021a2:	f001 f8a1 	bl	80032e8 <SSD1306_Puts>
	else
		SSD1306_Puts("Straight", &Font_7x10, 1);
}
 80021a6:	e004      	b.n	80021b2 <read_sensors+0x452>
		SSD1306_Puts("Straight", &Font_7x10, 1);
 80021a8:	2201      	movs	r2, #1
 80021aa:	4911      	ldr	r1, [pc, #68]	; (80021f0 <read_sensors+0x490>)
 80021ac:	4812      	ldr	r0, [pc, #72]	; (80021f8 <read_sensors+0x498>)
 80021ae:	f001 f89b 	bl	80032e8 <SSD1306_Puts>
}
 80021b2:	bf00      	nop
 80021b4:	3714      	adds	r7, #20
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd90      	pop	{r4, r7, pc}
 80021ba:	bf00      	nop
 80021bc:	20000320 	.word	0x20000320
 80021c0:	20000298 	.word	0x20000298
 80021c4:	08009810 	.word	0x08009810
 80021c8:	20000268 	.word	0x20000268
 80021cc:	08009814 	.word	0x08009814
 80021d0:	2000026a 	.word	0x2000026a
 80021d4:	08009818 	.word	0x08009818
 80021d8:	20000274 	.word	0x20000274
 80021dc:	0800981c 	.word	0x0800981c
 80021e0:	20000278 	.word	0x20000278
 80021e4:	08009820 	.word	0x08009820
 80021e8:	08009824 	.word	0x08009824
 80021ec:	40020800 	.word	0x40020800
 80021f0:	20000000 	.word	0x20000000
 80021f4:	08009828 	.word	0x08009828
 80021f8:	08009830 	.word	0x08009830

080021fc <delay>:
void delay(int sec){
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
	for(int i=0; i<sec; i++){
 8002204:	2300      	movs	r3, #0
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	e004      	b.n	8002214 <delay+0x18>
		read_sensors();
 800220a:	f7ff fda9 	bl	8001d60 <read_sensors>
	for(int i=0; i<sec; i++){
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	3301      	adds	r3, #1
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	429a      	cmp	r2, r3
 800221a:	dbf6      	blt.n	800220a <delay+0xe>
	}
}
 800221c:	bf00      	nop
 800221e:	bf00      	nop
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
	...

08002228 <spin>:
void spin(int spin){
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
	if      (spin==1)  		 HAL_GPIO_WritePin(SPIN_GPIO_Port, SPIN_Pin, 1);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d106      	bne.n	8002244 <spin+0x1c>
 8002236:	2201      	movs	r2, #1
 8002238:	f44f 7180 	mov.w	r1, #256	; 0x100
 800223c:	4808      	ldr	r0, [pc, #32]	; (8002260 <spin+0x38>)
 800223e:	f002 fa25 	bl	800468c <HAL_GPIO_WritePin>
	else if (spin==0)		 HAL_GPIO_WritePin(SPIN_GPIO_Port, SPIN_Pin, 0);
}
 8002242:	e008      	b.n	8002256 <spin+0x2e>
	else if (spin==0)		 HAL_GPIO_WritePin(SPIN_GPIO_Port, SPIN_Pin, 0);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d105      	bne.n	8002256 <spin+0x2e>
 800224a:	2200      	movs	r2, #0
 800224c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002250:	4803      	ldr	r0, [pc, #12]	; (8002260 <spin+0x38>)
 8002252:	f002 fa1b 	bl	800468c <HAL_GPIO_WritePin>
}
 8002256:	bf00      	nop
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40020c00 	.word	0x40020c00

08002264 <shoot>:
void shoot(){
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
	if( already_shooted == 1){
 8002268:	4b14      	ldr	r3, [pc, #80]	; (80022bc <shoot+0x58>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d10b      	bne.n	8002288 <shoot+0x24>
		shoot_cnt++;
 8002270:	4b13      	ldr	r3, [pc, #76]	; (80022c0 <shoot+0x5c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	3301      	adds	r3, #1
 8002276:	4a12      	ldr	r2, [pc, #72]	; (80022c0 <shoot+0x5c>)
 8002278:	6013      	str	r3, [r2, #0]
		if(shoot_cnt > 50)  already_shooted = 0;
 800227a:	4b11      	ldr	r3, [pc, #68]	; (80022c0 <shoot+0x5c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2b32      	cmp	r3, #50	; 0x32
 8002280:	dd02      	ble.n	8002288 <shoot+0x24>
 8002282:	4b0e      	ldr	r3, [pc, #56]	; (80022bc <shoot+0x58>)
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(SHOOT_GPIO_Port, SHOOT_Pin, 1);
 8002288:	2201      	movs	r2, #1
 800228a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800228e:	480d      	ldr	r0, [pc, #52]	; (80022c4 <shoot+0x60>)
 8002290:	f002 f9fc 	bl	800468c <HAL_GPIO_WritePin>
	delay(5);
 8002294:	2005      	movs	r0, #5
 8002296:	f7ff ffb1 	bl	80021fc <delay>
	HAL_GPIO_WritePin(SHOOT_GPIO_Port, SHOOT_Pin, 0);
 800229a:	2200      	movs	r2, #0
 800229c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022a0:	4808      	ldr	r0, [pc, #32]	; (80022c4 <shoot+0x60>)
 80022a2:	f002 f9f3 	bl	800468c <HAL_GPIO_WritePin>
	delay(5);
 80022a6:	2005      	movs	r0, #5
 80022a8:	f7ff ffa8 	bl	80021fc <delay>
	already_shooted = 1;
 80022ac:	4b03      	ldr	r3, [pc, #12]	; (80022bc <shoot+0x58>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	601a      	str	r2, [r3, #0]
	shoot_cnt = 0;
 80022b2:	4b03      	ldr	r3, [pc, #12]	; (80022c0 <shoot+0x5c>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
}
 80022b8:	bf00      	nop
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	20000324 	.word	0x20000324
 80022c0:	20000328 	.word	0x20000328
 80022c4:	40020400 	.word	0x40020400

080022c8 <rotate_and_shoot>:
void rotate_and_shoot(){
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
	spin(1);
 80022cc:	2001      	movs	r0, #1
 80022ce:	f7ff ffab 	bl	8002228 <spin>
	v = 50;
 80022d2:	4b48      	ldr	r3, [pc, #288]	; (80023f4 <rotate_and_shoot+0x12c>)
 80022d4:	2232      	movs	r2, #50	; 0x32
 80022d6:	601a      	str	r2, [r3, #0]
	if(mf_cnt < 5){
 80022d8:	4b47      	ldr	r3, [pc, #284]	; (80023f8 <rotate_and_shoot+0x130>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b04      	cmp	r3, #4
 80022de:	dc0b      	bgt.n	80022f8 <rotate_and_shoot+0x30>
		arrived_to_goal = 0;
 80022e0:	4b46      	ldr	r3, [pc, #280]	; (80023fc <rotate_and_shoot+0x134>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
		move(0);
 80022e6:	2000      	movs	r0, #0
 80022e8:	f7ff fa62 	bl	80017b0 <move>
		mf_cnt++;
 80022ec:	4b42      	ldr	r3, [pc, #264]	; (80023f8 <rotate_and_shoot+0x130>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	3301      	adds	r3, #1
 80022f2:	4a41      	ldr	r2, [pc, #260]	; (80023f8 <rotate_and_shoot+0x130>)
 80022f4:	6013      	str	r3, [r2, #0]
				}

			}
		}
	}
}
 80022f6:	e07b      	b.n	80023f0 <rotate_and_shoot+0x128>
		look_dir = 'B';
 80022f8:	4b41      	ldr	r3, [pc, #260]	; (8002400 <rotate_and_shoot+0x138>)
 80022fa:	2242      	movs	r2, #66	; 0x42
 80022fc:	701a      	strb	r2, [r3, #0]
		if(Heading < 135 && Heading > -135 && arrived_to_goal == 0){
 80022fe:	4b41      	ldr	r3, [pc, #260]	; (8002404 <rotate_and_shoot+0x13c>)
 8002300:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002304:	2b86      	cmp	r3, #134	; 0x86
 8002306:	dc1f      	bgt.n	8002348 <rotate_and_shoot+0x80>
 8002308:	4b3e      	ldr	r3, [pc, #248]	; (8002404 <rotate_and_shoot+0x13c>)
 800230a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800230e:	f113 0f86 	cmn.w	r3, #134	; 0x86
 8002312:	db19      	blt.n	8002348 <rotate_and_shoot+0x80>
 8002314:	4b39      	ldr	r3, [pc, #228]	; (80023fc <rotate_and_shoot+0x134>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d115      	bne.n	8002348 <rotate_and_shoot+0x80>
			if(Heading < 0) motor_without_correction(70, 70, 70, 0);
 800231c:	4b39      	ldr	r3, [pc, #228]	; (8002404 <rotate_and_shoot+0x13c>)
 800231e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002322:	2b00      	cmp	r3, #0
 8002324:	da06      	bge.n	8002334 <rotate_and_shoot+0x6c>
 8002326:	2300      	movs	r3, #0
 8002328:	2246      	movs	r2, #70	; 0x46
 800232a:	2146      	movs	r1, #70	; 0x46
 800232c:	2046      	movs	r0, #70	; 0x46
 800232e:	f7ff f8d7 	bl	80014e0 <motor_without_correction>
 8002332:	e05d      	b.n	80023f0 <rotate_and_shoot+0x128>
			else 			motor_without_correction(0, -70, -70, -70);
 8002334:	f06f 0345 	mvn.w	r3, #69	; 0x45
 8002338:	f06f 0245 	mvn.w	r2, #69	; 0x45
 800233c:	f06f 0145 	mvn.w	r1, #69	; 0x45
 8002340:	2000      	movs	r0, #0
 8002342:	f7ff f8cd 	bl	80014e0 <motor_without_correction>
			if(Heading < 0) motor_without_correction(70, 70, 70, 0);
 8002346:	e053      	b.n	80023f0 <rotate_and_shoot+0x128>
			if (arrived_to_goal == 0) {
 8002348:	4b2c      	ldr	r3, [pc, #176]	; (80023fc <rotate_and_shoot+0x134>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d122      	bne.n	8002396 <rotate_and_shoot+0xce>
				v = 50;
 8002350:	4b28      	ldr	r3, [pc, #160]	; (80023f4 <rotate_and_shoot+0x12c>)
 8002352:	2232      	movs	r2, #50	; 0x32
 8002354:	601a      	str	r2, [r3, #0]
				move(goal_angle);
 8002356:	4b2c      	ldr	r3, [pc, #176]	; (8002408 <rotate_and_shoot+0x140>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff fa28 	bl	80017b0 <move>
				if(kaf[15] > LDR_Sens || kaf[14] > LDR_Sens || kaf[13] > LDR_Sens || kaf[9] > LDR_Sens || kaf[6] > LDR_Sens) arrived_to_goal = 1;
 8002360:	4b2a      	ldr	r3, [pc, #168]	; (800240c <rotate_and_shoot+0x144>)
 8002362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002364:	2bc8      	cmp	r3, #200	; 0xc8
 8002366:	dc0f      	bgt.n	8002388 <rotate_and_shoot+0xc0>
 8002368:	4b28      	ldr	r3, [pc, #160]	; (800240c <rotate_and_shoot+0x144>)
 800236a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800236c:	2bc8      	cmp	r3, #200	; 0xc8
 800236e:	dc0b      	bgt.n	8002388 <rotate_and_shoot+0xc0>
 8002370:	4b26      	ldr	r3, [pc, #152]	; (800240c <rotate_and_shoot+0x144>)
 8002372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002374:	2bc8      	cmp	r3, #200	; 0xc8
 8002376:	dc07      	bgt.n	8002388 <rotate_and_shoot+0xc0>
 8002378:	4b24      	ldr	r3, [pc, #144]	; (800240c <rotate_and_shoot+0x144>)
 800237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237c:	2bc8      	cmp	r3, #200	; 0xc8
 800237e:	dc03      	bgt.n	8002388 <rotate_and_shoot+0xc0>
 8002380:	4b22      	ldr	r3, [pc, #136]	; (800240c <rotate_and_shoot+0x144>)
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	2bc8      	cmp	r3, #200	; 0xc8
 8002386:	dd02      	ble.n	800238e <rotate_and_shoot+0xc6>
 8002388:	4b1c      	ldr	r3, [pc, #112]	; (80023fc <rotate_and_shoot+0x134>)
 800238a:	2201      	movs	r2, #1
 800238c:	601a      	str	r2, [r3, #0]
				stop_before_shoot_cnt = 0;
 800238e:	4b20      	ldr	r3, [pc, #128]	; (8002410 <rotate_and_shoot+0x148>)
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
}
 8002394:	e02c      	b.n	80023f0 <rotate_and_shoot+0x128>
				if(goal_angle < 5 || goal_angle > 355) {
 8002396:	4b1c      	ldr	r3, [pc, #112]	; (8002408 <rotate_and_shoot+0x140>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2b04      	cmp	r3, #4
 800239c:	dd04      	ble.n	80023a8 <rotate_and_shoot+0xe0>
 800239e:	4b1a      	ldr	r3, [pc, #104]	; (8002408 <rotate_and_shoot+0x140>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f5b3 7fb2 	cmp.w	r3, #356	; 0x164
 80023a6:	db04      	blt.n	80023b2 <rotate_and_shoot+0xea>
					fast_stop();
 80023a8:	f7ff f9be 	bl	8001728 <fast_stop>
					shoot();
 80023ac:	f7ff ff5a 	bl	8002264 <shoot>
 80023b0:	e01e      	b.n	80023f0 <rotate_and_shoot+0x128>
				else if(goal_angle < 180) {
 80023b2:	4b15      	ldr	r3, [pc, #84]	; (8002408 <rotate_and_shoot+0x140>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2bb3      	cmp	r3, #179	; 0xb3
 80023b8:	dc09      	bgt.n	80023ce <rotate_and_shoot+0x106>
					motor_without_correction(70, 70, 70, 0);
 80023ba:	2300      	movs	r3, #0
 80023bc:	2246      	movs	r2, #70	; 0x46
 80023be:	2146      	movs	r1, #70	; 0x46
 80023c0:	2046      	movs	r0, #70	; 0x46
 80023c2:	f7ff f88d 	bl	80014e0 <motor_without_correction>
					stop_before_shoot_cnt = 0;
 80023c6:	4b12      	ldr	r3, [pc, #72]	; (8002410 <rotate_and_shoot+0x148>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
}
 80023cc:	e010      	b.n	80023f0 <rotate_and_shoot+0x128>
				else if(goal_angle >=180) {
 80023ce:	4b0e      	ldr	r3, [pc, #56]	; (8002408 <rotate_and_shoot+0x140>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2bb3      	cmp	r3, #179	; 0xb3
 80023d4:	dd0c      	ble.n	80023f0 <rotate_and_shoot+0x128>
					motor_without_correction(0, -70, -70, -70);
 80023d6:	f06f 0345 	mvn.w	r3, #69	; 0x45
 80023da:	f06f 0245 	mvn.w	r2, #69	; 0x45
 80023de:	f06f 0145 	mvn.w	r1, #69	; 0x45
 80023e2:	2000      	movs	r0, #0
 80023e4:	f7ff f87c 	bl	80014e0 <motor_without_correction>
					stop_before_shoot_cnt = 0;
 80023e8:	4b09      	ldr	r3, [pc, #36]	; (8002410 <rotate_and_shoot+0x148>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]
}
 80023ee:	e7ff      	b.n	80023f0 <rotate_and_shoot+0x128>
 80023f0:	bf00      	nop
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	20000008 	.word	0x20000008
 80023f8:	2000032c 	.word	0x2000032c
 80023fc:	2000031c 	.word	0x2000031c
 8002400:	20000019 	.word	0x20000019
 8002404:	20000298 	.word	0x20000298
 8002408:	20000280 	.word	0x20000280
 800240c:	2000029c 	.word	0x2000029c
 8002410:	20000330 	.word	0x20000330

08002414 <shoot_straight>:
void shoot_straight(){
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
	spin(1);
 8002418:	2001      	movs	r0, #1
 800241a:	f7ff ff05 	bl	8002228 <spin>
	if(goal_angle < 5 || goal_angle > 355) {
 800241e:	4b14      	ldr	r3, [pc, #80]	; (8002470 <shoot_straight+0x5c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2b04      	cmp	r3, #4
 8002424:	dd04      	ble.n	8002430 <shoot_straight+0x1c>
 8002426:	4b12      	ldr	r3, [pc, #72]	; (8002470 <shoot_straight+0x5c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f5b3 7fb2 	cmp.w	r3, #356	; 0x164
 800242e:	db04      	blt.n	800243a <shoot_straight+0x26>
		fast_stop();
 8002430:	f7ff f97a 	bl	8001728 <fast_stop>
		shoot();
 8002434:	f7ff ff16 	bl	8002264 <shoot>
	}
	else if(goal_angle < 180)
		motor_without_correction(70, 70, 70, 0);
	else if(goal_angle >=180)
		motor_without_correction(0, -70, -70, -70);
}
 8002438:	e017      	b.n	800246a <shoot_straight+0x56>
	else if(goal_angle < 180)
 800243a:	4b0d      	ldr	r3, [pc, #52]	; (8002470 <shoot_straight+0x5c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2bb3      	cmp	r3, #179	; 0xb3
 8002440:	dc06      	bgt.n	8002450 <shoot_straight+0x3c>
		motor_without_correction(70, 70, 70, 0);
 8002442:	2300      	movs	r3, #0
 8002444:	2246      	movs	r2, #70	; 0x46
 8002446:	2146      	movs	r1, #70	; 0x46
 8002448:	2046      	movs	r0, #70	; 0x46
 800244a:	f7ff f849 	bl	80014e0 <motor_without_correction>
}
 800244e:	e00c      	b.n	800246a <shoot_straight+0x56>
	else if(goal_angle >=180)
 8002450:	4b07      	ldr	r3, [pc, #28]	; (8002470 <shoot_straight+0x5c>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2bb3      	cmp	r3, #179	; 0xb3
 8002456:	dd08      	ble.n	800246a <shoot_straight+0x56>
		motor_without_correction(0, -70, -70, -70);
 8002458:	f06f 0345 	mvn.w	r3, #69	; 0x45
 800245c:	f06f 0245 	mvn.w	r2, #69	; 0x45
 8002460:	f06f 0145 	mvn.w	r1, #69	; 0x45
 8002464:	2000      	movs	r0, #0
 8002466:	f7ff f83b 	bl	80014e0 <motor_without_correction>
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	20000280 	.word	0x20000280

08002474 <moveForSec>:
void moveForSec(int angle, int sec){
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
	for(int i=0; i<sec; i++){
 800247e:	2300      	movs	r3, #0
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	e007      	b.n	8002494 <moveForSec+0x20>
		read_sensors();
 8002484:	f7ff fc6c 	bl	8001d60 <read_sensors>
		move(angle);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f7ff f991 	bl	80017b0 <move>
	for(int i=0; i<sec; i++){
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	3301      	adds	r3, #1
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	429a      	cmp	r2, r3
 800249a:	dbf3      	blt.n	8002484 <moveForSec+0x10>
	}
}
 800249c:	bf00      	nop
 800249e:	bf00      	nop
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
	...

080024a8 <OUT>:
void OUT(){
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
	out_cnt = 0;
 80024ac:	4b98      	ldr	r3, [pc, #608]	; (8002710 <OUT+0x268>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
	v = 80;
 80024b2:	4b98      	ldr	r3, [pc, #608]	; (8002714 <OUT+0x26c>)
 80024b4:	2250      	movs	r2, #80	; 0x50
 80024b6:	601a      	str	r2, [r3, #0]
	if(kaf[15] > LDR_Sens || kaf[14] > LDR_Sens || kaf[13] > LDR_Sens || kaf[9] > LDR_Sens || kaf[6] > LDR_Sens) arrived_to_goal = 1;
 80024b8:	4b97      	ldr	r3, [pc, #604]	; (8002718 <OUT+0x270>)
 80024ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024bc:	2bc8      	cmp	r3, #200	; 0xc8
 80024be:	dc0f      	bgt.n	80024e0 <OUT+0x38>
 80024c0:	4b95      	ldr	r3, [pc, #596]	; (8002718 <OUT+0x270>)
 80024c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c4:	2bc8      	cmp	r3, #200	; 0xc8
 80024c6:	dc0b      	bgt.n	80024e0 <OUT+0x38>
 80024c8:	4b93      	ldr	r3, [pc, #588]	; (8002718 <OUT+0x270>)
 80024ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024cc:	2bc8      	cmp	r3, #200	; 0xc8
 80024ce:	dc07      	bgt.n	80024e0 <OUT+0x38>
 80024d0:	4b91      	ldr	r3, [pc, #580]	; (8002718 <OUT+0x270>)
 80024d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d4:	2bc8      	cmp	r3, #200	; 0xc8
 80024d6:	dc03      	bgt.n	80024e0 <OUT+0x38>
 80024d8:	4b8f      	ldr	r3, [pc, #572]	; (8002718 <OUT+0x270>)
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	2bc8      	cmp	r3, #200	; 0xc8
 80024de:	dd02      	ble.n	80024e6 <OUT+0x3e>
 80024e0:	4b8e      	ldr	r3, [pc, #568]	; (800271c <OUT+0x274>)
 80024e2:	2201      	movs	r2, #1
 80024e4:	601a      	str	r2, [r3, #0]
	if(kaf[0] > LDR_Sens || kaf[1] > LDR_Sens || kaf[2] > LDR_Sens || kaf[4] > LDR_Sens){
 80024e6:	4b8c      	ldr	r3, [pc, #560]	; (8002718 <OUT+0x270>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2bc8      	cmp	r3, #200	; 0xc8
 80024ec:	dc0b      	bgt.n	8002506 <OUT+0x5e>
 80024ee:	4b8a      	ldr	r3, [pc, #552]	; (8002718 <OUT+0x270>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2bc8      	cmp	r3, #200	; 0xc8
 80024f4:	dc07      	bgt.n	8002506 <OUT+0x5e>
 80024f6:	4b88      	ldr	r3, [pc, #544]	; (8002718 <OUT+0x270>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	2bc8      	cmp	r3, #200	; 0xc8
 80024fc:	dc03      	bgt.n	8002506 <OUT+0x5e>
 80024fe:	4b86      	ldr	r3, [pc, #536]	; (8002718 <OUT+0x270>)
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	2bc8      	cmp	r3, #200	; 0xc8
 8002504:	dd19      	ble.n	800253a <OUT+0x92>
		fast_stop();
 8002506:	f7ff f90f 	bl	8001728 <fast_stop>
		moveForSec(180, 10);
 800250a:	210a      	movs	r1, #10
 800250c:	20b4      	movs	r0, #180	; 0xb4
 800250e:	f7ff ffb1 	bl	8002474 <moveForSec>
		while(is_ball && out_cnt <30){
 8002512:	e008      	b.n	8002526 <OUT+0x7e>
		  read_sensors();
 8002514:	f7ff fc24 	bl	8001d60 <read_sensors>
		  stop();
 8002518:	f7ff f93e 	bl	8001798 <stop>
		  out_cnt++;
 800251c:	4b7c      	ldr	r3, [pc, #496]	; (8002710 <OUT+0x268>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	3301      	adds	r3, #1
 8002522:	4a7b      	ldr	r2, [pc, #492]	; (8002710 <OUT+0x268>)
 8002524:	6013      	str	r3, [r2, #0]
		while(is_ball && out_cnt <30){
 8002526:	4b7e      	ldr	r3, [pc, #504]	; (8002720 <OUT+0x278>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 80e9 	beq.w	8002702 <OUT+0x25a>
 8002530:	4b77      	ldr	r3, [pc, #476]	; (8002710 <OUT+0x268>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2b1d      	cmp	r3, #29
 8002536:	dded      	ble.n	8002514 <OUT+0x6c>
	if(kaf[0] > LDR_Sens || kaf[1] > LDR_Sens || kaf[2] > LDR_Sens || kaf[4] > LDR_Sens){
 8002538:	e0e3      	b.n	8002702 <OUT+0x25a>
		}
	}
	else if(kaf[3] > LDR_Sens){
 800253a:	4b77      	ldr	r3, [pc, #476]	; (8002718 <OUT+0x270>)
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	2bc8      	cmp	r3, #200	; 0xc8
 8002540:	dd19      	ble.n	8002576 <OUT+0xce>
		fast_stop();
 8002542:	f7ff f8f1 	bl	8001728 <fast_stop>
		moveForSec(225, 10);
 8002546:	210a      	movs	r1, #10
 8002548:	20e1      	movs	r0, #225	; 0xe1
 800254a:	f7ff ff93 	bl	8002474 <moveForSec>
		while(is_ball && out_cnt <30){
 800254e:	e008      	b.n	8002562 <OUT+0xba>
			read_sensors();
 8002550:	f7ff fc06 	bl	8001d60 <read_sensors>
			stop();
 8002554:	f7ff f920 	bl	8001798 <stop>
			out_cnt++;
 8002558:	4b6d      	ldr	r3, [pc, #436]	; (8002710 <OUT+0x268>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	3301      	adds	r3, #1
 800255e:	4a6c      	ldr	r2, [pc, #432]	; (8002710 <OUT+0x268>)
 8002560:	6013      	str	r3, [r2, #0]
		while(is_ball && out_cnt <30){
 8002562:	4b6f      	ldr	r3, [pc, #444]	; (8002720 <OUT+0x278>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 80dd 	beq.w	8002726 <OUT+0x27e>
 800256c:	4b68      	ldr	r3, [pc, #416]	; (8002710 <OUT+0x268>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2b1d      	cmp	r3, #29
 8002572:	dded      	ble.n	8002550 <OUT+0xa8>
			read_sensors();
			stop();
			out_cnt++;
	  }
	}
}
 8002574:	e0d7      	b.n	8002726 <OUT+0x27e>
	else if(kaf[6] > LDR_Sens || kaf[7] > LDR_Sens){
 8002576:	4b68      	ldr	r3, [pc, #416]	; (8002718 <OUT+0x270>)
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	2bc8      	cmp	r3, #200	; 0xc8
 800257c:	dc03      	bgt.n	8002586 <OUT+0xde>
 800257e:	4b66      	ldr	r3, [pc, #408]	; (8002718 <OUT+0x270>)
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	2bc8      	cmp	r3, #200	; 0xc8
 8002584:	dd1a      	ble.n	80025bc <OUT+0x114>
		fast_stop();
 8002586:	f7ff f8cf 	bl	8001728 <fast_stop>
		moveForSec(270, 10);
 800258a:	210a      	movs	r1, #10
 800258c:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8002590:	f7ff ff70 	bl	8002474 <moveForSec>
		while(is_ball && out_cnt <30){
 8002594:	e008      	b.n	80025a8 <OUT+0x100>
		  read_sensors();
 8002596:	f7ff fbe3 	bl	8001d60 <read_sensors>
		  stop();
 800259a:	f7ff f8fd 	bl	8001798 <stop>
		  out_cnt++;
 800259e:	4b5c      	ldr	r3, [pc, #368]	; (8002710 <OUT+0x268>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	3301      	adds	r3, #1
 80025a4:	4a5a      	ldr	r2, [pc, #360]	; (8002710 <OUT+0x268>)
 80025a6:	6013      	str	r3, [r2, #0]
		while(is_ball && out_cnt <30){
 80025a8:	4b5d      	ldr	r3, [pc, #372]	; (8002720 <OUT+0x278>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f000 80aa 	beq.w	8002706 <OUT+0x25e>
 80025b2:	4b57      	ldr	r3, [pc, #348]	; (8002710 <OUT+0x268>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2b1d      	cmp	r3, #29
 80025b8:	dded      	ble.n	8002596 <OUT+0xee>
	else if(kaf[6] > LDR_Sens || kaf[7] > LDR_Sens){
 80025ba:	e0a4      	b.n	8002706 <OUT+0x25e>
	else if(kaf[10] > LDR_Sens){
 80025bc:	4b56      	ldr	r3, [pc, #344]	; (8002718 <OUT+0x270>)
 80025be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c0:	2bc8      	cmp	r3, #200	; 0xc8
 80025c2:	dd1a      	ble.n	80025fa <OUT+0x152>
		fast_stop();
 80025c4:	f7ff f8b0 	bl	8001728 <fast_stop>
		moveForSec(315, 10);
 80025c8:	210a      	movs	r1, #10
 80025ca:	f240 103b 	movw	r0, #315	; 0x13b
 80025ce:	f7ff ff51 	bl	8002474 <moveForSec>
		while(is_ball && out_cnt <30){
 80025d2:	e008      	b.n	80025e6 <OUT+0x13e>
			read_sensors();
 80025d4:	f7ff fbc4 	bl	8001d60 <read_sensors>
			stop();
 80025d8:	f7ff f8de 	bl	8001798 <stop>
			out_cnt++;
 80025dc:	4b4c      	ldr	r3, [pc, #304]	; (8002710 <OUT+0x268>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	3301      	adds	r3, #1
 80025e2:	4a4b      	ldr	r2, [pc, #300]	; (8002710 <OUT+0x268>)
 80025e4:	6013      	str	r3, [r2, #0]
		while(is_ball && out_cnt <30){
 80025e6:	4b4e      	ldr	r3, [pc, #312]	; (8002720 <OUT+0x278>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f000 809b 	beq.w	8002726 <OUT+0x27e>
 80025f0:	4b47      	ldr	r3, [pc, #284]	; (8002710 <OUT+0x268>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2b1d      	cmp	r3, #29
 80025f6:	dded      	ble.n	80025d4 <OUT+0x12c>
}
 80025f8:	e095      	b.n	8002726 <OUT+0x27e>
	else if(kaf[13] > LDR_Sens || kaf[14] > LDR_Sens || kaf[15] > LDR_Sens || kaf[11] > LDR_Sens){
 80025fa:	4b47      	ldr	r3, [pc, #284]	; (8002718 <OUT+0x270>)
 80025fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025fe:	2bc8      	cmp	r3, #200	; 0xc8
 8002600:	dc0b      	bgt.n	800261a <OUT+0x172>
 8002602:	4b45      	ldr	r3, [pc, #276]	; (8002718 <OUT+0x270>)
 8002604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002606:	2bc8      	cmp	r3, #200	; 0xc8
 8002608:	dc07      	bgt.n	800261a <OUT+0x172>
 800260a:	4b43      	ldr	r3, [pc, #268]	; (8002718 <OUT+0x270>)
 800260c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800260e:	2bc8      	cmp	r3, #200	; 0xc8
 8002610:	dc03      	bgt.n	800261a <OUT+0x172>
 8002612:	4b41      	ldr	r3, [pc, #260]	; (8002718 <OUT+0x270>)
 8002614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002616:	2bc8      	cmp	r3, #200	; 0xc8
 8002618:	dd18      	ble.n	800264c <OUT+0x1a4>
		fast_stop();
 800261a:	f7ff f885 	bl	8001728 <fast_stop>
		moveForSec(0, 10);
 800261e:	210a      	movs	r1, #10
 8002620:	2000      	movs	r0, #0
 8002622:	f7ff ff27 	bl	8002474 <moveForSec>
		while(is_ball && out_cnt <30){
 8002626:	e008      	b.n	800263a <OUT+0x192>
		  read_sensors();
 8002628:	f7ff fb9a 	bl	8001d60 <read_sensors>
		  stop();
 800262c:	f7ff f8b4 	bl	8001798 <stop>
		  out_cnt++;
 8002630:	4b37      	ldr	r3, [pc, #220]	; (8002710 <OUT+0x268>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	3301      	adds	r3, #1
 8002636:	4a36      	ldr	r2, [pc, #216]	; (8002710 <OUT+0x268>)
 8002638:	6013      	str	r3, [r2, #0]
		while(is_ball && out_cnt <30){
 800263a:	4b39      	ldr	r3, [pc, #228]	; (8002720 <OUT+0x278>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d063      	beq.n	800270a <OUT+0x262>
 8002642:	4b33      	ldr	r3, [pc, #204]	; (8002710 <OUT+0x268>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2b1d      	cmp	r3, #29
 8002648:	ddee      	ble.n	8002628 <OUT+0x180>
	else if(kaf[13] > LDR_Sens || kaf[14] > LDR_Sens || kaf[15] > LDR_Sens || kaf[11] > LDR_Sens){
 800264a:	e05e      	b.n	800270a <OUT+0x262>
	else if(kaf[12] > LDR_Sens){
 800264c:	4b32      	ldr	r3, [pc, #200]	; (8002718 <OUT+0x270>)
 800264e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002650:	2bc8      	cmp	r3, #200	; 0xc8
 8002652:	dd18      	ble.n	8002686 <OUT+0x1de>
		fast_stop();
 8002654:	f7ff f868 	bl	8001728 <fast_stop>
		moveForSec(45, 10);
 8002658:	210a      	movs	r1, #10
 800265a:	202d      	movs	r0, #45	; 0x2d
 800265c:	f7ff ff0a 	bl	8002474 <moveForSec>
		while(is_ball && out_cnt <30){
 8002660:	e008      	b.n	8002674 <OUT+0x1cc>
			read_sensors();
 8002662:	f7ff fb7d 	bl	8001d60 <read_sensors>
			stop();
 8002666:	f7ff f897 	bl	8001798 <stop>
			out_cnt++;
 800266a:	4b29      	ldr	r3, [pc, #164]	; (8002710 <OUT+0x268>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	3301      	adds	r3, #1
 8002670:	4a27      	ldr	r2, [pc, #156]	; (8002710 <OUT+0x268>)
 8002672:	6013      	str	r3, [r2, #0]
		while(is_ball && out_cnt <30){
 8002674:	4b2a      	ldr	r3, [pc, #168]	; (8002720 <OUT+0x278>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d054      	beq.n	8002726 <OUT+0x27e>
 800267c:	4b24      	ldr	r3, [pc, #144]	; (8002710 <OUT+0x268>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2b1d      	cmp	r3, #29
 8002682:	ddee      	ble.n	8002662 <OUT+0x1ba>
}
 8002684:	e04f      	b.n	8002726 <OUT+0x27e>
	else if(kaf[9] > LDR_Sens || kaf[8] > LDR_Sens){
 8002686:	4b24      	ldr	r3, [pc, #144]	; (8002718 <OUT+0x270>)
 8002688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268a:	2bc8      	cmp	r3, #200	; 0xc8
 800268c:	dc03      	bgt.n	8002696 <OUT+0x1ee>
 800268e:	4b22      	ldr	r3, [pc, #136]	; (8002718 <OUT+0x270>)
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	2bc8      	cmp	r3, #200	; 0xc8
 8002694:	dd18      	ble.n	80026c8 <OUT+0x220>
		fast_stop();
 8002696:	f7ff f847 	bl	8001728 <fast_stop>
		moveForSec(90, 10);
 800269a:	210a      	movs	r1, #10
 800269c:	205a      	movs	r0, #90	; 0x5a
 800269e:	f7ff fee9 	bl	8002474 <moveForSec>
		while(is_ball && out_cnt <30){
 80026a2:	e008      	b.n	80026b6 <OUT+0x20e>
		  read_sensors();
 80026a4:	f7ff fb5c 	bl	8001d60 <read_sensors>
		  stop();
 80026a8:	f7ff f876 	bl	8001798 <stop>
		  out_cnt++;
 80026ac:	4b18      	ldr	r3, [pc, #96]	; (8002710 <OUT+0x268>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	3301      	adds	r3, #1
 80026b2:	4a17      	ldr	r2, [pc, #92]	; (8002710 <OUT+0x268>)
 80026b4:	6013      	str	r3, [r2, #0]
		while(is_ball && out_cnt <30){
 80026b6:	4b1a      	ldr	r3, [pc, #104]	; (8002720 <OUT+0x278>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d032      	beq.n	8002724 <OUT+0x27c>
 80026be:	4b14      	ldr	r3, [pc, #80]	; (8002710 <OUT+0x268>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2b1d      	cmp	r3, #29
 80026c4:	ddee      	ble.n	80026a4 <OUT+0x1fc>
	else if(kaf[9] > LDR_Sens || kaf[8] > LDR_Sens){
 80026c6:	e02d      	b.n	8002724 <OUT+0x27c>
	else if(kaf[5] > LDR_Sens){
 80026c8:	4b13      	ldr	r3, [pc, #76]	; (8002718 <OUT+0x270>)
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	2bc8      	cmp	r3, #200	; 0xc8
 80026ce:	dd2a      	ble.n	8002726 <OUT+0x27e>
		fast_stop();
 80026d0:	f7ff f82a 	bl	8001728 <fast_stop>
		moveForSec(135, 10);
 80026d4:	210a      	movs	r1, #10
 80026d6:	2087      	movs	r0, #135	; 0x87
 80026d8:	f7ff fecc 	bl	8002474 <moveForSec>
		while(is_ball && out_cnt <30){
 80026dc:	e008      	b.n	80026f0 <OUT+0x248>
			read_sensors();
 80026de:	f7ff fb3f 	bl	8001d60 <read_sensors>
			stop();
 80026e2:	f7ff f859 	bl	8001798 <stop>
			out_cnt++;
 80026e6:	4b0a      	ldr	r3, [pc, #40]	; (8002710 <OUT+0x268>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	3301      	adds	r3, #1
 80026ec:	4a08      	ldr	r2, [pc, #32]	; (8002710 <OUT+0x268>)
 80026ee:	6013      	str	r3, [r2, #0]
		while(is_ball && out_cnt <30){
 80026f0:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <OUT+0x278>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d016      	beq.n	8002726 <OUT+0x27e>
 80026f8:	4b05      	ldr	r3, [pc, #20]	; (8002710 <OUT+0x268>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2b1d      	cmp	r3, #29
 80026fe:	ddee      	ble.n	80026de <OUT+0x236>
}
 8002700:	e011      	b.n	8002726 <OUT+0x27e>
	if(kaf[0] > LDR_Sens || kaf[1] > LDR_Sens || kaf[2] > LDR_Sens || kaf[4] > LDR_Sens){
 8002702:	bf00      	nop
 8002704:	e00f      	b.n	8002726 <OUT+0x27e>
	else if(kaf[6] > LDR_Sens || kaf[7] > LDR_Sens){
 8002706:	bf00      	nop
 8002708:	e00d      	b.n	8002726 <OUT+0x27e>
	else if(kaf[13] > LDR_Sens || kaf[14] > LDR_Sens || kaf[15] > LDR_Sens || kaf[11] > LDR_Sens){
 800270a:	bf00      	nop
 800270c:	e00b      	b.n	8002726 <OUT+0x27e>
 800270e:	bf00      	nop
 8002710:	20000334 	.word	0x20000334
 8002714:	20000008 	.word	0x20000008
 8002718:	2000029c 	.word	0x2000029c
 800271c:	2000031c 	.word	0x2000031c
 8002720:	2000027c 	.word	0x2000027c
	else if(kaf[9] > LDR_Sens || kaf[8] > LDR_Sens){
 8002724:	bf00      	nop
}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop

0800272c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002732:	f001 f8af 	bl	8003894 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002736:	f000 f909 	bl	800294c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800273a:	f000 faef 	bl	8002d1c <MX_GPIO_Init>
  MX_TIM1_Init();
 800273e:	f000 fa1b 	bl	8002b78 <MX_TIM1_Init>
  MX_ADC1_Init();
 8002742:	f000 f96b 	bl	8002a1c <MX_ADC1_Init>
  MX_I2C1_Init();
 8002746:	f000 f9bb 	bl	8002ac0 <MX_I2C1_Init>
  MX_I2C2_Init();
 800274a:	f000 f9e7 	bl	8002b1c <MX_I2C2_Init>
  MX_USART2_UART_Init();
 800274e:	f000 fabb 	bl	8002cc8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(MOTORS_EN_GPIO_Port, MOTORS_EN_Pin, 1);
 8002752:	2201      	movs	r2, #1
 8002754:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002758:	4871      	ldr	r0, [pc, #452]	; (8002920 <main+0x1f4>)
 800275a:	f001 ff97 	bl	800468c <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800275e:	2100      	movs	r1, #0
 8002760:	4870      	ldr	r0, [pc, #448]	; (8002924 <main+0x1f8>)
 8002762:	f003 fd19 	bl	8006198 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002766:	2104      	movs	r1, #4
 8002768:	486e      	ldr	r0, [pc, #440]	; (8002924 <main+0x1f8>)
 800276a:	f003 fd15 	bl	8006198 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800276e:	2108      	movs	r1, #8
 8002770:	486c      	ldr	r0, [pc, #432]	; (8002924 <main+0x1f8>)
 8002772:	f003 fd11 	bl	8006198 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002776:	210c      	movs	r1, #12
 8002778:	486a      	ldr	r0, [pc, #424]	; (8002924 <main+0x1f8>)
 800277a:	f003 fd0d 	bl	8006198 <HAL_TIM_PWM_Start>
  for(int i=0; i<2; i++){
 800277e:	2300      	movs	r3, #0
 8002780:	607b      	str	r3, [r7, #4]
 8002782:	e01c      	b.n	80027be <main+0x92>
	HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, 1);
 8002784:	2201      	movs	r2, #1
 8002786:	2110      	movs	r1, #16
 8002788:	4867      	ldr	r0, [pc, #412]	; (8002928 <main+0x1fc>)
 800278a:	f001 ff7f 	bl	800468c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 800278e:	2201      	movs	r2, #1
 8002790:	2108      	movs	r1, #8
 8002792:	4865      	ldr	r0, [pc, #404]	; (8002928 <main+0x1fc>)
 8002794:	f001 ff7a 	bl	800468c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002798:	2064      	movs	r0, #100	; 0x64
 800279a:	f001 f8ed 	bl	8003978 <HAL_Delay>
	HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, 0);
 800279e:	2200      	movs	r2, #0
 80027a0:	2110      	movs	r1, #16
 80027a2:	4861      	ldr	r0, [pc, #388]	; (8002928 <main+0x1fc>)
 80027a4:	f001 ff72 	bl	800468c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 80027a8:	2200      	movs	r2, #0
 80027aa:	2108      	movs	r1, #8
 80027ac:	485e      	ldr	r0, [pc, #376]	; (8002928 <main+0x1fc>)
 80027ae:	f001 ff6d 	bl	800468c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80027b2:	2064      	movs	r0, #100	; 0x64
 80027b4:	f001 f8e0 	bl	8003978 <HAL_Delay>
  for(int i=0; i<2; i++){
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	3301      	adds	r3, #1
 80027bc:	607b      	str	r3, [r7, #4]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	dddf      	ble.n	8002784 <main+0x58>
  }
  SSD1306_Init();
 80027c4:	f000 fb90 	bl	8002ee8 <SSD1306_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	read_sensors();
 80027c8:	f7ff faca 	bl	8001d60 <read_sensors>
	v = 200;
 80027cc:	4b57      	ldr	r3, [pc, #348]	; (800292c <main+0x200>)
 80027ce:	22c8      	movs	r2, #200	; 0xc8
 80027d0:	601a      	str	r2, [r3, #0]
	OUT();
 80027d2:	f7ff fe69 	bl	80024a8 <OUT>
	if(ball_in_kicker){
 80027d6:	4b56      	ldr	r3, [pc, #344]	; (8002930 <main+0x204>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00d      	beq.n	80027fa <main+0xce>
		if(HAL_GPIO_ReadPin(DIP1_GPIO_Port, DIP1_Pin))
 80027de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027e2:	4854      	ldr	r0, [pc, #336]	; (8002934 <main+0x208>)
 80027e4:	f001 ff3a 	bl	800465c <HAL_GPIO_ReadPin>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d002      	beq.n	80027f4 <main+0xc8>
			rotate_and_shoot();
 80027ee:	f7ff fd6b 	bl	80022c8 <rotate_and_shoot>
 80027f2:	e091      	b.n	8002918 <main+0x1ec>
		else
			shoot_straight();
 80027f4:	f7ff fe0e 	bl	8002414 <shoot_straight>
 80027f8:	e08e      	b.n	8002918 <main+0x1ec>
	}
	else if(is_ball){
 80027fa:	4b4f      	ldr	r3, [pc, #316]	; (8002938 <main+0x20c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d07f      	beq.n	8002902 <main+0x1d6>
		if(ball_dist > 50){
 8002802:	4b4e      	ldr	r3, [pc, #312]	; (800293c <main+0x210>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2b32      	cmp	r3, #50	; 0x32
 8002808:	dd0b      	ble.n	8002822 <main+0xf6>
			v = 150;
 800280a:	4b48      	ldr	r3, [pc, #288]	; (800292c <main+0x200>)
 800280c:	2296      	movs	r2, #150	; 0x96
 800280e:	601a      	str	r2, [r3, #0]
			move(ball_angle);
 8002810:	4b4b      	ldr	r3, [pc, #300]	; (8002940 <main+0x214>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4618      	mov	r0, r3
 8002816:	f7fe ffcb 	bl	80017b0 <move>
			spin(0);
 800281a:	2000      	movs	r0, #0
 800281c:	f7ff fd04 	bl	8002228 <spin>
 8002820:	e068      	b.n	80028f4 <main+0x1c8>
		}
		else {
			if(ball_angle<20 || ball_angle > 340)	spin(1);
 8002822:	4b47      	ldr	r3, [pc, #284]	; (8002940 <main+0x214>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2b13      	cmp	r3, #19
 8002828:	dd04      	ble.n	8002834 <main+0x108>
 800282a:	4b45      	ldr	r3, [pc, #276]	; (8002940 <main+0x214>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8002832:	dd03      	ble.n	800283c <main+0x110>
 8002834:	2001      	movs	r0, #1
 8002836:	f7ff fcf7 	bl	8002228 <spin>
 800283a:	e002      	b.n	8002842 <main+0x116>
			else 									spin(0);
 800283c:	2000      	movs	r0, #0
 800283e:	f7ff fcf3 	bl	8002228 <spin>
			v = 100;
 8002842:	4b3a      	ldr	r3, [pc, #232]	; (800292c <main+0x200>)
 8002844:	2264      	movs	r2, #100	; 0x64
 8002846:	601a      	str	r2, [r3, #0]
			if 		(ball_angle<20 || ball_angle > 340)   move(ball_angle/2);
 8002848:	4b3d      	ldr	r3, [pc, #244]	; (8002940 <main+0x214>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2b13      	cmp	r3, #19
 800284e:	dd04      	ble.n	800285a <main+0x12e>
 8002850:	4b3b      	ldr	r3, [pc, #236]	; (8002940 <main+0x214>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8002858:	dd08      	ble.n	800286c <main+0x140>
 800285a:	4b39      	ldr	r3, [pc, #228]	; (8002940 <main+0x214>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	0fda      	lsrs	r2, r3, #31
 8002860:	4413      	add	r3, r2
 8002862:	105b      	asrs	r3, r3, #1
 8002864:	4618      	mov	r0, r3
 8002866:	f7fe ffa3 	bl	80017b0 <move>
 800286a:	e043      	b.n	80028f4 <main+0x1c8>
			else if (ball_angle<40)       				  move(ball_angle+20);
 800286c:	4b34      	ldr	r3, [pc, #208]	; (8002940 <main+0x214>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2b27      	cmp	r3, #39	; 0x27
 8002872:	dc06      	bgt.n	8002882 <main+0x156>
 8002874:	4b32      	ldr	r3, [pc, #200]	; (8002940 <main+0x214>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	3314      	adds	r3, #20
 800287a:	4618      	mov	r0, r3
 800287c:	f7fe ff98 	bl	80017b0 <move>
 8002880:	e038      	b.n	80028f4 <main+0x1c8>
			else if (ball_angle<90)       				  move(ball_angle+50);
 8002882:	4b2f      	ldr	r3, [pc, #188]	; (8002940 <main+0x214>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2b59      	cmp	r3, #89	; 0x59
 8002888:	dc06      	bgt.n	8002898 <main+0x16c>
 800288a:	4b2d      	ldr	r3, [pc, #180]	; (8002940 <main+0x214>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	3332      	adds	r3, #50	; 0x32
 8002890:	4618      	mov	r0, r3
 8002892:	f7fe ff8d 	bl	80017b0 <move>
 8002896:	e02d      	b.n	80028f4 <main+0x1c8>
			else if (ball_angle<180)       				  move(ball_angle+80);
 8002898:	4b29      	ldr	r3, [pc, #164]	; (8002940 <main+0x214>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2bb3      	cmp	r3, #179	; 0xb3
 800289e:	dc06      	bgt.n	80028ae <main+0x182>
 80028a0:	4b27      	ldr	r3, [pc, #156]	; (8002940 <main+0x214>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	3350      	adds	r3, #80	; 0x50
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7fe ff82 	bl	80017b0 <move>
 80028ac:	e022      	b.n	80028f4 <main+0x1c8>
			else if (ball_angle<270)       				  move(ball_angle-80);
 80028ae:	4b24      	ldr	r3, [pc, #144]	; (8002940 <main+0x214>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80028b6:	da06      	bge.n	80028c6 <main+0x19a>
 80028b8:	4b21      	ldr	r3, [pc, #132]	; (8002940 <main+0x214>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	3b50      	subs	r3, #80	; 0x50
 80028be:	4618      	mov	r0, r3
 80028c0:	f7fe ff76 	bl	80017b0 <move>
 80028c4:	e016      	b.n	80028f4 <main+0x1c8>
			else if (ball_angle<320)       				  move(ball_angle-50);
 80028c6:	4b1e      	ldr	r3, [pc, #120]	; (8002940 <main+0x214>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80028ce:	da06      	bge.n	80028de <main+0x1b2>
 80028d0:	4b1b      	ldr	r3, [pc, #108]	; (8002940 <main+0x214>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	3b32      	subs	r3, #50	; 0x32
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7fe ff6a 	bl	80017b0 <move>
 80028dc:	e00a      	b.n	80028f4 <main+0x1c8>
			else if (ball_angle<=360)       			  move(ball_angle-20);
 80028de:	4b18      	ldr	r3, [pc, #96]	; (8002940 <main+0x214>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80028e6:	dc05      	bgt.n	80028f4 <main+0x1c8>
 80028e8:	4b15      	ldr	r3, [pc, #84]	; (8002940 <main+0x214>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	3b14      	subs	r3, #20
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fe ff5e 	bl	80017b0 <move>
		}
		mf_cnt = 0;
 80028f4:	4b13      	ldr	r3, [pc, #76]	; (8002944 <main+0x218>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]
		look_dir = 'F';
 80028fa:	4b13      	ldr	r3, [pc, #76]	; (8002948 <main+0x21c>)
 80028fc:	2246      	movs	r2, #70	; 0x46
 80028fe:	701a      	strb	r2, [r3, #0]
 8002900:	e00a      	b.n	8002918 <main+0x1ec>
	}
	else {
		spin(0);
 8002902:	2000      	movs	r0, #0
 8002904:	f7ff fc90 	bl	8002228 <spin>
		stop();
 8002908:	f7fe ff46 	bl	8001798 <stop>
		mf_cnt = 0;
 800290c:	4b0d      	ldr	r3, [pc, #52]	; (8002944 <main+0x218>)
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
		look_dir = 'F';
 8002912:	4b0d      	ldr	r3, [pc, #52]	; (8002948 <main+0x21c>)
 8002914:	2246      	movs	r2, #70	; 0x46
 8002916:	701a      	strb	r2, [r3, #0]
	}
	SSD1306_UpdateScreen();
 8002918:	f000 fbaa 	bl	8003070 <SSD1306_UpdateScreen>
	read_sensors();
 800291c:	e754      	b.n	80027c8 <main+0x9c>
 800291e:	bf00      	nop
 8002920:	40021000 	.word	0x40021000
 8002924:	20000198 	.word	0x20000198
 8002928:	40020400 	.word	0x40020400
 800292c:	20000008 	.word	0x20000008
 8002930:	20000320 	.word	0x20000320
 8002934:	40020800 	.word	0x40020800
 8002938:	2000027c 	.word	0x2000027c
 800293c:	20000278 	.word	0x20000278
 8002940:	20000274 	.word	0x20000274
 8002944:	2000032c 	.word	0x2000032c
 8002948:	20000019 	.word	0x20000019

0800294c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b094      	sub	sp, #80	; 0x50
 8002950:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002952:	f107 0320 	add.w	r3, r7, #32
 8002956:	2230      	movs	r2, #48	; 0x30
 8002958:	2100      	movs	r1, #0
 800295a:	4618      	mov	r0, r3
 800295c:	f004 fd78 	bl	8007450 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002960:	f107 030c 	add.w	r3, r7, #12
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002970:	2300      	movs	r3, #0
 8002972:	60bb      	str	r3, [r7, #8]
 8002974:	4b27      	ldr	r3, [pc, #156]	; (8002a14 <SystemClock_Config+0xc8>)
 8002976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002978:	4a26      	ldr	r2, [pc, #152]	; (8002a14 <SystemClock_Config+0xc8>)
 800297a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800297e:	6413      	str	r3, [r2, #64]	; 0x40
 8002980:	4b24      	ldr	r3, [pc, #144]	; (8002a14 <SystemClock_Config+0xc8>)
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002988:	60bb      	str	r3, [r7, #8]
 800298a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800298c:	2300      	movs	r3, #0
 800298e:	607b      	str	r3, [r7, #4]
 8002990:	4b21      	ldr	r3, [pc, #132]	; (8002a18 <SystemClock_Config+0xcc>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a20      	ldr	r2, [pc, #128]	; (8002a18 <SystemClock_Config+0xcc>)
 8002996:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800299a:	6013      	str	r3, [r2, #0]
 800299c:	4b1e      	ldr	r3, [pc, #120]	; (8002a18 <SystemClock_Config+0xcc>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029a4:	607b      	str	r3, [r7, #4]
 80029a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80029a8:	2302      	movs	r3, #2
 80029aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029ac:	2301      	movs	r3, #1
 80029ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029b0:	2310      	movs	r3, #16
 80029b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029b4:	2302      	movs	r3, #2
 80029b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80029b8:	2300      	movs	r3, #0
 80029ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80029bc:	2308      	movs	r3, #8
 80029be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80029c0:	2340      	movs	r3, #64	; 0x40
 80029c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80029c4:	2302      	movs	r3, #2
 80029c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80029c8:	2304      	movs	r3, #4
 80029ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029cc:	f107 0320 	add.w	r3, r7, #32
 80029d0:	4618      	mov	r0, r3
 80029d2:	f002 ff39 	bl	8005848 <HAL_RCC_OscConfig>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80029dc:	f000 fa7e 	bl	8002edc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029e0:	230f      	movs	r3, #15
 80029e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029e4:	2302      	movs	r3, #2
 80029e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80029ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029f2:	2300      	movs	r3, #0
 80029f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80029f6:	f107 030c 	add.w	r3, r7, #12
 80029fa:	2102      	movs	r1, #2
 80029fc:	4618      	mov	r0, r3
 80029fe:	f003 f99b 	bl	8005d38 <HAL_RCC_ClockConfig>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002a08:	f000 fa68 	bl	8002edc <Error_Handler>
  }
}
 8002a0c:	bf00      	nop
 8002a0e:	3750      	adds	r7, #80	; 0x50
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40023800 	.word	0x40023800
 8002a18:	40007000 	.word	0x40007000

08002a1c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002a22:	463b      	mov	r3, r7
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	605a      	str	r2, [r3, #4]
 8002a2a:	609a      	str	r2, [r3, #8]
 8002a2c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002a2e:	4b21      	ldr	r3, [pc, #132]	; (8002ab4 <MX_ADC1_Init+0x98>)
 8002a30:	4a21      	ldr	r2, [pc, #132]	; (8002ab8 <MX_ADC1_Init+0x9c>)
 8002a32:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002a34:	4b1f      	ldr	r3, [pc, #124]	; (8002ab4 <MX_ADC1_Init+0x98>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002a3a:	4b1e      	ldr	r3, [pc, #120]	; (8002ab4 <MX_ADC1_Init+0x98>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002a40:	4b1c      	ldr	r3, [pc, #112]	; (8002ab4 <MX_ADC1_Init+0x98>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002a46:	4b1b      	ldr	r3, [pc, #108]	; (8002ab4 <MX_ADC1_Init+0x98>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002a4c:	4b19      	ldr	r3, [pc, #100]	; (8002ab4 <MX_ADC1_Init+0x98>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002a54:	4b17      	ldr	r3, [pc, #92]	; (8002ab4 <MX_ADC1_Init+0x98>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a5a:	4b16      	ldr	r3, [pc, #88]	; (8002ab4 <MX_ADC1_Init+0x98>)
 8002a5c:	4a17      	ldr	r2, [pc, #92]	; (8002abc <MX_ADC1_Init+0xa0>)
 8002a5e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a60:	4b14      	ldr	r3, [pc, #80]	; (8002ab4 <MX_ADC1_Init+0x98>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002a66:	4b13      	ldr	r3, [pc, #76]	; (8002ab4 <MX_ADC1_Init+0x98>)
 8002a68:	2201      	movs	r2, #1
 8002a6a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002a6c:	4b11      	ldr	r3, [pc, #68]	; (8002ab4 <MX_ADC1_Init+0x98>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002a74:	4b0f      	ldr	r3, [pc, #60]	; (8002ab4 <MX_ADC1_Init+0x98>)
 8002a76:	2201      	movs	r2, #1
 8002a78:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002a7a:	480e      	ldr	r0, [pc, #56]	; (8002ab4 <MX_ADC1_Init+0x98>)
 8002a7c:	f000 ffa0 	bl	80039c0 <HAL_ADC_Init>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002a86:	f000 fa29 	bl	8002edc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002a92:	2300      	movs	r3, #0
 8002a94:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a96:	463b      	mov	r3, r7
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4806      	ldr	r0, [pc, #24]	; (8002ab4 <MX_ADC1_Init+0x98>)
 8002a9c:	f001 f93e 	bl	8003d1c <HAL_ADC_ConfigChannel>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002aa6:	f000 fa19 	bl	8002edc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002aaa:	bf00      	nop
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	200000a8 	.word	0x200000a8
 8002ab8:	40012000 	.word	0x40012000
 8002abc:	0f000001 	.word	0x0f000001

08002ac0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002ac4:	4b12      	ldr	r3, [pc, #72]	; (8002b10 <MX_I2C1_Init+0x50>)
 8002ac6:	4a13      	ldr	r2, [pc, #76]	; (8002b14 <MX_I2C1_Init+0x54>)
 8002ac8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002aca:	4b11      	ldr	r3, [pc, #68]	; (8002b10 <MX_I2C1_Init+0x50>)
 8002acc:	4a12      	ldr	r2, [pc, #72]	; (8002b18 <MX_I2C1_Init+0x58>)
 8002ace:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002ad0:	4b0f      	ldr	r3, [pc, #60]	; (8002b10 <MX_I2C1_Init+0x50>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002ad6:	4b0e      	ldr	r3, [pc, #56]	; (8002b10 <MX_I2C1_Init+0x50>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002adc:	4b0c      	ldr	r3, [pc, #48]	; (8002b10 <MX_I2C1_Init+0x50>)
 8002ade:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ae2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ae4:	4b0a      	ldr	r3, [pc, #40]	; (8002b10 <MX_I2C1_Init+0x50>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002aea:	4b09      	ldr	r3, [pc, #36]	; (8002b10 <MX_I2C1_Init+0x50>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002af0:	4b07      	ldr	r3, [pc, #28]	; (8002b10 <MX_I2C1_Init+0x50>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002af6:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <MX_I2C1_Init+0x50>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002afc:	4804      	ldr	r0, [pc, #16]	; (8002b10 <MX_I2C1_Init+0x50>)
 8002afe:	f001 fddf 	bl	80046c0 <HAL_I2C_Init>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002b08:	f000 f9e8 	bl	8002edc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b0c:	bf00      	nop
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	200000f0 	.word	0x200000f0
 8002b14:	40005400 	.word	0x40005400
 8002b18:	00061a80 	.word	0x00061a80

08002b1c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002b20:	4b12      	ldr	r3, [pc, #72]	; (8002b6c <MX_I2C2_Init+0x50>)
 8002b22:	4a13      	ldr	r2, [pc, #76]	; (8002b70 <MX_I2C2_Init+0x54>)
 8002b24:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8002b26:	4b11      	ldr	r3, [pc, #68]	; (8002b6c <MX_I2C2_Init+0x50>)
 8002b28:	4a12      	ldr	r2, [pc, #72]	; (8002b74 <MX_I2C2_Init+0x58>)
 8002b2a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002b2c:	4b0f      	ldr	r3, [pc, #60]	; (8002b6c <MX_I2C2_Init+0x50>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002b32:	4b0e      	ldr	r3, [pc, #56]	; (8002b6c <MX_I2C2_Init+0x50>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b38:	4b0c      	ldr	r3, [pc, #48]	; (8002b6c <MX_I2C2_Init+0x50>)
 8002b3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b3e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b40:	4b0a      	ldr	r3, [pc, #40]	; (8002b6c <MX_I2C2_Init+0x50>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002b46:	4b09      	ldr	r3, [pc, #36]	; (8002b6c <MX_I2C2_Init+0x50>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b4c:	4b07      	ldr	r3, [pc, #28]	; (8002b6c <MX_I2C2_Init+0x50>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b52:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <MX_I2C2_Init+0x50>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002b58:	4804      	ldr	r0, [pc, #16]	; (8002b6c <MX_I2C2_Init+0x50>)
 8002b5a:	f001 fdb1 	bl	80046c0 <HAL_I2C_Init>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002b64:	f000 f9ba 	bl	8002edc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002b68:	bf00      	nop
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	20000144 	.word	0x20000144
 8002b70:	40005800 	.word	0x40005800
 8002b74:	00061a80 	.word	0x00061a80

08002b78 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b092      	sub	sp, #72	; 0x48
 8002b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b7e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	605a      	str	r2, [r3, #4]
 8002b92:	609a      	str	r2, [r3, #8]
 8002b94:	60da      	str	r2, [r3, #12]
 8002b96:	611a      	str	r2, [r3, #16]
 8002b98:	615a      	str	r2, [r3, #20]
 8002b9a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b9c:	1d3b      	adds	r3, r7, #4
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f004 fc54 	bl	8007450 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ba8:	4b45      	ldr	r3, [pc, #276]	; (8002cc0 <MX_TIM1_Init+0x148>)
 8002baa:	4a46      	ldr	r2, [pc, #280]	; (8002cc4 <MX_TIM1_Init+0x14c>)
 8002bac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002bae:	4b44      	ldr	r3, [pc, #272]	; (8002cc0 <MX_TIM1_Init+0x148>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bb4:	4b42      	ldr	r3, [pc, #264]	; (8002cc0 <MX_TIM1_Init+0x148>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002bba:	4b41      	ldr	r3, [pc, #260]	; (8002cc0 <MX_TIM1_Init+0x148>)
 8002bbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bc0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bc2:	4b3f      	ldr	r3, [pc, #252]	; (8002cc0 <MX_TIM1_Init+0x148>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002bc8:	4b3d      	ldr	r3, [pc, #244]	; (8002cc0 <MX_TIM1_Init+0x148>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bce:	4b3c      	ldr	r3, [pc, #240]	; (8002cc0 <MX_TIM1_Init+0x148>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002bd4:	483a      	ldr	r0, [pc, #232]	; (8002cc0 <MX_TIM1_Init+0x148>)
 8002bd6:	f003 fa8f 	bl	80060f8 <HAL_TIM_PWM_Init>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002be0:	f000 f97c 	bl	8002edc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002be4:	2300      	movs	r3, #0
 8002be6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002be8:	2300      	movs	r3, #0
 8002bea:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002bec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4833      	ldr	r0, [pc, #204]	; (8002cc0 <MX_TIM1_Init+0x148>)
 8002bf4:	f003 fed0 	bl	8006998 <HAL_TIMEx_MasterConfigSynchronization>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002bfe:	f000 f96d 	bl	8002edc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c02:	2360      	movs	r3, #96	; 0x60
 8002c04:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002c06:	2300      	movs	r3, #0
 8002c08:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c12:	2300      	movs	r3, #0
 8002c14:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002c16:	2300      	movs	r3, #0
 8002c18:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c22:	2200      	movs	r2, #0
 8002c24:	4619      	mov	r1, r3
 8002c26:	4826      	ldr	r0, [pc, #152]	; (8002cc0 <MX_TIM1_Init+0x148>)
 8002c28:	f003 fb7e 	bl	8006328 <HAL_TIM_PWM_ConfigChannel>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002c32:	f000 f953 	bl	8002edc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c3a:	2204      	movs	r2, #4
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4820      	ldr	r0, [pc, #128]	; (8002cc0 <MX_TIM1_Init+0x148>)
 8002c40:	f003 fb72 	bl	8006328 <HAL_TIM_PWM_ConfigChannel>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8002c4a:	f000 f947 	bl	8002edc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c52:	2208      	movs	r2, #8
 8002c54:	4619      	mov	r1, r3
 8002c56:	481a      	ldr	r0, [pc, #104]	; (8002cc0 <MX_TIM1_Init+0x148>)
 8002c58:	f003 fb66 	bl	8006328 <HAL_TIM_PWM_ConfigChannel>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8002c62:	f000 f93b 	bl	8002edc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c6a:	220c      	movs	r2, #12
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4814      	ldr	r0, [pc, #80]	; (8002cc0 <MX_TIM1_Init+0x148>)
 8002c70:	f003 fb5a 	bl	8006328 <HAL_TIM_PWM_ConfigChannel>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8002c7a:	f000 f92f 	bl	8002edc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002c82:	2300      	movs	r3, #0
 8002c84:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c86:	2300      	movs	r3, #0
 8002c88:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c96:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002c9c:	1d3b      	adds	r3, r7, #4
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	4807      	ldr	r0, [pc, #28]	; (8002cc0 <MX_TIM1_Init+0x148>)
 8002ca2:	f003 fef5 	bl	8006a90 <HAL_TIMEx_ConfigBreakDeadTime>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8002cac:	f000 f916 	bl	8002edc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002cb0:	4803      	ldr	r0, [pc, #12]	; (8002cc0 <MX_TIM1_Init+0x148>)
 8002cb2:	f000 fcff 	bl	80036b4 <HAL_TIM_MspPostInit>

}
 8002cb6:	bf00      	nop
 8002cb8:	3748      	adds	r7, #72	; 0x48
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	20000198 	.word	0x20000198
 8002cc4:	40010000 	.word	0x40010000

08002cc8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ccc:	4b11      	ldr	r3, [pc, #68]	; (8002d14 <MX_USART2_UART_Init+0x4c>)
 8002cce:	4a12      	ldr	r2, [pc, #72]	; (8002d18 <MX_USART2_UART_Init+0x50>)
 8002cd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002cd2:	4b10      	ldr	r3, [pc, #64]	; (8002d14 <MX_USART2_UART_Init+0x4c>)
 8002cd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002cd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002cda:	4b0e      	ldr	r3, [pc, #56]	; (8002d14 <MX_USART2_UART_Init+0x4c>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ce0:	4b0c      	ldr	r3, [pc, #48]	; (8002d14 <MX_USART2_UART_Init+0x4c>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ce6:	4b0b      	ldr	r3, [pc, #44]	; (8002d14 <MX_USART2_UART_Init+0x4c>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002cec:	4b09      	ldr	r3, [pc, #36]	; (8002d14 <MX_USART2_UART_Init+0x4c>)
 8002cee:	220c      	movs	r2, #12
 8002cf0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cf2:	4b08      	ldr	r3, [pc, #32]	; (8002d14 <MX_USART2_UART_Init+0x4c>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cf8:	4b06      	ldr	r3, [pc, #24]	; (8002d14 <MX_USART2_UART_Init+0x4c>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002cfe:	4805      	ldr	r0, [pc, #20]	; (8002d14 <MX_USART2_UART_Init+0x4c>)
 8002d00:	f003 ff18 	bl	8006b34 <HAL_UART_Init>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002d0a:	f000 f8e7 	bl	8002edc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d0e:	bf00      	nop
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	200001e0 	.word	0x200001e0
 8002d18:	40004400 	.word	0x40004400

08002d1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b08c      	sub	sp, #48	; 0x30
 8002d20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d22:	f107 031c 	add.w	r3, r7, #28
 8002d26:	2200      	movs	r2, #0
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	605a      	str	r2, [r3, #4]
 8002d2c:	609a      	str	r2, [r3, #8]
 8002d2e:	60da      	str	r2, [r3, #12]
 8002d30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d32:	2300      	movs	r3, #0
 8002d34:	61bb      	str	r3, [r7, #24]
 8002d36:	4b64      	ldr	r3, [pc, #400]	; (8002ec8 <MX_GPIO_Init+0x1ac>)
 8002d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3a:	4a63      	ldr	r2, [pc, #396]	; (8002ec8 <MX_GPIO_Init+0x1ac>)
 8002d3c:	f043 0304 	orr.w	r3, r3, #4
 8002d40:	6313      	str	r3, [r2, #48]	; 0x30
 8002d42:	4b61      	ldr	r3, [pc, #388]	; (8002ec8 <MX_GPIO_Init+0x1ac>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	f003 0304 	and.w	r3, r3, #4
 8002d4a:	61bb      	str	r3, [r7, #24]
 8002d4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d4e:	2300      	movs	r3, #0
 8002d50:	617b      	str	r3, [r7, #20]
 8002d52:	4b5d      	ldr	r3, [pc, #372]	; (8002ec8 <MX_GPIO_Init+0x1ac>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	4a5c      	ldr	r2, [pc, #368]	; (8002ec8 <MX_GPIO_Init+0x1ac>)
 8002d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d5e:	4b5a      	ldr	r3, [pc, #360]	; (8002ec8 <MX_GPIO_Init+0x1ac>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d66:	617b      	str	r3, [r7, #20]
 8002d68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	613b      	str	r3, [r7, #16]
 8002d6e:	4b56      	ldr	r3, [pc, #344]	; (8002ec8 <MX_GPIO_Init+0x1ac>)
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	4a55      	ldr	r2, [pc, #340]	; (8002ec8 <MX_GPIO_Init+0x1ac>)
 8002d74:	f043 0301 	orr.w	r3, r3, #1
 8002d78:	6313      	str	r3, [r2, #48]	; 0x30
 8002d7a:	4b53      	ldr	r3, [pc, #332]	; (8002ec8 <MX_GPIO_Init+0x1ac>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	613b      	str	r3, [r7, #16]
 8002d84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d86:	2300      	movs	r3, #0
 8002d88:	60fb      	str	r3, [r7, #12]
 8002d8a:	4b4f      	ldr	r3, [pc, #316]	; (8002ec8 <MX_GPIO_Init+0x1ac>)
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8e:	4a4e      	ldr	r2, [pc, #312]	; (8002ec8 <MX_GPIO_Init+0x1ac>)
 8002d90:	f043 0310 	orr.w	r3, r3, #16
 8002d94:	6313      	str	r3, [r2, #48]	; 0x30
 8002d96:	4b4c      	ldr	r3, [pc, #304]	; (8002ec8 <MX_GPIO_Init+0x1ac>)
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9a:	f003 0310 	and.w	r3, r3, #16
 8002d9e:	60fb      	str	r3, [r7, #12]
 8002da0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002da2:	2300      	movs	r3, #0
 8002da4:	60bb      	str	r3, [r7, #8]
 8002da6:	4b48      	ldr	r3, [pc, #288]	; (8002ec8 <MX_GPIO_Init+0x1ac>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	4a47      	ldr	r2, [pc, #284]	; (8002ec8 <MX_GPIO_Init+0x1ac>)
 8002dac:	f043 0302 	orr.w	r3, r3, #2
 8002db0:	6313      	str	r3, [r2, #48]	; 0x30
 8002db2:	4b45      	ldr	r3, [pc, #276]	; (8002ec8 <MX_GPIO_Init+0x1ac>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	60bb      	str	r3, [r7, #8]
 8002dbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	607b      	str	r3, [r7, #4]
 8002dc2:	4b41      	ldr	r3, [pc, #260]	; (8002ec8 <MX_GPIO_Init+0x1ac>)
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc6:	4a40      	ldr	r2, [pc, #256]	; (8002ec8 <MX_GPIO_Init+0x1ac>)
 8002dc8:	f043 0308 	orr.w	r3, r3, #8
 8002dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dce:	4b3e      	ldr	r3, [pc, #248]	; (8002ec8 <MX_GPIO_Init+0x1ac>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd2:	f003 0308 	and.w	r3, r3, #8
 8002dd6:	607b      	str	r3, [r7, #4]
 8002dd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, L2B_Pin|L1B_Pin|L1A_Pin|L2A_Pin, GPIO_PIN_RESET);
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f44f 51ac 	mov.w	r1, #5504	; 0x1580
 8002de0:	483a      	ldr	r0, [pc, #232]	; (8002ecc <MX_GPIO_Init+0x1b0>)
 8002de2:	f001 fc53 	bl	800468c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTORS_EN_GPIO_Port, MOTORS_EN_Pin, GPIO_PIN_SET);
 8002de6:	2201      	movs	r2, #1
 8002de8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002dec:	4837      	ldr	r0, [pc, #220]	; (8002ecc <MX_GPIO_Init+0x1b0>)
 8002dee:	f001 fc4d 	bl	800468c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SHOOT_Pin|BUZZER_Pin|BLUE_Pin|RED_Pin, GPIO_PIN_RESET);
 8002df2:	2200      	movs	r2, #0
 8002df4:	f248 0138 	movw	r1, #32824	; 0x8038
 8002df8:	4835      	ldr	r0, [pc, #212]	; (8002ed0 <MX_GPIO_Init+0x1b4>)
 8002dfa:	f001 fc47 	bl	800468c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPIN_Pin|ADD3_Pin|ADD2_Pin|ADD1_Pin
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f64f 7180 	movw	r1, #65408	; 0xff80
 8002e04:	4833      	ldr	r0, [pc, #204]	; (8002ed4 <MX_GPIO_Init+0x1b8>)
 8002e06:	f001 fc41 	bl	800468c <HAL_GPIO_WritePin>
                          |ADD0_Pin|R2B_Pin|R2A_Pin|R1B_Pin
                          |GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R1A_GPIO_Port, R1A_Pin, GPIO_PIN_RESET);
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	2140      	movs	r1, #64	; 0x40
 8002e0e:	4832      	ldr	r0, [pc, #200]	; (8002ed8 <MX_GPIO_Init+0x1bc>)
 8002e10:	f001 fc3c 	bl	800468c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIP2_Pin DIP1_Pin */
  GPIO_InitStruct.Pin = DIP2_Pin|DIP1_Pin;
 8002e14:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002e18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e22:	f107 031c 	add.w	r3, r7, #28
 8002e26:	4619      	mov	r1, r3
 8002e28:	482b      	ldr	r0, [pc, #172]	; (8002ed8 <MX_GPIO_Init+0x1bc>)
 8002e2a:	f001 fa7b 	bl	8004324 <HAL_GPIO_Init>

  /*Configure GPIO pins : L2B_Pin L1B_Pin L1A_Pin L2A_Pin
                           MOTORS_EN_Pin */
  GPIO_InitStruct.Pin = L2B_Pin|L1B_Pin|L1A_Pin|L2A_Pin
 8002e2e:	f249 5380 	movw	r3, #38272	; 0x9580
 8002e32:	61fb      	str	r3, [r7, #28]
                          |MOTORS_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e34:	2301      	movs	r3, #1
 8002e36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e40:	f107 031c 	add.w	r3, r7, #28
 8002e44:	4619      	mov	r1, r3
 8002e46:	4821      	ldr	r0, [pc, #132]	; (8002ecc <MX_GPIO_Init+0x1b0>)
 8002e48:	f001 fa6c 	bl	8004324 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW3_Pin SW2_Pin SW1_Pin */
  GPIO_InitStruct.Pin = SW3_Pin|SW2_Pin|SW1_Pin;
 8002e4c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002e50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e52:	2300      	movs	r3, #0
 8002e54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e56:	2300      	movs	r3, #0
 8002e58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e5a:	f107 031c 	add.w	r3, r7, #28
 8002e5e:	4619      	mov	r1, r3
 8002e60:	481b      	ldr	r0, [pc, #108]	; (8002ed0 <MX_GPIO_Init+0x1b4>)
 8002e62:	f001 fa5f 	bl	8004324 <HAL_GPIO_Init>

  /*Configure GPIO pins : SHOOT_Pin BUZZER_Pin BLUE_Pin RED_Pin */
  GPIO_InitStruct.Pin = SHOOT_Pin|BUZZER_Pin|BLUE_Pin|RED_Pin;
 8002e66:	f248 0338 	movw	r3, #32824	; 0x8038
 8002e6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e70:	2300      	movs	r3, #0
 8002e72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e74:	2300      	movs	r3, #0
 8002e76:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e78:	f107 031c 	add.w	r3, r7, #28
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4814      	ldr	r0, [pc, #80]	; (8002ed0 <MX_GPIO_Init+0x1b4>)
 8002e80:	f001 fa50 	bl	8004324 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPIN_Pin ADD3_Pin ADD2_Pin ADD1_Pin
                           ADD0_Pin R2B_Pin R2A_Pin R1B_Pin
                           GREEN_Pin */
  GPIO_InitStruct.Pin = SPIN_Pin|ADD3_Pin|ADD2_Pin|ADD1_Pin
 8002e84:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002e88:	61fb      	str	r3, [r7, #28]
                          |ADD0_Pin|R2B_Pin|R2A_Pin|R1B_Pin
                          |GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e92:	2300      	movs	r3, #0
 8002e94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e96:	f107 031c 	add.w	r3, r7, #28
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	480d      	ldr	r0, [pc, #52]	; (8002ed4 <MX_GPIO_Init+0x1b8>)
 8002e9e:	f001 fa41 	bl	8004324 <HAL_GPIO_Init>

  /*Configure GPIO pin : R1A_Pin */
  GPIO_InitStruct.Pin = R1A_Pin;
 8002ea2:	2340      	movs	r3, #64	; 0x40
 8002ea4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(R1A_GPIO_Port, &GPIO_InitStruct);
 8002eb2:	f107 031c 	add.w	r3, r7, #28
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4807      	ldr	r0, [pc, #28]	; (8002ed8 <MX_GPIO_Init+0x1bc>)
 8002eba:	f001 fa33 	bl	8004324 <HAL_GPIO_Init>

}
 8002ebe:	bf00      	nop
 8002ec0:	3730      	adds	r7, #48	; 0x30
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	40020400 	.word	0x40020400
 8002ed4:	40020c00 	.word	0x40020c00
 8002ed8:	40020800 	.word	0x40020800

08002edc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ee0:	b672      	cpsid	i
}
 8002ee2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ee4:	e7fe      	b.n	8002ee4 <Error_Handler+0x8>
	...

08002ee8 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8002eee:	f000 fa21 	bl	8003334 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002ef2:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	2178      	movs	r1, #120	; 0x78
 8002efa:	485b      	ldr	r0, [pc, #364]	; (8003068 <SSD1306_Init+0x180>)
 8002efc:	f002 f848 	bl	8004f90 <HAL_I2C_IsDeviceReady>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8002f06:	2300      	movs	r3, #0
 8002f08:	e0a9      	b.n	800305e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8002f0a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002f0e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002f10:	e002      	b.n	8002f18 <SSD1306_Init+0x30>
		p--;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	3b01      	subs	r3, #1
 8002f16:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1f9      	bne.n	8002f12 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002f1e:	22ae      	movs	r2, #174	; 0xae
 8002f20:	2100      	movs	r1, #0
 8002f22:	2078      	movs	r0, #120	; 0x78
 8002f24:	f000 fa82 	bl	800342c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8002f28:	2220      	movs	r2, #32
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	2078      	movs	r0, #120	; 0x78
 8002f2e:	f000 fa7d 	bl	800342c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002f32:	2210      	movs	r2, #16
 8002f34:	2100      	movs	r1, #0
 8002f36:	2078      	movs	r0, #120	; 0x78
 8002f38:	f000 fa78 	bl	800342c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002f3c:	22b0      	movs	r2, #176	; 0xb0
 8002f3e:	2100      	movs	r1, #0
 8002f40:	2078      	movs	r0, #120	; 0x78
 8002f42:	f000 fa73 	bl	800342c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002f46:	22c8      	movs	r2, #200	; 0xc8
 8002f48:	2100      	movs	r1, #0
 8002f4a:	2078      	movs	r0, #120	; 0x78
 8002f4c:	f000 fa6e 	bl	800342c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002f50:	2200      	movs	r2, #0
 8002f52:	2100      	movs	r1, #0
 8002f54:	2078      	movs	r0, #120	; 0x78
 8002f56:	f000 fa69 	bl	800342c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002f5a:	2210      	movs	r2, #16
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	2078      	movs	r0, #120	; 0x78
 8002f60:	f000 fa64 	bl	800342c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002f64:	2240      	movs	r2, #64	; 0x40
 8002f66:	2100      	movs	r1, #0
 8002f68:	2078      	movs	r0, #120	; 0x78
 8002f6a:	f000 fa5f 	bl	800342c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002f6e:	2281      	movs	r2, #129	; 0x81
 8002f70:	2100      	movs	r1, #0
 8002f72:	2078      	movs	r0, #120	; 0x78
 8002f74:	f000 fa5a 	bl	800342c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002f78:	22ff      	movs	r2, #255	; 0xff
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	2078      	movs	r0, #120	; 0x78
 8002f7e:	f000 fa55 	bl	800342c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8002f82:	22a1      	movs	r2, #161	; 0xa1
 8002f84:	2100      	movs	r1, #0
 8002f86:	2078      	movs	r0, #120	; 0x78
 8002f88:	f000 fa50 	bl	800342c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002f8c:	22a6      	movs	r2, #166	; 0xa6
 8002f8e:	2100      	movs	r1, #0
 8002f90:	2078      	movs	r0, #120	; 0x78
 8002f92:	f000 fa4b 	bl	800342c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002f96:	22a8      	movs	r2, #168	; 0xa8
 8002f98:	2100      	movs	r1, #0
 8002f9a:	2078      	movs	r0, #120	; 0x78
 8002f9c:	f000 fa46 	bl	800342c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002fa0:	223f      	movs	r2, #63	; 0x3f
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	2078      	movs	r0, #120	; 0x78
 8002fa6:	f000 fa41 	bl	800342c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002faa:	22a4      	movs	r2, #164	; 0xa4
 8002fac:	2100      	movs	r1, #0
 8002fae:	2078      	movs	r0, #120	; 0x78
 8002fb0:	f000 fa3c 	bl	800342c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002fb4:	22d3      	movs	r2, #211	; 0xd3
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	2078      	movs	r0, #120	; 0x78
 8002fba:	f000 fa37 	bl	800342c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	2078      	movs	r0, #120	; 0x78
 8002fc4:	f000 fa32 	bl	800342c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002fc8:	22d5      	movs	r2, #213	; 0xd5
 8002fca:	2100      	movs	r1, #0
 8002fcc:	2078      	movs	r0, #120	; 0x78
 8002fce:	f000 fa2d 	bl	800342c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002fd2:	22f0      	movs	r2, #240	; 0xf0
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	2078      	movs	r0, #120	; 0x78
 8002fd8:	f000 fa28 	bl	800342c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002fdc:	22d9      	movs	r2, #217	; 0xd9
 8002fde:	2100      	movs	r1, #0
 8002fe0:	2078      	movs	r0, #120	; 0x78
 8002fe2:	f000 fa23 	bl	800342c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002fe6:	2222      	movs	r2, #34	; 0x22
 8002fe8:	2100      	movs	r1, #0
 8002fea:	2078      	movs	r0, #120	; 0x78
 8002fec:	f000 fa1e 	bl	800342c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002ff0:	22da      	movs	r2, #218	; 0xda
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	2078      	movs	r0, #120	; 0x78
 8002ff6:	f000 fa19 	bl	800342c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002ffa:	2212      	movs	r2, #18
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	2078      	movs	r0, #120	; 0x78
 8003000:	f000 fa14 	bl	800342c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8003004:	22db      	movs	r2, #219	; 0xdb
 8003006:	2100      	movs	r1, #0
 8003008:	2078      	movs	r0, #120	; 0x78
 800300a:	f000 fa0f 	bl	800342c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800300e:	2220      	movs	r2, #32
 8003010:	2100      	movs	r1, #0
 8003012:	2078      	movs	r0, #120	; 0x78
 8003014:	f000 fa0a 	bl	800342c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8003018:	228d      	movs	r2, #141	; 0x8d
 800301a:	2100      	movs	r1, #0
 800301c:	2078      	movs	r0, #120	; 0x78
 800301e:	f000 fa05 	bl	800342c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8003022:	2214      	movs	r2, #20
 8003024:	2100      	movs	r1, #0
 8003026:	2078      	movs	r0, #120	; 0x78
 8003028:	f000 fa00 	bl	800342c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800302c:	22af      	movs	r2, #175	; 0xaf
 800302e:	2100      	movs	r1, #0
 8003030:	2078      	movs	r0, #120	; 0x78
 8003032:	f000 f9fb 	bl	800342c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8003036:	222e      	movs	r2, #46	; 0x2e
 8003038:	2100      	movs	r1, #0
 800303a:	2078      	movs	r0, #120	; 0x78
 800303c:	f000 f9f6 	bl	800342c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8003040:	2000      	movs	r0, #0
 8003042:	f000 f843 	bl	80030cc <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8003046:	f000 f813 	bl	8003070 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800304a:	4b08      	ldr	r3, [pc, #32]	; (800306c <SSD1306_Init+0x184>)
 800304c:	2200      	movs	r2, #0
 800304e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8003050:	4b06      	ldr	r3, [pc, #24]	; (800306c <SSD1306_Init+0x184>)
 8003052:	2200      	movs	r2, #0
 8003054:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8003056:	4b05      	ldr	r3, [pc, #20]	; (800306c <SSD1306_Init+0x184>)
 8003058:	2201      	movs	r2, #1
 800305a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 800305c:	2301      	movs	r3, #1
}
 800305e:	4618      	mov	r0, r3
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	20000144 	.word	0x20000144
 800306c:	20000738 	.word	0x20000738

08003070 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8003076:	2300      	movs	r3, #0
 8003078:	71fb      	strb	r3, [r7, #7]
 800307a:	e01d      	b.n	80030b8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800307c:	79fb      	ldrb	r3, [r7, #7]
 800307e:	3b50      	subs	r3, #80	; 0x50
 8003080:	b2db      	uxtb	r3, r3
 8003082:	461a      	mov	r2, r3
 8003084:	2100      	movs	r1, #0
 8003086:	2078      	movs	r0, #120	; 0x78
 8003088:	f000 f9d0 	bl	800342c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800308c:	2200      	movs	r2, #0
 800308e:	2100      	movs	r1, #0
 8003090:	2078      	movs	r0, #120	; 0x78
 8003092:	f000 f9cb 	bl	800342c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8003096:	2210      	movs	r2, #16
 8003098:	2100      	movs	r1, #0
 800309a:	2078      	movs	r0, #120	; 0x78
 800309c:	f000 f9c6 	bl	800342c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80030a0:	79fb      	ldrb	r3, [r7, #7]
 80030a2:	01db      	lsls	r3, r3, #7
 80030a4:	4a08      	ldr	r2, [pc, #32]	; (80030c8 <SSD1306_UpdateScreen+0x58>)
 80030a6:	441a      	add	r2, r3
 80030a8:	2380      	movs	r3, #128	; 0x80
 80030aa:	2140      	movs	r1, #64	; 0x40
 80030ac:	2078      	movs	r0, #120	; 0x78
 80030ae:	f000 f957 	bl	8003360 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80030b2:	79fb      	ldrb	r3, [r7, #7]
 80030b4:	3301      	adds	r3, #1
 80030b6:	71fb      	strb	r3, [r7, #7]
 80030b8:	79fb      	ldrb	r3, [r7, #7]
 80030ba:	2b07      	cmp	r3, #7
 80030bc:	d9de      	bls.n	800307c <SSD1306_UpdateScreen+0xc>
	}
}
 80030be:	bf00      	nop
 80030c0:	bf00      	nop
 80030c2:	3708      	adds	r7, #8
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	20000338 	.word	0x20000338

080030cc <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80030d6:	79fb      	ldrb	r3, [r7, #7]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <SSD1306_Fill+0x14>
 80030dc:	2300      	movs	r3, #0
 80030de:	e000      	b.n	80030e2 <SSD1306_Fill+0x16>
 80030e0:	23ff      	movs	r3, #255	; 0xff
 80030e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030e6:	4619      	mov	r1, r3
 80030e8:	4803      	ldr	r0, [pc, #12]	; (80030f8 <SSD1306_Fill+0x2c>)
 80030ea:	f004 f9b1 	bl	8007450 <memset>
}
 80030ee:	bf00      	nop
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	20000338 	.word	0x20000338

080030fc <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	4603      	mov	r3, r0
 8003104:	80fb      	strh	r3, [r7, #6]
 8003106:	460b      	mov	r3, r1
 8003108:	80bb      	strh	r3, [r7, #4]
 800310a:	4613      	mov	r3, r2
 800310c:	70fb      	strb	r3, [r7, #3]
	if (
 800310e:	88fb      	ldrh	r3, [r7, #6]
 8003110:	2b7f      	cmp	r3, #127	; 0x7f
 8003112:	d848      	bhi.n	80031a6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8003114:	88bb      	ldrh	r3, [r7, #4]
 8003116:	2b3f      	cmp	r3, #63	; 0x3f
 8003118:	d845      	bhi.n	80031a6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800311a:	4b26      	ldr	r3, [pc, #152]	; (80031b4 <SSD1306_DrawPixel+0xb8>)
 800311c:	791b      	ldrb	r3, [r3, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d006      	beq.n	8003130 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8003122:	78fb      	ldrb	r3, [r7, #3]
 8003124:	2b00      	cmp	r3, #0
 8003126:	bf0c      	ite	eq
 8003128:	2301      	moveq	r3, #1
 800312a:	2300      	movne	r3, #0
 800312c:	b2db      	uxtb	r3, r3
 800312e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8003130:	78fb      	ldrb	r3, [r7, #3]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d11a      	bne.n	800316c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003136:	88fa      	ldrh	r2, [r7, #6]
 8003138:	88bb      	ldrh	r3, [r7, #4]
 800313a:	08db      	lsrs	r3, r3, #3
 800313c:	b298      	uxth	r0, r3
 800313e:	4603      	mov	r3, r0
 8003140:	01db      	lsls	r3, r3, #7
 8003142:	4413      	add	r3, r2
 8003144:	4a1c      	ldr	r2, [pc, #112]	; (80031b8 <SSD1306_DrawPixel+0xbc>)
 8003146:	5cd3      	ldrb	r3, [r2, r3]
 8003148:	b25a      	sxtb	r2, r3
 800314a:	88bb      	ldrh	r3, [r7, #4]
 800314c:	f003 0307 	and.w	r3, r3, #7
 8003150:	2101      	movs	r1, #1
 8003152:	fa01 f303 	lsl.w	r3, r1, r3
 8003156:	b25b      	sxtb	r3, r3
 8003158:	4313      	orrs	r3, r2
 800315a:	b259      	sxtb	r1, r3
 800315c:	88fa      	ldrh	r2, [r7, #6]
 800315e:	4603      	mov	r3, r0
 8003160:	01db      	lsls	r3, r3, #7
 8003162:	4413      	add	r3, r2
 8003164:	b2c9      	uxtb	r1, r1
 8003166:	4a14      	ldr	r2, [pc, #80]	; (80031b8 <SSD1306_DrawPixel+0xbc>)
 8003168:	54d1      	strb	r1, [r2, r3]
 800316a:	e01d      	b.n	80031a8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800316c:	88fa      	ldrh	r2, [r7, #6]
 800316e:	88bb      	ldrh	r3, [r7, #4]
 8003170:	08db      	lsrs	r3, r3, #3
 8003172:	b298      	uxth	r0, r3
 8003174:	4603      	mov	r3, r0
 8003176:	01db      	lsls	r3, r3, #7
 8003178:	4413      	add	r3, r2
 800317a:	4a0f      	ldr	r2, [pc, #60]	; (80031b8 <SSD1306_DrawPixel+0xbc>)
 800317c:	5cd3      	ldrb	r3, [r2, r3]
 800317e:	b25a      	sxtb	r2, r3
 8003180:	88bb      	ldrh	r3, [r7, #4]
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	2101      	movs	r1, #1
 8003188:	fa01 f303 	lsl.w	r3, r1, r3
 800318c:	b25b      	sxtb	r3, r3
 800318e:	43db      	mvns	r3, r3
 8003190:	b25b      	sxtb	r3, r3
 8003192:	4013      	ands	r3, r2
 8003194:	b259      	sxtb	r1, r3
 8003196:	88fa      	ldrh	r2, [r7, #6]
 8003198:	4603      	mov	r3, r0
 800319a:	01db      	lsls	r3, r3, #7
 800319c:	4413      	add	r3, r2
 800319e:	b2c9      	uxtb	r1, r1
 80031a0:	4a05      	ldr	r2, [pc, #20]	; (80031b8 <SSD1306_DrawPixel+0xbc>)
 80031a2:	54d1      	strb	r1, [r2, r3]
 80031a4:	e000      	b.n	80031a8 <SSD1306_DrawPixel+0xac>
		return;
 80031a6:	bf00      	nop
	}
}
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	20000738 	.word	0x20000738
 80031b8:	20000338 	.word	0x20000338

080031bc <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	4603      	mov	r3, r0
 80031c4:	460a      	mov	r2, r1
 80031c6:	80fb      	strh	r3, [r7, #6]
 80031c8:	4613      	mov	r3, r2
 80031ca:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80031cc:	4a05      	ldr	r2, [pc, #20]	; (80031e4 <SSD1306_GotoXY+0x28>)
 80031ce:	88fb      	ldrh	r3, [r7, #6]
 80031d0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80031d2:	4a04      	ldr	r2, [pc, #16]	; (80031e4 <SSD1306_GotoXY+0x28>)
 80031d4:	88bb      	ldrh	r3, [r7, #4]
 80031d6:	8053      	strh	r3, [r2, #2]
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	20000738 	.word	0x20000738

080031e8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	4603      	mov	r3, r0
 80031f0:	6039      	str	r1, [r7, #0]
 80031f2:	71fb      	strb	r3, [r7, #7]
 80031f4:	4613      	mov	r3, r2
 80031f6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80031f8:	4b3a      	ldr	r3, [pc, #232]	; (80032e4 <SSD1306_Putc+0xfc>)
 80031fa:	881b      	ldrh	r3, [r3, #0]
 80031fc:	461a      	mov	r2, r3
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	4413      	add	r3, r2
	if (
 8003204:	2b7f      	cmp	r3, #127	; 0x7f
 8003206:	dc07      	bgt.n	8003218 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8003208:	4b36      	ldr	r3, [pc, #216]	; (80032e4 <SSD1306_Putc+0xfc>)
 800320a:	885b      	ldrh	r3, [r3, #2]
 800320c:	461a      	mov	r2, r3
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	785b      	ldrb	r3, [r3, #1]
 8003212:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003214:	2b3f      	cmp	r3, #63	; 0x3f
 8003216:	dd01      	ble.n	800321c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8003218:	2300      	movs	r3, #0
 800321a:	e05e      	b.n	80032da <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800321c:	2300      	movs	r3, #0
 800321e:	617b      	str	r3, [r7, #20]
 8003220:	e04b      	b.n	80032ba <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	79fb      	ldrb	r3, [r7, #7]
 8003228:	3b20      	subs	r3, #32
 800322a:	6839      	ldr	r1, [r7, #0]
 800322c:	7849      	ldrb	r1, [r1, #1]
 800322e:	fb01 f303 	mul.w	r3, r1, r3
 8003232:	4619      	mov	r1, r3
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	440b      	add	r3, r1
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	4413      	add	r3, r2
 800323c:	881b      	ldrh	r3, [r3, #0]
 800323e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8003240:	2300      	movs	r3, #0
 8003242:	613b      	str	r3, [r7, #16]
 8003244:	e030      	b.n	80032a8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d010      	beq.n	8003278 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8003256:	4b23      	ldr	r3, [pc, #140]	; (80032e4 <SSD1306_Putc+0xfc>)
 8003258:	881a      	ldrh	r2, [r3, #0]
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	b29b      	uxth	r3, r3
 800325e:	4413      	add	r3, r2
 8003260:	b298      	uxth	r0, r3
 8003262:	4b20      	ldr	r3, [pc, #128]	; (80032e4 <SSD1306_Putc+0xfc>)
 8003264:	885a      	ldrh	r2, [r3, #2]
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	b29b      	uxth	r3, r3
 800326a:	4413      	add	r3, r2
 800326c:	b29b      	uxth	r3, r3
 800326e:	79ba      	ldrb	r2, [r7, #6]
 8003270:	4619      	mov	r1, r3
 8003272:	f7ff ff43 	bl	80030fc <SSD1306_DrawPixel>
 8003276:	e014      	b.n	80032a2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8003278:	4b1a      	ldr	r3, [pc, #104]	; (80032e4 <SSD1306_Putc+0xfc>)
 800327a:	881a      	ldrh	r2, [r3, #0]
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	b29b      	uxth	r3, r3
 8003280:	4413      	add	r3, r2
 8003282:	b298      	uxth	r0, r3
 8003284:	4b17      	ldr	r3, [pc, #92]	; (80032e4 <SSD1306_Putc+0xfc>)
 8003286:	885a      	ldrh	r2, [r3, #2]
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	b29b      	uxth	r3, r3
 800328c:	4413      	add	r3, r2
 800328e:	b299      	uxth	r1, r3
 8003290:	79bb      	ldrb	r3, [r7, #6]
 8003292:	2b00      	cmp	r3, #0
 8003294:	bf0c      	ite	eq
 8003296:	2301      	moveq	r3, #1
 8003298:	2300      	movne	r3, #0
 800329a:	b2db      	uxtb	r3, r3
 800329c:	461a      	mov	r2, r3
 800329e:	f7ff ff2d 	bl	80030fc <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	3301      	adds	r3, #1
 80032a6:	613b      	str	r3, [r7, #16]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	461a      	mov	r2, r3
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d3c8      	bcc.n	8003246 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	3301      	adds	r3, #1
 80032b8:	617b      	str	r3, [r7, #20]
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	785b      	ldrb	r3, [r3, #1]
 80032be:	461a      	mov	r2, r3
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d3ad      	bcc.n	8003222 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80032c6:	4b07      	ldr	r3, [pc, #28]	; (80032e4 <SSD1306_Putc+0xfc>)
 80032c8:	881a      	ldrh	r2, [r3, #0]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	4413      	add	r3, r2
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	4b03      	ldr	r3, [pc, #12]	; (80032e4 <SSD1306_Putc+0xfc>)
 80032d6:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80032d8:	79fb      	ldrb	r3, [r7, #7]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3718      	adds	r7, #24
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	20000738 	.word	0x20000738

080032e8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	4613      	mov	r3, r2
 80032f4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80032f6:	e012      	b.n	800331e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	79fa      	ldrb	r2, [r7, #7]
 80032fe:	68b9      	ldr	r1, [r7, #8]
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff ff71 	bl	80031e8 <SSD1306_Putc>
 8003306:	4603      	mov	r3, r0
 8003308:	461a      	mov	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	429a      	cmp	r2, r3
 8003310:	d002      	beq.n	8003318 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	e008      	b.n	800332a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	3301      	adds	r3, #1
 800331c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1e8      	bne.n	80032f8 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	781b      	ldrb	r3, [r3, #0]
}
 800332a:	4618      	mov	r0, r3
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
	...

08003334 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800333a:	4b08      	ldr	r3, [pc, #32]	; (800335c <ssd1306_I2C_Init+0x28>)
 800333c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800333e:	e002      	b.n	8003346 <ssd1306_I2C_Init+0x12>
		p--;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3b01      	subs	r3, #1
 8003344:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1f9      	bne.n	8003340 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800334c:	bf00      	nop
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	0003d090 	.word	0x0003d090

08003360 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8003360:	b590      	push	{r4, r7, lr}
 8003362:	b0c7      	sub	sp, #284	; 0x11c
 8003364:	af02      	add	r7, sp, #8
 8003366:	4604      	mov	r4, r0
 8003368:	4608      	mov	r0, r1
 800336a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800336e:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8003372:	600a      	str	r2, [r1, #0]
 8003374:	4619      	mov	r1, r3
 8003376:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800337a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800337e:	4622      	mov	r2, r4
 8003380:	701a      	strb	r2, [r3, #0]
 8003382:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003386:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800338a:	4602      	mov	r2, r0
 800338c:	701a      	strb	r2, [r3, #0]
 800338e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003392:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003396:	460a      	mov	r2, r1
 8003398:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800339a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800339e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80033a2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80033a6:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80033aa:	7812      	ldrb	r2, [r2, #0]
 80033ac:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80033ae:	2300      	movs	r3, #0
 80033b0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80033b4:	e015      	b.n	80033e2 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80033b6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80033ba:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80033be:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80033c2:	6812      	ldr	r2, [r2, #0]
 80033c4:	441a      	add	r2, r3
 80033c6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80033ca:	3301      	adds	r3, #1
 80033cc:	7811      	ldrb	r1, [r2, #0]
 80033ce:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80033d2:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80033d6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80033d8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80033dc:	3301      	adds	r3, #1
 80033de:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80033e2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80033ec:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80033f0:	8812      	ldrh	r2, [r2, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d8df      	bhi.n	80033b6 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c2, address, dt, count+1, 10);
 80033f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80033fa:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	b299      	uxth	r1, r3
 8003402:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003406:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800340a:	881b      	ldrh	r3, [r3, #0]
 800340c:	3301      	adds	r3, #1
 800340e:	b29b      	uxth	r3, r3
 8003410:	f107 020c 	add.w	r2, r7, #12
 8003414:	200a      	movs	r0, #10
 8003416:	9000      	str	r0, [sp, #0]
 8003418:	4803      	ldr	r0, [pc, #12]	; (8003428 <ssd1306_I2C_WriteMulti+0xc8>)
 800341a:	f001 fa95 	bl	8004948 <HAL_I2C_Master_Transmit>
}
 800341e:	bf00      	nop
 8003420:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8003424:	46bd      	mov	sp, r7
 8003426:	bd90      	pop	{r4, r7, pc}
 8003428:	20000144 	.word	0x20000144

0800342c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af02      	add	r7, sp, #8
 8003432:	4603      	mov	r3, r0
 8003434:	71fb      	strb	r3, [r7, #7]
 8003436:	460b      	mov	r3, r1
 8003438:	71bb      	strb	r3, [r7, #6]
 800343a:	4613      	mov	r3, r2
 800343c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800343e:	79bb      	ldrb	r3, [r7, #6]
 8003440:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8003442:	797b      	ldrb	r3, [r7, #5]
 8003444:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 8003446:	79fb      	ldrb	r3, [r7, #7]
 8003448:	b299      	uxth	r1, r3
 800344a:	f107 020c 	add.w	r2, r7, #12
 800344e:	230a      	movs	r3, #10
 8003450:	9300      	str	r3, [sp, #0]
 8003452:	2302      	movs	r3, #2
 8003454:	4803      	ldr	r0, [pc, #12]	; (8003464 <ssd1306_I2C_Write+0x38>)
 8003456:	f001 fa77 	bl	8004948 <HAL_I2C_Master_Transmit>
}
 800345a:	bf00      	nop
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	20000144 	.word	0x20000144

08003468 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800346e:	2300      	movs	r3, #0
 8003470:	607b      	str	r3, [r7, #4]
 8003472:	4b10      	ldr	r3, [pc, #64]	; (80034b4 <HAL_MspInit+0x4c>)
 8003474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003476:	4a0f      	ldr	r2, [pc, #60]	; (80034b4 <HAL_MspInit+0x4c>)
 8003478:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800347c:	6453      	str	r3, [r2, #68]	; 0x44
 800347e:	4b0d      	ldr	r3, [pc, #52]	; (80034b4 <HAL_MspInit+0x4c>)
 8003480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003482:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003486:	607b      	str	r3, [r7, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800348a:	2300      	movs	r3, #0
 800348c:	603b      	str	r3, [r7, #0]
 800348e:	4b09      	ldr	r3, [pc, #36]	; (80034b4 <HAL_MspInit+0x4c>)
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	4a08      	ldr	r2, [pc, #32]	; (80034b4 <HAL_MspInit+0x4c>)
 8003494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003498:	6413      	str	r3, [r2, #64]	; 0x40
 800349a:	4b06      	ldr	r3, [pc, #24]	; (80034b4 <HAL_MspInit+0x4c>)
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a2:	603b      	str	r3, [r7, #0]
 80034a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034a6:	bf00      	nop
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	40023800 	.word	0x40023800

080034b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b08a      	sub	sp, #40	; 0x28
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c0:	f107 0314 	add.w	r3, r7, #20
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	605a      	str	r2, [r3, #4]
 80034ca:	609a      	str	r2, [r3, #8]
 80034cc:	60da      	str	r2, [r3, #12]
 80034ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a24      	ldr	r2, [pc, #144]	; (8003568 <HAL_ADC_MspInit+0xb0>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d141      	bne.n	800355e <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80034da:	2300      	movs	r3, #0
 80034dc:	613b      	str	r3, [r7, #16]
 80034de:	4b23      	ldr	r3, [pc, #140]	; (800356c <HAL_ADC_MspInit+0xb4>)
 80034e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e2:	4a22      	ldr	r2, [pc, #136]	; (800356c <HAL_ADC_MspInit+0xb4>)
 80034e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034e8:	6453      	str	r3, [r2, #68]	; 0x44
 80034ea:	4b20      	ldr	r3, [pc, #128]	; (800356c <HAL_ADC_MspInit+0xb4>)
 80034ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f2:	613b      	str	r3, [r7, #16]
 80034f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034f6:	2300      	movs	r3, #0
 80034f8:	60fb      	str	r3, [r7, #12]
 80034fa:	4b1c      	ldr	r3, [pc, #112]	; (800356c <HAL_ADC_MspInit+0xb4>)
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	4a1b      	ldr	r2, [pc, #108]	; (800356c <HAL_ADC_MspInit+0xb4>)
 8003500:	f043 0304 	orr.w	r3, r3, #4
 8003504:	6313      	str	r3, [r2, #48]	; 0x30
 8003506:	4b19      	ldr	r3, [pc, #100]	; (800356c <HAL_ADC_MspInit+0xb4>)
 8003508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350a:	f003 0304 	and.w	r3, r3, #4
 800350e:	60fb      	str	r3, [r7, #12]
 8003510:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003512:	2300      	movs	r3, #0
 8003514:	60bb      	str	r3, [r7, #8]
 8003516:	4b15      	ldr	r3, [pc, #84]	; (800356c <HAL_ADC_MspInit+0xb4>)
 8003518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351a:	4a14      	ldr	r2, [pc, #80]	; (800356c <HAL_ADC_MspInit+0xb4>)
 800351c:	f043 0301 	orr.w	r3, r3, #1
 8003520:	6313      	str	r3, [r2, #48]	; 0x30
 8003522:	4b12      	ldr	r3, [pc, #72]	; (800356c <HAL_ADC_MspInit+0xb4>)
 8003524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	60bb      	str	r3, [r7, #8]
 800352c:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800352e:	231f      	movs	r3, #31
 8003530:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003532:	2303      	movs	r3, #3
 8003534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003536:	2300      	movs	r3, #0
 8003538:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800353a:	f107 0314 	add.w	r3, r7, #20
 800353e:	4619      	mov	r1, r3
 8003540:	480b      	ldr	r0, [pc, #44]	; (8003570 <HAL_ADC_MspInit+0xb8>)
 8003542:	f000 feef 	bl	8004324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003546:	23ff      	movs	r3, #255	; 0xff
 8003548:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800354a:	2303      	movs	r3, #3
 800354c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354e:	2300      	movs	r3, #0
 8003550:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003552:	f107 0314 	add.w	r3, r7, #20
 8003556:	4619      	mov	r1, r3
 8003558:	4806      	ldr	r0, [pc, #24]	; (8003574 <HAL_ADC_MspInit+0xbc>)
 800355a:	f000 fee3 	bl	8004324 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800355e:	bf00      	nop
 8003560:	3728      	adds	r7, #40	; 0x28
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	40012000 	.word	0x40012000
 800356c:	40023800 	.word	0x40023800
 8003570:	40020800 	.word	0x40020800
 8003574:	40020000 	.word	0x40020000

08003578 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b08c      	sub	sp, #48	; 0x30
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003580:	f107 031c 	add.w	r3, r7, #28
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	605a      	str	r2, [r3, #4]
 800358a:	609a      	str	r2, [r3, #8]
 800358c:	60da      	str	r2, [r3, #12]
 800358e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a32      	ldr	r2, [pc, #200]	; (8003660 <HAL_I2C_MspInit+0xe8>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d12c      	bne.n	80035f4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800359a:	2300      	movs	r3, #0
 800359c:	61bb      	str	r3, [r7, #24]
 800359e:	4b31      	ldr	r3, [pc, #196]	; (8003664 <HAL_I2C_MspInit+0xec>)
 80035a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a2:	4a30      	ldr	r2, [pc, #192]	; (8003664 <HAL_I2C_MspInit+0xec>)
 80035a4:	f043 0302 	orr.w	r3, r3, #2
 80035a8:	6313      	str	r3, [r2, #48]	; 0x30
 80035aa:	4b2e      	ldr	r3, [pc, #184]	; (8003664 <HAL_I2C_MspInit+0xec>)
 80035ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	61bb      	str	r3, [r7, #24]
 80035b4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80035b6:	23c0      	movs	r3, #192	; 0xc0
 80035b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035ba:	2312      	movs	r3, #18
 80035bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035be:	2300      	movs	r3, #0
 80035c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035c2:	2303      	movs	r3, #3
 80035c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80035c6:	2304      	movs	r3, #4
 80035c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035ca:	f107 031c 	add.w	r3, r7, #28
 80035ce:	4619      	mov	r1, r3
 80035d0:	4825      	ldr	r0, [pc, #148]	; (8003668 <HAL_I2C_MspInit+0xf0>)
 80035d2:	f000 fea7 	bl	8004324 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80035d6:	2300      	movs	r3, #0
 80035d8:	617b      	str	r3, [r7, #20]
 80035da:	4b22      	ldr	r3, [pc, #136]	; (8003664 <HAL_I2C_MspInit+0xec>)
 80035dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035de:	4a21      	ldr	r2, [pc, #132]	; (8003664 <HAL_I2C_MspInit+0xec>)
 80035e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80035e4:	6413      	str	r3, [r2, #64]	; 0x40
 80035e6:	4b1f      	ldr	r3, [pc, #124]	; (8003664 <HAL_I2C_MspInit+0xec>)
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035ee:	617b      	str	r3, [r7, #20]
 80035f0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80035f2:	e031      	b.n	8003658 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a1c      	ldr	r2, [pc, #112]	; (800366c <HAL_I2C_MspInit+0xf4>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d12c      	bne.n	8003658 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035fe:	2300      	movs	r3, #0
 8003600:	613b      	str	r3, [r7, #16]
 8003602:	4b18      	ldr	r3, [pc, #96]	; (8003664 <HAL_I2C_MspInit+0xec>)
 8003604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003606:	4a17      	ldr	r2, [pc, #92]	; (8003664 <HAL_I2C_MspInit+0xec>)
 8003608:	f043 0302 	orr.w	r3, r3, #2
 800360c:	6313      	str	r3, [r2, #48]	; 0x30
 800360e:	4b15      	ldr	r3, [pc, #84]	; (8003664 <HAL_I2C_MspInit+0xec>)
 8003610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	613b      	str	r3, [r7, #16]
 8003618:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800361a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800361e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003620:	2312      	movs	r3, #18
 8003622:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003624:	2300      	movs	r3, #0
 8003626:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003628:	2303      	movs	r3, #3
 800362a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800362c:	2304      	movs	r3, #4
 800362e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003630:	f107 031c 	add.w	r3, r7, #28
 8003634:	4619      	mov	r1, r3
 8003636:	480c      	ldr	r0, [pc, #48]	; (8003668 <HAL_I2C_MspInit+0xf0>)
 8003638:	f000 fe74 	bl	8004324 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800363c:	2300      	movs	r3, #0
 800363e:	60fb      	str	r3, [r7, #12]
 8003640:	4b08      	ldr	r3, [pc, #32]	; (8003664 <HAL_I2C_MspInit+0xec>)
 8003642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003644:	4a07      	ldr	r2, [pc, #28]	; (8003664 <HAL_I2C_MspInit+0xec>)
 8003646:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800364a:	6413      	str	r3, [r2, #64]	; 0x40
 800364c:	4b05      	ldr	r3, [pc, #20]	; (8003664 <HAL_I2C_MspInit+0xec>)
 800364e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003650:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003654:	60fb      	str	r3, [r7, #12]
 8003656:	68fb      	ldr	r3, [r7, #12]
}
 8003658:	bf00      	nop
 800365a:	3730      	adds	r7, #48	; 0x30
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	40005400 	.word	0x40005400
 8003664:	40023800 	.word	0x40023800
 8003668:	40020400 	.word	0x40020400
 800366c:	40005800 	.word	0x40005800

08003670 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a0b      	ldr	r2, [pc, #44]	; (80036ac <HAL_TIM_PWM_MspInit+0x3c>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d10d      	bne.n	800369e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003682:	2300      	movs	r3, #0
 8003684:	60fb      	str	r3, [r7, #12]
 8003686:	4b0a      	ldr	r3, [pc, #40]	; (80036b0 <HAL_TIM_PWM_MspInit+0x40>)
 8003688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368a:	4a09      	ldr	r2, [pc, #36]	; (80036b0 <HAL_TIM_PWM_MspInit+0x40>)
 800368c:	f043 0301 	orr.w	r3, r3, #1
 8003690:	6453      	str	r3, [r2, #68]	; 0x44
 8003692:	4b07      	ldr	r3, [pc, #28]	; (80036b0 <HAL_TIM_PWM_MspInit+0x40>)
 8003694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	60fb      	str	r3, [r7, #12]
 800369c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800369e:	bf00      	nop
 80036a0:	3714      	adds	r7, #20
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	40010000 	.word	0x40010000
 80036b0:	40023800 	.word	0x40023800

080036b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b088      	sub	sp, #32
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036bc:	f107 030c 	add.w	r3, r7, #12
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]
 80036c4:	605a      	str	r2, [r3, #4]
 80036c6:	609a      	str	r2, [r3, #8]
 80036c8:	60da      	str	r2, [r3, #12]
 80036ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a12      	ldr	r2, [pc, #72]	; (800371c <HAL_TIM_MspPostInit+0x68>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d11e      	bne.n	8003714 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80036d6:	2300      	movs	r3, #0
 80036d8:	60bb      	str	r3, [r7, #8]
 80036da:	4b11      	ldr	r3, [pc, #68]	; (8003720 <HAL_TIM_MspPostInit+0x6c>)
 80036dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036de:	4a10      	ldr	r2, [pc, #64]	; (8003720 <HAL_TIM_MspPostInit+0x6c>)
 80036e0:	f043 0310 	orr.w	r3, r3, #16
 80036e4:	6313      	str	r3, [r2, #48]	; 0x30
 80036e6:	4b0e      	ldr	r3, [pc, #56]	; (8003720 <HAL_TIM_MspPostInit+0x6c>)
 80036e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ea:	f003 0310 	and.w	r3, r3, #16
 80036ee:	60bb      	str	r3, [r7, #8]
 80036f0:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80036f2:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80036f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f8:	2302      	movs	r3, #2
 80036fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fc:	2300      	movs	r3, #0
 80036fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003700:	2300      	movs	r3, #0
 8003702:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003704:	2301      	movs	r3, #1
 8003706:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003708:	f107 030c 	add.w	r3, r7, #12
 800370c:	4619      	mov	r1, r3
 800370e:	4805      	ldr	r0, [pc, #20]	; (8003724 <HAL_TIM_MspPostInit+0x70>)
 8003710:	f000 fe08 	bl	8004324 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003714:	bf00      	nop
 8003716:	3720      	adds	r7, #32
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40010000 	.word	0x40010000
 8003720:	40023800 	.word	0x40023800
 8003724:	40021000 	.word	0x40021000

08003728 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b08a      	sub	sp, #40	; 0x28
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003730:	f107 0314 	add.w	r3, r7, #20
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]
 8003738:	605a      	str	r2, [r3, #4]
 800373a:	609a      	str	r2, [r3, #8]
 800373c:	60da      	str	r2, [r3, #12]
 800373e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a19      	ldr	r2, [pc, #100]	; (80037ac <HAL_UART_MspInit+0x84>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d12b      	bne.n	80037a2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800374a:	2300      	movs	r3, #0
 800374c:	613b      	str	r3, [r7, #16]
 800374e:	4b18      	ldr	r3, [pc, #96]	; (80037b0 <HAL_UART_MspInit+0x88>)
 8003750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003752:	4a17      	ldr	r2, [pc, #92]	; (80037b0 <HAL_UART_MspInit+0x88>)
 8003754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003758:	6413      	str	r3, [r2, #64]	; 0x40
 800375a:	4b15      	ldr	r3, [pc, #84]	; (80037b0 <HAL_UART_MspInit+0x88>)
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003762:	613b      	str	r3, [r7, #16]
 8003764:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003766:	2300      	movs	r3, #0
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	4b11      	ldr	r3, [pc, #68]	; (80037b0 <HAL_UART_MspInit+0x88>)
 800376c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376e:	4a10      	ldr	r2, [pc, #64]	; (80037b0 <HAL_UART_MspInit+0x88>)
 8003770:	f043 0308 	orr.w	r3, r3, #8
 8003774:	6313      	str	r3, [r2, #48]	; 0x30
 8003776:	4b0e      	ldr	r3, [pc, #56]	; (80037b0 <HAL_UART_MspInit+0x88>)
 8003778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377a:	f003 0308 	and.w	r3, r3, #8
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003782:	2360      	movs	r3, #96	; 0x60
 8003784:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003786:	2302      	movs	r3, #2
 8003788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800378a:	2300      	movs	r3, #0
 800378c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800378e:	2303      	movs	r3, #3
 8003790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003792:	2307      	movs	r3, #7
 8003794:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003796:	f107 0314 	add.w	r3, r7, #20
 800379a:	4619      	mov	r1, r3
 800379c:	4805      	ldr	r0, [pc, #20]	; (80037b4 <HAL_UART_MspInit+0x8c>)
 800379e:	f000 fdc1 	bl	8004324 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80037a2:	bf00      	nop
 80037a4:	3728      	adds	r7, #40	; 0x28
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	40004400 	.word	0x40004400
 80037b0:	40023800 	.word	0x40023800
 80037b4:	40020c00 	.word	0x40020c00

080037b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, 1);
 80037bc:	2201      	movs	r2, #1
 80037be:	2120      	movs	r1, #32
 80037c0:	4801      	ldr	r0, [pc, #4]	; (80037c8 <NMI_Handler+0x10>)
 80037c2:	f000 ff63 	bl	800468c <HAL_GPIO_WritePin>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80037c6:	e7fe      	b.n	80037c6 <NMI_Handler+0xe>
 80037c8:	40020400 	.word	0x40020400

080037cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037d0:	e7fe      	b.n	80037d0 <HardFault_Handler+0x4>

080037d2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037d2:	b480      	push	{r7}
 80037d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037d6:	e7fe      	b.n	80037d6 <MemManage_Handler+0x4>

080037d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037dc:	e7fe      	b.n	80037dc <BusFault_Handler+0x4>

080037de <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037de:	b480      	push	{r7}
 80037e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037e2:	e7fe      	b.n	80037e2 <UsageFault_Handler+0x4>

080037e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80037e8:	bf00      	nop
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037f2:	b480      	push	{r7}
 80037f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037f6:	bf00      	nop
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003804:	bf00      	nop
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr

0800380e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003812:	f000 f891 	bl	8003938 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003816:	bf00      	nop
 8003818:	bd80      	pop	{r7, pc}
	...

0800381c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003820:	4b06      	ldr	r3, [pc, #24]	; (800383c <SystemInit+0x20>)
 8003822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003826:	4a05      	ldr	r2, [pc, #20]	; (800383c <SystemInit+0x20>)
 8003828:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800382c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003830:	bf00      	nop
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	e000ed00 	.word	0xe000ed00

08003840 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003840:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003878 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003844:	480d      	ldr	r0, [pc, #52]	; (800387c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003846:	490e      	ldr	r1, [pc, #56]	; (8003880 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003848:	4a0e      	ldr	r2, [pc, #56]	; (8003884 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800384a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800384c:	e002      	b.n	8003854 <LoopCopyDataInit>

0800384e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800384e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003852:	3304      	adds	r3, #4

08003854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003858:	d3f9      	bcc.n	800384e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800385a:	4a0b      	ldr	r2, [pc, #44]	; (8003888 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800385c:	4c0b      	ldr	r4, [pc, #44]	; (800388c <LoopFillZerobss+0x26>)
  movs r3, #0
 800385e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003860:	e001      	b.n	8003866 <LoopFillZerobss>

08003862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003864:	3204      	adds	r2, #4

08003866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003868:	d3fb      	bcc.n	8003862 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800386a:	f7ff ffd7 	bl	800381c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800386e:	f003 fdcb 	bl	8007408 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003872:	f7fe ff5b 	bl	800272c <main>
  bx  lr    
 8003876:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003878:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800387c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003880:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8003884:	0800a248 	.word	0x0800a248
  ldr r2, =_sbss
 8003888:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 800388c:	20000744 	.word	0x20000744

08003890 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003890:	e7fe      	b.n	8003890 <ADC_IRQHandler>
	...

08003894 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003898:	4b0e      	ldr	r3, [pc, #56]	; (80038d4 <HAL_Init+0x40>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a0d      	ldr	r2, [pc, #52]	; (80038d4 <HAL_Init+0x40>)
 800389e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80038a4:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <HAL_Init+0x40>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a0a      	ldr	r2, [pc, #40]	; (80038d4 <HAL_Init+0x40>)
 80038aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038b0:	4b08      	ldr	r3, [pc, #32]	; (80038d4 <HAL_Init+0x40>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a07      	ldr	r2, [pc, #28]	; (80038d4 <HAL_Init+0x40>)
 80038b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038bc:	2003      	movs	r0, #3
 80038be:	f000 fcfd 	bl	80042bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038c2:	200f      	movs	r0, #15
 80038c4:	f000 f808 	bl	80038d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038c8:	f7ff fdce 	bl	8003468 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40023c00 	.word	0x40023c00

080038d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038e0:	4b12      	ldr	r3, [pc, #72]	; (800392c <HAL_InitTick+0x54>)
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	4b12      	ldr	r3, [pc, #72]	; (8003930 <HAL_InitTick+0x58>)
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	4619      	mov	r1, r3
 80038ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80038f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 fd07 	bl	800430a <HAL_SYSTICK_Config>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e00e      	b.n	8003924 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b0f      	cmp	r3, #15
 800390a:	d80a      	bhi.n	8003922 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800390c:	2200      	movs	r2, #0
 800390e:	6879      	ldr	r1, [r7, #4]
 8003910:	f04f 30ff 	mov.w	r0, #4294967295
 8003914:	f000 fcdd 	bl	80042d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003918:	4a06      	ldr	r2, [pc, #24]	; (8003934 <HAL_InitTick+0x5c>)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800391e:	2300      	movs	r3, #0
 8003920:	e000      	b.n	8003924 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
}
 8003924:	4618      	mov	r0, r3
 8003926:	3708      	adds	r7, #8
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	2000001c 	.word	0x2000001c
 8003930:	20000024 	.word	0x20000024
 8003934:	20000020 	.word	0x20000020

08003938 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800393c:	4b06      	ldr	r3, [pc, #24]	; (8003958 <HAL_IncTick+0x20>)
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	461a      	mov	r2, r3
 8003942:	4b06      	ldr	r3, [pc, #24]	; (800395c <HAL_IncTick+0x24>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4413      	add	r3, r2
 8003948:	4a04      	ldr	r2, [pc, #16]	; (800395c <HAL_IncTick+0x24>)
 800394a:	6013      	str	r3, [r2, #0]
}
 800394c:	bf00      	nop
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	20000024 	.word	0x20000024
 800395c:	20000740 	.word	0x20000740

08003960 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
  return uwTick;
 8003964:	4b03      	ldr	r3, [pc, #12]	; (8003974 <HAL_GetTick+0x14>)
 8003966:	681b      	ldr	r3, [r3, #0]
}
 8003968:	4618      	mov	r0, r3
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	20000740 	.word	0x20000740

08003978 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003980:	f7ff ffee 	bl	8003960 <HAL_GetTick>
 8003984:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003990:	d005      	beq.n	800399e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003992:	4b0a      	ldr	r3, [pc, #40]	; (80039bc <HAL_Delay+0x44>)
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	461a      	mov	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	4413      	add	r3, r2
 800399c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800399e:	bf00      	nop
 80039a0:	f7ff ffde 	bl	8003960 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d8f7      	bhi.n	80039a0 <HAL_Delay+0x28>
  {
  }
}
 80039b0:	bf00      	nop
 80039b2:	bf00      	nop
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	20000024 	.word	0x20000024

080039c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039c8:	2300      	movs	r3, #0
 80039ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e033      	b.n	8003a3e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d109      	bne.n	80039f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7ff fd6a 	bl	80034b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	f003 0310 	and.w	r3, r3, #16
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d118      	bne.n	8003a30 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003a06:	f023 0302 	bic.w	r3, r3, #2
 8003a0a:	f043 0202 	orr.w	r2, r3, #2
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 faa4 	bl	8003f60 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a22:	f023 0303 	bic.w	r3, r3, #3
 8003a26:	f043 0201 	orr.w	r2, r3, #1
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	641a      	str	r2, [r3, #64]	; 0x40
 8003a2e:	e001      	b.n	8003a34 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
	...

08003a48 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003a50:	2300      	movs	r3, #0
 8003a52:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d101      	bne.n	8003a62 <HAL_ADC_Start+0x1a>
 8003a5e:	2302      	movs	r3, #2
 8003a60:	e0b2      	b.n	8003bc8 <HAL_ADC_Start+0x180>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d018      	beq.n	8003aaa <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	689a      	ldr	r2, [r3, #8]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f042 0201 	orr.w	r2, r2, #1
 8003a86:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003a88:	4b52      	ldr	r3, [pc, #328]	; (8003bd4 <HAL_ADC_Start+0x18c>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a52      	ldr	r2, [pc, #328]	; (8003bd8 <HAL_ADC_Start+0x190>)
 8003a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a92:	0c9a      	lsrs	r2, r3, #18
 8003a94:	4613      	mov	r3, r2
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	4413      	add	r3, r2
 8003a9a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003a9c:	e002      	b.n	8003aa4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1f9      	bne.n	8003a9e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f003 0301 	and.w	r3, r3, #1
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d17a      	bne.n	8003bae <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003ac0:	f023 0301 	bic.w	r3, r3, #1
 8003ac4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d007      	beq.n	8003aea <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ade:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003ae2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003af2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af6:	d106      	bne.n	8003b06 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afc:	f023 0206 	bic.w	r2, r3, #6
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	645a      	str	r2, [r3, #68]	; 0x44
 8003b04:	e002      	b.n	8003b0c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b14:	4b31      	ldr	r3, [pc, #196]	; (8003bdc <HAL_ADC_Start+0x194>)
 8003b16:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003b20:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f003 031f 	and.w	r3, r3, #31
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d12a      	bne.n	8003b84 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a2b      	ldr	r2, [pc, #172]	; (8003be0 <HAL_ADC_Start+0x198>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d015      	beq.n	8003b64 <HAL_ADC_Start+0x11c>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a29      	ldr	r2, [pc, #164]	; (8003be4 <HAL_ADC_Start+0x19c>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d105      	bne.n	8003b4e <HAL_ADC_Start+0x106>
 8003b42:	4b26      	ldr	r3, [pc, #152]	; (8003bdc <HAL_ADC_Start+0x194>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f003 031f 	and.w	r3, r3, #31
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00a      	beq.n	8003b64 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a25      	ldr	r2, [pc, #148]	; (8003be8 <HAL_ADC_Start+0x1a0>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d136      	bne.n	8003bc6 <HAL_ADC_Start+0x17e>
 8003b58:	4b20      	ldr	r3, [pc, #128]	; (8003bdc <HAL_ADC_Start+0x194>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f003 0310 	and.w	r3, r3, #16
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d130      	bne.n	8003bc6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d129      	bne.n	8003bc6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	689a      	ldr	r2, [r3, #8]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003b80:	609a      	str	r2, [r3, #8]
 8003b82:	e020      	b.n	8003bc6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a15      	ldr	r2, [pc, #84]	; (8003be0 <HAL_ADC_Start+0x198>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d11b      	bne.n	8003bc6 <HAL_ADC_Start+0x17e>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d114      	bne.n	8003bc6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	689a      	ldr	r2, [r3, #8]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003baa:	609a      	str	r2, [r3, #8]
 8003bac:	e00b      	b.n	8003bc6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb2:	f043 0210 	orr.w	r2, r3, #16
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bbe:	f043 0201 	orr.w	r2, r3, #1
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3714      	adds	r7, #20
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr
 8003bd4:	2000001c 	.word	0x2000001c
 8003bd8:	431bde83 	.word	0x431bde83
 8003bdc:	40012300 	.word	0x40012300
 8003be0:	40012000 	.word	0x40012000
 8003be4:	40012100 	.word	0x40012100
 8003be8:	40012200 	.word	0x40012200

08003bec <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c08:	d113      	bne.n	8003c32 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003c14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c18:	d10b      	bne.n	8003c32 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	f043 0220 	orr.w	r2, r3, #32
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e063      	b.n	8003cfa <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003c32:	f7ff fe95 	bl	8003960 <HAL_GetTick>
 8003c36:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003c38:	e021      	b.n	8003c7e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c40:	d01d      	beq.n	8003c7e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d007      	beq.n	8003c58 <HAL_ADC_PollForConversion+0x6c>
 8003c48:	f7ff fe8a 	bl	8003960 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d212      	bcs.n	8003c7e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d00b      	beq.n	8003c7e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	f043 0204 	orr.w	r2, r3, #4
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e03d      	b.n	8003cfa <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d1d6      	bne.n	8003c3a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f06f 0212 	mvn.w	r2, #18
 8003c94:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d123      	bne.n	8003cf8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d11f      	bne.n	8003cf8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d006      	beq.n	8003cd4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d111      	bne.n	8003cf8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d105      	bne.n	8003cf8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf0:	f043 0201 	orr.w	r2, r3, #1
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003d02:	b480      	push	{r7}
 8003d04:	b083      	sub	sp, #12
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003d26:	2300      	movs	r3, #0
 8003d28:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d101      	bne.n	8003d38 <HAL_ADC_ConfigChannel+0x1c>
 8003d34:	2302      	movs	r3, #2
 8003d36:	e105      	b.n	8003f44 <HAL_ADC_ConfigChannel+0x228>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2b09      	cmp	r3, #9
 8003d46:	d925      	bls.n	8003d94 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68d9      	ldr	r1, [r3, #12]
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	461a      	mov	r2, r3
 8003d56:	4613      	mov	r3, r2
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	4413      	add	r3, r2
 8003d5c:	3b1e      	subs	r3, #30
 8003d5e:	2207      	movs	r2, #7
 8003d60:	fa02 f303 	lsl.w	r3, r2, r3
 8003d64:	43da      	mvns	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	400a      	ands	r2, r1
 8003d6c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68d9      	ldr	r1, [r3, #12]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	689a      	ldr	r2, [r3, #8]
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	4618      	mov	r0, r3
 8003d80:	4603      	mov	r3, r0
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	4403      	add	r3, r0
 8003d86:	3b1e      	subs	r3, #30
 8003d88:	409a      	lsls	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	60da      	str	r2, [r3, #12]
 8003d92:	e022      	b.n	8003dda <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6919      	ldr	r1, [r3, #16]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	461a      	mov	r2, r3
 8003da2:	4613      	mov	r3, r2
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	4413      	add	r3, r2
 8003da8:	2207      	movs	r2, #7
 8003daa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dae:	43da      	mvns	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	400a      	ands	r2, r1
 8003db6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	6919      	ldr	r1, [r3, #16]
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	689a      	ldr	r2, [r3, #8]
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	4618      	mov	r0, r3
 8003dca:	4603      	mov	r3, r0
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	4403      	add	r3, r0
 8003dd0:	409a      	lsls	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	2b06      	cmp	r3, #6
 8003de0:	d824      	bhi.n	8003e2c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	4613      	mov	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	4413      	add	r3, r2
 8003df2:	3b05      	subs	r3, #5
 8003df4:	221f      	movs	r2, #31
 8003df6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfa:	43da      	mvns	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	400a      	ands	r2, r1
 8003e02:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	4618      	mov	r0, r3
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	4613      	mov	r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	4413      	add	r3, r2
 8003e1c:	3b05      	subs	r3, #5
 8003e1e:	fa00 f203 	lsl.w	r2, r0, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	635a      	str	r2, [r3, #52]	; 0x34
 8003e2a:	e04c      	b.n	8003ec6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	2b0c      	cmp	r3, #12
 8003e32:	d824      	bhi.n	8003e7e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4413      	add	r3, r2
 8003e44:	3b23      	subs	r3, #35	; 0x23
 8003e46:	221f      	movs	r2, #31
 8003e48:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4c:	43da      	mvns	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	400a      	ands	r2, r1
 8003e54:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	4618      	mov	r0, r3
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	4413      	add	r3, r2
 8003e6e:	3b23      	subs	r3, #35	; 0x23
 8003e70:	fa00 f203 	lsl.w	r2, r0, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	631a      	str	r2, [r3, #48]	; 0x30
 8003e7c:	e023      	b.n	8003ec6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4413      	add	r3, r2
 8003e8e:	3b41      	subs	r3, #65	; 0x41
 8003e90:	221f      	movs	r2, #31
 8003e92:	fa02 f303 	lsl.w	r3, r2, r3
 8003e96:	43da      	mvns	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	400a      	ands	r2, r1
 8003e9e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	4618      	mov	r0, r3
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685a      	ldr	r2, [r3, #4]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	4413      	add	r3, r2
 8003eb8:	3b41      	subs	r3, #65	; 0x41
 8003eba:	fa00 f203 	lsl.w	r2, r0, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ec6:	4b22      	ldr	r3, [pc, #136]	; (8003f50 <HAL_ADC_ConfigChannel+0x234>)
 8003ec8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a21      	ldr	r2, [pc, #132]	; (8003f54 <HAL_ADC_ConfigChannel+0x238>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d109      	bne.n	8003ee8 <HAL_ADC_ConfigChannel+0x1cc>
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2b12      	cmp	r3, #18
 8003eda:	d105      	bne.n	8003ee8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a19      	ldr	r2, [pc, #100]	; (8003f54 <HAL_ADC_ConfigChannel+0x238>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d123      	bne.n	8003f3a <HAL_ADC_ConfigChannel+0x21e>
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2b10      	cmp	r3, #16
 8003ef8:	d003      	beq.n	8003f02 <HAL_ADC_ConfigChannel+0x1e6>
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2b11      	cmp	r3, #17
 8003f00:	d11b      	bne.n	8003f3a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2b10      	cmp	r3, #16
 8003f14:	d111      	bne.n	8003f3a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003f16:	4b10      	ldr	r3, [pc, #64]	; (8003f58 <HAL_ADC_ConfigChannel+0x23c>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a10      	ldr	r2, [pc, #64]	; (8003f5c <HAL_ADC_ConfigChannel+0x240>)
 8003f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f20:	0c9a      	lsrs	r2, r3, #18
 8003f22:	4613      	mov	r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	4413      	add	r3, r2
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003f2c:	e002      	b.n	8003f34 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	3b01      	subs	r3, #1
 8003f32:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1f9      	bne.n	8003f2e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3714      	adds	r7, #20
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr
 8003f50:	40012300 	.word	0x40012300
 8003f54:	40012000 	.word	0x40012000
 8003f58:	2000001c 	.word	0x2000001c
 8003f5c:	431bde83 	.word	0x431bde83

08003f60 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f68:	4b79      	ldr	r3, [pc, #484]	; (8004150 <ADC_Init+0x1f0>)
 8003f6a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	431a      	orrs	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	685a      	ldr	r2, [r3, #4]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	6859      	ldr	r1, [r3, #4]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	021a      	lsls	r2, r3, #8
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003fb8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	6859      	ldr	r1, [r3, #4]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689a      	ldr	r2, [r3, #8]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689a      	ldr	r2, [r3, #8]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6899      	ldr	r1, [r3, #8]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68da      	ldr	r2, [r3, #12]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff2:	4a58      	ldr	r2, [pc, #352]	; (8004154 <ADC_Init+0x1f4>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d022      	beq.n	800403e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	689a      	ldr	r2, [r3, #8]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004006:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6899      	ldr	r1, [r3, #8]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	430a      	orrs	r2, r1
 8004018:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689a      	ldr	r2, [r3, #8]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004028:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	6899      	ldr	r1, [r3, #8]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	430a      	orrs	r2, r1
 800403a:	609a      	str	r2, [r3, #8]
 800403c:	e00f      	b.n	800405e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	689a      	ldr	r2, [r3, #8]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800404c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	689a      	ldr	r2, [r3, #8]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800405c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f022 0202 	bic.w	r2, r2, #2
 800406c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	6899      	ldr	r1, [r3, #8]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	7e1b      	ldrb	r3, [r3, #24]
 8004078:	005a      	lsls	r2, r3, #1
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	430a      	orrs	r2, r1
 8004080:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d01b      	beq.n	80040c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800409a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80040aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	6859      	ldr	r1, [r3, #4]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b6:	3b01      	subs	r3, #1
 80040b8:	035a      	lsls	r2, r3, #13
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	430a      	orrs	r2, r1
 80040c0:	605a      	str	r2, [r3, #4]
 80040c2:	e007      	b.n	80040d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80040e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	69db      	ldr	r3, [r3, #28]
 80040ee:	3b01      	subs	r3, #1
 80040f0:	051a      	lsls	r2, r3, #20
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	689a      	ldr	r2, [r3, #8]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004108:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	6899      	ldr	r1, [r3, #8]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004116:	025a      	lsls	r2, r3, #9
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	430a      	orrs	r2, r1
 800411e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689a      	ldr	r2, [r3, #8]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800412e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	6899      	ldr	r1, [r3, #8]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	029a      	lsls	r2, r3, #10
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	430a      	orrs	r2, r1
 8004142:	609a      	str	r2, [r3, #8]
}
 8004144:	bf00      	nop
 8004146:	3714      	adds	r7, #20
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr
 8004150:	40012300 	.word	0x40012300
 8004154:	0f000001 	.word	0x0f000001

08004158 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f003 0307 	and.w	r3, r3, #7
 8004166:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004168:	4b0c      	ldr	r3, [pc, #48]	; (800419c <__NVIC_SetPriorityGrouping+0x44>)
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800416e:	68ba      	ldr	r2, [r7, #8]
 8004170:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004174:	4013      	ands	r3, r2
 8004176:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004180:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004188:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800418a:	4a04      	ldr	r2, [pc, #16]	; (800419c <__NVIC_SetPriorityGrouping+0x44>)
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	60d3      	str	r3, [r2, #12]
}
 8004190:	bf00      	nop
 8004192:	3714      	adds	r7, #20
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr
 800419c:	e000ed00 	.word	0xe000ed00

080041a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041a4:	4b04      	ldr	r3, [pc, #16]	; (80041b8 <__NVIC_GetPriorityGrouping+0x18>)
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	0a1b      	lsrs	r3, r3, #8
 80041aa:	f003 0307 	and.w	r3, r3, #7
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr
 80041b8:	e000ed00 	.word	0xe000ed00

080041bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	4603      	mov	r3, r0
 80041c4:	6039      	str	r1, [r7, #0]
 80041c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	db0a      	blt.n	80041e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	b2da      	uxtb	r2, r3
 80041d4:	490c      	ldr	r1, [pc, #48]	; (8004208 <__NVIC_SetPriority+0x4c>)
 80041d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041da:	0112      	lsls	r2, r2, #4
 80041dc:	b2d2      	uxtb	r2, r2
 80041de:	440b      	add	r3, r1
 80041e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041e4:	e00a      	b.n	80041fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	b2da      	uxtb	r2, r3
 80041ea:	4908      	ldr	r1, [pc, #32]	; (800420c <__NVIC_SetPriority+0x50>)
 80041ec:	79fb      	ldrb	r3, [r7, #7]
 80041ee:	f003 030f 	and.w	r3, r3, #15
 80041f2:	3b04      	subs	r3, #4
 80041f4:	0112      	lsls	r2, r2, #4
 80041f6:	b2d2      	uxtb	r2, r2
 80041f8:	440b      	add	r3, r1
 80041fa:	761a      	strb	r2, [r3, #24]
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr
 8004208:	e000e100 	.word	0xe000e100
 800420c:	e000ed00 	.word	0xe000ed00

08004210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004210:	b480      	push	{r7}
 8004212:	b089      	sub	sp, #36	; 0x24
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f003 0307 	and.w	r3, r3, #7
 8004222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	f1c3 0307 	rsb	r3, r3, #7
 800422a:	2b04      	cmp	r3, #4
 800422c:	bf28      	it	cs
 800422e:	2304      	movcs	r3, #4
 8004230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	3304      	adds	r3, #4
 8004236:	2b06      	cmp	r3, #6
 8004238:	d902      	bls.n	8004240 <NVIC_EncodePriority+0x30>
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	3b03      	subs	r3, #3
 800423e:	e000      	b.n	8004242 <NVIC_EncodePriority+0x32>
 8004240:	2300      	movs	r3, #0
 8004242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004244:	f04f 32ff 	mov.w	r2, #4294967295
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	fa02 f303 	lsl.w	r3, r2, r3
 800424e:	43da      	mvns	r2, r3
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	401a      	ands	r2, r3
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004258:	f04f 31ff 	mov.w	r1, #4294967295
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	fa01 f303 	lsl.w	r3, r1, r3
 8004262:	43d9      	mvns	r1, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004268:	4313      	orrs	r3, r2
         );
}
 800426a:	4618      	mov	r0, r3
 800426c:	3724      	adds	r7, #36	; 0x24
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
	...

08004278 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	3b01      	subs	r3, #1
 8004284:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004288:	d301      	bcc.n	800428e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800428a:	2301      	movs	r3, #1
 800428c:	e00f      	b.n	80042ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800428e:	4a0a      	ldr	r2, [pc, #40]	; (80042b8 <SysTick_Config+0x40>)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	3b01      	subs	r3, #1
 8004294:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004296:	210f      	movs	r1, #15
 8004298:	f04f 30ff 	mov.w	r0, #4294967295
 800429c:	f7ff ff8e 	bl	80041bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042a0:	4b05      	ldr	r3, [pc, #20]	; (80042b8 <SysTick_Config+0x40>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042a6:	4b04      	ldr	r3, [pc, #16]	; (80042b8 <SysTick_Config+0x40>)
 80042a8:	2207      	movs	r2, #7
 80042aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	e000e010 	.word	0xe000e010

080042bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f7ff ff47 	bl	8004158 <__NVIC_SetPriorityGrouping>
}
 80042ca:	bf00      	nop
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b086      	sub	sp, #24
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	4603      	mov	r3, r0
 80042da:	60b9      	str	r1, [r7, #8]
 80042dc:	607a      	str	r2, [r7, #4]
 80042de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80042e0:	2300      	movs	r3, #0
 80042e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80042e4:	f7ff ff5c 	bl	80041a0 <__NVIC_GetPriorityGrouping>
 80042e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	68b9      	ldr	r1, [r7, #8]
 80042ee:	6978      	ldr	r0, [r7, #20]
 80042f0:	f7ff ff8e 	bl	8004210 <NVIC_EncodePriority>
 80042f4:	4602      	mov	r2, r0
 80042f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042fa:	4611      	mov	r1, r2
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7ff ff5d 	bl	80041bc <__NVIC_SetPriority>
}
 8004302:	bf00      	nop
 8004304:	3718      	adds	r7, #24
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b082      	sub	sp, #8
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f7ff ffb0 	bl	8004278 <SysTick_Config>
 8004318:	4603      	mov	r3, r0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
	...

08004324 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004324:	b480      	push	{r7}
 8004326:	b089      	sub	sp, #36	; 0x24
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800432e:	2300      	movs	r3, #0
 8004330:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004332:	2300      	movs	r3, #0
 8004334:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004336:	2300      	movs	r3, #0
 8004338:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800433a:	2300      	movs	r3, #0
 800433c:	61fb      	str	r3, [r7, #28]
 800433e:	e16b      	b.n	8004618 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004340:	2201      	movs	r2, #1
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	fa02 f303 	lsl.w	r3, r2, r3
 8004348:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	4013      	ands	r3, r2
 8004352:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	429a      	cmp	r2, r3
 800435a:	f040 815a 	bne.w	8004612 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f003 0303 	and.w	r3, r3, #3
 8004366:	2b01      	cmp	r3, #1
 8004368:	d005      	beq.n	8004376 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004372:	2b02      	cmp	r3, #2
 8004374:	d130      	bne.n	80043d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	005b      	lsls	r3, r3, #1
 8004380:	2203      	movs	r2, #3
 8004382:	fa02 f303 	lsl.w	r3, r2, r3
 8004386:	43db      	mvns	r3, r3
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	4013      	ands	r3, r2
 800438c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	68da      	ldr	r2, [r3, #12]
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	fa02 f303 	lsl.w	r3, r2, r3
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	4313      	orrs	r3, r2
 800439e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043ac:	2201      	movs	r2, #1
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	fa02 f303 	lsl.w	r3, r2, r3
 80043b4:	43db      	mvns	r3, r3
 80043b6:	69ba      	ldr	r2, [r7, #24]
 80043b8:	4013      	ands	r3, r2
 80043ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	091b      	lsrs	r3, r3, #4
 80043c2:	f003 0201 	and.w	r2, r3, #1
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	fa02 f303 	lsl.w	r3, r2, r3
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f003 0303 	and.w	r3, r3, #3
 80043e0:	2b03      	cmp	r3, #3
 80043e2:	d017      	beq.n	8004414 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	005b      	lsls	r3, r3, #1
 80043ee:	2203      	movs	r2, #3
 80043f0:	fa02 f303 	lsl.w	r3, r2, r3
 80043f4:	43db      	mvns	r3, r3
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	4013      	ands	r3, r2
 80043fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	689a      	ldr	r2, [r3, #8]
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	005b      	lsls	r3, r3, #1
 8004404:	fa02 f303 	lsl.w	r3, r2, r3
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	4313      	orrs	r3, r2
 800440c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	69ba      	ldr	r2, [r7, #24]
 8004412:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f003 0303 	and.w	r3, r3, #3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d123      	bne.n	8004468 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	08da      	lsrs	r2, r3, #3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3208      	adds	r2, #8
 8004428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800442c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	f003 0307 	and.w	r3, r3, #7
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	220f      	movs	r2, #15
 8004438:	fa02 f303 	lsl.w	r3, r2, r3
 800443c:	43db      	mvns	r3, r3
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	4013      	ands	r3, r2
 8004442:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	691a      	ldr	r2, [r3, #16]
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	f003 0307 	and.w	r3, r3, #7
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	fa02 f303 	lsl.w	r3, r2, r3
 8004454:	69ba      	ldr	r2, [r7, #24]
 8004456:	4313      	orrs	r3, r2
 8004458:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	08da      	lsrs	r2, r3, #3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	3208      	adds	r2, #8
 8004462:	69b9      	ldr	r1, [r7, #24]
 8004464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	2203      	movs	r2, #3
 8004474:	fa02 f303 	lsl.w	r3, r2, r3
 8004478:	43db      	mvns	r3, r3
 800447a:	69ba      	ldr	r2, [r7, #24]
 800447c:	4013      	ands	r3, r2
 800447e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f003 0203 	and.w	r2, r3, #3
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	005b      	lsls	r3, r3, #1
 800448c:	fa02 f303 	lsl.w	r3, r2, r3
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	4313      	orrs	r3, r2
 8004494:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f000 80b4 	beq.w	8004612 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044aa:	2300      	movs	r3, #0
 80044ac:	60fb      	str	r3, [r7, #12]
 80044ae:	4b60      	ldr	r3, [pc, #384]	; (8004630 <HAL_GPIO_Init+0x30c>)
 80044b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b2:	4a5f      	ldr	r2, [pc, #380]	; (8004630 <HAL_GPIO_Init+0x30c>)
 80044b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044b8:	6453      	str	r3, [r2, #68]	; 0x44
 80044ba:	4b5d      	ldr	r3, [pc, #372]	; (8004630 <HAL_GPIO_Init+0x30c>)
 80044bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044c2:	60fb      	str	r3, [r7, #12]
 80044c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044c6:	4a5b      	ldr	r2, [pc, #364]	; (8004634 <HAL_GPIO_Init+0x310>)
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	089b      	lsrs	r3, r3, #2
 80044cc:	3302      	adds	r3, #2
 80044ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	f003 0303 	and.w	r3, r3, #3
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	220f      	movs	r2, #15
 80044de:	fa02 f303 	lsl.w	r3, r2, r3
 80044e2:	43db      	mvns	r3, r3
 80044e4:	69ba      	ldr	r2, [r7, #24]
 80044e6:	4013      	ands	r3, r2
 80044e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a52      	ldr	r2, [pc, #328]	; (8004638 <HAL_GPIO_Init+0x314>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d02b      	beq.n	800454a <HAL_GPIO_Init+0x226>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a51      	ldr	r2, [pc, #324]	; (800463c <HAL_GPIO_Init+0x318>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d025      	beq.n	8004546 <HAL_GPIO_Init+0x222>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a50      	ldr	r2, [pc, #320]	; (8004640 <HAL_GPIO_Init+0x31c>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d01f      	beq.n	8004542 <HAL_GPIO_Init+0x21e>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a4f      	ldr	r2, [pc, #316]	; (8004644 <HAL_GPIO_Init+0x320>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d019      	beq.n	800453e <HAL_GPIO_Init+0x21a>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a4e      	ldr	r2, [pc, #312]	; (8004648 <HAL_GPIO_Init+0x324>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d013      	beq.n	800453a <HAL_GPIO_Init+0x216>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a4d      	ldr	r2, [pc, #308]	; (800464c <HAL_GPIO_Init+0x328>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d00d      	beq.n	8004536 <HAL_GPIO_Init+0x212>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a4c      	ldr	r2, [pc, #304]	; (8004650 <HAL_GPIO_Init+0x32c>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d007      	beq.n	8004532 <HAL_GPIO_Init+0x20e>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a4b      	ldr	r2, [pc, #300]	; (8004654 <HAL_GPIO_Init+0x330>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d101      	bne.n	800452e <HAL_GPIO_Init+0x20a>
 800452a:	2307      	movs	r3, #7
 800452c:	e00e      	b.n	800454c <HAL_GPIO_Init+0x228>
 800452e:	2308      	movs	r3, #8
 8004530:	e00c      	b.n	800454c <HAL_GPIO_Init+0x228>
 8004532:	2306      	movs	r3, #6
 8004534:	e00a      	b.n	800454c <HAL_GPIO_Init+0x228>
 8004536:	2305      	movs	r3, #5
 8004538:	e008      	b.n	800454c <HAL_GPIO_Init+0x228>
 800453a:	2304      	movs	r3, #4
 800453c:	e006      	b.n	800454c <HAL_GPIO_Init+0x228>
 800453e:	2303      	movs	r3, #3
 8004540:	e004      	b.n	800454c <HAL_GPIO_Init+0x228>
 8004542:	2302      	movs	r3, #2
 8004544:	e002      	b.n	800454c <HAL_GPIO_Init+0x228>
 8004546:	2301      	movs	r3, #1
 8004548:	e000      	b.n	800454c <HAL_GPIO_Init+0x228>
 800454a:	2300      	movs	r3, #0
 800454c:	69fa      	ldr	r2, [r7, #28]
 800454e:	f002 0203 	and.w	r2, r2, #3
 8004552:	0092      	lsls	r2, r2, #2
 8004554:	4093      	lsls	r3, r2
 8004556:	69ba      	ldr	r2, [r7, #24]
 8004558:	4313      	orrs	r3, r2
 800455a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800455c:	4935      	ldr	r1, [pc, #212]	; (8004634 <HAL_GPIO_Init+0x310>)
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	089b      	lsrs	r3, r3, #2
 8004562:	3302      	adds	r3, #2
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800456a:	4b3b      	ldr	r3, [pc, #236]	; (8004658 <HAL_GPIO_Init+0x334>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	43db      	mvns	r3, r3
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	4013      	ands	r3, r2
 8004578:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	4313      	orrs	r3, r2
 800458c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800458e:	4a32      	ldr	r2, [pc, #200]	; (8004658 <HAL_GPIO_Init+0x334>)
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004594:	4b30      	ldr	r3, [pc, #192]	; (8004658 <HAL_GPIO_Init+0x334>)
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	43db      	mvns	r3, r3
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	4013      	ands	r3, r2
 80045a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d003      	beq.n	80045b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045b8:	4a27      	ldr	r2, [pc, #156]	; (8004658 <HAL_GPIO_Init+0x334>)
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80045be:	4b26      	ldr	r3, [pc, #152]	; (8004658 <HAL_GPIO_Init+0x334>)
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	43db      	mvns	r3, r3
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	4013      	ands	r3, r2
 80045cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	4313      	orrs	r3, r2
 80045e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045e2:	4a1d      	ldr	r2, [pc, #116]	; (8004658 <HAL_GPIO_Init+0x334>)
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045e8:	4b1b      	ldr	r3, [pc, #108]	; (8004658 <HAL_GPIO_Init+0x334>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	43db      	mvns	r3, r3
 80045f2:	69ba      	ldr	r2, [r7, #24]
 80045f4:	4013      	ands	r3, r2
 80045f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d003      	beq.n	800460c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	4313      	orrs	r3, r2
 800460a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800460c:	4a12      	ldr	r2, [pc, #72]	; (8004658 <HAL_GPIO_Init+0x334>)
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	3301      	adds	r3, #1
 8004616:	61fb      	str	r3, [r7, #28]
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	2b0f      	cmp	r3, #15
 800461c:	f67f ae90 	bls.w	8004340 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004620:	bf00      	nop
 8004622:	bf00      	nop
 8004624:	3724      	adds	r7, #36	; 0x24
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	40023800 	.word	0x40023800
 8004634:	40013800 	.word	0x40013800
 8004638:	40020000 	.word	0x40020000
 800463c:	40020400 	.word	0x40020400
 8004640:	40020800 	.word	0x40020800
 8004644:	40020c00 	.word	0x40020c00
 8004648:	40021000 	.word	0x40021000
 800464c:	40021400 	.word	0x40021400
 8004650:	40021800 	.word	0x40021800
 8004654:	40021c00 	.word	0x40021c00
 8004658:	40013c00 	.word	0x40013c00

0800465c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	460b      	mov	r3, r1
 8004666:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	691a      	ldr	r2, [r3, #16]
 800466c:	887b      	ldrh	r3, [r7, #2]
 800466e:	4013      	ands	r3, r2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d002      	beq.n	800467a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004674:	2301      	movs	r3, #1
 8004676:	73fb      	strb	r3, [r7, #15]
 8004678:	e001      	b.n	800467e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800467a:	2300      	movs	r3, #0
 800467c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800467e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004680:	4618      	mov	r0, r3
 8004682:	3714      	adds	r7, #20
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	460b      	mov	r3, r1
 8004696:	807b      	strh	r3, [r7, #2]
 8004698:	4613      	mov	r3, r2
 800469a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800469c:	787b      	ldrb	r3, [r7, #1]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d003      	beq.n	80046aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046a2:	887a      	ldrh	r2, [r7, #2]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80046a8:	e003      	b.n	80046b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80046aa:	887b      	ldrh	r3, [r7, #2]
 80046ac:	041a      	lsls	r2, r3, #16
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	619a      	str	r2, [r3, #24]
}
 80046b2:	bf00      	nop
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
	...

080046c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e12b      	b.n	800492a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d106      	bne.n	80046ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f7fe ff46 	bl	8003578 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2224      	movs	r2, #36	; 0x24
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f022 0201 	bic.w	r2, r2, #1
 8004702:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004712:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004722:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004724:	f001 fcc0 	bl	80060a8 <HAL_RCC_GetPCLK1Freq>
 8004728:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	4a81      	ldr	r2, [pc, #516]	; (8004934 <HAL_I2C_Init+0x274>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d807      	bhi.n	8004744 <HAL_I2C_Init+0x84>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	4a80      	ldr	r2, [pc, #512]	; (8004938 <HAL_I2C_Init+0x278>)
 8004738:	4293      	cmp	r3, r2
 800473a:	bf94      	ite	ls
 800473c:	2301      	movls	r3, #1
 800473e:	2300      	movhi	r3, #0
 8004740:	b2db      	uxtb	r3, r3
 8004742:	e006      	b.n	8004752 <HAL_I2C_Init+0x92>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	4a7d      	ldr	r2, [pc, #500]	; (800493c <HAL_I2C_Init+0x27c>)
 8004748:	4293      	cmp	r3, r2
 800474a:	bf94      	ite	ls
 800474c:	2301      	movls	r3, #1
 800474e:	2300      	movhi	r3, #0
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e0e7      	b.n	800492a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	4a78      	ldr	r2, [pc, #480]	; (8004940 <HAL_I2C_Init+0x280>)
 800475e:	fba2 2303 	umull	r2, r3, r2, r3
 8004762:	0c9b      	lsrs	r3, r3, #18
 8004764:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	430a      	orrs	r2, r1
 8004778:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	6a1b      	ldr	r3, [r3, #32]
 8004780:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	4a6a      	ldr	r2, [pc, #424]	; (8004934 <HAL_I2C_Init+0x274>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d802      	bhi.n	8004794 <HAL_I2C_Init+0xd4>
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	3301      	adds	r3, #1
 8004792:	e009      	b.n	80047a8 <HAL_I2C_Init+0xe8>
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800479a:	fb02 f303 	mul.w	r3, r2, r3
 800479e:	4a69      	ldr	r2, [pc, #420]	; (8004944 <HAL_I2C_Init+0x284>)
 80047a0:	fba2 2303 	umull	r2, r3, r2, r3
 80047a4:	099b      	lsrs	r3, r3, #6
 80047a6:	3301      	adds	r3, #1
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	6812      	ldr	r2, [r2, #0]
 80047ac:	430b      	orrs	r3, r1
 80047ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80047ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	495c      	ldr	r1, [pc, #368]	; (8004934 <HAL_I2C_Init+0x274>)
 80047c4:	428b      	cmp	r3, r1
 80047c6:	d819      	bhi.n	80047fc <HAL_I2C_Init+0x13c>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	1e59      	subs	r1, r3, #1
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80047d6:	1c59      	adds	r1, r3, #1
 80047d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80047dc:	400b      	ands	r3, r1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00a      	beq.n	80047f8 <HAL_I2C_Init+0x138>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	1e59      	subs	r1, r3, #1
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	005b      	lsls	r3, r3, #1
 80047ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80047f0:	3301      	adds	r3, #1
 80047f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047f6:	e051      	b.n	800489c <HAL_I2C_Init+0x1dc>
 80047f8:	2304      	movs	r3, #4
 80047fa:	e04f      	b.n	800489c <HAL_I2C_Init+0x1dc>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d111      	bne.n	8004828 <HAL_I2C_Init+0x168>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	1e58      	subs	r0, r3, #1
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6859      	ldr	r1, [r3, #4]
 800480c:	460b      	mov	r3, r1
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	440b      	add	r3, r1
 8004812:	fbb0 f3f3 	udiv	r3, r0, r3
 8004816:	3301      	adds	r3, #1
 8004818:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800481c:	2b00      	cmp	r3, #0
 800481e:	bf0c      	ite	eq
 8004820:	2301      	moveq	r3, #1
 8004822:	2300      	movne	r3, #0
 8004824:	b2db      	uxtb	r3, r3
 8004826:	e012      	b.n	800484e <HAL_I2C_Init+0x18e>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	1e58      	subs	r0, r3, #1
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6859      	ldr	r1, [r3, #4]
 8004830:	460b      	mov	r3, r1
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	440b      	add	r3, r1
 8004836:	0099      	lsls	r1, r3, #2
 8004838:	440b      	add	r3, r1
 800483a:	fbb0 f3f3 	udiv	r3, r0, r3
 800483e:	3301      	adds	r3, #1
 8004840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004844:	2b00      	cmp	r3, #0
 8004846:	bf0c      	ite	eq
 8004848:	2301      	moveq	r3, #1
 800484a:	2300      	movne	r3, #0
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <HAL_I2C_Init+0x196>
 8004852:	2301      	movs	r3, #1
 8004854:	e022      	b.n	800489c <HAL_I2C_Init+0x1dc>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d10e      	bne.n	800487c <HAL_I2C_Init+0x1bc>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	1e58      	subs	r0, r3, #1
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6859      	ldr	r1, [r3, #4]
 8004866:	460b      	mov	r3, r1
 8004868:	005b      	lsls	r3, r3, #1
 800486a:	440b      	add	r3, r1
 800486c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004870:	3301      	adds	r3, #1
 8004872:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004876:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800487a:	e00f      	b.n	800489c <HAL_I2C_Init+0x1dc>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	1e58      	subs	r0, r3, #1
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6859      	ldr	r1, [r3, #4]
 8004884:	460b      	mov	r3, r1
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	440b      	add	r3, r1
 800488a:	0099      	lsls	r1, r3, #2
 800488c:	440b      	add	r3, r1
 800488e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004892:	3301      	adds	r3, #1
 8004894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004898:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800489c:	6879      	ldr	r1, [r7, #4]
 800489e:	6809      	ldr	r1, [r1, #0]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	69da      	ldr	r2, [r3, #28]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	431a      	orrs	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	430a      	orrs	r2, r1
 80048be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80048ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	6911      	ldr	r1, [r2, #16]
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	68d2      	ldr	r2, [r2, #12]
 80048d6:	4311      	orrs	r1, r2
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	6812      	ldr	r2, [r2, #0]
 80048dc:	430b      	orrs	r3, r1
 80048de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	695a      	ldr	r2, [r3, #20]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	431a      	orrs	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	430a      	orrs	r2, r1
 80048fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f042 0201 	orr.w	r2, r2, #1
 800490a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2220      	movs	r2, #32
 8004916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	000186a0 	.word	0x000186a0
 8004938:	001e847f 	.word	0x001e847f
 800493c:	003d08ff 	.word	0x003d08ff
 8004940:	431bde83 	.word	0x431bde83
 8004944:	10624dd3 	.word	0x10624dd3

08004948 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b088      	sub	sp, #32
 800494c:	af02      	add	r7, sp, #8
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	607a      	str	r2, [r7, #4]
 8004952:	461a      	mov	r2, r3
 8004954:	460b      	mov	r3, r1
 8004956:	817b      	strh	r3, [r7, #10]
 8004958:	4613      	mov	r3, r2
 800495a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800495c:	f7ff f800 	bl	8003960 <HAL_GetTick>
 8004960:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b20      	cmp	r3, #32
 800496c:	f040 80e0 	bne.w	8004b30 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	9300      	str	r3, [sp, #0]
 8004974:	2319      	movs	r3, #25
 8004976:	2201      	movs	r2, #1
 8004978:	4970      	ldr	r1, [pc, #448]	; (8004b3c <HAL_I2C_Master_Transmit+0x1f4>)
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f000 fd86 	bl	800548c <I2C_WaitOnFlagUntilTimeout>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004986:	2302      	movs	r3, #2
 8004988:	e0d3      	b.n	8004b32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004990:	2b01      	cmp	r3, #1
 8004992:	d101      	bne.n	8004998 <HAL_I2C_Master_Transmit+0x50>
 8004994:	2302      	movs	r3, #2
 8004996:	e0cc      	b.n	8004b32 <HAL_I2C_Master_Transmit+0x1ea>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d007      	beq.n	80049be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f042 0201 	orr.w	r2, r2, #1
 80049bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2221      	movs	r2, #33	; 0x21
 80049d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2210      	movs	r2, #16
 80049da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	893a      	ldrh	r2, [r7, #8]
 80049ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	4a50      	ldr	r2, [pc, #320]	; (8004b40 <HAL_I2C_Master_Transmit+0x1f8>)
 80049fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004a00:	8979      	ldrh	r1, [r7, #10]
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	6a3a      	ldr	r2, [r7, #32]
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f000 fbf0 	bl	80051ec <I2C_MasterRequestWrite>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e08d      	b.n	8004b32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a16:	2300      	movs	r3, #0
 8004a18:	613b      	str	r3, [r7, #16]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	613b      	str	r3, [r7, #16]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	613b      	str	r3, [r7, #16]
 8004a2a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004a2c:	e066      	b.n	8004afc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	6a39      	ldr	r1, [r7, #32]
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f000 fe00 	bl	8005638 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00d      	beq.n	8004a5a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	2b04      	cmp	r3, #4
 8004a44:	d107      	bne.n	8004a56 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e06b      	b.n	8004b32 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5e:	781a      	ldrb	r2, [r3, #0]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6a:	1c5a      	adds	r2, r3, #1
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	3b01      	subs	r3, #1
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a82:	3b01      	subs	r3, #1
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	695b      	ldr	r3, [r3, #20]
 8004a90:	f003 0304 	and.w	r3, r3, #4
 8004a94:	2b04      	cmp	r3, #4
 8004a96:	d11b      	bne.n	8004ad0 <HAL_I2C_Master_Transmit+0x188>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d017      	beq.n	8004ad0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa4:	781a      	ldrb	r2, [r3, #0]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	1c5a      	adds	r2, r3, #1
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	3b01      	subs	r3, #1
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	6a39      	ldr	r1, [r7, #32]
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f000 fdf0 	bl	80056ba <I2C_WaitOnBTFFlagUntilTimeout>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00d      	beq.n	8004afc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae4:	2b04      	cmp	r3, #4
 8004ae6:	d107      	bne.n	8004af8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004af6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e01a      	b.n	8004b32 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d194      	bne.n	8004a2e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2220      	movs	r2, #32
 8004b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	e000      	b.n	8004b32 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004b30:	2302      	movs	r3, #2
  }
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3718      	adds	r7, #24
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	00100002 	.word	0x00100002
 8004b40:	ffff0000 	.word	0xffff0000

08004b44 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b08c      	sub	sp, #48	; 0x30
 8004b48:	af02      	add	r7, sp, #8
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	607a      	str	r2, [r7, #4]
 8004b4e:	461a      	mov	r2, r3
 8004b50:	460b      	mov	r3, r1
 8004b52:	817b      	strh	r3, [r7, #10]
 8004b54:	4613      	mov	r3, r2
 8004b56:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b58:	f7fe ff02 	bl	8003960 <HAL_GetTick>
 8004b5c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b20      	cmp	r3, #32
 8004b68:	f040 820b 	bne.w	8004f82 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6e:	9300      	str	r3, [sp, #0]
 8004b70:	2319      	movs	r3, #25
 8004b72:	2201      	movs	r2, #1
 8004b74:	497c      	ldr	r1, [pc, #496]	; (8004d68 <HAL_I2C_Master_Receive+0x224>)
 8004b76:	68f8      	ldr	r0, [r7, #12]
 8004b78:	f000 fc88 	bl	800548c <I2C_WaitOnFlagUntilTimeout>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d001      	beq.n	8004b86 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004b82:	2302      	movs	r3, #2
 8004b84:	e1fe      	b.n	8004f84 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d101      	bne.n	8004b94 <HAL_I2C_Master_Receive+0x50>
 8004b90:	2302      	movs	r3, #2
 8004b92:	e1f7      	b.n	8004f84 <HAL_I2C_Master_Receive+0x440>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d007      	beq.n	8004bba <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f042 0201 	orr.w	r2, r2, #1
 8004bb8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bc8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2222      	movs	r2, #34	; 0x22
 8004bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2210      	movs	r2, #16
 8004bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	893a      	ldrh	r2, [r7, #8]
 8004bea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	4a5c      	ldr	r2, [pc, #368]	; (8004d6c <HAL_I2C_Master_Receive+0x228>)
 8004bfa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004bfc:	8979      	ldrh	r1, [r7, #10]
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	f000 fb74 	bl	80052f0 <I2C_MasterRequestRead>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d001      	beq.n	8004c12 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e1b8      	b.n	8004f84 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d113      	bne.n	8004c42 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	623b      	str	r3, [r7, #32]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	695b      	ldr	r3, [r3, #20]
 8004c24:	623b      	str	r3, [r7, #32]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	623b      	str	r3, [r7, #32]
 8004c2e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c3e:	601a      	str	r2, [r3, #0]
 8004c40:	e18c      	b.n	8004f5c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d11b      	bne.n	8004c82 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	61fb      	str	r3, [r7, #28]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	61fb      	str	r3, [r7, #28]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	61fb      	str	r3, [r7, #28]
 8004c6e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c7e:	601a      	str	r2, [r3, #0]
 8004c80:	e16c      	b.n	8004f5c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d11b      	bne.n	8004cc2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c98:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ca8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004caa:	2300      	movs	r3, #0
 8004cac:	61bb      	str	r3, [r7, #24]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	61bb      	str	r3, [r7, #24]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	61bb      	str	r3, [r7, #24]
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	e14c      	b.n	8004f5c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004cd0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	617b      	str	r3, [r7, #20]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	695b      	ldr	r3, [r3, #20]
 8004cdc:	617b      	str	r3, [r7, #20]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	617b      	str	r3, [r7, #20]
 8004ce6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004ce8:	e138      	b.n	8004f5c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cee:	2b03      	cmp	r3, #3
 8004cf0:	f200 80f1 	bhi.w	8004ed6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d123      	bne.n	8004d44 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cfe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f000 fd1b 	bl	800573c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d001      	beq.n	8004d10 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e139      	b.n	8004f84 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	691a      	ldr	r2, [r3, #16]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1a:	b2d2      	uxtb	r2, r2
 8004d1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d22:	1c5a      	adds	r2, r3, #1
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d42:	e10b      	b.n	8004f5c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d14e      	bne.n	8004dea <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4e:	9300      	str	r3, [sp, #0]
 8004d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d52:	2200      	movs	r2, #0
 8004d54:	4906      	ldr	r1, [pc, #24]	; (8004d70 <HAL_I2C_Master_Receive+0x22c>)
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	f000 fb98 	bl	800548c <I2C_WaitOnFlagUntilTimeout>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d008      	beq.n	8004d74 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e10e      	b.n	8004f84 <HAL_I2C_Master_Receive+0x440>
 8004d66:	bf00      	nop
 8004d68:	00100002 	.word	0x00100002
 8004d6c:	ffff0000 	.word	0xffff0000
 8004d70:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	691a      	ldr	r2, [r3, #16]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8e:	b2d2      	uxtb	r2, r2
 8004d90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d96:	1c5a      	adds	r2, r3, #1
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da0:	3b01      	subs	r3, #1
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	3b01      	subs	r3, #1
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	691a      	ldr	r2, [r3, #16]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc0:	b2d2      	uxtb	r2, r2
 8004dc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc8:	1c5a      	adds	r2, r3, #1
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	3b01      	subs	r3, #1
 8004de2:	b29a      	uxth	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004de8:	e0b8      	b.n	8004f5c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df0:	2200      	movs	r2, #0
 8004df2:	4966      	ldr	r1, [pc, #408]	; (8004f8c <HAL_I2C_Master_Receive+0x448>)
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f000 fb49 	bl	800548c <I2C_WaitOnFlagUntilTimeout>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d001      	beq.n	8004e04 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e0bf      	b.n	8004f84 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	691a      	ldr	r2, [r3, #16]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1e:	b2d2      	uxtb	r2, r2
 8004e20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e26:	1c5a      	adds	r2, r3, #1
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e30:	3b01      	subs	r3, #1
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	494f      	ldr	r1, [pc, #316]	; (8004f8c <HAL_I2C_Master_Receive+0x448>)
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f000 fb1b 	bl	800548c <I2C_WaitOnFlagUntilTimeout>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d001      	beq.n	8004e60 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e091      	b.n	8004f84 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	691a      	ldr	r2, [r3, #16]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7a:	b2d2      	uxtb	r2, r2
 8004e7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e82:	1c5a      	adds	r2, r3, #1
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	691a      	ldr	r2, [r3, #16]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eac:	b2d2      	uxtb	r2, r2
 8004eae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb4:	1c5a      	adds	r2, r3, #1
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ed4:	e042      	b.n	8004f5c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ed8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f000 fc2e 	bl	800573c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d001      	beq.n	8004eea <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e04c      	b.n	8004f84 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	691a      	ldr	r2, [r3, #16]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef4:	b2d2      	uxtb	r2, r2
 8004ef6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efc:	1c5a      	adds	r2, r3, #1
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f06:	3b01      	subs	r3, #1
 8004f08:	b29a      	uxth	r2, r3
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	3b01      	subs	r3, #1
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	f003 0304 	and.w	r3, r3, #4
 8004f26:	2b04      	cmp	r3, #4
 8004f28:	d118      	bne.n	8004f5c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	691a      	ldr	r2, [r3, #16]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f34:	b2d2      	uxtb	r2, r2
 8004f36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3c:	1c5a      	adds	r2, r3, #1
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f46:	3b01      	subs	r3, #1
 8004f48:	b29a      	uxth	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	3b01      	subs	r3, #1
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f47f aec2 	bne.w	8004cea <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2220      	movs	r2, #32
 8004f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	e000      	b.n	8004f84 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004f82:	2302      	movs	r3, #2
  }
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3728      	adds	r7, #40	; 0x28
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	00010004 	.word	0x00010004

08004f90 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b08a      	sub	sp, #40	; 0x28
 8004f94:	af02      	add	r7, sp, #8
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	607a      	str	r2, [r7, #4]
 8004f9a:	603b      	str	r3, [r7, #0]
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004fa0:	f7fe fcde 	bl	8003960 <HAL_GetTick>
 8004fa4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	2b20      	cmp	r3, #32
 8004fb4:	f040 8111 	bne.w	80051da <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	9300      	str	r3, [sp, #0]
 8004fbc:	2319      	movs	r3, #25
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	4988      	ldr	r1, [pc, #544]	; (80051e4 <HAL_I2C_IsDeviceReady+0x254>)
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f000 fa62 	bl	800548c <I2C_WaitOnFlagUntilTimeout>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d001      	beq.n	8004fd2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004fce:	2302      	movs	r3, #2
 8004fd0:	e104      	b.n	80051dc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d101      	bne.n	8004fe0 <HAL_I2C_IsDeviceReady+0x50>
 8004fdc:	2302      	movs	r3, #2
 8004fde:	e0fd      	b.n	80051dc <HAL_I2C_IsDeviceReady+0x24c>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0301 	and.w	r3, r3, #1
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d007      	beq.n	8005006 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f042 0201 	orr.w	r2, r2, #1
 8005004:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005014:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2224      	movs	r2, #36	; 0x24
 800501a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	4a70      	ldr	r2, [pc, #448]	; (80051e8 <HAL_I2C_IsDeviceReady+0x258>)
 8005028:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005038:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	2200      	movs	r2, #0
 8005042:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f000 fa20 	bl	800548c <I2C_WaitOnFlagUntilTimeout>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00d      	beq.n	800506e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005060:	d103      	bne.n	800506a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005068:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e0b6      	b.n	80051dc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800506e:	897b      	ldrh	r3, [r7, #10]
 8005070:	b2db      	uxtb	r3, r3
 8005072:	461a      	mov	r2, r3
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800507c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800507e:	f7fe fc6f 	bl	8003960 <HAL_GetTick>
 8005082:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	f003 0302 	and.w	r3, r3, #2
 800508e:	2b02      	cmp	r3, #2
 8005090:	bf0c      	ite	eq
 8005092:	2301      	moveq	r3, #1
 8005094:	2300      	movne	r3, #0
 8005096:	b2db      	uxtb	r3, r3
 8005098:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	695b      	ldr	r3, [r3, #20]
 80050a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050a8:	bf0c      	ite	eq
 80050aa:	2301      	moveq	r3, #1
 80050ac:	2300      	movne	r3, #0
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80050b2:	e025      	b.n	8005100 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80050b4:	f7fe fc54 	bl	8003960 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	683a      	ldr	r2, [r7, #0]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d302      	bcc.n	80050ca <HAL_I2C_IsDeviceReady+0x13a>
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d103      	bne.n	80050d2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	22a0      	movs	r2, #160	; 0xa0
 80050ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	695b      	ldr	r3, [r3, #20]
 80050d8:	f003 0302 	and.w	r3, r3, #2
 80050dc:	2b02      	cmp	r3, #2
 80050de:	bf0c      	ite	eq
 80050e0:	2301      	moveq	r3, #1
 80050e2:	2300      	movne	r3, #0
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050f6:	bf0c      	ite	eq
 80050f8:	2301      	moveq	r3, #1
 80050fa:	2300      	movne	r3, #0
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005106:	b2db      	uxtb	r3, r3
 8005108:	2ba0      	cmp	r3, #160	; 0xa0
 800510a:	d005      	beq.n	8005118 <HAL_I2C_IsDeviceReady+0x188>
 800510c:	7dfb      	ldrb	r3, [r7, #23]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d102      	bne.n	8005118 <HAL_I2C_IsDeviceReady+0x188>
 8005112:	7dbb      	ldrb	r3, [r7, #22]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d0cd      	beq.n	80050b4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2220      	movs	r2, #32
 800511c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	2b02      	cmp	r3, #2
 800512c:	d129      	bne.n	8005182 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800513c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800513e:	2300      	movs	r3, #0
 8005140:	613b      	str	r3, [r7, #16]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	695b      	ldr	r3, [r3, #20]
 8005148:	613b      	str	r3, [r7, #16]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	613b      	str	r3, [r7, #16]
 8005152:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	9300      	str	r3, [sp, #0]
 8005158:	2319      	movs	r3, #25
 800515a:	2201      	movs	r2, #1
 800515c:	4921      	ldr	r1, [pc, #132]	; (80051e4 <HAL_I2C_IsDeviceReady+0x254>)
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f000 f994 	bl	800548c <I2C_WaitOnFlagUntilTimeout>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d001      	beq.n	800516e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e036      	b.n	80051dc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2220      	movs	r2, #32
 8005172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800517e:	2300      	movs	r3, #0
 8005180:	e02c      	b.n	80051dc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005190:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800519a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	9300      	str	r3, [sp, #0]
 80051a0:	2319      	movs	r3, #25
 80051a2:	2201      	movs	r2, #1
 80051a4:	490f      	ldr	r1, [pc, #60]	; (80051e4 <HAL_I2C_IsDeviceReady+0x254>)
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	f000 f970 	bl	800548c <I2C_WaitOnFlagUntilTimeout>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d001      	beq.n	80051b6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e012      	b.n	80051dc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	3301      	adds	r3, #1
 80051ba:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80051bc:	69ba      	ldr	r2, [r7, #24]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	f4ff af32 	bcc.w	800502a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2220      	movs	r2, #32
 80051ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e000      	b.n	80051dc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80051da:	2302      	movs	r3, #2
  }
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3720      	adds	r7, #32
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	00100002 	.word	0x00100002
 80051e8:	ffff0000 	.word	0xffff0000

080051ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b088      	sub	sp, #32
 80051f0:	af02      	add	r7, sp, #8
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	607a      	str	r2, [r7, #4]
 80051f6:	603b      	str	r3, [r7, #0]
 80051f8:	460b      	mov	r3, r1
 80051fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005200:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	2b08      	cmp	r3, #8
 8005206:	d006      	beq.n	8005216 <I2C_MasterRequestWrite+0x2a>
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d003      	beq.n	8005216 <I2C_MasterRequestWrite+0x2a>
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005214:	d108      	bne.n	8005228 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005224:	601a      	str	r2, [r3, #0]
 8005226:	e00b      	b.n	8005240 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522c:	2b12      	cmp	r3, #18
 800522e:	d107      	bne.n	8005240 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800523e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	9300      	str	r3, [sp, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800524c:	68f8      	ldr	r0, [r7, #12]
 800524e:	f000 f91d 	bl	800548c <I2C_WaitOnFlagUntilTimeout>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00d      	beq.n	8005274 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005262:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005266:	d103      	bne.n	8005270 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800526e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e035      	b.n	80052e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800527c:	d108      	bne.n	8005290 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800527e:	897b      	ldrh	r3, [r7, #10]
 8005280:	b2db      	uxtb	r3, r3
 8005282:	461a      	mov	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800528c:	611a      	str	r2, [r3, #16]
 800528e:	e01b      	b.n	80052c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005290:	897b      	ldrh	r3, [r7, #10]
 8005292:	11db      	asrs	r3, r3, #7
 8005294:	b2db      	uxtb	r3, r3
 8005296:	f003 0306 	and.w	r3, r3, #6
 800529a:	b2db      	uxtb	r3, r3
 800529c:	f063 030f 	orn	r3, r3, #15
 80052a0:	b2da      	uxtb	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	490e      	ldr	r1, [pc, #56]	; (80052e8 <I2C_MasterRequestWrite+0xfc>)
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f000 f943 	bl	800553a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d001      	beq.n	80052be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e010      	b.n	80052e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80052be:	897b      	ldrh	r3, [r7, #10]
 80052c0:	b2da      	uxtb	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	4907      	ldr	r1, [pc, #28]	; (80052ec <I2C_MasterRequestWrite+0x100>)
 80052ce:	68f8      	ldr	r0, [r7, #12]
 80052d0:	f000 f933 	bl	800553a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d001      	beq.n	80052de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e000      	b.n	80052e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3718      	adds	r7, #24
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	00010008 	.word	0x00010008
 80052ec:	00010002 	.word	0x00010002

080052f0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b088      	sub	sp, #32
 80052f4:	af02      	add	r7, sp, #8
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	607a      	str	r2, [r7, #4]
 80052fa:	603b      	str	r3, [r7, #0]
 80052fc:	460b      	mov	r3, r1
 80052fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005304:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005314:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	2b08      	cmp	r3, #8
 800531a:	d006      	beq.n	800532a <I2C_MasterRequestRead+0x3a>
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	2b01      	cmp	r3, #1
 8005320:	d003      	beq.n	800532a <I2C_MasterRequestRead+0x3a>
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005328:	d108      	bne.n	800533c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005338:	601a      	str	r2, [r3, #0]
 800533a:	e00b      	b.n	8005354 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005340:	2b11      	cmp	r3, #17
 8005342:	d107      	bne.n	8005354 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005352:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	9300      	str	r3, [sp, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f000 f893 	bl	800548c <I2C_WaitOnFlagUntilTimeout>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00d      	beq.n	8005388 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005376:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800537a:	d103      	bne.n	8005384 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005382:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e079      	b.n	800547c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005390:	d108      	bne.n	80053a4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005392:	897b      	ldrh	r3, [r7, #10]
 8005394:	b2db      	uxtb	r3, r3
 8005396:	f043 0301 	orr.w	r3, r3, #1
 800539a:	b2da      	uxtb	r2, r3
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	611a      	str	r2, [r3, #16]
 80053a2:	e05f      	b.n	8005464 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80053a4:	897b      	ldrh	r3, [r7, #10]
 80053a6:	11db      	asrs	r3, r3, #7
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	f003 0306 	and.w	r3, r3, #6
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	f063 030f 	orn	r3, r3, #15
 80053b4:	b2da      	uxtb	r2, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	4930      	ldr	r1, [pc, #192]	; (8005484 <I2C_MasterRequestRead+0x194>)
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	f000 f8b9 	bl	800553a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d001      	beq.n	80053d2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e054      	b.n	800547c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80053d2:	897b      	ldrh	r3, [r7, #10]
 80053d4:	b2da      	uxtb	r2, r3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	4929      	ldr	r1, [pc, #164]	; (8005488 <I2C_MasterRequestRead+0x198>)
 80053e2:	68f8      	ldr	r0, [r7, #12]
 80053e4:	f000 f8a9 	bl	800553a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d001      	beq.n	80053f2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e044      	b.n	800547c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053f2:	2300      	movs	r3, #0
 80053f4:	613b      	str	r3, [r7, #16]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	695b      	ldr	r3, [r3, #20]
 80053fc:	613b      	str	r3, [r7, #16]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	613b      	str	r3, [r7, #16]
 8005406:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005416:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	9300      	str	r3, [sp, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005424:	68f8      	ldr	r0, [r7, #12]
 8005426:	f000 f831 	bl	800548c <I2C_WaitOnFlagUntilTimeout>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00d      	beq.n	800544c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800543a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800543e:	d103      	bne.n	8005448 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005446:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e017      	b.n	800547c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800544c:	897b      	ldrh	r3, [r7, #10]
 800544e:	11db      	asrs	r3, r3, #7
 8005450:	b2db      	uxtb	r3, r3
 8005452:	f003 0306 	and.w	r3, r3, #6
 8005456:	b2db      	uxtb	r3, r3
 8005458:	f063 030e 	orn	r3, r3, #14
 800545c:	b2da      	uxtb	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	4907      	ldr	r1, [pc, #28]	; (8005488 <I2C_MasterRequestRead+0x198>)
 800546a:	68f8      	ldr	r0, [r7, #12]
 800546c:	f000 f865 	bl	800553a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d001      	beq.n	800547a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e000      	b.n	800547c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3718      	adds	r7, #24
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	00010008 	.word	0x00010008
 8005488:	00010002 	.word	0x00010002

0800548c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	603b      	str	r3, [r7, #0]
 8005498:	4613      	mov	r3, r2
 800549a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800549c:	e025      	b.n	80054ea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a4:	d021      	beq.n	80054ea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054a6:	f7fe fa5b 	bl	8003960 <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	683a      	ldr	r2, [r7, #0]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d302      	bcc.n	80054bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d116      	bne.n	80054ea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2220      	movs	r2, #32
 80054c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d6:	f043 0220 	orr.w	r2, r3, #32
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e023      	b.n	8005532 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	0c1b      	lsrs	r3, r3, #16
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d10d      	bne.n	8005510 <I2C_WaitOnFlagUntilTimeout+0x84>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	43da      	mvns	r2, r3
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	4013      	ands	r3, r2
 8005500:	b29b      	uxth	r3, r3
 8005502:	2b00      	cmp	r3, #0
 8005504:	bf0c      	ite	eq
 8005506:	2301      	moveq	r3, #1
 8005508:	2300      	movne	r3, #0
 800550a:	b2db      	uxtb	r3, r3
 800550c:	461a      	mov	r2, r3
 800550e:	e00c      	b.n	800552a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	43da      	mvns	r2, r3
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	4013      	ands	r3, r2
 800551c:	b29b      	uxth	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	bf0c      	ite	eq
 8005522:	2301      	moveq	r3, #1
 8005524:	2300      	movne	r3, #0
 8005526:	b2db      	uxtb	r3, r3
 8005528:	461a      	mov	r2, r3
 800552a:	79fb      	ldrb	r3, [r7, #7]
 800552c:	429a      	cmp	r2, r3
 800552e:	d0b6      	beq.n	800549e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800553a:	b580      	push	{r7, lr}
 800553c:	b084      	sub	sp, #16
 800553e:	af00      	add	r7, sp, #0
 8005540:	60f8      	str	r0, [r7, #12]
 8005542:	60b9      	str	r1, [r7, #8]
 8005544:	607a      	str	r2, [r7, #4]
 8005546:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005548:	e051      	b.n	80055ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	695b      	ldr	r3, [r3, #20]
 8005550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005558:	d123      	bne.n	80055a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005568:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005572:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2220      	movs	r2, #32
 800557e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558e:	f043 0204 	orr.w	r2, r3, #4
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e046      	b.n	8005630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a8:	d021      	beq.n	80055ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055aa:	f7fe f9d9 	bl	8003960 <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d302      	bcc.n	80055c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d116      	bne.n	80055ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2220      	movs	r2, #32
 80055ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055da:	f043 0220 	orr.w	r2, r3, #32
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e020      	b.n	8005630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	0c1b      	lsrs	r3, r3, #16
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d10c      	bne.n	8005612 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	43da      	mvns	r2, r3
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	4013      	ands	r3, r2
 8005604:	b29b      	uxth	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	bf14      	ite	ne
 800560a:	2301      	movne	r3, #1
 800560c:	2300      	moveq	r3, #0
 800560e:	b2db      	uxtb	r3, r3
 8005610:	e00b      	b.n	800562a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	43da      	mvns	r2, r3
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	4013      	ands	r3, r2
 800561e:	b29b      	uxth	r3, r3
 8005620:	2b00      	cmp	r3, #0
 8005622:	bf14      	ite	ne
 8005624:	2301      	movne	r3, #1
 8005626:	2300      	moveq	r3, #0
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b00      	cmp	r3, #0
 800562c:	d18d      	bne.n	800554a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3710      	adds	r7, #16
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005644:	e02d      	b.n	80056a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f000 f8ce 	bl	80057e8 <I2C_IsAcknowledgeFailed>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d001      	beq.n	8005656 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e02d      	b.n	80056b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800565c:	d021      	beq.n	80056a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800565e:	f7fe f97f 	bl	8003960 <HAL_GetTick>
 8005662:	4602      	mov	r2, r0
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	68ba      	ldr	r2, [r7, #8]
 800566a:	429a      	cmp	r2, r3
 800566c:	d302      	bcc.n	8005674 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d116      	bne.n	80056a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2220      	movs	r2, #32
 800567e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568e:	f043 0220 	orr.w	r2, r3, #32
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e007      	b.n	80056b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	695b      	ldr	r3, [r3, #20]
 80056a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ac:	2b80      	cmp	r3, #128	; 0x80
 80056ae:	d1ca      	bne.n	8005646 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b084      	sub	sp, #16
 80056be:	af00      	add	r7, sp, #0
 80056c0:	60f8      	str	r0, [r7, #12]
 80056c2:	60b9      	str	r1, [r7, #8]
 80056c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056c6:	e02d      	b.n	8005724 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f000 f88d 	bl	80057e8 <I2C_IsAcknowledgeFailed>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d001      	beq.n	80056d8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e02d      	b.n	8005734 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056de:	d021      	beq.n	8005724 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056e0:	f7fe f93e 	bl	8003960 <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	68ba      	ldr	r2, [r7, #8]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d302      	bcc.n	80056f6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d116      	bne.n	8005724 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2220      	movs	r2, #32
 8005700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005710:	f043 0220 	orr.w	r2, r3, #32
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e007      	b.n	8005734 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	f003 0304 	and.w	r3, r3, #4
 800572e:	2b04      	cmp	r3, #4
 8005730:	d1ca      	bne.n	80056c8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005748:	e042      	b.n	80057d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	695b      	ldr	r3, [r3, #20]
 8005750:	f003 0310 	and.w	r3, r3, #16
 8005754:	2b10      	cmp	r3, #16
 8005756:	d119      	bne.n	800578c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f06f 0210 	mvn.w	r2, #16
 8005760:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2220      	movs	r2, #32
 800576c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e029      	b.n	80057e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800578c:	f7fe f8e8 	bl	8003960 <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	429a      	cmp	r2, r3
 800579a:	d302      	bcc.n	80057a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d116      	bne.n	80057d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2220      	movs	r2, #32
 80057ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057bc:	f043 0220 	orr.w	r2, r3, #32
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e007      	b.n	80057e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057da:	2b40      	cmp	r3, #64	; 0x40
 80057dc:	d1b5      	bne.n	800574a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3710      	adds	r7, #16
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057fe:	d11b      	bne.n	8005838 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005808:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2220      	movs	r2, #32
 8005814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005824:	f043 0204 	orr.w	r2, r3, #4
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e000      	b.n	800583a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	370c      	adds	r7, #12
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
	...

08005848 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b086      	sub	sp, #24
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d101      	bne.n	800585a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e267      	b.n	8005d2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	2b00      	cmp	r3, #0
 8005864:	d075      	beq.n	8005952 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005866:	4b88      	ldr	r3, [pc, #544]	; (8005a88 <HAL_RCC_OscConfig+0x240>)
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f003 030c 	and.w	r3, r3, #12
 800586e:	2b04      	cmp	r3, #4
 8005870:	d00c      	beq.n	800588c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005872:	4b85      	ldr	r3, [pc, #532]	; (8005a88 <HAL_RCC_OscConfig+0x240>)
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800587a:	2b08      	cmp	r3, #8
 800587c:	d112      	bne.n	80058a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800587e:	4b82      	ldr	r3, [pc, #520]	; (8005a88 <HAL_RCC_OscConfig+0x240>)
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005886:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800588a:	d10b      	bne.n	80058a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800588c:	4b7e      	ldr	r3, [pc, #504]	; (8005a88 <HAL_RCC_OscConfig+0x240>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d05b      	beq.n	8005950 <HAL_RCC_OscConfig+0x108>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d157      	bne.n	8005950 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e242      	b.n	8005d2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058ac:	d106      	bne.n	80058bc <HAL_RCC_OscConfig+0x74>
 80058ae:	4b76      	ldr	r3, [pc, #472]	; (8005a88 <HAL_RCC_OscConfig+0x240>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a75      	ldr	r2, [pc, #468]	; (8005a88 <HAL_RCC_OscConfig+0x240>)
 80058b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058b8:	6013      	str	r3, [r2, #0]
 80058ba:	e01d      	b.n	80058f8 <HAL_RCC_OscConfig+0xb0>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058c4:	d10c      	bne.n	80058e0 <HAL_RCC_OscConfig+0x98>
 80058c6:	4b70      	ldr	r3, [pc, #448]	; (8005a88 <HAL_RCC_OscConfig+0x240>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a6f      	ldr	r2, [pc, #444]	; (8005a88 <HAL_RCC_OscConfig+0x240>)
 80058cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058d0:	6013      	str	r3, [r2, #0]
 80058d2:	4b6d      	ldr	r3, [pc, #436]	; (8005a88 <HAL_RCC_OscConfig+0x240>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a6c      	ldr	r2, [pc, #432]	; (8005a88 <HAL_RCC_OscConfig+0x240>)
 80058d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058dc:	6013      	str	r3, [r2, #0]
 80058de:	e00b      	b.n	80058f8 <HAL_RCC_OscConfig+0xb0>
 80058e0:	4b69      	ldr	r3, [pc, #420]	; (8005a88 <HAL_RCC_OscConfig+0x240>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a68      	ldr	r2, [pc, #416]	; (8005a88 <HAL_RCC_OscConfig+0x240>)
 80058e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058ea:	6013      	str	r3, [r2, #0]
 80058ec:	4b66      	ldr	r3, [pc, #408]	; (8005a88 <HAL_RCC_OscConfig+0x240>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a65      	ldr	r2, [pc, #404]	; (8005a88 <HAL_RCC_OscConfig+0x240>)
 80058f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d013      	beq.n	8005928 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005900:	f7fe f82e 	bl	8003960 <HAL_GetTick>
 8005904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005906:	e008      	b.n	800591a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005908:	f7fe f82a 	bl	8003960 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	2b64      	cmp	r3, #100	; 0x64
 8005914:	d901      	bls.n	800591a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e207      	b.n	8005d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800591a:	4b5b      	ldr	r3, [pc, #364]	; (8005a88 <HAL_RCC_OscConfig+0x240>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d0f0      	beq.n	8005908 <HAL_RCC_OscConfig+0xc0>
 8005926:	e014      	b.n	8005952 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005928:	f7fe f81a 	bl	8003960 <HAL_GetTick>
 800592c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800592e:	e008      	b.n	8005942 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005930:	f7fe f816 	bl	8003960 <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	2b64      	cmp	r3, #100	; 0x64
 800593c:	d901      	bls.n	8005942 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	e1f3      	b.n	8005d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005942:	4b51      	ldr	r3, [pc, #324]	; (8005a88 <HAL_RCC_OscConfig+0x240>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1f0      	bne.n	8005930 <HAL_RCC_OscConfig+0xe8>
 800594e:	e000      	b.n	8005952 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 0302 	and.w	r3, r3, #2
 800595a:	2b00      	cmp	r3, #0
 800595c:	d063      	beq.n	8005a26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800595e:	4b4a      	ldr	r3, [pc, #296]	; (8005a88 <HAL_RCC_OscConfig+0x240>)
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f003 030c 	and.w	r3, r3, #12
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00b      	beq.n	8005982 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800596a:	4b47      	ldr	r3, [pc, #284]	; (8005a88 <HAL_RCC_OscConfig+0x240>)
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005972:	2b08      	cmp	r3, #8
 8005974:	d11c      	bne.n	80059b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005976:	4b44      	ldr	r3, [pc, #272]	; (8005a88 <HAL_RCC_OscConfig+0x240>)
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d116      	bne.n	80059b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005982:	4b41      	ldr	r3, [pc, #260]	; (8005a88 <HAL_RCC_OscConfig+0x240>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0302 	and.w	r3, r3, #2
 800598a:	2b00      	cmp	r3, #0
 800598c:	d005      	beq.n	800599a <HAL_RCC_OscConfig+0x152>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	2b01      	cmp	r3, #1
 8005994:	d001      	beq.n	800599a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e1c7      	b.n	8005d2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800599a:	4b3b      	ldr	r3, [pc, #236]	; (8005a88 <HAL_RCC_OscConfig+0x240>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	00db      	lsls	r3, r3, #3
 80059a8:	4937      	ldr	r1, [pc, #220]	; (8005a88 <HAL_RCC_OscConfig+0x240>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059ae:	e03a      	b.n	8005a26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d020      	beq.n	80059fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059b8:	4b34      	ldr	r3, [pc, #208]	; (8005a8c <HAL_RCC_OscConfig+0x244>)
 80059ba:	2201      	movs	r2, #1
 80059bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059be:	f7fd ffcf 	bl	8003960 <HAL_GetTick>
 80059c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059c4:	e008      	b.n	80059d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059c6:	f7fd ffcb 	bl	8003960 <HAL_GetTick>
 80059ca:	4602      	mov	r2, r0
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d901      	bls.n	80059d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e1a8      	b.n	8005d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059d8:	4b2b      	ldr	r3, [pc, #172]	; (8005a88 <HAL_RCC_OscConfig+0x240>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0302 	and.w	r3, r3, #2
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d0f0      	beq.n	80059c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059e4:	4b28      	ldr	r3, [pc, #160]	; (8005a88 <HAL_RCC_OscConfig+0x240>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	00db      	lsls	r3, r3, #3
 80059f2:	4925      	ldr	r1, [pc, #148]	; (8005a88 <HAL_RCC_OscConfig+0x240>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	600b      	str	r3, [r1, #0]
 80059f8:	e015      	b.n	8005a26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059fa:	4b24      	ldr	r3, [pc, #144]	; (8005a8c <HAL_RCC_OscConfig+0x244>)
 80059fc:	2200      	movs	r2, #0
 80059fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a00:	f7fd ffae 	bl	8003960 <HAL_GetTick>
 8005a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a06:	e008      	b.n	8005a1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a08:	f7fd ffaa 	bl	8003960 <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d901      	bls.n	8005a1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e187      	b.n	8005d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a1a:	4b1b      	ldr	r3, [pc, #108]	; (8005a88 <HAL_RCC_OscConfig+0x240>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0302 	and.w	r3, r3, #2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1f0      	bne.n	8005a08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 0308 	and.w	r3, r3, #8
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d036      	beq.n	8005aa0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d016      	beq.n	8005a68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a3a:	4b15      	ldr	r3, [pc, #84]	; (8005a90 <HAL_RCC_OscConfig+0x248>)
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a40:	f7fd ff8e 	bl	8003960 <HAL_GetTick>
 8005a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a46:	e008      	b.n	8005a5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a48:	f7fd ff8a 	bl	8003960 <HAL_GetTick>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d901      	bls.n	8005a5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e167      	b.n	8005d2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a5a:	4b0b      	ldr	r3, [pc, #44]	; (8005a88 <HAL_RCC_OscConfig+0x240>)
 8005a5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a5e:	f003 0302 	and.w	r3, r3, #2
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d0f0      	beq.n	8005a48 <HAL_RCC_OscConfig+0x200>
 8005a66:	e01b      	b.n	8005aa0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a68:	4b09      	ldr	r3, [pc, #36]	; (8005a90 <HAL_RCC_OscConfig+0x248>)
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a6e:	f7fd ff77 	bl	8003960 <HAL_GetTick>
 8005a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a74:	e00e      	b.n	8005a94 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a76:	f7fd ff73 	bl	8003960 <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d907      	bls.n	8005a94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e150      	b.n	8005d2a <HAL_RCC_OscConfig+0x4e2>
 8005a88:	40023800 	.word	0x40023800
 8005a8c:	42470000 	.word	0x42470000
 8005a90:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a94:	4b88      	ldr	r3, [pc, #544]	; (8005cb8 <HAL_RCC_OscConfig+0x470>)
 8005a96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a98:	f003 0302 	and.w	r3, r3, #2
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1ea      	bne.n	8005a76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0304 	and.w	r3, r3, #4
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	f000 8097 	beq.w	8005bdc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ab2:	4b81      	ldr	r3, [pc, #516]	; (8005cb8 <HAL_RCC_OscConfig+0x470>)
 8005ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d10f      	bne.n	8005ade <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005abe:	2300      	movs	r3, #0
 8005ac0:	60bb      	str	r3, [r7, #8]
 8005ac2:	4b7d      	ldr	r3, [pc, #500]	; (8005cb8 <HAL_RCC_OscConfig+0x470>)
 8005ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac6:	4a7c      	ldr	r2, [pc, #496]	; (8005cb8 <HAL_RCC_OscConfig+0x470>)
 8005ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005acc:	6413      	str	r3, [r2, #64]	; 0x40
 8005ace:	4b7a      	ldr	r3, [pc, #488]	; (8005cb8 <HAL_RCC_OscConfig+0x470>)
 8005ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ad6:	60bb      	str	r3, [r7, #8]
 8005ad8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ada:	2301      	movs	r3, #1
 8005adc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ade:	4b77      	ldr	r3, [pc, #476]	; (8005cbc <HAL_RCC_OscConfig+0x474>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d118      	bne.n	8005b1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005aea:	4b74      	ldr	r3, [pc, #464]	; (8005cbc <HAL_RCC_OscConfig+0x474>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a73      	ldr	r2, [pc, #460]	; (8005cbc <HAL_RCC_OscConfig+0x474>)
 8005af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005af4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005af6:	f7fd ff33 	bl	8003960 <HAL_GetTick>
 8005afa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005afc:	e008      	b.n	8005b10 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005afe:	f7fd ff2f 	bl	8003960 <HAL_GetTick>
 8005b02:	4602      	mov	r2, r0
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d901      	bls.n	8005b10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e10c      	b.n	8005d2a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b10:	4b6a      	ldr	r3, [pc, #424]	; (8005cbc <HAL_RCC_OscConfig+0x474>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d0f0      	beq.n	8005afe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d106      	bne.n	8005b32 <HAL_RCC_OscConfig+0x2ea>
 8005b24:	4b64      	ldr	r3, [pc, #400]	; (8005cb8 <HAL_RCC_OscConfig+0x470>)
 8005b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b28:	4a63      	ldr	r2, [pc, #396]	; (8005cb8 <HAL_RCC_OscConfig+0x470>)
 8005b2a:	f043 0301 	orr.w	r3, r3, #1
 8005b2e:	6713      	str	r3, [r2, #112]	; 0x70
 8005b30:	e01c      	b.n	8005b6c <HAL_RCC_OscConfig+0x324>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	2b05      	cmp	r3, #5
 8005b38:	d10c      	bne.n	8005b54 <HAL_RCC_OscConfig+0x30c>
 8005b3a:	4b5f      	ldr	r3, [pc, #380]	; (8005cb8 <HAL_RCC_OscConfig+0x470>)
 8005b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b3e:	4a5e      	ldr	r2, [pc, #376]	; (8005cb8 <HAL_RCC_OscConfig+0x470>)
 8005b40:	f043 0304 	orr.w	r3, r3, #4
 8005b44:	6713      	str	r3, [r2, #112]	; 0x70
 8005b46:	4b5c      	ldr	r3, [pc, #368]	; (8005cb8 <HAL_RCC_OscConfig+0x470>)
 8005b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b4a:	4a5b      	ldr	r2, [pc, #364]	; (8005cb8 <HAL_RCC_OscConfig+0x470>)
 8005b4c:	f043 0301 	orr.w	r3, r3, #1
 8005b50:	6713      	str	r3, [r2, #112]	; 0x70
 8005b52:	e00b      	b.n	8005b6c <HAL_RCC_OscConfig+0x324>
 8005b54:	4b58      	ldr	r3, [pc, #352]	; (8005cb8 <HAL_RCC_OscConfig+0x470>)
 8005b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b58:	4a57      	ldr	r2, [pc, #348]	; (8005cb8 <HAL_RCC_OscConfig+0x470>)
 8005b5a:	f023 0301 	bic.w	r3, r3, #1
 8005b5e:	6713      	str	r3, [r2, #112]	; 0x70
 8005b60:	4b55      	ldr	r3, [pc, #340]	; (8005cb8 <HAL_RCC_OscConfig+0x470>)
 8005b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b64:	4a54      	ldr	r2, [pc, #336]	; (8005cb8 <HAL_RCC_OscConfig+0x470>)
 8005b66:	f023 0304 	bic.w	r3, r3, #4
 8005b6a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d015      	beq.n	8005ba0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b74:	f7fd fef4 	bl	8003960 <HAL_GetTick>
 8005b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b7a:	e00a      	b.n	8005b92 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b7c:	f7fd fef0 	bl	8003960 <HAL_GetTick>
 8005b80:	4602      	mov	r2, r0
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d901      	bls.n	8005b92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e0cb      	b.n	8005d2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b92:	4b49      	ldr	r3, [pc, #292]	; (8005cb8 <HAL_RCC_OscConfig+0x470>)
 8005b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b96:	f003 0302 	and.w	r3, r3, #2
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d0ee      	beq.n	8005b7c <HAL_RCC_OscConfig+0x334>
 8005b9e:	e014      	b.n	8005bca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ba0:	f7fd fede 	bl	8003960 <HAL_GetTick>
 8005ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ba6:	e00a      	b.n	8005bbe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ba8:	f7fd feda 	bl	8003960 <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d901      	bls.n	8005bbe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e0b5      	b.n	8005d2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bbe:	4b3e      	ldr	r3, [pc, #248]	; (8005cb8 <HAL_RCC_OscConfig+0x470>)
 8005bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc2:	f003 0302 	and.w	r3, r3, #2
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1ee      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bca:	7dfb      	ldrb	r3, [r7, #23]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d105      	bne.n	8005bdc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bd0:	4b39      	ldr	r3, [pc, #228]	; (8005cb8 <HAL_RCC_OscConfig+0x470>)
 8005bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd4:	4a38      	ldr	r2, [pc, #224]	; (8005cb8 <HAL_RCC_OscConfig+0x470>)
 8005bd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bda:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	699b      	ldr	r3, [r3, #24]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f000 80a1 	beq.w	8005d28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005be6:	4b34      	ldr	r3, [pc, #208]	; (8005cb8 <HAL_RCC_OscConfig+0x470>)
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f003 030c 	and.w	r3, r3, #12
 8005bee:	2b08      	cmp	r3, #8
 8005bf0:	d05c      	beq.n	8005cac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d141      	bne.n	8005c7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bfa:	4b31      	ldr	r3, [pc, #196]	; (8005cc0 <HAL_RCC_OscConfig+0x478>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c00:	f7fd feae 	bl	8003960 <HAL_GetTick>
 8005c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c06:	e008      	b.n	8005c1a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c08:	f7fd feaa 	bl	8003960 <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d901      	bls.n	8005c1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e087      	b.n	8005d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c1a:	4b27      	ldr	r3, [pc, #156]	; (8005cb8 <HAL_RCC_OscConfig+0x470>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1f0      	bne.n	8005c08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	69da      	ldr	r2, [r3, #28]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	431a      	orrs	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c34:	019b      	lsls	r3, r3, #6
 8005c36:	431a      	orrs	r2, r3
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3c:	085b      	lsrs	r3, r3, #1
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	041b      	lsls	r3, r3, #16
 8005c42:	431a      	orrs	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c48:	061b      	lsls	r3, r3, #24
 8005c4a:	491b      	ldr	r1, [pc, #108]	; (8005cb8 <HAL_RCC_OscConfig+0x470>)
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c50:	4b1b      	ldr	r3, [pc, #108]	; (8005cc0 <HAL_RCC_OscConfig+0x478>)
 8005c52:	2201      	movs	r2, #1
 8005c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c56:	f7fd fe83 	bl	8003960 <HAL_GetTick>
 8005c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c5c:	e008      	b.n	8005c70 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c5e:	f7fd fe7f 	bl	8003960 <HAL_GetTick>
 8005c62:	4602      	mov	r2, r0
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d901      	bls.n	8005c70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e05c      	b.n	8005d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c70:	4b11      	ldr	r3, [pc, #68]	; (8005cb8 <HAL_RCC_OscConfig+0x470>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d0f0      	beq.n	8005c5e <HAL_RCC_OscConfig+0x416>
 8005c7c:	e054      	b.n	8005d28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c7e:	4b10      	ldr	r3, [pc, #64]	; (8005cc0 <HAL_RCC_OscConfig+0x478>)
 8005c80:	2200      	movs	r2, #0
 8005c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c84:	f7fd fe6c 	bl	8003960 <HAL_GetTick>
 8005c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c8a:	e008      	b.n	8005c9e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c8c:	f7fd fe68 	bl	8003960 <HAL_GetTick>
 8005c90:	4602      	mov	r2, r0
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d901      	bls.n	8005c9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e045      	b.n	8005d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c9e:	4b06      	ldr	r3, [pc, #24]	; (8005cb8 <HAL_RCC_OscConfig+0x470>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1f0      	bne.n	8005c8c <HAL_RCC_OscConfig+0x444>
 8005caa:	e03d      	b.n	8005d28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	699b      	ldr	r3, [r3, #24]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d107      	bne.n	8005cc4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e038      	b.n	8005d2a <HAL_RCC_OscConfig+0x4e2>
 8005cb8:	40023800 	.word	0x40023800
 8005cbc:	40007000 	.word	0x40007000
 8005cc0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005cc4:	4b1b      	ldr	r3, [pc, #108]	; (8005d34 <HAL_RCC_OscConfig+0x4ec>)
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d028      	beq.n	8005d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d121      	bne.n	8005d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d11a      	bne.n	8005d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005cfa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d111      	bne.n	8005d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d0a:	085b      	lsrs	r3, r3, #1
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d107      	bne.n	8005d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d001      	beq.n	8005d28 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e000      	b.n	8005d2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3718      	adds	r7, #24
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	40023800 	.word	0x40023800

08005d38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d101      	bne.n	8005d4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e0cc      	b.n	8005ee6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d4c:	4b68      	ldr	r3, [pc, #416]	; (8005ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0307 	and.w	r3, r3, #7
 8005d54:	683a      	ldr	r2, [r7, #0]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d90c      	bls.n	8005d74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d5a:	4b65      	ldr	r3, [pc, #404]	; (8005ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8005d5c:	683a      	ldr	r2, [r7, #0]
 8005d5e:	b2d2      	uxtb	r2, r2
 8005d60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d62:	4b63      	ldr	r3, [pc, #396]	; (8005ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 0307 	and.w	r3, r3, #7
 8005d6a:	683a      	ldr	r2, [r7, #0]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d001      	beq.n	8005d74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e0b8      	b.n	8005ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0302 	and.w	r3, r3, #2
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d020      	beq.n	8005dc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 0304 	and.w	r3, r3, #4
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d005      	beq.n	8005d98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d8c:	4b59      	ldr	r3, [pc, #356]	; (8005ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	4a58      	ldr	r2, [pc, #352]	; (8005ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005d96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0308 	and.w	r3, r3, #8
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d005      	beq.n	8005db0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005da4:	4b53      	ldr	r3, [pc, #332]	; (8005ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	4a52      	ldr	r2, [pc, #328]	; (8005ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8005daa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005dae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005db0:	4b50      	ldr	r3, [pc, #320]	; (8005ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	494d      	ldr	r1, [pc, #308]	; (8005ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d044      	beq.n	8005e58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d107      	bne.n	8005de6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dd6:	4b47      	ldr	r3, [pc, #284]	; (8005ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d119      	bne.n	8005e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e07f      	b.n	8005ee6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d003      	beq.n	8005df6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005df2:	2b03      	cmp	r3, #3
 8005df4:	d107      	bne.n	8005e06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005df6:	4b3f      	ldr	r3, [pc, #252]	; (8005ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d109      	bne.n	8005e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e06f      	b.n	8005ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e06:	4b3b      	ldr	r3, [pc, #236]	; (8005ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 0302 	and.w	r3, r3, #2
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d101      	bne.n	8005e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e067      	b.n	8005ee6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e16:	4b37      	ldr	r3, [pc, #220]	; (8005ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	f023 0203 	bic.w	r2, r3, #3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	4934      	ldr	r1, [pc, #208]	; (8005ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e28:	f7fd fd9a 	bl	8003960 <HAL_GetTick>
 8005e2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e2e:	e00a      	b.n	8005e46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e30:	f7fd fd96 	bl	8003960 <HAL_GetTick>
 8005e34:	4602      	mov	r2, r0
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d901      	bls.n	8005e46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e04f      	b.n	8005ee6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e46:	4b2b      	ldr	r3, [pc, #172]	; (8005ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f003 020c 	and.w	r2, r3, #12
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d1eb      	bne.n	8005e30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e58:	4b25      	ldr	r3, [pc, #148]	; (8005ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0307 	and.w	r3, r3, #7
 8005e60:	683a      	ldr	r2, [r7, #0]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d20c      	bcs.n	8005e80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e66:	4b22      	ldr	r3, [pc, #136]	; (8005ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e68:	683a      	ldr	r2, [r7, #0]
 8005e6a:	b2d2      	uxtb	r2, r2
 8005e6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e6e:	4b20      	ldr	r3, [pc, #128]	; (8005ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0307 	and.w	r3, r3, #7
 8005e76:	683a      	ldr	r2, [r7, #0]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d001      	beq.n	8005e80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e032      	b.n	8005ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0304 	and.w	r3, r3, #4
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d008      	beq.n	8005e9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e8c:	4b19      	ldr	r3, [pc, #100]	; (8005ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	4916      	ldr	r1, [pc, #88]	; (8005ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0308 	and.w	r3, r3, #8
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d009      	beq.n	8005ebe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005eaa:	4b12      	ldr	r3, [pc, #72]	; (8005ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	00db      	lsls	r3, r3, #3
 8005eb8:	490e      	ldr	r1, [pc, #56]	; (8005ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ebe:	f000 f821 	bl	8005f04 <HAL_RCC_GetSysClockFreq>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	4b0b      	ldr	r3, [pc, #44]	; (8005ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	091b      	lsrs	r3, r3, #4
 8005eca:	f003 030f 	and.w	r3, r3, #15
 8005ece:	490a      	ldr	r1, [pc, #40]	; (8005ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8005ed0:	5ccb      	ldrb	r3, [r1, r3]
 8005ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ed6:	4a09      	ldr	r2, [pc, #36]	; (8005efc <HAL_RCC_ClockConfig+0x1c4>)
 8005ed8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005eda:	4b09      	ldr	r3, [pc, #36]	; (8005f00 <HAL_RCC_ClockConfig+0x1c8>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f7fd fcfa 	bl	80038d8 <HAL_InitTick>

  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	40023c00 	.word	0x40023c00
 8005ef4:	40023800 	.word	0x40023800
 8005ef8:	08009fa8 	.word	0x08009fa8
 8005efc:	2000001c 	.word	0x2000001c
 8005f00:	20000020 	.word	0x20000020

08005f04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f08:	b090      	sub	sp, #64	; 0x40
 8005f0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	637b      	str	r3, [r7, #52]	; 0x34
 8005f10:	2300      	movs	r3, #0
 8005f12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f14:	2300      	movs	r3, #0
 8005f16:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f1c:	4b59      	ldr	r3, [pc, #356]	; (8006084 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f003 030c 	and.w	r3, r3, #12
 8005f24:	2b08      	cmp	r3, #8
 8005f26:	d00d      	beq.n	8005f44 <HAL_RCC_GetSysClockFreq+0x40>
 8005f28:	2b08      	cmp	r3, #8
 8005f2a:	f200 80a1 	bhi.w	8006070 <HAL_RCC_GetSysClockFreq+0x16c>
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d002      	beq.n	8005f38 <HAL_RCC_GetSysClockFreq+0x34>
 8005f32:	2b04      	cmp	r3, #4
 8005f34:	d003      	beq.n	8005f3e <HAL_RCC_GetSysClockFreq+0x3a>
 8005f36:	e09b      	b.n	8006070 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f38:	4b53      	ldr	r3, [pc, #332]	; (8006088 <HAL_RCC_GetSysClockFreq+0x184>)
 8005f3a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005f3c:	e09b      	b.n	8006076 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f3e:	4b53      	ldr	r3, [pc, #332]	; (800608c <HAL_RCC_GetSysClockFreq+0x188>)
 8005f40:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005f42:	e098      	b.n	8006076 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f44:	4b4f      	ldr	r3, [pc, #316]	; (8006084 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f4c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f4e:	4b4d      	ldr	r3, [pc, #308]	; (8006084 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d028      	beq.n	8005fac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f5a:	4b4a      	ldr	r3, [pc, #296]	; (8006084 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	099b      	lsrs	r3, r3, #6
 8005f60:	2200      	movs	r2, #0
 8005f62:	623b      	str	r3, [r7, #32]
 8005f64:	627a      	str	r2, [r7, #36]	; 0x24
 8005f66:	6a3b      	ldr	r3, [r7, #32]
 8005f68:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005f6c:	2100      	movs	r1, #0
 8005f6e:	4b47      	ldr	r3, [pc, #284]	; (800608c <HAL_RCC_GetSysClockFreq+0x188>)
 8005f70:	fb03 f201 	mul.w	r2, r3, r1
 8005f74:	2300      	movs	r3, #0
 8005f76:	fb00 f303 	mul.w	r3, r0, r3
 8005f7a:	4413      	add	r3, r2
 8005f7c:	4a43      	ldr	r2, [pc, #268]	; (800608c <HAL_RCC_GetSysClockFreq+0x188>)
 8005f7e:	fba0 1202 	umull	r1, r2, r0, r2
 8005f82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f84:	460a      	mov	r2, r1
 8005f86:	62ba      	str	r2, [r7, #40]	; 0x28
 8005f88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f8a:	4413      	add	r3, r2
 8005f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f90:	2200      	movs	r2, #0
 8005f92:	61bb      	str	r3, [r7, #24]
 8005f94:	61fa      	str	r2, [r7, #28]
 8005f96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f9a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005f9e:	f7fa fda7 	bl	8000af0 <__aeabi_uldivmod>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005faa:	e053      	b.n	8006054 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fac:	4b35      	ldr	r3, [pc, #212]	; (8006084 <HAL_RCC_GetSysClockFreq+0x180>)
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	099b      	lsrs	r3, r3, #6
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	613b      	str	r3, [r7, #16]
 8005fb6:	617a      	str	r2, [r7, #20]
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005fbe:	f04f 0b00 	mov.w	fp, #0
 8005fc2:	4652      	mov	r2, sl
 8005fc4:	465b      	mov	r3, fp
 8005fc6:	f04f 0000 	mov.w	r0, #0
 8005fca:	f04f 0100 	mov.w	r1, #0
 8005fce:	0159      	lsls	r1, r3, #5
 8005fd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005fd4:	0150      	lsls	r0, r2, #5
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	460b      	mov	r3, r1
 8005fda:	ebb2 080a 	subs.w	r8, r2, sl
 8005fde:	eb63 090b 	sbc.w	r9, r3, fp
 8005fe2:	f04f 0200 	mov.w	r2, #0
 8005fe6:	f04f 0300 	mov.w	r3, #0
 8005fea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005fee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005ff2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005ff6:	ebb2 0408 	subs.w	r4, r2, r8
 8005ffa:	eb63 0509 	sbc.w	r5, r3, r9
 8005ffe:	f04f 0200 	mov.w	r2, #0
 8006002:	f04f 0300 	mov.w	r3, #0
 8006006:	00eb      	lsls	r3, r5, #3
 8006008:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800600c:	00e2      	lsls	r2, r4, #3
 800600e:	4614      	mov	r4, r2
 8006010:	461d      	mov	r5, r3
 8006012:	eb14 030a 	adds.w	r3, r4, sl
 8006016:	603b      	str	r3, [r7, #0]
 8006018:	eb45 030b 	adc.w	r3, r5, fp
 800601c:	607b      	str	r3, [r7, #4]
 800601e:	f04f 0200 	mov.w	r2, #0
 8006022:	f04f 0300 	mov.w	r3, #0
 8006026:	e9d7 4500 	ldrd	r4, r5, [r7]
 800602a:	4629      	mov	r1, r5
 800602c:	028b      	lsls	r3, r1, #10
 800602e:	4621      	mov	r1, r4
 8006030:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006034:	4621      	mov	r1, r4
 8006036:	028a      	lsls	r2, r1, #10
 8006038:	4610      	mov	r0, r2
 800603a:	4619      	mov	r1, r3
 800603c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800603e:	2200      	movs	r2, #0
 8006040:	60bb      	str	r3, [r7, #8]
 8006042:	60fa      	str	r2, [r7, #12]
 8006044:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006048:	f7fa fd52 	bl	8000af0 <__aeabi_uldivmod>
 800604c:	4602      	mov	r2, r0
 800604e:	460b      	mov	r3, r1
 8006050:	4613      	mov	r3, r2
 8006052:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006054:	4b0b      	ldr	r3, [pc, #44]	; (8006084 <HAL_RCC_GetSysClockFreq+0x180>)
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	0c1b      	lsrs	r3, r3, #16
 800605a:	f003 0303 	and.w	r3, r3, #3
 800605e:	3301      	adds	r3, #1
 8006060:	005b      	lsls	r3, r3, #1
 8006062:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006064:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006068:	fbb2 f3f3 	udiv	r3, r2, r3
 800606c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800606e:	e002      	b.n	8006076 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006070:	4b05      	ldr	r3, [pc, #20]	; (8006088 <HAL_RCC_GetSysClockFreq+0x184>)
 8006072:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006074:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006078:	4618      	mov	r0, r3
 800607a:	3740      	adds	r7, #64	; 0x40
 800607c:	46bd      	mov	sp, r7
 800607e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006082:	bf00      	nop
 8006084:	40023800 	.word	0x40023800
 8006088:	00f42400 	.word	0x00f42400
 800608c:	017d7840 	.word	0x017d7840

08006090 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006090:	b480      	push	{r7}
 8006092:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006094:	4b03      	ldr	r3, [pc, #12]	; (80060a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006096:	681b      	ldr	r3, [r3, #0]
}
 8006098:	4618      	mov	r0, r3
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr
 80060a2:	bf00      	nop
 80060a4:	2000001c 	.word	0x2000001c

080060a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80060ac:	f7ff fff0 	bl	8006090 <HAL_RCC_GetHCLKFreq>
 80060b0:	4602      	mov	r2, r0
 80060b2:	4b05      	ldr	r3, [pc, #20]	; (80060c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	0a9b      	lsrs	r3, r3, #10
 80060b8:	f003 0307 	and.w	r3, r3, #7
 80060bc:	4903      	ldr	r1, [pc, #12]	; (80060cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80060be:	5ccb      	ldrb	r3, [r1, r3]
 80060c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	40023800 	.word	0x40023800
 80060cc:	08009fb8 	.word	0x08009fb8

080060d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80060d4:	f7ff ffdc 	bl	8006090 <HAL_RCC_GetHCLKFreq>
 80060d8:	4602      	mov	r2, r0
 80060da:	4b05      	ldr	r3, [pc, #20]	; (80060f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	0b5b      	lsrs	r3, r3, #13
 80060e0:	f003 0307 	and.w	r3, r3, #7
 80060e4:	4903      	ldr	r1, [pc, #12]	; (80060f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80060e6:	5ccb      	ldrb	r3, [r1, r3]
 80060e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	40023800 	.word	0x40023800
 80060f4:	08009fb8 	.word	0x08009fb8

080060f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d101      	bne.n	800610a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e041      	b.n	800618e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006110:	b2db      	uxtb	r3, r3
 8006112:	2b00      	cmp	r3, #0
 8006114:	d106      	bne.n	8006124 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f7fd faa6 	bl	8003670 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2202      	movs	r2, #2
 8006128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	3304      	adds	r3, #4
 8006134:	4619      	mov	r1, r3
 8006136:	4610      	mov	r0, r2
 8006138:	f000 f9b8 	bl	80064ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	3708      	adds	r7, #8
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
	...

08006198 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d109      	bne.n	80061bc <HAL_TIM_PWM_Start+0x24>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	bf14      	ite	ne
 80061b4:	2301      	movne	r3, #1
 80061b6:	2300      	moveq	r3, #0
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	e022      	b.n	8006202 <HAL_TIM_PWM_Start+0x6a>
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	2b04      	cmp	r3, #4
 80061c0:	d109      	bne.n	80061d6 <HAL_TIM_PWM_Start+0x3e>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	bf14      	ite	ne
 80061ce:	2301      	movne	r3, #1
 80061d0:	2300      	moveq	r3, #0
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	e015      	b.n	8006202 <HAL_TIM_PWM_Start+0x6a>
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	2b08      	cmp	r3, #8
 80061da:	d109      	bne.n	80061f0 <HAL_TIM_PWM_Start+0x58>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	bf14      	ite	ne
 80061e8:	2301      	movne	r3, #1
 80061ea:	2300      	moveq	r3, #0
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	e008      	b.n	8006202 <HAL_TIM_PWM_Start+0x6a>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	bf14      	ite	ne
 80061fc:	2301      	movne	r3, #1
 80061fe:	2300      	moveq	r3, #0
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b00      	cmp	r3, #0
 8006204:	d001      	beq.n	800620a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e07c      	b.n	8006304 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d104      	bne.n	800621a <HAL_TIM_PWM_Start+0x82>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2202      	movs	r2, #2
 8006214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006218:	e013      	b.n	8006242 <HAL_TIM_PWM_Start+0xaa>
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	2b04      	cmp	r3, #4
 800621e:	d104      	bne.n	800622a <HAL_TIM_PWM_Start+0x92>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2202      	movs	r2, #2
 8006224:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006228:	e00b      	b.n	8006242 <HAL_TIM_PWM_Start+0xaa>
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	2b08      	cmp	r3, #8
 800622e:	d104      	bne.n	800623a <HAL_TIM_PWM_Start+0xa2>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2202      	movs	r2, #2
 8006234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006238:	e003      	b.n	8006242 <HAL_TIM_PWM_Start+0xaa>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2202      	movs	r2, #2
 800623e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2201      	movs	r2, #1
 8006248:	6839      	ldr	r1, [r7, #0]
 800624a:	4618      	mov	r0, r3
 800624c:	f000 fb7e 	bl	800694c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a2d      	ldr	r2, [pc, #180]	; (800630c <HAL_TIM_PWM_Start+0x174>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d004      	beq.n	8006264 <HAL_TIM_PWM_Start+0xcc>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a2c      	ldr	r2, [pc, #176]	; (8006310 <HAL_TIM_PWM_Start+0x178>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d101      	bne.n	8006268 <HAL_TIM_PWM_Start+0xd0>
 8006264:	2301      	movs	r3, #1
 8006266:	e000      	b.n	800626a <HAL_TIM_PWM_Start+0xd2>
 8006268:	2300      	movs	r3, #0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d007      	beq.n	800627e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800627c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a22      	ldr	r2, [pc, #136]	; (800630c <HAL_TIM_PWM_Start+0x174>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d022      	beq.n	80062ce <HAL_TIM_PWM_Start+0x136>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006290:	d01d      	beq.n	80062ce <HAL_TIM_PWM_Start+0x136>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a1f      	ldr	r2, [pc, #124]	; (8006314 <HAL_TIM_PWM_Start+0x17c>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d018      	beq.n	80062ce <HAL_TIM_PWM_Start+0x136>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a1d      	ldr	r2, [pc, #116]	; (8006318 <HAL_TIM_PWM_Start+0x180>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d013      	beq.n	80062ce <HAL_TIM_PWM_Start+0x136>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a1c      	ldr	r2, [pc, #112]	; (800631c <HAL_TIM_PWM_Start+0x184>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d00e      	beq.n	80062ce <HAL_TIM_PWM_Start+0x136>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a16      	ldr	r2, [pc, #88]	; (8006310 <HAL_TIM_PWM_Start+0x178>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d009      	beq.n	80062ce <HAL_TIM_PWM_Start+0x136>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a18      	ldr	r2, [pc, #96]	; (8006320 <HAL_TIM_PWM_Start+0x188>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d004      	beq.n	80062ce <HAL_TIM_PWM_Start+0x136>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a16      	ldr	r2, [pc, #88]	; (8006324 <HAL_TIM_PWM_Start+0x18c>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d111      	bne.n	80062f2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	f003 0307 	and.w	r3, r3, #7
 80062d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2b06      	cmp	r3, #6
 80062de:	d010      	beq.n	8006302 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f042 0201 	orr.w	r2, r2, #1
 80062ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062f0:	e007      	b.n	8006302 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f042 0201 	orr.w	r2, r2, #1
 8006300:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3710      	adds	r7, #16
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	40010000 	.word	0x40010000
 8006310:	40010400 	.word	0x40010400
 8006314:	40000400 	.word	0x40000400
 8006318:	40000800 	.word	0x40000800
 800631c:	40000c00 	.word	0x40000c00
 8006320:	40014000 	.word	0x40014000
 8006324:	40001800 	.word	0x40001800

08006328 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b086      	sub	sp, #24
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006334:	2300      	movs	r3, #0
 8006336:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800633e:	2b01      	cmp	r3, #1
 8006340:	d101      	bne.n	8006346 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006342:	2302      	movs	r3, #2
 8006344:	e0ae      	b.n	80064a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2b0c      	cmp	r3, #12
 8006352:	f200 809f 	bhi.w	8006494 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006356:	a201      	add	r2, pc, #4	; (adr r2, 800635c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635c:	08006391 	.word	0x08006391
 8006360:	08006495 	.word	0x08006495
 8006364:	08006495 	.word	0x08006495
 8006368:	08006495 	.word	0x08006495
 800636c:	080063d1 	.word	0x080063d1
 8006370:	08006495 	.word	0x08006495
 8006374:	08006495 	.word	0x08006495
 8006378:	08006495 	.word	0x08006495
 800637c:	08006413 	.word	0x08006413
 8006380:	08006495 	.word	0x08006495
 8006384:	08006495 	.word	0x08006495
 8006388:	08006495 	.word	0x08006495
 800638c:	08006453 	.word	0x08006453
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68b9      	ldr	r1, [r7, #8]
 8006396:	4618      	mov	r0, r3
 8006398:	f000 f928 	bl	80065ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	699a      	ldr	r2, [r3, #24]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f042 0208 	orr.w	r2, r2, #8
 80063aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	699a      	ldr	r2, [r3, #24]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f022 0204 	bic.w	r2, r2, #4
 80063ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	6999      	ldr	r1, [r3, #24]
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	691a      	ldr	r2, [r3, #16]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	430a      	orrs	r2, r1
 80063cc:	619a      	str	r2, [r3, #24]
      break;
 80063ce:	e064      	b.n	800649a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68b9      	ldr	r1, [r7, #8]
 80063d6:	4618      	mov	r0, r3
 80063d8:	f000 f978 	bl	80066cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	699a      	ldr	r2, [r3, #24]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	699a      	ldr	r2, [r3, #24]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	6999      	ldr	r1, [r3, #24]
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	021a      	lsls	r2, r3, #8
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	430a      	orrs	r2, r1
 800640e:	619a      	str	r2, [r3, #24]
      break;
 8006410:	e043      	b.n	800649a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68b9      	ldr	r1, [r7, #8]
 8006418:	4618      	mov	r0, r3
 800641a:	f000 f9cd 	bl	80067b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	69da      	ldr	r2, [r3, #28]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f042 0208 	orr.w	r2, r2, #8
 800642c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	69da      	ldr	r2, [r3, #28]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f022 0204 	bic.w	r2, r2, #4
 800643c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	69d9      	ldr	r1, [r3, #28]
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	691a      	ldr	r2, [r3, #16]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	430a      	orrs	r2, r1
 800644e:	61da      	str	r2, [r3, #28]
      break;
 8006450:	e023      	b.n	800649a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68b9      	ldr	r1, [r7, #8]
 8006458:	4618      	mov	r0, r3
 800645a:	f000 fa21 	bl	80068a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	69da      	ldr	r2, [r3, #28]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800646c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	69da      	ldr	r2, [r3, #28]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800647c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	69d9      	ldr	r1, [r3, #28]
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	021a      	lsls	r2, r3, #8
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	430a      	orrs	r2, r1
 8006490:	61da      	str	r2, [r3, #28]
      break;
 8006492:	e002      	b.n	800649a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	75fb      	strb	r3, [r7, #23]
      break;
 8006498:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2200      	movs	r2, #0
 800649e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80064a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3718      	adds	r7, #24
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b085      	sub	sp, #20
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a40      	ldr	r2, [pc, #256]	; (80065c0 <TIM_Base_SetConfig+0x114>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d013      	beq.n	80064ec <TIM_Base_SetConfig+0x40>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064ca:	d00f      	beq.n	80064ec <TIM_Base_SetConfig+0x40>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a3d      	ldr	r2, [pc, #244]	; (80065c4 <TIM_Base_SetConfig+0x118>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d00b      	beq.n	80064ec <TIM_Base_SetConfig+0x40>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4a3c      	ldr	r2, [pc, #240]	; (80065c8 <TIM_Base_SetConfig+0x11c>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d007      	beq.n	80064ec <TIM_Base_SetConfig+0x40>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	4a3b      	ldr	r2, [pc, #236]	; (80065cc <TIM_Base_SetConfig+0x120>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d003      	beq.n	80064ec <TIM_Base_SetConfig+0x40>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	4a3a      	ldr	r2, [pc, #232]	; (80065d0 <TIM_Base_SetConfig+0x124>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d108      	bne.n	80064fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a2f      	ldr	r2, [pc, #188]	; (80065c0 <TIM_Base_SetConfig+0x114>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d02b      	beq.n	800655e <TIM_Base_SetConfig+0xb2>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800650c:	d027      	beq.n	800655e <TIM_Base_SetConfig+0xb2>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a2c      	ldr	r2, [pc, #176]	; (80065c4 <TIM_Base_SetConfig+0x118>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d023      	beq.n	800655e <TIM_Base_SetConfig+0xb2>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a2b      	ldr	r2, [pc, #172]	; (80065c8 <TIM_Base_SetConfig+0x11c>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d01f      	beq.n	800655e <TIM_Base_SetConfig+0xb2>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a2a      	ldr	r2, [pc, #168]	; (80065cc <TIM_Base_SetConfig+0x120>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d01b      	beq.n	800655e <TIM_Base_SetConfig+0xb2>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a29      	ldr	r2, [pc, #164]	; (80065d0 <TIM_Base_SetConfig+0x124>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d017      	beq.n	800655e <TIM_Base_SetConfig+0xb2>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a28      	ldr	r2, [pc, #160]	; (80065d4 <TIM_Base_SetConfig+0x128>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d013      	beq.n	800655e <TIM_Base_SetConfig+0xb2>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a27      	ldr	r2, [pc, #156]	; (80065d8 <TIM_Base_SetConfig+0x12c>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d00f      	beq.n	800655e <TIM_Base_SetConfig+0xb2>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a26      	ldr	r2, [pc, #152]	; (80065dc <TIM_Base_SetConfig+0x130>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d00b      	beq.n	800655e <TIM_Base_SetConfig+0xb2>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a25      	ldr	r2, [pc, #148]	; (80065e0 <TIM_Base_SetConfig+0x134>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d007      	beq.n	800655e <TIM_Base_SetConfig+0xb2>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a24      	ldr	r2, [pc, #144]	; (80065e4 <TIM_Base_SetConfig+0x138>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d003      	beq.n	800655e <TIM_Base_SetConfig+0xb2>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a23      	ldr	r2, [pc, #140]	; (80065e8 <TIM_Base_SetConfig+0x13c>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d108      	bne.n	8006570 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006564:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	4313      	orrs	r3, r2
 800656e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	695b      	ldr	r3, [r3, #20]
 800657a:	4313      	orrs	r3, r2
 800657c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	689a      	ldr	r2, [r3, #8]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a0a      	ldr	r2, [pc, #40]	; (80065c0 <TIM_Base_SetConfig+0x114>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d003      	beq.n	80065a4 <TIM_Base_SetConfig+0xf8>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a0c      	ldr	r2, [pc, #48]	; (80065d0 <TIM_Base_SetConfig+0x124>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d103      	bne.n	80065ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	691a      	ldr	r2, [r3, #16]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	615a      	str	r2, [r3, #20]
}
 80065b2:	bf00      	nop
 80065b4:	3714      	adds	r7, #20
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr
 80065be:	bf00      	nop
 80065c0:	40010000 	.word	0x40010000
 80065c4:	40000400 	.word	0x40000400
 80065c8:	40000800 	.word	0x40000800
 80065cc:	40000c00 	.word	0x40000c00
 80065d0:	40010400 	.word	0x40010400
 80065d4:	40014000 	.word	0x40014000
 80065d8:	40014400 	.word	0x40014400
 80065dc:	40014800 	.word	0x40014800
 80065e0:	40001800 	.word	0x40001800
 80065e4:	40001c00 	.word	0x40001c00
 80065e8:	40002000 	.word	0x40002000

080065ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b087      	sub	sp, #28
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	f023 0201 	bic.w	r2, r3, #1
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a1b      	ldr	r3, [r3, #32]
 8006606:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800661a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f023 0303 	bic.w	r3, r3, #3
 8006622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	4313      	orrs	r3, r2
 800662c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	f023 0302 	bic.w	r3, r3, #2
 8006634:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	697a      	ldr	r2, [r7, #20]
 800663c:	4313      	orrs	r3, r2
 800663e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a20      	ldr	r2, [pc, #128]	; (80066c4 <TIM_OC1_SetConfig+0xd8>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d003      	beq.n	8006650 <TIM_OC1_SetConfig+0x64>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a1f      	ldr	r2, [pc, #124]	; (80066c8 <TIM_OC1_SetConfig+0xdc>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d10c      	bne.n	800666a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	f023 0308 	bic.w	r3, r3, #8
 8006656:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	697a      	ldr	r2, [r7, #20]
 800665e:	4313      	orrs	r3, r2
 8006660:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	f023 0304 	bic.w	r3, r3, #4
 8006668:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a15      	ldr	r2, [pc, #84]	; (80066c4 <TIM_OC1_SetConfig+0xd8>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d003      	beq.n	800667a <TIM_OC1_SetConfig+0x8e>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a14      	ldr	r2, [pc, #80]	; (80066c8 <TIM_OC1_SetConfig+0xdc>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d111      	bne.n	800669e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006680:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006688:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	695b      	ldr	r3, [r3, #20]
 800668e:	693a      	ldr	r2, [r7, #16]
 8006690:	4313      	orrs	r3, r2
 8006692:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	699b      	ldr	r3, [r3, #24]
 8006698:	693a      	ldr	r2, [r7, #16]
 800669a:	4313      	orrs	r3, r2
 800669c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	693a      	ldr	r2, [r7, #16]
 80066a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	685a      	ldr	r2, [r3, #4]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	697a      	ldr	r2, [r7, #20]
 80066b6:	621a      	str	r2, [r3, #32]
}
 80066b8:	bf00      	nop
 80066ba:	371c      	adds	r7, #28
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr
 80066c4:	40010000 	.word	0x40010000
 80066c8:	40010400 	.word	0x40010400

080066cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b087      	sub	sp, #28
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a1b      	ldr	r3, [r3, #32]
 80066da:	f023 0210 	bic.w	r2, r3, #16
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a1b      	ldr	r3, [r3, #32]
 80066e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	699b      	ldr	r3, [r3, #24]
 80066f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006702:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	021b      	lsls	r3, r3, #8
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	4313      	orrs	r3, r2
 800670e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	f023 0320 	bic.w	r3, r3, #32
 8006716:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	011b      	lsls	r3, r3, #4
 800671e:	697a      	ldr	r2, [r7, #20]
 8006720:	4313      	orrs	r3, r2
 8006722:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4a22      	ldr	r2, [pc, #136]	; (80067b0 <TIM_OC2_SetConfig+0xe4>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d003      	beq.n	8006734 <TIM_OC2_SetConfig+0x68>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4a21      	ldr	r2, [pc, #132]	; (80067b4 <TIM_OC2_SetConfig+0xe8>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d10d      	bne.n	8006750 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800673a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	011b      	lsls	r3, r3, #4
 8006742:	697a      	ldr	r2, [r7, #20]
 8006744:	4313      	orrs	r3, r2
 8006746:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800674e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a17      	ldr	r2, [pc, #92]	; (80067b0 <TIM_OC2_SetConfig+0xe4>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d003      	beq.n	8006760 <TIM_OC2_SetConfig+0x94>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4a16      	ldr	r2, [pc, #88]	; (80067b4 <TIM_OC2_SetConfig+0xe8>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d113      	bne.n	8006788 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006766:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800676e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	695b      	ldr	r3, [r3, #20]
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	693a      	ldr	r2, [r7, #16]
 8006778:	4313      	orrs	r3, r2
 800677a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	693a      	ldr	r2, [r7, #16]
 8006784:	4313      	orrs	r3, r2
 8006786:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	693a      	ldr	r2, [r7, #16]
 800678c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	685a      	ldr	r2, [r3, #4]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	697a      	ldr	r2, [r7, #20]
 80067a0:	621a      	str	r2, [r3, #32]
}
 80067a2:	bf00      	nop
 80067a4:	371c      	adds	r7, #28
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	40010000 	.word	0x40010000
 80067b4:	40010400 	.word	0x40010400

080067b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b087      	sub	sp, #28
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6a1b      	ldr	r3, [r3, #32]
 80067d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	69db      	ldr	r3, [r3, #28]
 80067de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f023 0303 	bic.w	r3, r3, #3
 80067ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006800:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	021b      	lsls	r3, r3, #8
 8006808:	697a      	ldr	r2, [r7, #20]
 800680a:	4313      	orrs	r3, r2
 800680c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a21      	ldr	r2, [pc, #132]	; (8006898 <TIM_OC3_SetConfig+0xe0>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d003      	beq.n	800681e <TIM_OC3_SetConfig+0x66>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a20      	ldr	r2, [pc, #128]	; (800689c <TIM_OC3_SetConfig+0xe4>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d10d      	bne.n	800683a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006824:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	021b      	lsls	r3, r3, #8
 800682c:	697a      	ldr	r2, [r7, #20]
 800682e:	4313      	orrs	r3, r2
 8006830:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006838:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a16      	ldr	r2, [pc, #88]	; (8006898 <TIM_OC3_SetConfig+0xe0>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d003      	beq.n	800684a <TIM_OC3_SetConfig+0x92>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a15      	ldr	r2, [pc, #84]	; (800689c <TIM_OC3_SetConfig+0xe4>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d113      	bne.n	8006872 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006850:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006858:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	695b      	ldr	r3, [r3, #20]
 800685e:	011b      	lsls	r3, r3, #4
 8006860:	693a      	ldr	r2, [r7, #16]
 8006862:	4313      	orrs	r3, r2
 8006864:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	699b      	ldr	r3, [r3, #24]
 800686a:	011b      	lsls	r3, r3, #4
 800686c:	693a      	ldr	r2, [r7, #16]
 800686e:	4313      	orrs	r3, r2
 8006870:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	693a      	ldr	r2, [r7, #16]
 8006876:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	685a      	ldr	r2, [r3, #4]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	697a      	ldr	r2, [r7, #20]
 800688a:	621a      	str	r2, [r3, #32]
}
 800688c:	bf00      	nop
 800688e:	371c      	adds	r7, #28
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr
 8006898:	40010000 	.word	0x40010000
 800689c:	40010400 	.word	0x40010400

080068a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b087      	sub	sp, #28
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a1b      	ldr	r3, [r3, #32]
 80068ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6a1b      	ldr	r3, [r3, #32]
 80068ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	69db      	ldr	r3, [r3, #28]
 80068c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	021b      	lsls	r3, r3, #8
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	031b      	lsls	r3, r3, #12
 80068f2:	693a      	ldr	r2, [r7, #16]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4a12      	ldr	r2, [pc, #72]	; (8006944 <TIM_OC4_SetConfig+0xa4>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d003      	beq.n	8006908 <TIM_OC4_SetConfig+0x68>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a11      	ldr	r2, [pc, #68]	; (8006948 <TIM_OC4_SetConfig+0xa8>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d109      	bne.n	800691c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800690e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	695b      	ldr	r3, [r3, #20]
 8006914:	019b      	lsls	r3, r3, #6
 8006916:	697a      	ldr	r2, [r7, #20]
 8006918:	4313      	orrs	r3, r2
 800691a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	697a      	ldr	r2, [r7, #20]
 8006920:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	685a      	ldr	r2, [r3, #4]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	693a      	ldr	r2, [r7, #16]
 8006934:	621a      	str	r2, [r3, #32]
}
 8006936:	bf00      	nop
 8006938:	371c      	adds	r7, #28
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	40010000 	.word	0x40010000
 8006948:	40010400 	.word	0x40010400

0800694c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800694c:	b480      	push	{r7}
 800694e:	b087      	sub	sp, #28
 8006950:	af00      	add	r7, sp, #0
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	f003 031f 	and.w	r3, r3, #31
 800695e:	2201      	movs	r2, #1
 8006960:	fa02 f303 	lsl.w	r3, r2, r3
 8006964:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6a1a      	ldr	r2, [r3, #32]
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	43db      	mvns	r3, r3
 800696e:	401a      	ands	r2, r3
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6a1a      	ldr	r2, [r3, #32]
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	f003 031f 	and.w	r3, r3, #31
 800697e:	6879      	ldr	r1, [r7, #4]
 8006980:	fa01 f303 	lsl.w	r3, r1, r3
 8006984:	431a      	orrs	r2, r3
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	621a      	str	r2, [r3, #32]
}
 800698a:	bf00      	nop
 800698c:	371c      	adds	r7, #28
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
	...

08006998 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006998:	b480      	push	{r7}
 800699a:	b085      	sub	sp, #20
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d101      	bne.n	80069b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069ac:	2302      	movs	r3, #2
 80069ae:	e05a      	b.n	8006a66 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2202      	movs	r2, #2
 80069bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	4313      	orrs	r3, r2
 80069e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a21      	ldr	r2, [pc, #132]	; (8006a74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d022      	beq.n	8006a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069fc:	d01d      	beq.n	8006a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a1d      	ldr	r2, [pc, #116]	; (8006a78 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d018      	beq.n	8006a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a1b      	ldr	r2, [pc, #108]	; (8006a7c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d013      	beq.n	8006a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a1a      	ldr	r2, [pc, #104]	; (8006a80 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d00e      	beq.n	8006a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a18      	ldr	r2, [pc, #96]	; (8006a84 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d009      	beq.n	8006a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a17      	ldr	r2, [pc, #92]	; (8006a88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d004      	beq.n	8006a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a15      	ldr	r2, [pc, #84]	; (8006a8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d10c      	bne.n	8006a54 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	68ba      	ldr	r2, [r7, #8]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	68ba      	ldr	r2, [r7, #8]
 8006a52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3714      	adds	r7, #20
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	40010000 	.word	0x40010000
 8006a78:	40000400 	.word	0x40000400
 8006a7c:	40000800 	.word	0x40000800
 8006a80:	40000c00 	.word	0x40000c00
 8006a84:	40010400 	.word	0x40010400
 8006a88:	40014000 	.word	0x40014000
 8006a8c:	40001800 	.word	0x40001800

08006a90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b085      	sub	sp, #20
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d101      	bne.n	8006aac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	e03d      	b.n	8006b28 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	695b      	ldr	r3, [r3, #20]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	69db      	ldr	r3, [r3, #28]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3714      	adds	r7, #20
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d101      	bne.n	8006b46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e03f      	b.n	8006bc6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d106      	bne.n	8006b60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f7fc fde4 	bl	8003728 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2224      	movs	r2, #36	; 0x24
 8006b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	68da      	ldr	r2, [r3, #12]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 f9cb 	bl	8006f14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	691a      	ldr	r2, [r3, #16]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	695a      	ldr	r2, [r3, #20]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68da      	ldr	r2, [r3, #12]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2220      	movs	r2, #32
 8006bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2220      	movs	r2, #32
 8006bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3708      	adds	r7, #8
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b08a      	sub	sp, #40	; 0x28
 8006bd2:	af02      	add	r7, sp, #8
 8006bd4:	60f8      	str	r0, [r7, #12]
 8006bd6:	60b9      	str	r1, [r7, #8]
 8006bd8:	603b      	str	r3, [r7, #0]
 8006bda:	4613      	mov	r3, r2
 8006bdc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006bde:	2300      	movs	r3, #0
 8006be0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	2b20      	cmp	r3, #32
 8006bec:	d17c      	bne.n	8006ce8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d002      	beq.n	8006bfa <HAL_UART_Transmit+0x2c>
 8006bf4:	88fb      	ldrh	r3, [r7, #6]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d101      	bne.n	8006bfe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e075      	b.n	8006cea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d101      	bne.n	8006c0c <HAL_UART_Transmit+0x3e>
 8006c08:	2302      	movs	r3, #2
 8006c0a:	e06e      	b.n	8006cea <HAL_UART_Transmit+0x11c>
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2200      	movs	r2, #0
 8006c18:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2221      	movs	r2, #33	; 0x21
 8006c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c22:	f7fc fe9d 	bl	8003960 <HAL_GetTick>
 8006c26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	88fa      	ldrh	r2, [r7, #6]
 8006c2c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	88fa      	ldrh	r2, [r7, #6]
 8006c32:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c3c:	d108      	bne.n	8006c50 <HAL_UART_Transmit+0x82>
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d104      	bne.n	8006c50 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006c46:	2300      	movs	r3, #0
 8006c48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	61bb      	str	r3, [r7, #24]
 8006c4e:	e003      	b.n	8006c58 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c54:	2300      	movs	r3, #0
 8006c56:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006c60:	e02a      	b.n	8006cb8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	9300      	str	r3, [sp, #0]
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	2180      	movs	r1, #128	; 0x80
 8006c6c:	68f8      	ldr	r0, [r7, #12]
 8006c6e:	f000 f8e2 	bl	8006e36 <UART_WaitOnFlagUntilTimeout>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d001      	beq.n	8006c7c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	e036      	b.n	8006cea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d10b      	bne.n	8006c9a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	881b      	ldrh	r3, [r3, #0]
 8006c86:	461a      	mov	r2, r3
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	3302      	adds	r3, #2
 8006c96:	61bb      	str	r3, [r7, #24]
 8006c98:	e007      	b.n	8006caa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	781a      	ldrb	r2, [r3, #0]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	3b01      	subs	r3, #1
 8006cb2:	b29a      	uxth	r2, r3
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d1cf      	bne.n	8006c62 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	9300      	str	r3, [sp, #0]
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	2140      	movs	r1, #64	; 0x40
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	f000 f8b2 	bl	8006e36 <UART_WaitOnFlagUntilTimeout>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d001      	beq.n	8006cdc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	e006      	b.n	8006cea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2220      	movs	r2, #32
 8006ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	e000      	b.n	8006cea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006ce8:	2302      	movs	r3, #2
  }
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3720      	adds	r7, #32
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}

08006cf2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cf2:	b580      	push	{r7, lr}
 8006cf4:	b08a      	sub	sp, #40	; 0x28
 8006cf6:	af02      	add	r7, sp, #8
 8006cf8:	60f8      	str	r0, [r7, #12]
 8006cfa:	60b9      	str	r1, [r7, #8]
 8006cfc:	603b      	str	r3, [r7, #0]
 8006cfe:	4613      	mov	r3, r2
 8006d00:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006d02:	2300      	movs	r3, #0
 8006d04:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	2b20      	cmp	r3, #32
 8006d10:	f040 808c 	bne.w	8006e2c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d002      	beq.n	8006d20 <HAL_UART_Receive+0x2e>
 8006d1a:	88fb      	ldrh	r3, [r7, #6]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d101      	bne.n	8006d24 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	e084      	b.n	8006e2e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d101      	bne.n	8006d32 <HAL_UART_Receive+0x40>
 8006d2e:	2302      	movs	r3, #2
 8006d30:	e07d      	b.n	8006e2e <HAL_UART_Receive+0x13c>
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2201      	movs	r2, #1
 8006d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2222      	movs	r2, #34	; 0x22
 8006d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d4e:	f7fc fe07 	bl	8003960 <HAL_GetTick>
 8006d52:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	88fa      	ldrh	r2, [r7, #6]
 8006d58:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	88fa      	ldrh	r2, [r7, #6]
 8006d5e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d68:	d108      	bne.n	8006d7c <HAL_UART_Receive+0x8a>
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d104      	bne.n	8006d7c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8006d72:	2300      	movs	r3, #0
 8006d74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	61bb      	str	r3, [r7, #24]
 8006d7a:	e003      	b.n	8006d84 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d80:	2300      	movs	r3, #0
 8006d82:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006d8c:	e043      	b.n	8006e16 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	9300      	str	r3, [sp, #0]
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	2200      	movs	r2, #0
 8006d96:	2120      	movs	r1, #32
 8006d98:	68f8      	ldr	r0, [r7, #12]
 8006d9a:	f000 f84c 	bl	8006e36 <UART_WaitOnFlagUntilTimeout>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d001      	beq.n	8006da8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006da4:	2303      	movs	r3, #3
 8006da6:	e042      	b.n	8006e2e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d10c      	bne.n	8006dc8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006dc0:	69bb      	ldr	r3, [r7, #24]
 8006dc2:	3302      	adds	r3, #2
 8006dc4:	61bb      	str	r3, [r7, #24]
 8006dc6:	e01f      	b.n	8006e08 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dd0:	d007      	beq.n	8006de2 <HAL_UART_Receive+0xf0>
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d10a      	bne.n	8006df0 <HAL_UART_Receive+0xfe>
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	691b      	ldr	r3, [r3, #16]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d106      	bne.n	8006df0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	b2da      	uxtb	r2, r3
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	701a      	strb	r2, [r3, #0]
 8006dee:	e008      	b.n	8006e02 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dfc:	b2da      	uxtb	r2, r3
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006e02:	69fb      	ldr	r3, [r7, #28]
 8006e04:	3301      	adds	r3, #1
 8006e06:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	3b01      	subs	r3, #1
 8006e10:	b29a      	uxth	r2, r3
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1b6      	bne.n	8006d8e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2220      	movs	r2, #32
 8006e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	e000      	b.n	8006e2e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8006e2c:	2302      	movs	r3, #2
  }
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3720      	adds	r7, #32
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b090      	sub	sp, #64	; 0x40
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	60f8      	str	r0, [r7, #12]
 8006e3e:	60b9      	str	r1, [r7, #8]
 8006e40:	603b      	str	r3, [r7, #0]
 8006e42:	4613      	mov	r3, r2
 8006e44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e46:	e050      	b.n	8006eea <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e4e:	d04c      	beq.n	8006eea <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006e50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d007      	beq.n	8006e66 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e56:	f7fc fd83 	bl	8003960 <HAL_GetTick>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	1ad3      	subs	r3, r2, r3
 8006e60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d241      	bcs.n	8006eea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	330c      	adds	r3, #12
 8006e6c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e70:	e853 3f00 	ldrex	r3, [r3]
 8006e74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e78:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	330c      	adds	r3, #12
 8006e84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006e86:	637a      	str	r2, [r7, #52]	; 0x34
 8006e88:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e8e:	e841 2300 	strex	r3, r2, [r1]
 8006e92:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d1e5      	bne.n	8006e66 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	3314      	adds	r3, #20
 8006ea0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	e853 3f00 	ldrex	r3, [r3]
 8006ea8:	613b      	str	r3, [r7, #16]
   return(result);
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	f023 0301 	bic.w	r3, r3, #1
 8006eb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	3314      	adds	r3, #20
 8006eb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006eba:	623a      	str	r2, [r7, #32]
 8006ebc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ebe:	69f9      	ldr	r1, [r7, #28]
 8006ec0:	6a3a      	ldr	r2, [r7, #32]
 8006ec2:	e841 2300 	strex	r3, r2, [r1]
 8006ec6:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d1e5      	bne.n	8006e9a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2220      	movs	r2, #32
 8006ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2220      	movs	r2, #32
 8006eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	e00f      	b.n	8006f0a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	4013      	ands	r3, r2
 8006ef4:	68ba      	ldr	r2, [r7, #8]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	bf0c      	ite	eq
 8006efa:	2301      	moveq	r3, #1
 8006efc:	2300      	movne	r3, #0
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	461a      	mov	r2, r3
 8006f02:	79fb      	ldrb	r3, [r7, #7]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d09f      	beq.n	8006e48 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3740      	adds	r7, #64	; 0x40
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
	...

08006f14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f18:	b0c0      	sub	sp, #256	; 0x100
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f30:	68d9      	ldr	r1, [r3, #12]
 8006f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	ea40 0301 	orr.w	r3, r0, r1
 8006f3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f42:	689a      	ldr	r2, [r3, #8]
 8006f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f48:	691b      	ldr	r3, [r3, #16]
 8006f4a:	431a      	orrs	r2, r3
 8006f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f50:	695b      	ldr	r3, [r3, #20]
 8006f52:	431a      	orrs	r2, r3
 8006f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f58:	69db      	ldr	r3, [r3, #28]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006f6c:	f021 010c 	bic.w	r1, r1, #12
 8006f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006f7a:	430b      	orrs	r3, r1
 8006f7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	695b      	ldr	r3, [r3, #20]
 8006f86:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f8e:	6999      	ldr	r1, [r3, #24]
 8006f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	ea40 0301 	orr.w	r3, r0, r1
 8006f9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	4b8f      	ldr	r3, [pc, #572]	; (80071e0 <UART_SetConfig+0x2cc>)
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d005      	beq.n	8006fb4 <UART_SetConfig+0xa0>
 8006fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	4b8d      	ldr	r3, [pc, #564]	; (80071e4 <UART_SetConfig+0x2d0>)
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d104      	bne.n	8006fbe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006fb4:	f7ff f88c 	bl	80060d0 <HAL_RCC_GetPCLK2Freq>
 8006fb8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006fbc:	e003      	b.n	8006fc6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006fbe:	f7ff f873 	bl	80060a8 <HAL_RCC_GetPCLK1Freq>
 8006fc2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fca:	69db      	ldr	r3, [r3, #28]
 8006fcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fd0:	f040 810c 	bne.w	80071ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006fd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006fde:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006fe2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006fe6:	4622      	mov	r2, r4
 8006fe8:	462b      	mov	r3, r5
 8006fea:	1891      	adds	r1, r2, r2
 8006fec:	65b9      	str	r1, [r7, #88]	; 0x58
 8006fee:	415b      	adcs	r3, r3
 8006ff0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ff2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006ff6:	4621      	mov	r1, r4
 8006ff8:	eb12 0801 	adds.w	r8, r2, r1
 8006ffc:	4629      	mov	r1, r5
 8006ffe:	eb43 0901 	adc.w	r9, r3, r1
 8007002:	f04f 0200 	mov.w	r2, #0
 8007006:	f04f 0300 	mov.w	r3, #0
 800700a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800700e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007012:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007016:	4690      	mov	r8, r2
 8007018:	4699      	mov	r9, r3
 800701a:	4623      	mov	r3, r4
 800701c:	eb18 0303 	adds.w	r3, r8, r3
 8007020:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007024:	462b      	mov	r3, r5
 8007026:	eb49 0303 	adc.w	r3, r9, r3
 800702a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800702e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800703a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800703e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007042:	460b      	mov	r3, r1
 8007044:	18db      	adds	r3, r3, r3
 8007046:	653b      	str	r3, [r7, #80]	; 0x50
 8007048:	4613      	mov	r3, r2
 800704a:	eb42 0303 	adc.w	r3, r2, r3
 800704e:	657b      	str	r3, [r7, #84]	; 0x54
 8007050:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007054:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007058:	f7f9 fd4a 	bl	8000af0 <__aeabi_uldivmod>
 800705c:	4602      	mov	r2, r0
 800705e:	460b      	mov	r3, r1
 8007060:	4b61      	ldr	r3, [pc, #388]	; (80071e8 <UART_SetConfig+0x2d4>)
 8007062:	fba3 2302 	umull	r2, r3, r3, r2
 8007066:	095b      	lsrs	r3, r3, #5
 8007068:	011c      	lsls	r4, r3, #4
 800706a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800706e:	2200      	movs	r2, #0
 8007070:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007074:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007078:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800707c:	4642      	mov	r2, r8
 800707e:	464b      	mov	r3, r9
 8007080:	1891      	adds	r1, r2, r2
 8007082:	64b9      	str	r1, [r7, #72]	; 0x48
 8007084:	415b      	adcs	r3, r3
 8007086:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007088:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800708c:	4641      	mov	r1, r8
 800708e:	eb12 0a01 	adds.w	sl, r2, r1
 8007092:	4649      	mov	r1, r9
 8007094:	eb43 0b01 	adc.w	fp, r3, r1
 8007098:	f04f 0200 	mov.w	r2, #0
 800709c:	f04f 0300 	mov.w	r3, #0
 80070a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80070a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80070a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80070ac:	4692      	mov	sl, r2
 80070ae:	469b      	mov	fp, r3
 80070b0:	4643      	mov	r3, r8
 80070b2:	eb1a 0303 	adds.w	r3, sl, r3
 80070b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80070ba:	464b      	mov	r3, r9
 80070bc:	eb4b 0303 	adc.w	r3, fp, r3
 80070c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80070c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80070d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80070d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80070d8:	460b      	mov	r3, r1
 80070da:	18db      	adds	r3, r3, r3
 80070dc:	643b      	str	r3, [r7, #64]	; 0x40
 80070de:	4613      	mov	r3, r2
 80070e0:	eb42 0303 	adc.w	r3, r2, r3
 80070e4:	647b      	str	r3, [r7, #68]	; 0x44
 80070e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80070ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80070ee:	f7f9 fcff 	bl	8000af0 <__aeabi_uldivmod>
 80070f2:	4602      	mov	r2, r0
 80070f4:	460b      	mov	r3, r1
 80070f6:	4611      	mov	r1, r2
 80070f8:	4b3b      	ldr	r3, [pc, #236]	; (80071e8 <UART_SetConfig+0x2d4>)
 80070fa:	fba3 2301 	umull	r2, r3, r3, r1
 80070fe:	095b      	lsrs	r3, r3, #5
 8007100:	2264      	movs	r2, #100	; 0x64
 8007102:	fb02 f303 	mul.w	r3, r2, r3
 8007106:	1acb      	subs	r3, r1, r3
 8007108:	00db      	lsls	r3, r3, #3
 800710a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800710e:	4b36      	ldr	r3, [pc, #216]	; (80071e8 <UART_SetConfig+0x2d4>)
 8007110:	fba3 2302 	umull	r2, r3, r3, r2
 8007114:	095b      	lsrs	r3, r3, #5
 8007116:	005b      	lsls	r3, r3, #1
 8007118:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800711c:	441c      	add	r4, r3
 800711e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007122:	2200      	movs	r2, #0
 8007124:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007128:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800712c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007130:	4642      	mov	r2, r8
 8007132:	464b      	mov	r3, r9
 8007134:	1891      	adds	r1, r2, r2
 8007136:	63b9      	str	r1, [r7, #56]	; 0x38
 8007138:	415b      	adcs	r3, r3
 800713a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800713c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007140:	4641      	mov	r1, r8
 8007142:	1851      	adds	r1, r2, r1
 8007144:	6339      	str	r1, [r7, #48]	; 0x30
 8007146:	4649      	mov	r1, r9
 8007148:	414b      	adcs	r3, r1
 800714a:	637b      	str	r3, [r7, #52]	; 0x34
 800714c:	f04f 0200 	mov.w	r2, #0
 8007150:	f04f 0300 	mov.w	r3, #0
 8007154:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007158:	4659      	mov	r1, fp
 800715a:	00cb      	lsls	r3, r1, #3
 800715c:	4651      	mov	r1, sl
 800715e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007162:	4651      	mov	r1, sl
 8007164:	00ca      	lsls	r2, r1, #3
 8007166:	4610      	mov	r0, r2
 8007168:	4619      	mov	r1, r3
 800716a:	4603      	mov	r3, r0
 800716c:	4642      	mov	r2, r8
 800716e:	189b      	adds	r3, r3, r2
 8007170:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007174:	464b      	mov	r3, r9
 8007176:	460a      	mov	r2, r1
 8007178:	eb42 0303 	adc.w	r3, r2, r3
 800717c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800718c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007190:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007194:	460b      	mov	r3, r1
 8007196:	18db      	adds	r3, r3, r3
 8007198:	62bb      	str	r3, [r7, #40]	; 0x28
 800719a:	4613      	mov	r3, r2
 800719c:	eb42 0303 	adc.w	r3, r2, r3
 80071a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80071a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80071aa:	f7f9 fca1 	bl	8000af0 <__aeabi_uldivmod>
 80071ae:	4602      	mov	r2, r0
 80071b0:	460b      	mov	r3, r1
 80071b2:	4b0d      	ldr	r3, [pc, #52]	; (80071e8 <UART_SetConfig+0x2d4>)
 80071b4:	fba3 1302 	umull	r1, r3, r3, r2
 80071b8:	095b      	lsrs	r3, r3, #5
 80071ba:	2164      	movs	r1, #100	; 0x64
 80071bc:	fb01 f303 	mul.w	r3, r1, r3
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	00db      	lsls	r3, r3, #3
 80071c4:	3332      	adds	r3, #50	; 0x32
 80071c6:	4a08      	ldr	r2, [pc, #32]	; (80071e8 <UART_SetConfig+0x2d4>)
 80071c8:	fba2 2303 	umull	r2, r3, r2, r3
 80071cc:	095b      	lsrs	r3, r3, #5
 80071ce:	f003 0207 	and.w	r2, r3, #7
 80071d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4422      	add	r2, r4
 80071da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80071dc:	e105      	b.n	80073ea <UART_SetConfig+0x4d6>
 80071de:	bf00      	nop
 80071e0:	40011000 	.word	0x40011000
 80071e4:	40011400 	.word	0x40011400
 80071e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80071ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071f0:	2200      	movs	r2, #0
 80071f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80071f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80071fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80071fe:	4642      	mov	r2, r8
 8007200:	464b      	mov	r3, r9
 8007202:	1891      	adds	r1, r2, r2
 8007204:	6239      	str	r1, [r7, #32]
 8007206:	415b      	adcs	r3, r3
 8007208:	627b      	str	r3, [r7, #36]	; 0x24
 800720a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800720e:	4641      	mov	r1, r8
 8007210:	1854      	adds	r4, r2, r1
 8007212:	4649      	mov	r1, r9
 8007214:	eb43 0501 	adc.w	r5, r3, r1
 8007218:	f04f 0200 	mov.w	r2, #0
 800721c:	f04f 0300 	mov.w	r3, #0
 8007220:	00eb      	lsls	r3, r5, #3
 8007222:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007226:	00e2      	lsls	r2, r4, #3
 8007228:	4614      	mov	r4, r2
 800722a:	461d      	mov	r5, r3
 800722c:	4643      	mov	r3, r8
 800722e:	18e3      	adds	r3, r4, r3
 8007230:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007234:	464b      	mov	r3, r9
 8007236:	eb45 0303 	adc.w	r3, r5, r3
 800723a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800723e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800724a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800724e:	f04f 0200 	mov.w	r2, #0
 8007252:	f04f 0300 	mov.w	r3, #0
 8007256:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800725a:	4629      	mov	r1, r5
 800725c:	008b      	lsls	r3, r1, #2
 800725e:	4621      	mov	r1, r4
 8007260:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007264:	4621      	mov	r1, r4
 8007266:	008a      	lsls	r2, r1, #2
 8007268:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800726c:	f7f9 fc40 	bl	8000af0 <__aeabi_uldivmod>
 8007270:	4602      	mov	r2, r0
 8007272:	460b      	mov	r3, r1
 8007274:	4b60      	ldr	r3, [pc, #384]	; (80073f8 <UART_SetConfig+0x4e4>)
 8007276:	fba3 2302 	umull	r2, r3, r3, r2
 800727a:	095b      	lsrs	r3, r3, #5
 800727c:	011c      	lsls	r4, r3, #4
 800727e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007282:	2200      	movs	r2, #0
 8007284:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007288:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800728c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007290:	4642      	mov	r2, r8
 8007292:	464b      	mov	r3, r9
 8007294:	1891      	adds	r1, r2, r2
 8007296:	61b9      	str	r1, [r7, #24]
 8007298:	415b      	adcs	r3, r3
 800729a:	61fb      	str	r3, [r7, #28]
 800729c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072a0:	4641      	mov	r1, r8
 80072a2:	1851      	adds	r1, r2, r1
 80072a4:	6139      	str	r1, [r7, #16]
 80072a6:	4649      	mov	r1, r9
 80072a8:	414b      	adcs	r3, r1
 80072aa:	617b      	str	r3, [r7, #20]
 80072ac:	f04f 0200 	mov.w	r2, #0
 80072b0:	f04f 0300 	mov.w	r3, #0
 80072b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80072b8:	4659      	mov	r1, fp
 80072ba:	00cb      	lsls	r3, r1, #3
 80072bc:	4651      	mov	r1, sl
 80072be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072c2:	4651      	mov	r1, sl
 80072c4:	00ca      	lsls	r2, r1, #3
 80072c6:	4610      	mov	r0, r2
 80072c8:	4619      	mov	r1, r3
 80072ca:	4603      	mov	r3, r0
 80072cc:	4642      	mov	r2, r8
 80072ce:	189b      	adds	r3, r3, r2
 80072d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80072d4:	464b      	mov	r3, r9
 80072d6:	460a      	mov	r2, r1
 80072d8:	eb42 0303 	adc.w	r3, r2, r3
 80072dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80072e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80072ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80072ec:	f04f 0200 	mov.w	r2, #0
 80072f0:	f04f 0300 	mov.w	r3, #0
 80072f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80072f8:	4649      	mov	r1, r9
 80072fa:	008b      	lsls	r3, r1, #2
 80072fc:	4641      	mov	r1, r8
 80072fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007302:	4641      	mov	r1, r8
 8007304:	008a      	lsls	r2, r1, #2
 8007306:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800730a:	f7f9 fbf1 	bl	8000af0 <__aeabi_uldivmod>
 800730e:	4602      	mov	r2, r0
 8007310:	460b      	mov	r3, r1
 8007312:	4b39      	ldr	r3, [pc, #228]	; (80073f8 <UART_SetConfig+0x4e4>)
 8007314:	fba3 1302 	umull	r1, r3, r3, r2
 8007318:	095b      	lsrs	r3, r3, #5
 800731a:	2164      	movs	r1, #100	; 0x64
 800731c:	fb01 f303 	mul.w	r3, r1, r3
 8007320:	1ad3      	subs	r3, r2, r3
 8007322:	011b      	lsls	r3, r3, #4
 8007324:	3332      	adds	r3, #50	; 0x32
 8007326:	4a34      	ldr	r2, [pc, #208]	; (80073f8 <UART_SetConfig+0x4e4>)
 8007328:	fba2 2303 	umull	r2, r3, r2, r3
 800732c:	095b      	lsrs	r3, r3, #5
 800732e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007332:	441c      	add	r4, r3
 8007334:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007338:	2200      	movs	r2, #0
 800733a:	673b      	str	r3, [r7, #112]	; 0x70
 800733c:	677a      	str	r2, [r7, #116]	; 0x74
 800733e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007342:	4642      	mov	r2, r8
 8007344:	464b      	mov	r3, r9
 8007346:	1891      	adds	r1, r2, r2
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	415b      	adcs	r3, r3
 800734c:	60fb      	str	r3, [r7, #12]
 800734e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007352:	4641      	mov	r1, r8
 8007354:	1851      	adds	r1, r2, r1
 8007356:	6039      	str	r1, [r7, #0]
 8007358:	4649      	mov	r1, r9
 800735a:	414b      	adcs	r3, r1
 800735c:	607b      	str	r3, [r7, #4]
 800735e:	f04f 0200 	mov.w	r2, #0
 8007362:	f04f 0300 	mov.w	r3, #0
 8007366:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800736a:	4659      	mov	r1, fp
 800736c:	00cb      	lsls	r3, r1, #3
 800736e:	4651      	mov	r1, sl
 8007370:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007374:	4651      	mov	r1, sl
 8007376:	00ca      	lsls	r2, r1, #3
 8007378:	4610      	mov	r0, r2
 800737a:	4619      	mov	r1, r3
 800737c:	4603      	mov	r3, r0
 800737e:	4642      	mov	r2, r8
 8007380:	189b      	adds	r3, r3, r2
 8007382:	66bb      	str	r3, [r7, #104]	; 0x68
 8007384:	464b      	mov	r3, r9
 8007386:	460a      	mov	r2, r1
 8007388:	eb42 0303 	adc.w	r3, r2, r3
 800738c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800738e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	663b      	str	r3, [r7, #96]	; 0x60
 8007398:	667a      	str	r2, [r7, #100]	; 0x64
 800739a:	f04f 0200 	mov.w	r2, #0
 800739e:	f04f 0300 	mov.w	r3, #0
 80073a2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80073a6:	4649      	mov	r1, r9
 80073a8:	008b      	lsls	r3, r1, #2
 80073aa:	4641      	mov	r1, r8
 80073ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80073b0:	4641      	mov	r1, r8
 80073b2:	008a      	lsls	r2, r1, #2
 80073b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80073b8:	f7f9 fb9a 	bl	8000af0 <__aeabi_uldivmod>
 80073bc:	4602      	mov	r2, r0
 80073be:	460b      	mov	r3, r1
 80073c0:	4b0d      	ldr	r3, [pc, #52]	; (80073f8 <UART_SetConfig+0x4e4>)
 80073c2:	fba3 1302 	umull	r1, r3, r3, r2
 80073c6:	095b      	lsrs	r3, r3, #5
 80073c8:	2164      	movs	r1, #100	; 0x64
 80073ca:	fb01 f303 	mul.w	r3, r1, r3
 80073ce:	1ad3      	subs	r3, r2, r3
 80073d0:	011b      	lsls	r3, r3, #4
 80073d2:	3332      	adds	r3, #50	; 0x32
 80073d4:	4a08      	ldr	r2, [pc, #32]	; (80073f8 <UART_SetConfig+0x4e4>)
 80073d6:	fba2 2303 	umull	r2, r3, r2, r3
 80073da:	095b      	lsrs	r3, r3, #5
 80073dc:	f003 020f 	and.w	r2, r3, #15
 80073e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4422      	add	r2, r4
 80073e8:	609a      	str	r2, [r3, #8]
}
 80073ea:	bf00      	nop
 80073ec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80073f0:	46bd      	mov	sp, r7
 80073f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073f6:	bf00      	nop
 80073f8:	51eb851f 	.word	0x51eb851f

080073fc <__errno>:
 80073fc:	4b01      	ldr	r3, [pc, #4]	; (8007404 <__errno+0x8>)
 80073fe:	6818      	ldr	r0, [r3, #0]
 8007400:	4770      	bx	lr
 8007402:	bf00      	nop
 8007404:	20000028 	.word	0x20000028

08007408 <__libc_init_array>:
 8007408:	b570      	push	{r4, r5, r6, lr}
 800740a:	4d0d      	ldr	r5, [pc, #52]	; (8007440 <__libc_init_array+0x38>)
 800740c:	4c0d      	ldr	r4, [pc, #52]	; (8007444 <__libc_init_array+0x3c>)
 800740e:	1b64      	subs	r4, r4, r5
 8007410:	10a4      	asrs	r4, r4, #2
 8007412:	2600      	movs	r6, #0
 8007414:	42a6      	cmp	r6, r4
 8007416:	d109      	bne.n	800742c <__libc_init_array+0x24>
 8007418:	4d0b      	ldr	r5, [pc, #44]	; (8007448 <__libc_init_array+0x40>)
 800741a:	4c0c      	ldr	r4, [pc, #48]	; (800744c <__libc_init_array+0x44>)
 800741c:	f002 f9ea 	bl	80097f4 <_init>
 8007420:	1b64      	subs	r4, r4, r5
 8007422:	10a4      	asrs	r4, r4, #2
 8007424:	2600      	movs	r6, #0
 8007426:	42a6      	cmp	r6, r4
 8007428:	d105      	bne.n	8007436 <__libc_init_array+0x2e>
 800742a:	bd70      	pop	{r4, r5, r6, pc}
 800742c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007430:	4798      	blx	r3
 8007432:	3601      	adds	r6, #1
 8007434:	e7ee      	b.n	8007414 <__libc_init_array+0xc>
 8007436:	f855 3b04 	ldr.w	r3, [r5], #4
 800743a:	4798      	blx	r3
 800743c:	3601      	adds	r6, #1
 800743e:	e7f2      	b.n	8007426 <__libc_init_array+0x1e>
 8007440:	0800a240 	.word	0x0800a240
 8007444:	0800a240 	.word	0x0800a240
 8007448:	0800a240 	.word	0x0800a240
 800744c:	0800a244 	.word	0x0800a244

08007450 <memset>:
 8007450:	4402      	add	r2, r0
 8007452:	4603      	mov	r3, r0
 8007454:	4293      	cmp	r3, r2
 8007456:	d100      	bne.n	800745a <memset+0xa>
 8007458:	4770      	bx	lr
 800745a:	f803 1b01 	strb.w	r1, [r3], #1
 800745e:	e7f9      	b.n	8007454 <memset+0x4>

08007460 <cos>:
 8007460:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007462:	ec53 2b10 	vmov	r2, r3, d0
 8007466:	4826      	ldr	r0, [pc, #152]	; (8007500 <cos+0xa0>)
 8007468:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800746c:	4281      	cmp	r1, r0
 800746e:	dc06      	bgt.n	800747e <cos+0x1e>
 8007470:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80074f8 <cos+0x98>
 8007474:	b005      	add	sp, #20
 8007476:	f85d eb04 	ldr.w	lr, [sp], #4
 800747a:	f001 b9f9 	b.w	8008870 <__kernel_cos>
 800747e:	4821      	ldr	r0, [pc, #132]	; (8007504 <cos+0xa4>)
 8007480:	4281      	cmp	r1, r0
 8007482:	dd09      	ble.n	8007498 <cos+0x38>
 8007484:	ee10 0a10 	vmov	r0, s0
 8007488:	4619      	mov	r1, r3
 800748a:	f7f8 fea1 	bl	80001d0 <__aeabi_dsub>
 800748e:	ec41 0b10 	vmov	d0, r0, r1
 8007492:	b005      	add	sp, #20
 8007494:	f85d fb04 	ldr.w	pc, [sp], #4
 8007498:	4668      	mov	r0, sp
 800749a:	f000 ff29 	bl	80082f0 <__ieee754_rem_pio2>
 800749e:	f000 0003 	and.w	r0, r0, #3
 80074a2:	2801      	cmp	r0, #1
 80074a4:	d00b      	beq.n	80074be <cos+0x5e>
 80074a6:	2802      	cmp	r0, #2
 80074a8:	d016      	beq.n	80074d8 <cos+0x78>
 80074aa:	b9e0      	cbnz	r0, 80074e6 <cos+0x86>
 80074ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 80074b0:	ed9d 0b00 	vldr	d0, [sp]
 80074b4:	f001 f9dc 	bl	8008870 <__kernel_cos>
 80074b8:	ec51 0b10 	vmov	r0, r1, d0
 80074bc:	e7e7      	b.n	800748e <cos+0x2e>
 80074be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80074c2:	ed9d 0b00 	vldr	d0, [sp]
 80074c6:	f001 fdeb 	bl	80090a0 <__kernel_sin>
 80074ca:	ec53 2b10 	vmov	r2, r3, d0
 80074ce:	ee10 0a10 	vmov	r0, s0
 80074d2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80074d6:	e7da      	b.n	800748e <cos+0x2e>
 80074d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80074dc:	ed9d 0b00 	vldr	d0, [sp]
 80074e0:	f001 f9c6 	bl	8008870 <__kernel_cos>
 80074e4:	e7f1      	b.n	80074ca <cos+0x6a>
 80074e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80074ea:	ed9d 0b00 	vldr	d0, [sp]
 80074ee:	2001      	movs	r0, #1
 80074f0:	f001 fdd6 	bl	80090a0 <__kernel_sin>
 80074f4:	e7e0      	b.n	80074b8 <cos+0x58>
 80074f6:	bf00      	nop
	...
 8007500:	3fe921fb 	.word	0x3fe921fb
 8007504:	7fefffff 	.word	0x7fefffff

08007508 <sin>:
 8007508:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800750a:	ec53 2b10 	vmov	r2, r3, d0
 800750e:	4828      	ldr	r0, [pc, #160]	; (80075b0 <sin+0xa8>)
 8007510:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007514:	4281      	cmp	r1, r0
 8007516:	dc07      	bgt.n	8007528 <sin+0x20>
 8007518:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80075a8 <sin+0xa0>
 800751c:	2000      	movs	r0, #0
 800751e:	b005      	add	sp, #20
 8007520:	f85d eb04 	ldr.w	lr, [sp], #4
 8007524:	f001 bdbc 	b.w	80090a0 <__kernel_sin>
 8007528:	4822      	ldr	r0, [pc, #136]	; (80075b4 <sin+0xac>)
 800752a:	4281      	cmp	r1, r0
 800752c:	dd09      	ble.n	8007542 <sin+0x3a>
 800752e:	ee10 0a10 	vmov	r0, s0
 8007532:	4619      	mov	r1, r3
 8007534:	f7f8 fe4c 	bl	80001d0 <__aeabi_dsub>
 8007538:	ec41 0b10 	vmov	d0, r0, r1
 800753c:	b005      	add	sp, #20
 800753e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007542:	4668      	mov	r0, sp
 8007544:	f000 fed4 	bl	80082f0 <__ieee754_rem_pio2>
 8007548:	f000 0003 	and.w	r0, r0, #3
 800754c:	2801      	cmp	r0, #1
 800754e:	d00c      	beq.n	800756a <sin+0x62>
 8007550:	2802      	cmp	r0, #2
 8007552:	d011      	beq.n	8007578 <sin+0x70>
 8007554:	b9f0      	cbnz	r0, 8007594 <sin+0x8c>
 8007556:	ed9d 1b02 	vldr	d1, [sp, #8]
 800755a:	ed9d 0b00 	vldr	d0, [sp]
 800755e:	2001      	movs	r0, #1
 8007560:	f001 fd9e 	bl	80090a0 <__kernel_sin>
 8007564:	ec51 0b10 	vmov	r0, r1, d0
 8007568:	e7e6      	b.n	8007538 <sin+0x30>
 800756a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800756e:	ed9d 0b00 	vldr	d0, [sp]
 8007572:	f001 f97d 	bl	8008870 <__kernel_cos>
 8007576:	e7f5      	b.n	8007564 <sin+0x5c>
 8007578:	ed9d 1b02 	vldr	d1, [sp, #8]
 800757c:	ed9d 0b00 	vldr	d0, [sp]
 8007580:	2001      	movs	r0, #1
 8007582:	f001 fd8d 	bl	80090a0 <__kernel_sin>
 8007586:	ec53 2b10 	vmov	r2, r3, d0
 800758a:	ee10 0a10 	vmov	r0, s0
 800758e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007592:	e7d1      	b.n	8007538 <sin+0x30>
 8007594:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007598:	ed9d 0b00 	vldr	d0, [sp]
 800759c:	f001 f968 	bl	8008870 <__kernel_cos>
 80075a0:	e7f1      	b.n	8007586 <sin+0x7e>
 80075a2:	bf00      	nop
 80075a4:	f3af 8000 	nop.w
	...
 80075b0:	3fe921fb 	.word	0x3fe921fb
 80075b4:	7fefffff 	.word	0x7fefffff

080075b8 <atan2>:
 80075b8:	f000 b89e 	b.w	80076f8 <__ieee754_atan2>

080075bc <pow>:
 80075bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075be:	ed2d 8b02 	vpush	{d8}
 80075c2:	eeb0 8a40 	vmov.f32	s16, s0
 80075c6:	eef0 8a60 	vmov.f32	s17, s1
 80075ca:	ec55 4b11 	vmov	r4, r5, d1
 80075ce:	f000 f95f 	bl	8007890 <__ieee754_pow>
 80075d2:	4622      	mov	r2, r4
 80075d4:	462b      	mov	r3, r5
 80075d6:	4620      	mov	r0, r4
 80075d8:	4629      	mov	r1, r5
 80075da:	ec57 6b10 	vmov	r6, r7, d0
 80075de:	f7f9 fa49 	bl	8000a74 <__aeabi_dcmpun>
 80075e2:	2800      	cmp	r0, #0
 80075e4:	d13b      	bne.n	800765e <pow+0xa2>
 80075e6:	ec51 0b18 	vmov	r0, r1, d8
 80075ea:	2200      	movs	r2, #0
 80075ec:	2300      	movs	r3, #0
 80075ee:	f7f9 fa0f 	bl	8000a10 <__aeabi_dcmpeq>
 80075f2:	b1b8      	cbz	r0, 8007624 <pow+0x68>
 80075f4:	2200      	movs	r2, #0
 80075f6:	2300      	movs	r3, #0
 80075f8:	4620      	mov	r0, r4
 80075fa:	4629      	mov	r1, r5
 80075fc:	f7f9 fa08 	bl	8000a10 <__aeabi_dcmpeq>
 8007600:	2800      	cmp	r0, #0
 8007602:	d146      	bne.n	8007692 <pow+0xd6>
 8007604:	ec45 4b10 	vmov	d0, r4, r5
 8007608:	f001 ffe3 	bl	80095d2 <finite>
 800760c:	b338      	cbz	r0, 800765e <pow+0xa2>
 800760e:	2200      	movs	r2, #0
 8007610:	2300      	movs	r3, #0
 8007612:	4620      	mov	r0, r4
 8007614:	4629      	mov	r1, r5
 8007616:	f7f9 fa05 	bl	8000a24 <__aeabi_dcmplt>
 800761a:	b300      	cbz	r0, 800765e <pow+0xa2>
 800761c:	f7ff feee 	bl	80073fc <__errno>
 8007620:	2322      	movs	r3, #34	; 0x22
 8007622:	e01b      	b.n	800765c <pow+0xa0>
 8007624:	ec47 6b10 	vmov	d0, r6, r7
 8007628:	f001 ffd3 	bl	80095d2 <finite>
 800762c:	b9e0      	cbnz	r0, 8007668 <pow+0xac>
 800762e:	eeb0 0a48 	vmov.f32	s0, s16
 8007632:	eef0 0a68 	vmov.f32	s1, s17
 8007636:	f001 ffcc 	bl	80095d2 <finite>
 800763a:	b1a8      	cbz	r0, 8007668 <pow+0xac>
 800763c:	ec45 4b10 	vmov	d0, r4, r5
 8007640:	f001 ffc7 	bl	80095d2 <finite>
 8007644:	b180      	cbz	r0, 8007668 <pow+0xac>
 8007646:	4632      	mov	r2, r6
 8007648:	463b      	mov	r3, r7
 800764a:	4630      	mov	r0, r6
 800764c:	4639      	mov	r1, r7
 800764e:	f7f9 fa11 	bl	8000a74 <__aeabi_dcmpun>
 8007652:	2800      	cmp	r0, #0
 8007654:	d0e2      	beq.n	800761c <pow+0x60>
 8007656:	f7ff fed1 	bl	80073fc <__errno>
 800765a:	2321      	movs	r3, #33	; 0x21
 800765c:	6003      	str	r3, [r0, #0]
 800765e:	ecbd 8b02 	vpop	{d8}
 8007662:	ec47 6b10 	vmov	d0, r6, r7
 8007666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007668:	2200      	movs	r2, #0
 800766a:	2300      	movs	r3, #0
 800766c:	4630      	mov	r0, r6
 800766e:	4639      	mov	r1, r7
 8007670:	f7f9 f9ce 	bl	8000a10 <__aeabi_dcmpeq>
 8007674:	2800      	cmp	r0, #0
 8007676:	d0f2      	beq.n	800765e <pow+0xa2>
 8007678:	eeb0 0a48 	vmov.f32	s0, s16
 800767c:	eef0 0a68 	vmov.f32	s1, s17
 8007680:	f001 ffa7 	bl	80095d2 <finite>
 8007684:	2800      	cmp	r0, #0
 8007686:	d0ea      	beq.n	800765e <pow+0xa2>
 8007688:	ec45 4b10 	vmov	d0, r4, r5
 800768c:	f001 ffa1 	bl	80095d2 <finite>
 8007690:	e7c3      	b.n	800761a <pow+0x5e>
 8007692:	4f01      	ldr	r7, [pc, #4]	; (8007698 <pow+0xdc>)
 8007694:	2600      	movs	r6, #0
 8007696:	e7e2      	b.n	800765e <pow+0xa2>
 8007698:	3ff00000 	.word	0x3ff00000

0800769c <sqrt>:
 800769c:	b538      	push	{r3, r4, r5, lr}
 800769e:	ed2d 8b02 	vpush	{d8}
 80076a2:	ec55 4b10 	vmov	r4, r5, d0
 80076a6:	f001 f82f 	bl	8008708 <__ieee754_sqrt>
 80076aa:	4622      	mov	r2, r4
 80076ac:	462b      	mov	r3, r5
 80076ae:	4620      	mov	r0, r4
 80076b0:	4629      	mov	r1, r5
 80076b2:	eeb0 8a40 	vmov.f32	s16, s0
 80076b6:	eef0 8a60 	vmov.f32	s17, s1
 80076ba:	f7f9 f9db 	bl	8000a74 <__aeabi_dcmpun>
 80076be:	b990      	cbnz	r0, 80076e6 <sqrt+0x4a>
 80076c0:	2200      	movs	r2, #0
 80076c2:	2300      	movs	r3, #0
 80076c4:	4620      	mov	r0, r4
 80076c6:	4629      	mov	r1, r5
 80076c8:	f7f9 f9ac 	bl	8000a24 <__aeabi_dcmplt>
 80076cc:	b158      	cbz	r0, 80076e6 <sqrt+0x4a>
 80076ce:	f7ff fe95 	bl	80073fc <__errno>
 80076d2:	2321      	movs	r3, #33	; 0x21
 80076d4:	6003      	str	r3, [r0, #0]
 80076d6:	2200      	movs	r2, #0
 80076d8:	2300      	movs	r3, #0
 80076da:	4610      	mov	r0, r2
 80076dc:	4619      	mov	r1, r3
 80076de:	f7f9 f859 	bl	8000794 <__aeabi_ddiv>
 80076e2:	ec41 0b18 	vmov	d8, r0, r1
 80076e6:	eeb0 0a48 	vmov.f32	s0, s16
 80076ea:	eef0 0a68 	vmov.f32	s1, s17
 80076ee:	ecbd 8b02 	vpop	{d8}
 80076f2:	bd38      	pop	{r3, r4, r5, pc}
 80076f4:	0000      	movs	r0, r0
	...

080076f8 <__ieee754_atan2>:
 80076f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076fc:	ec57 6b11 	vmov	r6, r7, d1
 8007700:	4273      	negs	r3, r6
 8007702:	f8df e184 	ldr.w	lr, [pc, #388]	; 8007888 <__ieee754_atan2+0x190>
 8007706:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800770a:	4333      	orrs	r3, r6
 800770c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007710:	4573      	cmp	r3, lr
 8007712:	ec51 0b10 	vmov	r0, r1, d0
 8007716:	ee11 8a10 	vmov	r8, s2
 800771a:	d80a      	bhi.n	8007732 <__ieee754_atan2+0x3a>
 800771c:	4244      	negs	r4, r0
 800771e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007722:	4304      	orrs	r4, r0
 8007724:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8007728:	4574      	cmp	r4, lr
 800772a:	ee10 9a10 	vmov	r9, s0
 800772e:	468c      	mov	ip, r1
 8007730:	d907      	bls.n	8007742 <__ieee754_atan2+0x4a>
 8007732:	4632      	mov	r2, r6
 8007734:	463b      	mov	r3, r7
 8007736:	f7f8 fd4d 	bl	80001d4 <__adddf3>
 800773a:	ec41 0b10 	vmov	d0, r0, r1
 800773e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007742:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8007746:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800774a:	4334      	orrs	r4, r6
 800774c:	d103      	bne.n	8007756 <__ieee754_atan2+0x5e>
 800774e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007752:	f001 bd95 	b.w	8009280 <atan>
 8007756:	17bc      	asrs	r4, r7, #30
 8007758:	f004 0402 	and.w	r4, r4, #2
 800775c:	ea53 0909 	orrs.w	r9, r3, r9
 8007760:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8007764:	d107      	bne.n	8007776 <__ieee754_atan2+0x7e>
 8007766:	2c02      	cmp	r4, #2
 8007768:	d060      	beq.n	800782c <__ieee754_atan2+0x134>
 800776a:	2c03      	cmp	r4, #3
 800776c:	d1e5      	bne.n	800773a <__ieee754_atan2+0x42>
 800776e:	a142      	add	r1, pc, #264	; (adr r1, 8007878 <__ieee754_atan2+0x180>)
 8007770:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007774:	e7e1      	b.n	800773a <__ieee754_atan2+0x42>
 8007776:	ea52 0808 	orrs.w	r8, r2, r8
 800777a:	d106      	bne.n	800778a <__ieee754_atan2+0x92>
 800777c:	f1bc 0f00 	cmp.w	ip, #0
 8007780:	da5f      	bge.n	8007842 <__ieee754_atan2+0x14a>
 8007782:	a13f      	add	r1, pc, #252	; (adr r1, 8007880 <__ieee754_atan2+0x188>)
 8007784:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007788:	e7d7      	b.n	800773a <__ieee754_atan2+0x42>
 800778a:	4572      	cmp	r2, lr
 800778c:	d10f      	bne.n	80077ae <__ieee754_atan2+0xb6>
 800778e:	4293      	cmp	r3, r2
 8007790:	f104 34ff 	add.w	r4, r4, #4294967295
 8007794:	d107      	bne.n	80077a6 <__ieee754_atan2+0xae>
 8007796:	2c02      	cmp	r4, #2
 8007798:	d84c      	bhi.n	8007834 <__ieee754_atan2+0x13c>
 800779a:	4b35      	ldr	r3, [pc, #212]	; (8007870 <__ieee754_atan2+0x178>)
 800779c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80077a0:	e9d4 0100 	ldrd	r0, r1, [r4]
 80077a4:	e7c9      	b.n	800773a <__ieee754_atan2+0x42>
 80077a6:	2c02      	cmp	r4, #2
 80077a8:	d848      	bhi.n	800783c <__ieee754_atan2+0x144>
 80077aa:	4b32      	ldr	r3, [pc, #200]	; (8007874 <__ieee754_atan2+0x17c>)
 80077ac:	e7f6      	b.n	800779c <__ieee754_atan2+0xa4>
 80077ae:	4573      	cmp	r3, lr
 80077b0:	d0e4      	beq.n	800777c <__ieee754_atan2+0x84>
 80077b2:	1a9b      	subs	r3, r3, r2
 80077b4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80077b8:	ea4f 5223 	mov.w	r2, r3, asr #20
 80077bc:	da1e      	bge.n	80077fc <__ieee754_atan2+0x104>
 80077be:	2f00      	cmp	r7, #0
 80077c0:	da01      	bge.n	80077c6 <__ieee754_atan2+0xce>
 80077c2:	323c      	adds	r2, #60	; 0x3c
 80077c4:	db1e      	blt.n	8007804 <__ieee754_atan2+0x10c>
 80077c6:	4632      	mov	r2, r6
 80077c8:	463b      	mov	r3, r7
 80077ca:	f7f8 ffe3 	bl	8000794 <__aeabi_ddiv>
 80077ce:	ec41 0b10 	vmov	d0, r0, r1
 80077d2:	f001 fef5 	bl	80095c0 <fabs>
 80077d6:	f001 fd53 	bl	8009280 <atan>
 80077da:	ec51 0b10 	vmov	r0, r1, d0
 80077de:	2c01      	cmp	r4, #1
 80077e0:	d013      	beq.n	800780a <__ieee754_atan2+0x112>
 80077e2:	2c02      	cmp	r4, #2
 80077e4:	d015      	beq.n	8007812 <__ieee754_atan2+0x11a>
 80077e6:	2c00      	cmp	r4, #0
 80077e8:	d0a7      	beq.n	800773a <__ieee754_atan2+0x42>
 80077ea:	a319      	add	r3, pc, #100	; (adr r3, 8007850 <__ieee754_atan2+0x158>)
 80077ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f0:	f7f8 fcee 	bl	80001d0 <__aeabi_dsub>
 80077f4:	a318      	add	r3, pc, #96	; (adr r3, 8007858 <__ieee754_atan2+0x160>)
 80077f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077fa:	e014      	b.n	8007826 <__ieee754_atan2+0x12e>
 80077fc:	a118      	add	r1, pc, #96	; (adr r1, 8007860 <__ieee754_atan2+0x168>)
 80077fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007802:	e7ec      	b.n	80077de <__ieee754_atan2+0xe6>
 8007804:	2000      	movs	r0, #0
 8007806:	2100      	movs	r1, #0
 8007808:	e7e9      	b.n	80077de <__ieee754_atan2+0xe6>
 800780a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800780e:	4619      	mov	r1, r3
 8007810:	e793      	b.n	800773a <__ieee754_atan2+0x42>
 8007812:	a30f      	add	r3, pc, #60	; (adr r3, 8007850 <__ieee754_atan2+0x158>)
 8007814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007818:	f7f8 fcda 	bl	80001d0 <__aeabi_dsub>
 800781c:	4602      	mov	r2, r0
 800781e:	460b      	mov	r3, r1
 8007820:	a10d      	add	r1, pc, #52	; (adr r1, 8007858 <__ieee754_atan2+0x160>)
 8007822:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007826:	f7f8 fcd3 	bl	80001d0 <__aeabi_dsub>
 800782a:	e786      	b.n	800773a <__ieee754_atan2+0x42>
 800782c:	a10a      	add	r1, pc, #40	; (adr r1, 8007858 <__ieee754_atan2+0x160>)
 800782e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007832:	e782      	b.n	800773a <__ieee754_atan2+0x42>
 8007834:	a10c      	add	r1, pc, #48	; (adr r1, 8007868 <__ieee754_atan2+0x170>)
 8007836:	e9d1 0100 	ldrd	r0, r1, [r1]
 800783a:	e77e      	b.n	800773a <__ieee754_atan2+0x42>
 800783c:	2000      	movs	r0, #0
 800783e:	2100      	movs	r1, #0
 8007840:	e77b      	b.n	800773a <__ieee754_atan2+0x42>
 8007842:	a107      	add	r1, pc, #28	; (adr r1, 8007860 <__ieee754_atan2+0x168>)
 8007844:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007848:	e777      	b.n	800773a <__ieee754_atan2+0x42>
 800784a:	bf00      	nop
 800784c:	f3af 8000 	nop.w
 8007850:	33145c07 	.word	0x33145c07
 8007854:	3ca1a626 	.word	0x3ca1a626
 8007858:	54442d18 	.word	0x54442d18
 800785c:	400921fb 	.word	0x400921fb
 8007860:	54442d18 	.word	0x54442d18
 8007864:	3ff921fb 	.word	0x3ff921fb
 8007868:	54442d18 	.word	0x54442d18
 800786c:	3fe921fb 	.word	0x3fe921fb
 8007870:	08009fc0 	.word	0x08009fc0
 8007874:	08009fd8 	.word	0x08009fd8
 8007878:	54442d18 	.word	0x54442d18
 800787c:	c00921fb 	.word	0xc00921fb
 8007880:	54442d18 	.word	0x54442d18
 8007884:	bff921fb 	.word	0xbff921fb
 8007888:	7ff00000 	.word	0x7ff00000
 800788c:	00000000 	.word	0x00000000

08007890 <__ieee754_pow>:
 8007890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007894:	ed2d 8b06 	vpush	{d8-d10}
 8007898:	b089      	sub	sp, #36	; 0x24
 800789a:	ed8d 1b00 	vstr	d1, [sp]
 800789e:	e9dd 2900 	ldrd	r2, r9, [sp]
 80078a2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80078a6:	ea58 0102 	orrs.w	r1, r8, r2
 80078aa:	ec57 6b10 	vmov	r6, r7, d0
 80078ae:	d115      	bne.n	80078dc <__ieee754_pow+0x4c>
 80078b0:	19b3      	adds	r3, r6, r6
 80078b2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80078b6:	4152      	adcs	r2, r2
 80078b8:	4299      	cmp	r1, r3
 80078ba:	4b89      	ldr	r3, [pc, #548]	; (8007ae0 <__ieee754_pow+0x250>)
 80078bc:	4193      	sbcs	r3, r2
 80078be:	f080 84d2 	bcs.w	8008266 <__ieee754_pow+0x9d6>
 80078c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078c6:	4630      	mov	r0, r6
 80078c8:	4639      	mov	r1, r7
 80078ca:	f7f8 fc83 	bl	80001d4 <__adddf3>
 80078ce:	ec41 0b10 	vmov	d0, r0, r1
 80078d2:	b009      	add	sp, #36	; 0x24
 80078d4:	ecbd 8b06 	vpop	{d8-d10}
 80078d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078dc:	4b81      	ldr	r3, [pc, #516]	; (8007ae4 <__ieee754_pow+0x254>)
 80078de:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80078e2:	429c      	cmp	r4, r3
 80078e4:	ee10 aa10 	vmov	sl, s0
 80078e8:	463d      	mov	r5, r7
 80078ea:	dc06      	bgt.n	80078fa <__ieee754_pow+0x6a>
 80078ec:	d101      	bne.n	80078f2 <__ieee754_pow+0x62>
 80078ee:	2e00      	cmp	r6, #0
 80078f0:	d1e7      	bne.n	80078c2 <__ieee754_pow+0x32>
 80078f2:	4598      	cmp	r8, r3
 80078f4:	dc01      	bgt.n	80078fa <__ieee754_pow+0x6a>
 80078f6:	d10f      	bne.n	8007918 <__ieee754_pow+0x88>
 80078f8:	b172      	cbz	r2, 8007918 <__ieee754_pow+0x88>
 80078fa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80078fe:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8007902:	ea55 050a 	orrs.w	r5, r5, sl
 8007906:	d1dc      	bne.n	80078c2 <__ieee754_pow+0x32>
 8007908:	e9dd 3200 	ldrd	r3, r2, [sp]
 800790c:	18db      	adds	r3, r3, r3
 800790e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8007912:	4152      	adcs	r2, r2
 8007914:	429d      	cmp	r5, r3
 8007916:	e7d0      	b.n	80078ba <__ieee754_pow+0x2a>
 8007918:	2d00      	cmp	r5, #0
 800791a:	da3b      	bge.n	8007994 <__ieee754_pow+0x104>
 800791c:	4b72      	ldr	r3, [pc, #456]	; (8007ae8 <__ieee754_pow+0x258>)
 800791e:	4598      	cmp	r8, r3
 8007920:	dc51      	bgt.n	80079c6 <__ieee754_pow+0x136>
 8007922:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007926:	4598      	cmp	r8, r3
 8007928:	f340 84ac 	ble.w	8008284 <__ieee754_pow+0x9f4>
 800792c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007930:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007934:	2b14      	cmp	r3, #20
 8007936:	dd0f      	ble.n	8007958 <__ieee754_pow+0xc8>
 8007938:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800793c:	fa22 f103 	lsr.w	r1, r2, r3
 8007940:	fa01 f303 	lsl.w	r3, r1, r3
 8007944:	4293      	cmp	r3, r2
 8007946:	f040 849d 	bne.w	8008284 <__ieee754_pow+0x9f4>
 800794a:	f001 0101 	and.w	r1, r1, #1
 800794e:	f1c1 0302 	rsb	r3, r1, #2
 8007952:	9304      	str	r3, [sp, #16]
 8007954:	b182      	cbz	r2, 8007978 <__ieee754_pow+0xe8>
 8007956:	e05f      	b.n	8007a18 <__ieee754_pow+0x188>
 8007958:	2a00      	cmp	r2, #0
 800795a:	d15b      	bne.n	8007a14 <__ieee754_pow+0x184>
 800795c:	f1c3 0314 	rsb	r3, r3, #20
 8007960:	fa48 f103 	asr.w	r1, r8, r3
 8007964:	fa01 f303 	lsl.w	r3, r1, r3
 8007968:	4543      	cmp	r3, r8
 800796a:	f040 8488 	bne.w	800827e <__ieee754_pow+0x9ee>
 800796e:	f001 0101 	and.w	r1, r1, #1
 8007972:	f1c1 0302 	rsb	r3, r1, #2
 8007976:	9304      	str	r3, [sp, #16]
 8007978:	4b5c      	ldr	r3, [pc, #368]	; (8007aec <__ieee754_pow+0x25c>)
 800797a:	4598      	cmp	r8, r3
 800797c:	d132      	bne.n	80079e4 <__ieee754_pow+0x154>
 800797e:	f1b9 0f00 	cmp.w	r9, #0
 8007982:	f280 8478 	bge.w	8008276 <__ieee754_pow+0x9e6>
 8007986:	4959      	ldr	r1, [pc, #356]	; (8007aec <__ieee754_pow+0x25c>)
 8007988:	4632      	mov	r2, r6
 800798a:	463b      	mov	r3, r7
 800798c:	2000      	movs	r0, #0
 800798e:	f7f8 ff01 	bl	8000794 <__aeabi_ddiv>
 8007992:	e79c      	b.n	80078ce <__ieee754_pow+0x3e>
 8007994:	2300      	movs	r3, #0
 8007996:	9304      	str	r3, [sp, #16]
 8007998:	2a00      	cmp	r2, #0
 800799a:	d13d      	bne.n	8007a18 <__ieee754_pow+0x188>
 800799c:	4b51      	ldr	r3, [pc, #324]	; (8007ae4 <__ieee754_pow+0x254>)
 800799e:	4598      	cmp	r8, r3
 80079a0:	d1ea      	bne.n	8007978 <__ieee754_pow+0xe8>
 80079a2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80079a6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80079aa:	ea53 030a 	orrs.w	r3, r3, sl
 80079ae:	f000 845a 	beq.w	8008266 <__ieee754_pow+0x9d6>
 80079b2:	4b4f      	ldr	r3, [pc, #316]	; (8007af0 <__ieee754_pow+0x260>)
 80079b4:	429c      	cmp	r4, r3
 80079b6:	dd08      	ble.n	80079ca <__ieee754_pow+0x13a>
 80079b8:	f1b9 0f00 	cmp.w	r9, #0
 80079bc:	f2c0 8457 	blt.w	800826e <__ieee754_pow+0x9de>
 80079c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80079c4:	e783      	b.n	80078ce <__ieee754_pow+0x3e>
 80079c6:	2302      	movs	r3, #2
 80079c8:	e7e5      	b.n	8007996 <__ieee754_pow+0x106>
 80079ca:	f1b9 0f00 	cmp.w	r9, #0
 80079ce:	f04f 0000 	mov.w	r0, #0
 80079d2:	f04f 0100 	mov.w	r1, #0
 80079d6:	f6bf af7a 	bge.w	80078ce <__ieee754_pow+0x3e>
 80079da:	e9dd 0300 	ldrd	r0, r3, [sp]
 80079de:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80079e2:	e774      	b.n	80078ce <__ieee754_pow+0x3e>
 80079e4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80079e8:	d106      	bne.n	80079f8 <__ieee754_pow+0x168>
 80079ea:	4632      	mov	r2, r6
 80079ec:	463b      	mov	r3, r7
 80079ee:	4630      	mov	r0, r6
 80079f0:	4639      	mov	r1, r7
 80079f2:	f7f8 fda5 	bl	8000540 <__aeabi_dmul>
 80079f6:	e76a      	b.n	80078ce <__ieee754_pow+0x3e>
 80079f8:	4b3e      	ldr	r3, [pc, #248]	; (8007af4 <__ieee754_pow+0x264>)
 80079fa:	4599      	cmp	r9, r3
 80079fc:	d10c      	bne.n	8007a18 <__ieee754_pow+0x188>
 80079fe:	2d00      	cmp	r5, #0
 8007a00:	db0a      	blt.n	8007a18 <__ieee754_pow+0x188>
 8007a02:	ec47 6b10 	vmov	d0, r6, r7
 8007a06:	b009      	add	sp, #36	; 0x24
 8007a08:	ecbd 8b06 	vpop	{d8-d10}
 8007a0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a10:	f000 be7a 	b.w	8008708 <__ieee754_sqrt>
 8007a14:	2300      	movs	r3, #0
 8007a16:	9304      	str	r3, [sp, #16]
 8007a18:	ec47 6b10 	vmov	d0, r6, r7
 8007a1c:	f001 fdd0 	bl	80095c0 <fabs>
 8007a20:	ec51 0b10 	vmov	r0, r1, d0
 8007a24:	f1ba 0f00 	cmp.w	sl, #0
 8007a28:	d129      	bne.n	8007a7e <__ieee754_pow+0x1ee>
 8007a2a:	b124      	cbz	r4, 8007a36 <__ieee754_pow+0x1a6>
 8007a2c:	4b2f      	ldr	r3, [pc, #188]	; (8007aec <__ieee754_pow+0x25c>)
 8007a2e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d123      	bne.n	8007a7e <__ieee754_pow+0x1ee>
 8007a36:	f1b9 0f00 	cmp.w	r9, #0
 8007a3a:	da05      	bge.n	8007a48 <__ieee754_pow+0x1b8>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	460b      	mov	r3, r1
 8007a40:	2000      	movs	r0, #0
 8007a42:	492a      	ldr	r1, [pc, #168]	; (8007aec <__ieee754_pow+0x25c>)
 8007a44:	f7f8 fea6 	bl	8000794 <__aeabi_ddiv>
 8007a48:	2d00      	cmp	r5, #0
 8007a4a:	f6bf af40 	bge.w	80078ce <__ieee754_pow+0x3e>
 8007a4e:	9b04      	ldr	r3, [sp, #16]
 8007a50:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007a54:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007a58:	4323      	orrs	r3, r4
 8007a5a:	d108      	bne.n	8007a6e <__ieee754_pow+0x1de>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	460b      	mov	r3, r1
 8007a60:	4610      	mov	r0, r2
 8007a62:	4619      	mov	r1, r3
 8007a64:	f7f8 fbb4 	bl	80001d0 <__aeabi_dsub>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	e78f      	b.n	800798e <__ieee754_pow+0xfe>
 8007a6e:	9b04      	ldr	r3, [sp, #16]
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	f47f af2c 	bne.w	80078ce <__ieee754_pow+0x3e>
 8007a76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	e727      	b.n	80078ce <__ieee754_pow+0x3e>
 8007a7e:	0feb      	lsrs	r3, r5, #31
 8007a80:	3b01      	subs	r3, #1
 8007a82:	9306      	str	r3, [sp, #24]
 8007a84:	9a06      	ldr	r2, [sp, #24]
 8007a86:	9b04      	ldr	r3, [sp, #16]
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	d102      	bne.n	8007a92 <__ieee754_pow+0x202>
 8007a8c:	4632      	mov	r2, r6
 8007a8e:	463b      	mov	r3, r7
 8007a90:	e7e6      	b.n	8007a60 <__ieee754_pow+0x1d0>
 8007a92:	4b19      	ldr	r3, [pc, #100]	; (8007af8 <__ieee754_pow+0x268>)
 8007a94:	4598      	cmp	r8, r3
 8007a96:	f340 80fb 	ble.w	8007c90 <__ieee754_pow+0x400>
 8007a9a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007a9e:	4598      	cmp	r8, r3
 8007aa0:	4b13      	ldr	r3, [pc, #76]	; (8007af0 <__ieee754_pow+0x260>)
 8007aa2:	dd0c      	ble.n	8007abe <__ieee754_pow+0x22e>
 8007aa4:	429c      	cmp	r4, r3
 8007aa6:	dc0f      	bgt.n	8007ac8 <__ieee754_pow+0x238>
 8007aa8:	f1b9 0f00 	cmp.w	r9, #0
 8007aac:	da0f      	bge.n	8007ace <__ieee754_pow+0x23e>
 8007aae:	2000      	movs	r0, #0
 8007ab0:	b009      	add	sp, #36	; 0x24
 8007ab2:	ecbd 8b06 	vpop	{d8-d10}
 8007ab6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aba:	f001 bbd6 	b.w	800926a <__math_oflow>
 8007abe:	429c      	cmp	r4, r3
 8007ac0:	dbf2      	blt.n	8007aa8 <__ieee754_pow+0x218>
 8007ac2:	4b0a      	ldr	r3, [pc, #40]	; (8007aec <__ieee754_pow+0x25c>)
 8007ac4:	429c      	cmp	r4, r3
 8007ac6:	dd19      	ble.n	8007afc <__ieee754_pow+0x26c>
 8007ac8:	f1b9 0f00 	cmp.w	r9, #0
 8007acc:	dcef      	bgt.n	8007aae <__ieee754_pow+0x21e>
 8007ace:	2000      	movs	r0, #0
 8007ad0:	b009      	add	sp, #36	; 0x24
 8007ad2:	ecbd 8b06 	vpop	{d8-d10}
 8007ad6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ada:	f001 bbbd 	b.w	8009258 <__math_uflow>
 8007ade:	bf00      	nop
 8007ae0:	fff00000 	.word	0xfff00000
 8007ae4:	7ff00000 	.word	0x7ff00000
 8007ae8:	433fffff 	.word	0x433fffff
 8007aec:	3ff00000 	.word	0x3ff00000
 8007af0:	3fefffff 	.word	0x3fefffff
 8007af4:	3fe00000 	.word	0x3fe00000
 8007af8:	41e00000 	.word	0x41e00000
 8007afc:	4b60      	ldr	r3, [pc, #384]	; (8007c80 <__ieee754_pow+0x3f0>)
 8007afe:	2200      	movs	r2, #0
 8007b00:	f7f8 fb66 	bl	80001d0 <__aeabi_dsub>
 8007b04:	a354      	add	r3, pc, #336	; (adr r3, 8007c58 <__ieee754_pow+0x3c8>)
 8007b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0a:	4604      	mov	r4, r0
 8007b0c:	460d      	mov	r5, r1
 8007b0e:	f7f8 fd17 	bl	8000540 <__aeabi_dmul>
 8007b12:	a353      	add	r3, pc, #332	; (adr r3, 8007c60 <__ieee754_pow+0x3d0>)
 8007b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b18:	4606      	mov	r6, r0
 8007b1a:	460f      	mov	r7, r1
 8007b1c:	4620      	mov	r0, r4
 8007b1e:	4629      	mov	r1, r5
 8007b20:	f7f8 fd0e 	bl	8000540 <__aeabi_dmul>
 8007b24:	4b57      	ldr	r3, [pc, #348]	; (8007c84 <__ieee754_pow+0x3f4>)
 8007b26:	4682      	mov	sl, r0
 8007b28:	468b      	mov	fp, r1
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	4620      	mov	r0, r4
 8007b2e:	4629      	mov	r1, r5
 8007b30:	f7f8 fd06 	bl	8000540 <__aeabi_dmul>
 8007b34:	4602      	mov	r2, r0
 8007b36:	460b      	mov	r3, r1
 8007b38:	a14b      	add	r1, pc, #300	; (adr r1, 8007c68 <__ieee754_pow+0x3d8>)
 8007b3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b3e:	f7f8 fb47 	bl	80001d0 <__aeabi_dsub>
 8007b42:	4622      	mov	r2, r4
 8007b44:	462b      	mov	r3, r5
 8007b46:	f7f8 fcfb 	bl	8000540 <__aeabi_dmul>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	2000      	movs	r0, #0
 8007b50:	494d      	ldr	r1, [pc, #308]	; (8007c88 <__ieee754_pow+0x3f8>)
 8007b52:	f7f8 fb3d 	bl	80001d0 <__aeabi_dsub>
 8007b56:	4622      	mov	r2, r4
 8007b58:	4680      	mov	r8, r0
 8007b5a:	4689      	mov	r9, r1
 8007b5c:	462b      	mov	r3, r5
 8007b5e:	4620      	mov	r0, r4
 8007b60:	4629      	mov	r1, r5
 8007b62:	f7f8 fced 	bl	8000540 <__aeabi_dmul>
 8007b66:	4602      	mov	r2, r0
 8007b68:	460b      	mov	r3, r1
 8007b6a:	4640      	mov	r0, r8
 8007b6c:	4649      	mov	r1, r9
 8007b6e:	f7f8 fce7 	bl	8000540 <__aeabi_dmul>
 8007b72:	a33f      	add	r3, pc, #252	; (adr r3, 8007c70 <__ieee754_pow+0x3e0>)
 8007b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b78:	f7f8 fce2 	bl	8000540 <__aeabi_dmul>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	460b      	mov	r3, r1
 8007b80:	4650      	mov	r0, sl
 8007b82:	4659      	mov	r1, fp
 8007b84:	f7f8 fb24 	bl	80001d0 <__aeabi_dsub>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	4680      	mov	r8, r0
 8007b8e:	4689      	mov	r9, r1
 8007b90:	4630      	mov	r0, r6
 8007b92:	4639      	mov	r1, r7
 8007b94:	f7f8 fb1e 	bl	80001d4 <__adddf3>
 8007b98:	2000      	movs	r0, #0
 8007b9a:	4632      	mov	r2, r6
 8007b9c:	463b      	mov	r3, r7
 8007b9e:	4604      	mov	r4, r0
 8007ba0:	460d      	mov	r5, r1
 8007ba2:	f7f8 fb15 	bl	80001d0 <__aeabi_dsub>
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	460b      	mov	r3, r1
 8007baa:	4640      	mov	r0, r8
 8007bac:	4649      	mov	r1, r9
 8007bae:	f7f8 fb0f 	bl	80001d0 <__aeabi_dsub>
 8007bb2:	9b04      	ldr	r3, [sp, #16]
 8007bb4:	9a06      	ldr	r2, [sp, #24]
 8007bb6:	3b01      	subs	r3, #1
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	4682      	mov	sl, r0
 8007bbc:	468b      	mov	fp, r1
 8007bbe:	f040 81e7 	bne.w	8007f90 <__ieee754_pow+0x700>
 8007bc2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8007c78 <__ieee754_pow+0x3e8>
 8007bc6:	eeb0 8a47 	vmov.f32	s16, s14
 8007bca:	eef0 8a67 	vmov.f32	s17, s15
 8007bce:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007bd2:	2600      	movs	r6, #0
 8007bd4:	4632      	mov	r2, r6
 8007bd6:	463b      	mov	r3, r7
 8007bd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007bdc:	f7f8 faf8 	bl	80001d0 <__aeabi_dsub>
 8007be0:	4622      	mov	r2, r4
 8007be2:	462b      	mov	r3, r5
 8007be4:	f7f8 fcac 	bl	8000540 <__aeabi_dmul>
 8007be8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007bec:	4680      	mov	r8, r0
 8007bee:	4689      	mov	r9, r1
 8007bf0:	4650      	mov	r0, sl
 8007bf2:	4659      	mov	r1, fp
 8007bf4:	f7f8 fca4 	bl	8000540 <__aeabi_dmul>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	460b      	mov	r3, r1
 8007bfc:	4640      	mov	r0, r8
 8007bfe:	4649      	mov	r1, r9
 8007c00:	f7f8 fae8 	bl	80001d4 <__adddf3>
 8007c04:	4632      	mov	r2, r6
 8007c06:	463b      	mov	r3, r7
 8007c08:	4680      	mov	r8, r0
 8007c0a:	4689      	mov	r9, r1
 8007c0c:	4620      	mov	r0, r4
 8007c0e:	4629      	mov	r1, r5
 8007c10:	f7f8 fc96 	bl	8000540 <__aeabi_dmul>
 8007c14:	460b      	mov	r3, r1
 8007c16:	4604      	mov	r4, r0
 8007c18:	460d      	mov	r5, r1
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	4649      	mov	r1, r9
 8007c1e:	4640      	mov	r0, r8
 8007c20:	f7f8 fad8 	bl	80001d4 <__adddf3>
 8007c24:	4b19      	ldr	r3, [pc, #100]	; (8007c8c <__ieee754_pow+0x3fc>)
 8007c26:	4299      	cmp	r1, r3
 8007c28:	ec45 4b19 	vmov	d9, r4, r5
 8007c2c:	4606      	mov	r6, r0
 8007c2e:	460f      	mov	r7, r1
 8007c30:	468b      	mov	fp, r1
 8007c32:	f340 82f1 	ble.w	8008218 <__ieee754_pow+0x988>
 8007c36:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007c3a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007c3e:	4303      	orrs	r3, r0
 8007c40:	f000 81e4 	beq.w	800800c <__ieee754_pow+0x77c>
 8007c44:	ec51 0b18 	vmov	r0, r1, d8
 8007c48:	2200      	movs	r2, #0
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	f7f8 feea 	bl	8000a24 <__aeabi_dcmplt>
 8007c50:	3800      	subs	r0, #0
 8007c52:	bf18      	it	ne
 8007c54:	2001      	movne	r0, #1
 8007c56:	e72b      	b.n	8007ab0 <__ieee754_pow+0x220>
 8007c58:	60000000 	.word	0x60000000
 8007c5c:	3ff71547 	.word	0x3ff71547
 8007c60:	f85ddf44 	.word	0xf85ddf44
 8007c64:	3e54ae0b 	.word	0x3e54ae0b
 8007c68:	55555555 	.word	0x55555555
 8007c6c:	3fd55555 	.word	0x3fd55555
 8007c70:	652b82fe 	.word	0x652b82fe
 8007c74:	3ff71547 	.word	0x3ff71547
 8007c78:	00000000 	.word	0x00000000
 8007c7c:	bff00000 	.word	0xbff00000
 8007c80:	3ff00000 	.word	0x3ff00000
 8007c84:	3fd00000 	.word	0x3fd00000
 8007c88:	3fe00000 	.word	0x3fe00000
 8007c8c:	408fffff 	.word	0x408fffff
 8007c90:	4bd5      	ldr	r3, [pc, #852]	; (8007fe8 <__ieee754_pow+0x758>)
 8007c92:	402b      	ands	r3, r5
 8007c94:	2200      	movs	r2, #0
 8007c96:	b92b      	cbnz	r3, 8007ca4 <__ieee754_pow+0x414>
 8007c98:	4bd4      	ldr	r3, [pc, #848]	; (8007fec <__ieee754_pow+0x75c>)
 8007c9a:	f7f8 fc51 	bl	8000540 <__aeabi_dmul>
 8007c9e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007ca2:	460c      	mov	r4, r1
 8007ca4:	1523      	asrs	r3, r4, #20
 8007ca6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007caa:	4413      	add	r3, r2
 8007cac:	9305      	str	r3, [sp, #20]
 8007cae:	4bd0      	ldr	r3, [pc, #832]	; (8007ff0 <__ieee754_pow+0x760>)
 8007cb0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007cb4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007cb8:	429c      	cmp	r4, r3
 8007cba:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007cbe:	dd08      	ble.n	8007cd2 <__ieee754_pow+0x442>
 8007cc0:	4bcc      	ldr	r3, [pc, #816]	; (8007ff4 <__ieee754_pow+0x764>)
 8007cc2:	429c      	cmp	r4, r3
 8007cc4:	f340 8162 	ble.w	8007f8c <__ieee754_pow+0x6fc>
 8007cc8:	9b05      	ldr	r3, [sp, #20]
 8007cca:	3301      	adds	r3, #1
 8007ccc:	9305      	str	r3, [sp, #20]
 8007cce:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007cd2:	2400      	movs	r4, #0
 8007cd4:	00e3      	lsls	r3, r4, #3
 8007cd6:	9307      	str	r3, [sp, #28]
 8007cd8:	4bc7      	ldr	r3, [pc, #796]	; (8007ff8 <__ieee754_pow+0x768>)
 8007cda:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007cde:	ed93 7b00 	vldr	d7, [r3]
 8007ce2:	4629      	mov	r1, r5
 8007ce4:	ec53 2b17 	vmov	r2, r3, d7
 8007ce8:	eeb0 9a47 	vmov.f32	s18, s14
 8007cec:	eef0 9a67 	vmov.f32	s19, s15
 8007cf0:	4682      	mov	sl, r0
 8007cf2:	f7f8 fa6d 	bl	80001d0 <__aeabi_dsub>
 8007cf6:	4652      	mov	r2, sl
 8007cf8:	4606      	mov	r6, r0
 8007cfa:	460f      	mov	r7, r1
 8007cfc:	462b      	mov	r3, r5
 8007cfe:	ec51 0b19 	vmov	r0, r1, d9
 8007d02:	f7f8 fa67 	bl	80001d4 <__adddf3>
 8007d06:	4602      	mov	r2, r0
 8007d08:	460b      	mov	r3, r1
 8007d0a:	2000      	movs	r0, #0
 8007d0c:	49bb      	ldr	r1, [pc, #748]	; (8007ffc <__ieee754_pow+0x76c>)
 8007d0e:	f7f8 fd41 	bl	8000794 <__aeabi_ddiv>
 8007d12:	ec41 0b1a 	vmov	d10, r0, r1
 8007d16:	4602      	mov	r2, r0
 8007d18:	460b      	mov	r3, r1
 8007d1a:	4630      	mov	r0, r6
 8007d1c:	4639      	mov	r1, r7
 8007d1e:	f7f8 fc0f 	bl	8000540 <__aeabi_dmul>
 8007d22:	2300      	movs	r3, #0
 8007d24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d28:	9302      	str	r3, [sp, #8]
 8007d2a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007d2e:	46ab      	mov	fp, r5
 8007d30:	106d      	asrs	r5, r5, #1
 8007d32:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007d36:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007d3a:	ec41 0b18 	vmov	d8, r0, r1
 8007d3e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8007d42:	2200      	movs	r2, #0
 8007d44:	4640      	mov	r0, r8
 8007d46:	4649      	mov	r1, r9
 8007d48:	4614      	mov	r4, r2
 8007d4a:	461d      	mov	r5, r3
 8007d4c:	f7f8 fbf8 	bl	8000540 <__aeabi_dmul>
 8007d50:	4602      	mov	r2, r0
 8007d52:	460b      	mov	r3, r1
 8007d54:	4630      	mov	r0, r6
 8007d56:	4639      	mov	r1, r7
 8007d58:	f7f8 fa3a 	bl	80001d0 <__aeabi_dsub>
 8007d5c:	ec53 2b19 	vmov	r2, r3, d9
 8007d60:	4606      	mov	r6, r0
 8007d62:	460f      	mov	r7, r1
 8007d64:	4620      	mov	r0, r4
 8007d66:	4629      	mov	r1, r5
 8007d68:	f7f8 fa32 	bl	80001d0 <__aeabi_dsub>
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	460b      	mov	r3, r1
 8007d70:	4650      	mov	r0, sl
 8007d72:	4659      	mov	r1, fp
 8007d74:	f7f8 fa2c 	bl	80001d0 <__aeabi_dsub>
 8007d78:	4642      	mov	r2, r8
 8007d7a:	464b      	mov	r3, r9
 8007d7c:	f7f8 fbe0 	bl	8000540 <__aeabi_dmul>
 8007d80:	4602      	mov	r2, r0
 8007d82:	460b      	mov	r3, r1
 8007d84:	4630      	mov	r0, r6
 8007d86:	4639      	mov	r1, r7
 8007d88:	f7f8 fa22 	bl	80001d0 <__aeabi_dsub>
 8007d8c:	ec53 2b1a 	vmov	r2, r3, d10
 8007d90:	f7f8 fbd6 	bl	8000540 <__aeabi_dmul>
 8007d94:	ec53 2b18 	vmov	r2, r3, d8
 8007d98:	ec41 0b19 	vmov	d9, r0, r1
 8007d9c:	ec51 0b18 	vmov	r0, r1, d8
 8007da0:	f7f8 fbce 	bl	8000540 <__aeabi_dmul>
 8007da4:	a37c      	add	r3, pc, #496	; (adr r3, 8007f98 <__ieee754_pow+0x708>)
 8007da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007daa:	4604      	mov	r4, r0
 8007dac:	460d      	mov	r5, r1
 8007dae:	f7f8 fbc7 	bl	8000540 <__aeabi_dmul>
 8007db2:	a37b      	add	r3, pc, #492	; (adr r3, 8007fa0 <__ieee754_pow+0x710>)
 8007db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db8:	f7f8 fa0c 	bl	80001d4 <__adddf3>
 8007dbc:	4622      	mov	r2, r4
 8007dbe:	462b      	mov	r3, r5
 8007dc0:	f7f8 fbbe 	bl	8000540 <__aeabi_dmul>
 8007dc4:	a378      	add	r3, pc, #480	; (adr r3, 8007fa8 <__ieee754_pow+0x718>)
 8007dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dca:	f7f8 fa03 	bl	80001d4 <__adddf3>
 8007dce:	4622      	mov	r2, r4
 8007dd0:	462b      	mov	r3, r5
 8007dd2:	f7f8 fbb5 	bl	8000540 <__aeabi_dmul>
 8007dd6:	a376      	add	r3, pc, #472	; (adr r3, 8007fb0 <__ieee754_pow+0x720>)
 8007dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ddc:	f7f8 f9fa 	bl	80001d4 <__adddf3>
 8007de0:	4622      	mov	r2, r4
 8007de2:	462b      	mov	r3, r5
 8007de4:	f7f8 fbac 	bl	8000540 <__aeabi_dmul>
 8007de8:	a373      	add	r3, pc, #460	; (adr r3, 8007fb8 <__ieee754_pow+0x728>)
 8007dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dee:	f7f8 f9f1 	bl	80001d4 <__adddf3>
 8007df2:	4622      	mov	r2, r4
 8007df4:	462b      	mov	r3, r5
 8007df6:	f7f8 fba3 	bl	8000540 <__aeabi_dmul>
 8007dfa:	a371      	add	r3, pc, #452	; (adr r3, 8007fc0 <__ieee754_pow+0x730>)
 8007dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e00:	f7f8 f9e8 	bl	80001d4 <__adddf3>
 8007e04:	4622      	mov	r2, r4
 8007e06:	4606      	mov	r6, r0
 8007e08:	460f      	mov	r7, r1
 8007e0a:	462b      	mov	r3, r5
 8007e0c:	4620      	mov	r0, r4
 8007e0e:	4629      	mov	r1, r5
 8007e10:	f7f8 fb96 	bl	8000540 <__aeabi_dmul>
 8007e14:	4602      	mov	r2, r0
 8007e16:	460b      	mov	r3, r1
 8007e18:	4630      	mov	r0, r6
 8007e1a:	4639      	mov	r1, r7
 8007e1c:	f7f8 fb90 	bl	8000540 <__aeabi_dmul>
 8007e20:	4642      	mov	r2, r8
 8007e22:	4604      	mov	r4, r0
 8007e24:	460d      	mov	r5, r1
 8007e26:	464b      	mov	r3, r9
 8007e28:	ec51 0b18 	vmov	r0, r1, d8
 8007e2c:	f7f8 f9d2 	bl	80001d4 <__adddf3>
 8007e30:	ec53 2b19 	vmov	r2, r3, d9
 8007e34:	f7f8 fb84 	bl	8000540 <__aeabi_dmul>
 8007e38:	4622      	mov	r2, r4
 8007e3a:	462b      	mov	r3, r5
 8007e3c:	f7f8 f9ca 	bl	80001d4 <__adddf3>
 8007e40:	4642      	mov	r2, r8
 8007e42:	4682      	mov	sl, r0
 8007e44:	468b      	mov	fp, r1
 8007e46:	464b      	mov	r3, r9
 8007e48:	4640      	mov	r0, r8
 8007e4a:	4649      	mov	r1, r9
 8007e4c:	f7f8 fb78 	bl	8000540 <__aeabi_dmul>
 8007e50:	4b6b      	ldr	r3, [pc, #428]	; (8008000 <__ieee754_pow+0x770>)
 8007e52:	2200      	movs	r2, #0
 8007e54:	4606      	mov	r6, r0
 8007e56:	460f      	mov	r7, r1
 8007e58:	f7f8 f9bc 	bl	80001d4 <__adddf3>
 8007e5c:	4652      	mov	r2, sl
 8007e5e:	465b      	mov	r3, fp
 8007e60:	f7f8 f9b8 	bl	80001d4 <__adddf3>
 8007e64:	2000      	movs	r0, #0
 8007e66:	4604      	mov	r4, r0
 8007e68:	460d      	mov	r5, r1
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	4640      	mov	r0, r8
 8007e70:	4649      	mov	r1, r9
 8007e72:	f7f8 fb65 	bl	8000540 <__aeabi_dmul>
 8007e76:	4b62      	ldr	r3, [pc, #392]	; (8008000 <__ieee754_pow+0x770>)
 8007e78:	4680      	mov	r8, r0
 8007e7a:	4689      	mov	r9, r1
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	4620      	mov	r0, r4
 8007e80:	4629      	mov	r1, r5
 8007e82:	f7f8 f9a5 	bl	80001d0 <__aeabi_dsub>
 8007e86:	4632      	mov	r2, r6
 8007e88:	463b      	mov	r3, r7
 8007e8a:	f7f8 f9a1 	bl	80001d0 <__aeabi_dsub>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	460b      	mov	r3, r1
 8007e92:	4650      	mov	r0, sl
 8007e94:	4659      	mov	r1, fp
 8007e96:	f7f8 f99b 	bl	80001d0 <__aeabi_dsub>
 8007e9a:	ec53 2b18 	vmov	r2, r3, d8
 8007e9e:	f7f8 fb4f 	bl	8000540 <__aeabi_dmul>
 8007ea2:	4622      	mov	r2, r4
 8007ea4:	4606      	mov	r6, r0
 8007ea6:	460f      	mov	r7, r1
 8007ea8:	462b      	mov	r3, r5
 8007eaa:	ec51 0b19 	vmov	r0, r1, d9
 8007eae:	f7f8 fb47 	bl	8000540 <__aeabi_dmul>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	4630      	mov	r0, r6
 8007eb8:	4639      	mov	r1, r7
 8007eba:	f7f8 f98b 	bl	80001d4 <__adddf3>
 8007ebe:	4606      	mov	r6, r0
 8007ec0:	460f      	mov	r7, r1
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	4640      	mov	r0, r8
 8007ec8:	4649      	mov	r1, r9
 8007eca:	f7f8 f983 	bl	80001d4 <__adddf3>
 8007ece:	a33e      	add	r3, pc, #248	; (adr r3, 8007fc8 <__ieee754_pow+0x738>)
 8007ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed4:	2000      	movs	r0, #0
 8007ed6:	4604      	mov	r4, r0
 8007ed8:	460d      	mov	r5, r1
 8007eda:	f7f8 fb31 	bl	8000540 <__aeabi_dmul>
 8007ede:	4642      	mov	r2, r8
 8007ee0:	ec41 0b18 	vmov	d8, r0, r1
 8007ee4:	464b      	mov	r3, r9
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	4629      	mov	r1, r5
 8007eea:	f7f8 f971 	bl	80001d0 <__aeabi_dsub>
 8007eee:	4602      	mov	r2, r0
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	4630      	mov	r0, r6
 8007ef4:	4639      	mov	r1, r7
 8007ef6:	f7f8 f96b 	bl	80001d0 <__aeabi_dsub>
 8007efa:	a335      	add	r3, pc, #212	; (adr r3, 8007fd0 <__ieee754_pow+0x740>)
 8007efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f00:	f7f8 fb1e 	bl	8000540 <__aeabi_dmul>
 8007f04:	a334      	add	r3, pc, #208	; (adr r3, 8007fd8 <__ieee754_pow+0x748>)
 8007f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0a:	4606      	mov	r6, r0
 8007f0c:	460f      	mov	r7, r1
 8007f0e:	4620      	mov	r0, r4
 8007f10:	4629      	mov	r1, r5
 8007f12:	f7f8 fb15 	bl	8000540 <__aeabi_dmul>
 8007f16:	4602      	mov	r2, r0
 8007f18:	460b      	mov	r3, r1
 8007f1a:	4630      	mov	r0, r6
 8007f1c:	4639      	mov	r1, r7
 8007f1e:	f7f8 f959 	bl	80001d4 <__adddf3>
 8007f22:	9a07      	ldr	r2, [sp, #28]
 8007f24:	4b37      	ldr	r3, [pc, #220]	; (8008004 <__ieee754_pow+0x774>)
 8007f26:	4413      	add	r3, r2
 8007f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2c:	f7f8 f952 	bl	80001d4 <__adddf3>
 8007f30:	4682      	mov	sl, r0
 8007f32:	9805      	ldr	r0, [sp, #20]
 8007f34:	468b      	mov	fp, r1
 8007f36:	f7f8 fa99 	bl	800046c <__aeabi_i2d>
 8007f3a:	9a07      	ldr	r2, [sp, #28]
 8007f3c:	4b32      	ldr	r3, [pc, #200]	; (8008008 <__ieee754_pow+0x778>)
 8007f3e:	4413      	add	r3, r2
 8007f40:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f44:	4606      	mov	r6, r0
 8007f46:	460f      	mov	r7, r1
 8007f48:	4652      	mov	r2, sl
 8007f4a:	465b      	mov	r3, fp
 8007f4c:	ec51 0b18 	vmov	r0, r1, d8
 8007f50:	f7f8 f940 	bl	80001d4 <__adddf3>
 8007f54:	4642      	mov	r2, r8
 8007f56:	464b      	mov	r3, r9
 8007f58:	f7f8 f93c 	bl	80001d4 <__adddf3>
 8007f5c:	4632      	mov	r2, r6
 8007f5e:	463b      	mov	r3, r7
 8007f60:	f7f8 f938 	bl	80001d4 <__adddf3>
 8007f64:	2000      	movs	r0, #0
 8007f66:	4632      	mov	r2, r6
 8007f68:	463b      	mov	r3, r7
 8007f6a:	4604      	mov	r4, r0
 8007f6c:	460d      	mov	r5, r1
 8007f6e:	f7f8 f92f 	bl	80001d0 <__aeabi_dsub>
 8007f72:	4642      	mov	r2, r8
 8007f74:	464b      	mov	r3, r9
 8007f76:	f7f8 f92b 	bl	80001d0 <__aeabi_dsub>
 8007f7a:	ec53 2b18 	vmov	r2, r3, d8
 8007f7e:	f7f8 f927 	bl	80001d0 <__aeabi_dsub>
 8007f82:	4602      	mov	r2, r0
 8007f84:	460b      	mov	r3, r1
 8007f86:	4650      	mov	r0, sl
 8007f88:	4659      	mov	r1, fp
 8007f8a:	e610      	b.n	8007bae <__ieee754_pow+0x31e>
 8007f8c:	2401      	movs	r4, #1
 8007f8e:	e6a1      	b.n	8007cd4 <__ieee754_pow+0x444>
 8007f90:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8007fe0 <__ieee754_pow+0x750>
 8007f94:	e617      	b.n	8007bc6 <__ieee754_pow+0x336>
 8007f96:	bf00      	nop
 8007f98:	4a454eef 	.word	0x4a454eef
 8007f9c:	3fca7e28 	.word	0x3fca7e28
 8007fa0:	93c9db65 	.word	0x93c9db65
 8007fa4:	3fcd864a 	.word	0x3fcd864a
 8007fa8:	a91d4101 	.word	0xa91d4101
 8007fac:	3fd17460 	.word	0x3fd17460
 8007fb0:	518f264d 	.word	0x518f264d
 8007fb4:	3fd55555 	.word	0x3fd55555
 8007fb8:	db6fabff 	.word	0xdb6fabff
 8007fbc:	3fdb6db6 	.word	0x3fdb6db6
 8007fc0:	33333303 	.word	0x33333303
 8007fc4:	3fe33333 	.word	0x3fe33333
 8007fc8:	e0000000 	.word	0xe0000000
 8007fcc:	3feec709 	.word	0x3feec709
 8007fd0:	dc3a03fd 	.word	0xdc3a03fd
 8007fd4:	3feec709 	.word	0x3feec709
 8007fd8:	145b01f5 	.word	0x145b01f5
 8007fdc:	be3e2fe0 	.word	0xbe3e2fe0
 8007fe0:	00000000 	.word	0x00000000
 8007fe4:	3ff00000 	.word	0x3ff00000
 8007fe8:	7ff00000 	.word	0x7ff00000
 8007fec:	43400000 	.word	0x43400000
 8007ff0:	0003988e 	.word	0x0003988e
 8007ff4:	000bb679 	.word	0x000bb679
 8007ff8:	08009ff0 	.word	0x08009ff0
 8007ffc:	3ff00000 	.word	0x3ff00000
 8008000:	40080000 	.word	0x40080000
 8008004:	0800a010 	.word	0x0800a010
 8008008:	0800a000 	.word	0x0800a000
 800800c:	a3b5      	add	r3, pc, #724	; (adr r3, 80082e4 <__ieee754_pow+0xa54>)
 800800e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008012:	4640      	mov	r0, r8
 8008014:	4649      	mov	r1, r9
 8008016:	f7f8 f8dd 	bl	80001d4 <__adddf3>
 800801a:	4622      	mov	r2, r4
 800801c:	ec41 0b1a 	vmov	d10, r0, r1
 8008020:	462b      	mov	r3, r5
 8008022:	4630      	mov	r0, r6
 8008024:	4639      	mov	r1, r7
 8008026:	f7f8 f8d3 	bl	80001d0 <__aeabi_dsub>
 800802a:	4602      	mov	r2, r0
 800802c:	460b      	mov	r3, r1
 800802e:	ec51 0b1a 	vmov	r0, r1, d10
 8008032:	f7f8 fd15 	bl	8000a60 <__aeabi_dcmpgt>
 8008036:	2800      	cmp	r0, #0
 8008038:	f47f ae04 	bne.w	8007c44 <__ieee754_pow+0x3b4>
 800803c:	4aa4      	ldr	r2, [pc, #656]	; (80082d0 <__ieee754_pow+0xa40>)
 800803e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008042:	4293      	cmp	r3, r2
 8008044:	f340 8108 	ble.w	8008258 <__ieee754_pow+0x9c8>
 8008048:	151b      	asrs	r3, r3, #20
 800804a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800804e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008052:	fa4a f303 	asr.w	r3, sl, r3
 8008056:	445b      	add	r3, fp
 8008058:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800805c:	4e9d      	ldr	r6, [pc, #628]	; (80082d4 <__ieee754_pow+0xa44>)
 800805e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008062:	4116      	asrs	r6, r2
 8008064:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008068:	2000      	movs	r0, #0
 800806a:	ea23 0106 	bic.w	r1, r3, r6
 800806e:	f1c2 0214 	rsb	r2, r2, #20
 8008072:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008076:	fa4a fa02 	asr.w	sl, sl, r2
 800807a:	f1bb 0f00 	cmp.w	fp, #0
 800807e:	4602      	mov	r2, r0
 8008080:	460b      	mov	r3, r1
 8008082:	4620      	mov	r0, r4
 8008084:	4629      	mov	r1, r5
 8008086:	bfb8      	it	lt
 8008088:	f1ca 0a00 	rsblt	sl, sl, #0
 800808c:	f7f8 f8a0 	bl	80001d0 <__aeabi_dsub>
 8008090:	ec41 0b19 	vmov	d9, r0, r1
 8008094:	4642      	mov	r2, r8
 8008096:	464b      	mov	r3, r9
 8008098:	ec51 0b19 	vmov	r0, r1, d9
 800809c:	f7f8 f89a 	bl	80001d4 <__adddf3>
 80080a0:	a37b      	add	r3, pc, #492	; (adr r3, 8008290 <__ieee754_pow+0xa00>)
 80080a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a6:	2000      	movs	r0, #0
 80080a8:	4604      	mov	r4, r0
 80080aa:	460d      	mov	r5, r1
 80080ac:	f7f8 fa48 	bl	8000540 <__aeabi_dmul>
 80080b0:	ec53 2b19 	vmov	r2, r3, d9
 80080b4:	4606      	mov	r6, r0
 80080b6:	460f      	mov	r7, r1
 80080b8:	4620      	mov	r0, r4
 80080ba:	4629      	mov	r1, r5
 80080bc:	f7f8 f888 	bl	80001d0 <__aeabi_dsub>
 80080c0:	4602      	mov	r2, r0
 80080c2:	460b      	mov	r3, r1
 80080c4:	4640      	mov	r0, r8
 80080c6:	4649      	mov	r1, r9
 80080c8:	f7f8 f882 	bl	80001d0 <__aeabi_dsub>
 80080cc:	a372      	add	r3, pc, #456	; (adr r3, 8008298 <__ieee754_pow+0xa08>)
 80080ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d2:	f7f8 fa35 	bl	8000540 <__aeabi_dmul>
 80080d6:	a372      	add	r3, pc, #456	; (adr r3, 80082a0 <__ieee754_pow+0xa10>)
 80080d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080dc:	4680      	mov	r8, r0
 80080de:	4689      	mov	r9, r1
 80080e0:	4620      	mov	r0, r4
 80080e2:	4629      	mov	r1, r5
 80080e4:	f7f8 fa2c 	bl	8000540 <__aeabi_dmul>
 80080e8:	4602      	mov	r2, r0
 80080ea:	460b      	mov	r3, r1
 80080ec:	4640      	mov	r0, r8
 80080ee:	4649      	mov	r1, r9
 80080f0:	f7f8 f870 	bl	80001d4 <__adddf3>
 80080f4:	4604      	mov	r4, r0
 80080f6:	460d      	mov	r5, r1
 80080f8:	4602      	mov	r2, r0
 80080fa:	460b      	mov	r3, r1
 80080fc:	4630      	mov	r0, r6
 80080fe:	4639      	mov	r1, r7
 8008100:	f7f8 f868 	bl	80001d4 <__adddf3>
 8008104:	4632      	mov	r2, r6
 8008106:	463b      	mov	r3, r7
 8008108:	4680      	mov	r8, r0
 800810a:	4689      	mov	r9, r1
 800810c:	f7f8 f860 	bl	80001d0 <__aeabi_dsub>
 8008110:	4602      	mov	r2, r0
 8008112:	460b      	mov	r3, r1
 8008114:	4620      	mov	r0, r4
 8008116:	4629      	mov	r1, r5
 8008118:	f7f8 f85a 	bl	80001d0 <__aeabi_dsub>
 800811c:	4642      	mov	r2, r8
 800811e:	4606      	mov	r6, r0
 8008120:	460f      	mov	r7, r1
 8008122:	464b      	mov	r3, r9
 8008124:	4640      	mov	r0, r8
 8008126:	4649      	mov	r1, r9
 8008128:	f7f8 fa0a 	bl	8000540 <__aeabi_dmul>
 800812c:	a35e      	add	r3, pc, #376	; (adr r3, 80082a8 <__ieee754_pow+0xa18>)
 800812e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008132:	4604      	mov	r4, r0
 8008134:	460d      	mov	r5, r1
 8008136:	f7f8 fa03 	bl	8000540 <__aeabi_dmul>
 800813a:	a35d      	add	r3, pc, #372	; (adr r3, 80082b0 <__ieee754_pow+0xa20>)
 800813c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008140:	f7f8 f846 	bl	80001d0 <__aeabi_dsub>
 8008144:	4622      	mov	r2, r4
 8008146:	462b      	mov	r3, r5
 8008148:	f7f8 f9fa 	bl	8000540 <__aeabi_dmul>
 800814c:	a35a      	add	r3, pc, #360	; (adr r3, 80082b8 <__ieee754_pow+0xa28>)
 800814e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008152:	f7f8 f83f 	bl	80001d4 <__adddf3>
 8008156:	4622      	mov	r2, r4
 8008158:	462b      	mov	r3, r5
 800815a:	f7f8 f9f1 	bl	8000540 <__aeabi_dmul>
 800815e:	a358      	add	r3, pc, #352	; (adr r3, 80082c0 <__ieee754_pow+0xa30>)
 8008160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008164:	f7f8 f834 	bl	80001d0 <__aeabi_dsub>
 8008168:	4622      	mov	r2, r4
 800816a:	462b      	mov	r3, r5
 800816c:	f7f8 f9e8 	bl	8000540 <__aeabi_dmul>
 8008170:	a355      	add	r3, pc, #340	; (adr r3, 80082c8 <__ieee754_pow+0xa38>)
 8008172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008176:	f7f8 f82d 	bl	80001d4 <__adddf3>
 800817a:	4622      	mov	r2, r4
 800817c:	462b      	mov	r3, r5
 800817e:	f7f8 f9df 	bl	8000540 <__aeabi_dmul>
 8008182:	4602      	mov	r2, r0
 8008184:	460b      	mov	r3, r1
 8008186:	4640      	mov	r0, r8
 8008188:	4649      	mov	r1, r9
 800818a:	f7f8 f821 	bl	80001d0 <__aeabi_dsub>
 800818e:	4604      	mov	r4, r0
 8008190:	460d      	mov	r5, r1
 8008192:	4602      	mov	r2, r0
 8008194:	460b      	mov	r3, r1
 8008196:	4640      	mov	r0, r8
 8008198:	4649      	mov	r1, r9
 800819a:	f7f8 f9d1 	bl	8000540 <__aeabi_dmul>
 800819e:	2200      	movs	r2, #0
 80081a0:	ec41 0b19 	vmov	d9, r0, r1
 80081a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80081a8:	4620      	mov	r0, r4
 80081aa:	4629      	mov	r1, r5
 80081ac:	f7f8 f810 	bl	80001d0 <__aeabi_dsub>
 80081b0:	4602      	mov	r2, r0
 80081b2:	460b      	mov	r3, r1
 80081b4:	ec51 0b19 	vmov	r0, r1, d9
 80081b8:	f7f8 faec 	bl	8000794 <__aeabi_ddiv>
 80081bc:	4632      	mov	r2, r6
 80081be:	4604      	mov	r4, r0
 80081c0:	460d      	mov	r5, r1
 80081c2:	463b      	mov	r3, r7
 80081c4:	4640      	mov	r0, r8
 80081c6:	4649      	mov	r1, r9
 80081c8:	f7f8 f9ba 	bl	8000540 <__aeabi_dmul>
 80081cc:	4632      	mov	r2, r6
 80081ce:	463b      	mov	r3, r7
 80081d0:	f7f8 f800 	bl	80001d4 <__adddf3>
 80081d4:	4602      	mov	r2, r0
 80081d6:	460b      	mov	r3, r1
 80081d8:	4620      	mov	r0, r4
 80081da:	4629      	mov	r1, r5
 80081dc:	f7f7 fff8 	bl	80001d0 <__aeabi_dsub>
 80081e0:	4642      	mov	r2, r8
 80081e2:	464b      	mov	r3, r9
 80081e4:	f7f7 fff4 	bl	80001d0 <__aeabi_dsub>
 80081e8:	460b      	mov	r3, r1
 80081ea:	4602      	mov	r2, r0
 80081ec:	493a      	ldr	r1, [pc, #232]	; (80082d8 <__ieee754_pow+0xa48>)
 80081ee:	2000      	movs	r0, #0
 80081f0:	f7f7 ffee 	bl	80001d0 <__aeabi_dsub>
 80081f4:	ec41 0b10 	vmov	d0, r0, r1
 80081f8:	ee10 3a90 	vmov	r3, s1
 80081fc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008200:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008204:	da2b      	bge.n	800825e <__ieee754_pow+0x9ce>
 8008206:	4650      	mov	r0, sl
 8008208:	f001 fa6e 	bl	80096e8 <scalbn>
 800820c:	ec51 0b10 	vmov	r0, r1, d0
 8008210:	ec53 2b18 	vmov	r2, r3, d8
 8008214:	f7ff bbed 	b.w	80079f2 <__ieee754_pow+0x162>
 8008218:	4b30      	ldr	r3, [pc, #192]	; (80082dc <__ieee754_pow+0xa4c>)
 800821a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800821e:	429e      	cmp	r6, r3
 8008220:	f77f af0c 	ble.w	800803c <__ieee754_pow+0x7ac>
 8008224:	4b2e      	ldr	r3, [pc, #184]	; (80082e0 <__ieee754_pow+0xa50>)
 8008226:	440b      	add	r3, r1
 8008228:	4303      	orrs	r3, r0
 800822a:	d009      	beq.n	8008240 <__ieee754_pow+0x9b0>
 800822c:	ec51 0b18 	vmov	r0, r1, d8
 8008230:	2200      	movs	r2, #0
 8008232:	2300      	movs	r3, #0
 8008234:	f7f8 fbf6 	bl	8000a24 <__aeabi_dcmplt>
 8008238:	3800      	subs	r0, #0
 800823a:	bf18      	it	ne
 800823c:	2001      	movne	r0, #1
 800823e:	e447      	b.n	8007ad0 <__ieee754_pow+0x240>
 8008240:	4622      	mov	r2, r4
 8008242:	462b      	mov	r3, r5
 8008244:	f7f7 ffc4 	bl	80001d0 <__aeabi_dsub>
 8008248:	4642      	mov	r2, r8
 800824a:	464b      	mov	r3, r9
 800824c:	f7f8 fbfe 	bl	8000a4c <__aeabi_dcmpge>
 8008250:	2800      	cmp	r0, #0
 8008252:	f43f aef3 	beq.w	800803c <__ieee754_pow+0x7ac>
 8008256:	e7e9      	b.n	800822c <__ieee754_pow+0x99c>
 8008258:	f04f 0a00 	mov.w	sl, #0
 800825c:	e71a      	b.n	8008094 <__ieee754_pow+0x804>
 800825e:	ec51 0b10 	vmov	r0, r1, d0
 8008262:	4619      	mov	r1, r3
 8008264:	e7d4      	b.n	8008210 <__ieee754_pow+0x980>
 8008266:	491c      	ldr	r1, [pc, #112]	; (80082d8 <__ieee754_pow+0xa48>)
 8008268:	2000      	movs	r0, #0
 800826a:	f7ff bb30 	b.w	80078ce <__ieee754_pow+0x3e>
 800826e:	2000      	movs	r0, #0
 8008270:	2100      	movs	r1, #0
 8008272:	f7ff bb2c 	b.w	80078ce <__ieee754_pow+0x3e>
 8008276:	4630      	mov	r0, r6
 8008278:	4639      	mov	r1, r7
 800827a:	f7ff bb28 	b.w	80078ce <__ieee754_pow+0x3e>
 800827e:	9204      	str	r2, [sp, #16]
 8008280:	f7ff bb7a 	b.w	8007978 <__ieee754_pow+0xe8>
 8008284:	2300      	movs	r3, #0
 8008286:	f7ff bb64 	b.w	8007952 <__ieee754_pow+0xc2>
 800828a:	bf00      	nop
 800828c:	f3af 8000 	nop.w
 8008290:	00000000 	.word	0x00000000
 8008294:	3fe62e43 	.word	0x3fe62e43
 8008298:	fefa39ef 	.word	0xfefa39ef
 800829c:	3fe62e42 	.word	0x3fe62e42
 80082a0:	0ca86c39 	.word	0x0ca86c39
 80082a4:	be205c61 	.word	0xbe205c61
 80082a8:	72bea4d0 	.word	0x72bea4d0
 80082ac:	3e663769 	.word	0x3e663769
 80082b0:	c5d26bf1 	.word	0xc5d26bf1
 80082b4:	3ebbbd41 	.word	0x3ebbbd41
 80082b8:	af25de2c 	.word	0xaf25de2c
 80082bc:	3f11566a 	.word	0x3f11566a
 80082c0:	16bebd93 	.word	0x16bebd93
 80082c4:	3f66c16c 	.word	0x3f66c16c
 80082c8:	5555553e 	.word	0x5555553e
 80082cc:	3fc55555 	.word	0x3fc55555
 80082d0:	3fe00000 	.word	0x3fe00000
 80082d4:	000fffff 	.word	0x000fffff
 80082d8:	3ff00000 	.word	0x3ff00000
 80082dc:	4090cbff 	.word	0x4090cbff
 80082e0:	3f6f3400 	.word	0x3f6f3400
 80082e4:	652b82fe 	.word	0x652b82fe
 80082e8:	3c971547 	.word	0x3c971547
 80082ec:	00000000 	.word	0x00000000

080082f0 <__ieee754_rem_pio2>:
 80082f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082f4:	ed2d 8b02 	vpush	{d8}
 80082f8:	ec55 4b10 	vmov	r4, r5, d0
 80082fc:	4bca      	ldr	r3, [pc, #808]	; (8008628 <__ieee754_rem_pio2+0x338>)
 80082fe:	b08b      	sub	sp, #44	; 0x2c
 8008300:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8008304:	4598      	cmp	r8, r3
 8008306:	4682      	mov	sl, r0
 8008308:	9502      	str	r5, [sp, #8]
 800830a:	dc08      	bgt.n	800831e <__ieee754_rem_pio2+0x2e>
 800830c:	2200      	movs	r2, #0
 800830e:	2300      	movs	r3, #0
 8008310:	ed80 0b00 	vstr	d0, [r0]
 8008314:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008318:	f04f 0b00 	mov.w	fp, #0
 800831c:	e028      	b.n	8008370 <__ieee754_rem_pio2+0x80>
 800831e:	4bc3      	ldr	r3, [pc, #780]	; (800862c <__ieee754_rem_pio2+0x33c>)
 8008320:	4598      	cmp	r8, r3
 8008322:	dc78      	bgt.n	8008416 <__ieee754_rem_pio2+0x126>
 8008324:	9b02      	ldr	r3, [sp, #8]
 8008326:	4ec2      	ldr	r6, [pc, #776]	; (8008630 <__ieee754_rem_pio2+0x340>)
 8008328:	2b00      	cmp	r3, #0
 800832a:	ee10 0a10 	vmov	r0, s0
 800832e:	a3b0      	add	r3, pc, #704	; (adr r3, 80085f0 <__ieee754_rem_pio2+0x300>)
 8008330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008334:	4629      	mov	r1, r5
 8008336:	dd39      	ble.n	80083ac <__ieee754_rem_pio2+0xbc>
 8008338:	f7f7 ff4a 	bl	80001d0 <__aeabi_dsub>
 800833c:	45b0      	cmp	r8, r6
 800833e:	4604      	mov	r4, r0
 8008340:	460d      	mov	r5, r1
 8008342:	d01b      	beq.n	800837c <__ieee754_rem_pio2+0x8c>
 8008344:	a3ac      	add	r3, pc, #688	; (adr r3, 80085f8 <__ieee754_rem_pio2+0x308>)
 8008346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834a:	f7f7 ff41 	bl	80001d0 <__aeabi_dsub>
 800834e:	4602      	mov	r2, r0
 8008350:	460b      	mov	r3, r1
 8008352:	e9ca 2300 	strd	r2, r3, [sl]
 8008356:	4620      	mov	r0, r4
 8008358:	4629      	mov	r1, r5
 800835a:	f7f7 ff39 	bl	80001d0 <__aeabi_dsub>
 800835e:	a3a6      	add	r3, pc, #664	; (adr r3, 80085f8 <__ieee754_rem_pio2+0x308>)
 8008360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008364:	f7f7 ff34 	bl	80001d0 <__aeabi_dsub>
 8008368:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800836c:	f04f 0b01 	mov.w	fp, #1
 8008370:	4658      	mov	r0, fp
 8008372:	b00b      	add	sp, #44	; 0x2c
 8008374:	ecbd 8b02 	vpop	{d8}
 8008378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800837c:	a3a0      	add	r3, pc, #640	; (adr r3, 8008600 <__ieee754_rem_pio2+0x310>)
 800837e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008382:	f7f7 ff25 	bl	80001d0 <__aeabi_dsub>
 8008386:	a3a0      	add	r3, pc, #640	; (adr r3, 8008608 <__ieee754_rem_pio2+0x318>)
 8008388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800838c:	4604      	mov	r4, r0
 800838e:	460d      	mov	r5, r1
 8008390:	f7f7 ff1e 	bl	80001d0 <__aeabi_dsub>
 8008394:	4602      	mov	r2, r0
 8008396:	460b      	mov	r3, r1
 8008398:	e9ca 2300 	strd	r2, r3, [sl]
 800839c:	4620      	mov	r0, r4
 800839e:	4629      	mov	r1, r5
 80083a0:	f7f7 ff16 	bl	80001d0 <__aeabi_dsub>
 80083a4:	a398      	add	r3, pc, #608	; (adr r3, 8008608 <__ieee754_rem_pio2+0x318>)
 80083a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083aa:	e7db      	b.n	8008364 <__ieee754_rem_pio2+0x74>
 80083ac:	f7f7 ff12 	bl	80001d4 <__adddf3>
 80083b0:	45b0      	cmp	r8, r6
 80083b2:	4604      	mov	r4, r0
 80083b4:	460d      	mov	r5, r1
 80083b6:	d016      	beq.n	80083e6 <__ieee754_rem_pio2+0xf6>
 80083b8:	a38f      	add	r3, pc, #572	; (adr r3, 80085f8 <__ieee754_rem_pio2+0x308>)
 80083ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083be:	f7f7 ff09 	bl	80001d4 <__adddf3>
 80083c2:	4602      	mov	r2, r0
 80083c4:	460b      	mov	r3, r1
 80083c6:	e9ca 2300 	strd	r2, r3, [sl]
 80083ca:	4620      	mov	r0, r4
 80083cc:	4629      	mov	r1, r5
 80083ce:	f7f7 feff 	bl	80001d0 <__aeabi_dsub>
 80083d2:	a389      	add	r3, pc, #548	; (adr r3, 80085f8 <__ieee754_rem_pio2+0x308>)
 80083d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d8:	f7f7 fefc 	bl	80001d4 <__adddf3>
 80083dc:	f04f 3bff 	mov.w	fp, #4294967295
 80083e0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80083e4:	e7c4      	b.n	8008370 <__ieee754_rem_pio2+0x80>
 80083e6:	a386      	add	r3, pc, #536	; (adr r3, 8008600 <__ieee754_rem_pio2+0x310>)
 80083e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ec:	f7f7 fef2 	bl	80001d4 <__adddf3>
 80083f0:	a385      	add	r3, pc, #532	; (adr r3, 8008608 <__ieee754_rem_pio2+0x318>)
 80083f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f6:	4604      	mov	r4, r0
 80083f8:	460d      	mov	r5, r1
 80083fa:	f7f7 feeb 	bl	80001d4 <__adddf3>
 80083fe:	4602      	mov	r2, r0
 8008400:	460b      	mov	r3, r1
 8008402:	e9ca 2300 	strd	r2, r3, [sl]
 8008406:	4620      	mov	r0, r4
 8008408:	4629      	mov	r1, r5
 800840a:	f7f7 fee1 	bl	80001d0 <__aeabi_dsub>
 800840e:	a37e      	add	r3, pc, #504	; (adr r3, 8008608 <__ieee754_rem_pio2+0x318>)
 8008410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008414:	e7e0      	b.n	80083d8 <__ieee754_rem_pio2+0xe8>
 8008416:	4b87      	ldr	r3, [pc, #540]	; (8008634 <__ieee754_rem_pio2+0x344>)
 8008418:	4598      	cmp	r8, r3
 800841a:	f300 80d9 	bgt.w	80085d0 <__ieee754_rem_pio2+0x2e0>
 800841e:	f001 f8cf 	bl	80095c0 <fabs>
 8008422:	ec55 4b10 	vmov	r4, r5, d0
 8008426:	ee10 0a10 	vmov	r0, s0
 800842a:	a379      	add	r3, pc, #484	; (adr r3, 8008610 <__ieee754_rem_pio2+0x320>)
 800842c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008430:	4629      	mov	r1, r5
 8008432:	f7f8 f885 	bl	8000540 <__aeabi_dmul>
 8008436:	4b80      	ldr	r3, [pc, #512]	; (8008638 <__ieee754_rem_pio2+0x348>)
 8008438:	2200      	movs	r2, #0
 800843a:	f7f7 fecb 	bl	80001d4 <__adddf3>
 800843e:	f7f8 fb2f 	bl	8000aa0 <__aeabi_d2iz>
 8008442:	4683      	mov	fp, r0
 8008444:	f7f8 f812 	bl	800046c <__aeabi_i2d>
 8008448:	4602      	mov	r2, r0
 800844a:	460b      	mov	r3, r1
 800844c:	ec43 2b18 	vmov	d8, r2, r3
 8008450:	a367      	add	r3, pc, #412	; (adr r3, 80085f0 <__ieee754_rem_pio2+0x300>)
 8008452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008456:	f7f8 f873 	bl	8000540 <__aeabi_dmul>
 800845a:	4602      	mov	r2, r0
 800845c:	460b      	mov	r3, r1
 800845e:	4620      	mov	r0, r4
 8008460:	4629      	mov	r1, r5
 8008462:	f7f7 feb5 	bl	80001d0 <__aeabi_dsub>
 8008466:	a364      	add	r3, pc, #400	; (adr r3, 80085f8 <__ieee754_rem_pio2+0x308>)
 8008468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846c:	4606      	mov	r6, r0
 800846e:	460f      	mov	r7, r1
 8008470:	ec51 0b18 	vmov	r0, r1, d8
 8008474:	f7f8 f864 	bl	8000540 <__aeabi_dmul>
 8008478:	f1bb 0f1f 	cmp.w	fp, #31
 800847c:	4604      	mov	r4, r0
 800847e:	460d      	mov	r5, r1
 8008480:	dc0d      	bgt.n	800849e <__ieee754_rem_pio2+0x1ae>
 8008482:	4b6e      	ldr	r3, [pc, #440]	; (800863c <__ieee754_rem_pio2+0x34c>)
 8008484:	f10b 32ff 	add.w	r2, fp, #4294967295
 8008488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800848c:	4543      	cmp	r3, r8
 800848e:	d006      	beq.n	800849e <__ieee754_rem_pio2+0x1ae>
 8008490:	4622      	mov	r2, r4
 8008492:	462b      	mov	r3, r5
 8008494:	4630      	mov	r0, r6
 8008496:	4639      	mov	r1, r7
 8008498:	f7f7 fe9a 	bl	80001d0 <__aeabi_dsub>
 800849c:	e00f      	b.n	80084be <__ieee754_rem_pio2+0x1ce>
 800849e:	462b      	mov	r3, r5
 80084a0:	4622      	mov	r2, r4
 80084a2:	4630      	mov	r0, r6
 80084a4:	4639      	mov	r1, r7
 80084a6:	f7f7 fe93 	bl	80001d0 <__aeabi_dsub>
 80084aa:	ea4f 5328 	mov.w	r3, r8, asr #20
 80084ae:	9303      	str	r3, [sp, #12]
 80084b0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80084b4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80084b8:	f1b8 0f10 	cmp.w	r8, #16
 80084bc:	dc02      	bgt.n	80084c4 <__ieee754_rem_pio2+0x1d4>
 80084be:	e9ca 0100 	strd	r0, r1, [sl]
 80084c2:	e039      	b.n	8008538 <__ieee754_rem_pio2+0x248>
 80084c4:	a34e      	add	r3, pc, #312	; (adr r3, 8008600 <__ieee754_rem_pio2+0x310>)
 80084c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ca:	ec51 0b18 	vmov	r0, r1, d8
 80084ce:	f7f8 f837 	bl	8000540 <__aeabi_dmul>
 80084d2:	4604      	mov	r4, r0
 80084d4:	460d      	mov	r5, r1
 80084d6:	4602      	mov	r2, r0
 80084d8:	460b      	mov	r3, r1
 80084da:	4630      	mov	r0, r6
 80084dc:	4639      	mov	r1, r7
 80084de:	f7f7 fe77 	bl	80001d0 <__aeabi_dsub>
 80084e2:	4602      	mov	r2, r0
 80084e4:	460b      	mov	r3, r1
 80084e6:	4680      	mov	r8, r0
 80084e8:	4689      	mov	r9, r1
 80084ea:	4630      	mov	r0, r6
 80084ec:	4639      	mov	r1, r7
 80084ee:	f7f7 fe6f 	bl	80001d0 <__aeabi_dsub>
 80084f2:	4622      	mov	r2, r4
 80084f4:	462b      	mov	r3, r5
 80084f6:	f7f7 fe6b 	bl	80001d0 <__aeabi_dsub>
 80084fa:	a343      	add	r3, pc, #268	; (adr r3, 8008608 <__ieee754_rem_pio2+0x318>)
 80084fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008500:	4604      	mov	r4, r0
 8008502:	460d      	mov	r5, r1
 8008504:	ec51 0b18 	vmov	r0, r1, d8
 8008508:	f7f8 f81a 	bl	8000540 <__aeabi_dmul>
 800850c:	4622      	mov	r2, r4
 800850e:	462b      	mov	r3, r5
 8008510:	f7f7 fe5e 	bl	80001d0 <__aeabi_dsub>
 8008514:	4602      	mov	r2, r0
 8008516:	460b      	mov	r3, r1
 8008518:	4604      	mov	r4, r0
 800851a:	460d      	mov	r5, r1
 800851c:	4640      	mov	r0, r8
 800851e:	4649      	mov	r1, r9
 8008520:	f7f7 fe56 	bl	80001d0 <__aeabi_dsub>
 8008524:	9a03      	ldr	r2, [sp, #12]
 8008526:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800852a:	1ad3      	subs	r3, r2, r3
 800852c:	2b31      	cmp	r3, #49	; 0x31
 800852e:	dc24      	bgt.n	800857a <__ieee754_rem_pio2+0x28a>
 8008530:	e9ca 0100 	strd	r0, r1, [sl]
 8008534:	4646      	mov	r6, r8
 8008536:	464f      	mov	r7, r9
 8008538:	e9da 8900 	ldrd	r8, r9, [sl]
 800853c:	4630      	mov	r0, r6
 800853e:	4642      	mov	r2, r8
 8008540:	464b      	mov	r3, r9
 8008542:	4639      	mov	r1, r7
 8008544:	f7f7 fe44 	bl	80001d0 <__aeabi_dsub>
 8008548:	462b      	mov	r3, r5
 800854a:	4622      	mov	r2, r4
 800854c:	f7f7 fe40 	bl	80001d0 <__aeabi_dsub>
 8008550:	9b02      	ldr	r3, [sp, #8]
 8008552:	2b00      	cmp	r3, #0
 8008554:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008558:	f6bf af0a 	bge.w	8008370 <__ieee754_rem_pio2+0x80>
 800855c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008560:	f8ca 3004 	str.w	r3, [sl, #4]
 8008564:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008568:	f8ca 8000 	str.w	r8, [sl]
 800856c:	f8ca 0008 	str.w	r0, [sl, #8]
 8008570:	f8ca 300c 	str.w	r3, [sl, #12]
 8008574:	f1cb 0b00 	rsb	fp, fp, #0
 8008578:	e6fa      	b.n	8008370 <__ieee754_rem_pio2+0x80>
 800857a:	a327      	add	r3, pc, #156	; (adr r3, 8008618 <__ieee754_rem_pio2+0x328>)
 800857c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008580:	ec51 0b18 	vmov	r0, r1, d8
 8008584:	f7f7 ffdc 	bl	8000540 <__aeabi_dmul>
 8008588:	4604      	mov	r4, r0
 800858a:	460d      	mov	r5, r1
 800858c:	4602      	mov	r2, r0
 800858e:	460b      	mov	r3, r1
 8008590:	4640      	mov	r0, r8
 8008592:	4649      	mov	r1, r9
 8008594:	f7f7 fe1c 	bl	80001d0 <__aeabi_dsub>
 8008598:	4602      	mov	r2, r0
 800859a:	460b      	mov	r3, r1
 800859c:	4606      	mov	r6, r0
 800859e:	460f      	mov	r7, r1
 80085a0:	4640      	mov	r0, r8
 80085a2:	4649      	mov	r1, r9
 80085a4:	f7f7 fe14 	bl	80001d0 <__aeabi_dsub>
 80085a8:	4622      	mov	r2, r4
 80085aa:	462b      	mov	r3, r5
 80085ac:	f7f7 fe10 	bl	80001d0 <__aeabi_dsub>
 80085b0:	a31b      	add	r3, pc, #108	; (adr r3, 8008620 <__ieee754_rem_pio2+0x330>)
 80085b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b6:	4604      	mov	r4, r0
 80085b8:	460d      	mov	r5, r1
 80085ba:	ec51 0b18 	vmov	r0, r1, d8
 80085be:	f7f7 ffbf 	bl	8000540 <__aeabi_dmul>
 80085c2:	4622      	mov	r2, r4
 80085c4:	462b      	mov	r3, r5
 80085c6:	f7f7 fe03 	bl	80001d0 <__aeabi_dsub>
 80085ca:	4604      	mov	r4, r0
 80085cc:	460d      	mov	r5, r1
 80085ce:	e75f      	b.n	8008490 <__ieee754_rem_pio2+0x1a0>
 80085d0:	4b1b      	ldr	r3, [pc, #108]	; (8008640 <__ieee754_rem_pio2+0x350>)
 80085d2:	4598      	cmp	r8, r3
 80085d4:	dd36      	ble.n	8008644 <__ieee754_rem_pio2+0x354>
 80085d6:	ee10 2a10 	vmov	r2, s0
 80085da:	462b      	mov	r3, r5
 80085dc:	4620      	mov	r0, r4
 80085de:	4629      	mov	r1, r5
 80085e0:	f7f7 fdf6 	bl	80001d0 <__aeabi_dsub>
 80085e4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80085e8:	e9ca 0100 	strd	r0, r1, [sl]
 80085ec:	e694      	b.n	8008318 <__ieee754_rem_pio2+0x28>
 80085ee:	bf00      	nop
 80085f0:	54400000 	.word	0x54400000
 80085f4:	3ff921fb 	.word	0x3ff921fb
 80085f8:	1a626331 	.word	0x1a626331
 80085fc:	3dd0b461 	.word	0x3dd0b461
 8008600:	1a600000 	.word	0x1a600000
 8008604:	3dd0b461 	.word	0x3dd0b461
 8008608:	2e037073 	.word	0x2e037073
 800860c:	3ba3198a 	.word	0x3ba3198a
 8008610:	6dc9c883 	.word	0x6dc9c883
 8008614:	3fe45f30 	.word	0x3fe45f30
 8008618:	2e000000 	.word	0x2e000000
 800861c:	3ba3198a 	.word	0x3ba3198a
 8008620:	252049c1 	.word	0x252049c1
 8008624:	397b839a 	.word	0x397b839a
 8008628:	3fe921fb 	.word	0x3fe921fb
 800862c:	4002d97b 	.word	0x4002d97b
 8008630:	3ff921fb 	.word	0x3ff921fb
 8008634:	413921fb 	.word	0x413921fb
 8008638:	3fe00000 	.word	0x3fe00000
 800863c:	0800a020 	.word	0x0800a020
 8008640:	7fefffff 	.word	0x7fefffff
 8008644:	ea4f 5428 	mov.w	r4, r8, asr #20
 8008648:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800864c:	ee10 0a10 	vmov	r0, s0
 8008650:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8008654:	ee10 6a10 	vmov	r6, s0
 8008658:	460f      	mov	r7, r1
 800865a:	f7f8 fa21 	bl	8000aa0 <__aeabi_d2iz>
 800865e:	f7f7 ff05 	bl	800046c <__aeabi_i2d>
 8008662:	4602      	mov	r2, r0
 8008664:	460b      	mov	r3, r1
 8008666:	4630      	mov	r0, r6
 8008668:	4639      	mov	r1, r7
 800866a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800866e:	f7f7 fdaf 	bl	80001d0 <__aeabi_dsub>
 8008672:	4b23      	ldr	r3, [pc, #140]	; (8008700 <__ieee754_rem_pio2+0x410>)
 8008674:	2200      	movs	r2, #0
 8008676:	f7f7 ff63 	bl	8000540 <__aeabi_dmul>
 800867a:	460f      	mov	r7, r1
 800867c:	4606      	mov	r6, r0
 800867e:	f7f8 fa0f 	bl	8000aa0 <__aeabi_d2iz>
 8008682:	f7f7 fef3 	bl	800046c <__aeabi_i2d>
 8008686:	4602      	mov	r2, r0
 8008688:	460b      	mov	r3, r1
 800868a:	4630      	mov	r0, r6
 800868c:	4639      	mov	r1, r7
 800868e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008692:	f7f7 fd9d 	bl	80001d0 <__aeabi_dsub>
 8008696:	4b1a      	ldr	r3, [pc, #104]	; (8008700 <__ieee754_rem_pio2+0x410>)
 8008698:	2200      	movs	r2, #0
 800869a:	f7f7 ff51 	bl	8000540 <__aeabi_dmul>
 800869e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80086a2:	ad04      	add	r5, sp, #16
 80086a4:	f04f 0803 	mov.w	r8, #3
 80086a8:	46a9      	mov	r9, r5
 80086aa:	2600      	movs	r6, #0
 80086ac:	2700      	movs	r7, #0
 80086ae:	4632      	mov	r2, r6
 80086b0:	463b      	mov	r3, r7
 80086b2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80086b6:	46c3      	mov	fp, r8
 80086b8:	3d08      	subs	r5, #8
 80086ba:	f108 38ff 	add.w	r8, r8, #4294967295
 80086be:	f7f8 f9a7 	bl	8000a10 <__aeabi_dcmpeq>
 80086c2:	2800      	cmp	r0, #0
 80086c4:	d1f3      	bne.n	80086ae <__ieee754_rem_pio2+0x3be>
 80086c6:	4b0f      	ldr	r3, [pc, #60]	; (8008704 <__ieee754_rem_pio2+0x414>)
 80086c8:	9301      	str	r3, [sp, #4]
 80086ca:	2302      	movs	r3, #2
 80086cc:	9300      	str	r3, [sp, #0]
 80086ce:	4622      	mov	r2, r4
 80086d0:	465b      	mov	r3, fp
 80086d2:	4651      	mov	r1, sl
 80086d4:	4648      	mov	r0, r9
 80086d6:	f000 f993 	bl	8008a00 <__kernel_rem_pio2>
 80086da:	9b02      	ldr	r3, [sp, #8]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	4683      	mov	fp, r0
 80086e0:	f6bf ae46 	bge.w	8008370 <__ieee754_rem_pio2+0x80>
 80086e4:	e9da 2100 	ldrd	r2, r1, [sl]
 80086e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80086ec:	e9ca 2300 	strd	r2, r3, [sl]
 80086f0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80086f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80086f8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80086fc:	e73a      	b.n	8008574 <__ieee754_rem_pio2+0x284>
 80086fe:	bf00      	nop
 8008700:	41700000 	.word	0x41700000
 8008704:	0800a0a0 	.word	0x0800a0a0

08008708 <__ieee754_sqrt>:
 8008708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800870c:	ec55 4b10 	vmov	r4, r5, d0
 8008710:	4e55      	ldr	r6, [pc, #340]	; (8008868 <__ieee754_sqrt+0x160>)
 8008712:	43ae      	bics	r6, r5
 8008714:	ee10 0a10 	vmov	r0, s0
 8008718:	ee10 3a10 	vmov	r3, s0
 800871c:	462a      	mov	r2, r5
 800871e:	4629      	mov	r1, r5
 8008720:	d110      	bne.n	8008744 <__ieee754_sqrt+0x3c>
 8008722:	ee10 2a10 	vmov	r2, s0
 8008726:	462b      	mov	r3, r5
 8008728:	f7f7 ff0a 	bl	8000540 <__aeabi_dmul>
 800872c:	4602      	mov	r2, r0
 800872e:	460b      	mov	r3, r1
 8008730:	4620      	mov	r0, r4
 8008732:	4629      	mov	r1, r5
 8008734:	f7f7 fd4e 	bl	80001d4 <__adddf3>
 8008738:	4604      	mov	r4, r0
 800873a:	460d      	mov	r5, r1
 800873c:	ec45 4b10 	vmov	d0, r4, r5
 8008740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008744:	2d00      	cmp	r5, #0
 8008746:	dc10      	bgt.n	800876a <__ieee754_sqrt+0x62>
 8008748:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800874c:	4330      	orrs	r0, r6
 800874e:	d0f5      	beq.n	800873c <__ieee754_sqrt+0x34>
 8008750:	b15d      	cbz	r5, 800876a <__ieee754_sqrt+0x62>
 8008752:	ee10 2a10 	vmov	r2, s0
 8008756:	462b      	mov	r3, r5
 8008758:	ee10 0a10 	vmov	r0, s0
 800875c:	f7f7 fd38 	bl	80001d0 <__aeabi_dsub>
 8008760:	4602      	mov	r2, r0
 8008762:	460b      	mov	r3, r1
 8008764:	f7f8 f816 	bl	8000794 <__aeabi_ddiv>
 8008768:	e7e6      	b.n	8008738 <__ieee754_sqrt+0x30>
 800876a:	1512      	asrs	r2, r2, #20
 800876c:	d074      	beq.n	8008858 <__ieee754_sqrt+0x150>
 800876e:	07d4      	lsls	r4, r2, #31
 8008770:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008774:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8008778:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800877c:	bf5e      	ittt	pl
 800877e:	0fda      	lsrpl	r2, r3, #31
 8008780:	005b      	lslpl	r3, r3, #1
 8008782:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8008786:	2400      	movs	r4, #0
 8008788:	0fda      	lsrs	r2, r3, #31
 800878a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800878e:	107f      	asrs	r7, r7, #1
 8008790:	005b      	lsls	r3, r3, #1
 8008792:	2516      	movs	r5, #22
 8008794:	4620      	mov	r0, r4
 8008796:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800879a:	1886      	adds	r6, r0, r2
 800879c:	428e      	cmp	r6, r1
 800879e:	bfde      	ittt	le
 80087a0:	1b89      	suble	r1, r1, r6
 80087a2:	18b0      	addle	r0, r6, r2
 80087a4:	18a4      	addle	r4, r4, r2
 80087a6:	0049      	lsls	r1, r1, #1
 80087a8:	3d01      	subs	r5, #1
 80087aa:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80087ae:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80087b2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80087b6:	d1f0      	bne.n	800879a <__ieee754_sqrt+0x92>
 80087b8:	462a      	mov	r2, r5
 80087ba:	f04f 0e20 	mov.w	lr, #32
 80087be:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80087c2:	4281      	cmp	r1, r0
 80087c4:	eb06 0c05 	add.w	ip, r6, r5
 80087c8:	dc02      	bgt.n	80087d0 <__ieee754_sqrt+0xc8>
 80087ca:	d113      	bne.n	80087f4 <__ieee754_sqrt+0xec>
 80087cc:	459c      	cmp	ip, r3
 80087ce:	d811      	bhi.n	80087f4 <__ieee754_sqrt+0xec>
 80087d0:	f1bc 0f00 	cmp.w	ip, #0
 80087d4:	eb0c 0506 	add.w	r5, ip, r6
 80087d8:	da43      	bge.n	8008862 <__ieee754_sqrt+0x15a>
 80087da:	2d00      	cmp	r5, #0
 80087dc:	db41      	blt.n	8008862 <__ieee754_sqrt+0x15a>
 80087de:	f100 0801 	add.w	r8, r0, #1
 80087e2:	1a09      	subs	r1, r1, r0
 80087e4:	459c      	cmp	ip, r3
 80087e6:	bf88      	it	hi
 80087e8:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80087ec:	eba3 030c 	sub.w	r3, r3, ip
 80087f0:	4432      	add	r2, r6
 80087f2:	4640      	mov	r0, r8
 80087f4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80087f8:	f1be 0e01 	subs.w	lr, lr, #1
 80087fc:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8008800:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008804:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008808:	d1db      	bne.n	80087c2 <__ieee754_sqrt+0xba>
 800880a:	430b      	orrs	r3, r1
 800880c:	d006      	beq.n	800881c <__ieee754_sqrt+0x114>
 800880e:	1c50      	adds	r0, r2, #1
 8008810:	bf13      	iteet	ne
 8008812:	3201      	addne	r2, #1
 8008814:	3401      	addeq	r4, #1
 8008816:	4672      	moveq	r2, lr
 8008818:	f022 0201 	bicne.w	r2, r2, #1
 800881c:	1063      	asrs	r3, r4, #1
 800881e:	0852      	lsrs	r2, r2, #1
 8008820:	07e1      	lsls	r1, r4, #31
 8008822:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008826:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800882a:	bf48      	it	mi
 800882c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008830:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008834:	4614      	mov	r4, r2
 8008836:	e781      	b.n	800873c <__ieee754_sqrt+0x34>
 8008838:	0ad9      	lsrs	r1, r3, #11
 800883a:	3815      	subs	r0, #21
 800883c:	055b      	lsls	r3, r3, #21
 800883e:	2900      	cmp	r1, #0
 8008840:	d0fa      	beq.n	8008838 <__ieee754_sqrt+0x130>
 8008842:	02cd      	lsls	r5, r1, #11
 8008844:	d50a      	bpl.n	800885c <__ieee754_sqrt+0x154>
 8008846:	f1c2 0420 	rsb	r4, r2, #32
 800884a:	fa23 f404 	lsr.w	r4, r3, r4
 800884e:	1e55      	subs	r5, r2, #1
 8008850:	4093      	lsls	r3, r2
 8008852:	4321      	orrs	r1, r4
 8008854:	1b42      	subs	r2, r0, r5
 8008856:	e78a      	b.n	800876e <__ieee754_sqrt+0x66>
 8008858:	4610      	mov	r0, r2
 800885a:	e7f0      	b.n	800883e <__ieee754_sqrt+0x136>
 800885c:	0049      	lsls	r1, r1, #1
 800885e:	3201      	adds	r2, #1
 8008860:	e7ef      	b.n	8008842 <__ieee754_sqrt+0x13a>
 8008862:	4680      	mov	r8, r0
 8008864:	e7bd      	b.n	80087e2 <__ieee754_sqrt+0xda>
 8008866:	bf00      	nop
 8008868:	7ff00000 	.word	0x7ff00000
 800886c:	00000000 	.word	0x00000000

08008870 <__kernel_cos>:
 8008870:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008874:	ec57 6b10 	vmov	r6, r7, d0
 8008878:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800887c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008880:	ed8d 1b00 	vstr	d1, [sp]
 8008884:	da07      	bge.n	8008896 <__kernel_cos+0x26>
 8008886:	ee10 0a10 	vmov	r0, s0
 800888a:	4639      	mov	r1, r7
 800888c:	f7f8 f908 	bl	8000aa0 <__aeabi_d2iz>
 8008890:	2800      	cmp	r0, #0
 8008892:	f000 8088 	beq.w	80089a6 <__kernel_cos+0x136>
 8008896:	4632      	mov	r2, r6
 8008898:	463b      	mov	r3, r7
 800889a:	4630      	mov	r0, r6
 800889c:	4639      	mov	r1, r7
 800889e:	f7f7 fe4f 	bl	8000540 <__aeabi_dmul>
 80088a2:	4b51      	ldr	r3, [pc, #324]	; (80089e8 <__kernel_cos+0x178>)
 80088a4:	2200      	movs	r2, #0
 80088a6:	4604      	mov	r4, r0
 80088a8:	460d      	mov	r5, r1
 80088aa:	f7f7 fe49 	bl	8000540 <__aeabi_dmul>
 80088ae:	a340      	add	r3, pc, #256	; (adr r3, 80089b0 <__kernel_cos+0x140>)
 80088b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b4:	4682      	mov	sl, r0
 80088b6:	468b      	mov	fp, r1
 80088b8:	4620      	mov	r0, r4
 80088ba:	4629      	mov	r1, r5
 80088bc:	f7f7 fe40 	bl	8000540 <__aeabi_dmul>
 80088c0:	a33d      	add	r3, pc, #244	; (adr r3, 80089b8 <__kernel_cos+0x148>)
 80088c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c6:	f7f7 fc85 	bl	80001d4 <__adddf3>
 80088ca:	4622      	mov	r2, r4
 80088cc:	462b      	mov	r3, r5
 80088ce:	f7f7 fe37 	bl	8000540 <__aeabi_dmul>
 80088d2:	a33b      	add	r3, pc, #236	; (adr r3, 80089c0 <__kernel_cos+0x150>)
 80088d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d8:	f7f7 fc7a 	bl	80001d0 <__aeabi_dsub>
 80088dc:	4622      	mov	r2, r4
 80088de:	462b      	mov	r3, r5
 80088e0:	f7f7 fe2e 	bl	8000540 <__aeabi_dmul>
 80088e4:	a338      	add	r3, pc, #224	; (adr r3, 80089c8 <__kernel_cos+0x158>)
 80088e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ea:	f7f7 fc73 	bl	80001d4 <__adddf3>
 80088ee:	4622      	mov	r2, r4
 80088f0:	462b      	mov	r3, r5
 80088f2:	f7f7 fe25 	bl	8000540 <__aeabi_dmul>
 80088f6:	a336      	add	r3, pc, #216	; (adr r3, 80089d0 <__kernel_cos+0x160>)
 80088f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088fc:	f7f7 fc68 	bl	80001d0 <__aeabi_dsub>
 8008900:	4622      	mov	r2, r4
 8008902:	462b      	mov	r3, r5
 8008904:	f7f7 fe1c 	bl	8000540 <__aeabi_dmul>
 8008908:	a333      	add	r3, pc, #204	; (adr r3, 80089d8 <__kernel_cos+0x168>)
 800890a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800890e:	f7f7 fc61 	bl	80001d4 <__adddf3>
 8008912:	4622      	mov	r2, r4
 8008914:	462b      	mov	r3, r5
 8008916:	f7f7 fe13 	bl	8000540 <__aeabi_dmul>
 800891a:	4622      	mov	r2, r4
 800891c:	462b      	mov	r3, r5
 800891e:	f7f7 fe0f 	bl	8000540 <__aeabi_dmul>
 8008922:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008926:	4604      	mov	r4, r0
 8008928:	460d      	mov	r5, r1
 800892a:	4630      	mov	r0, r6
 800892c:	4639      	mov	r1, r7
 800892e:	f7f7 fe07 	bl	8000540 <__aeabi_dmul>
 8008932:	460b      	mov	r3, r1
 8008934:	4602      	mov	r2, r0
 8008936:	4629      	mov	r1, r5
 8008938:	4620      	mov	r0, r4
 800893a:	f7f7 fc49 	bl	80001d0 <__aeabi_dsub>
 800893e:	4b2b      	ldr	r3, [pc, #172]	; (80089ec <__kernel_cos+0x17c>)
 8008940:	4598      	cmp	r8, r3
 8008942:	4606      	mov	r6, r0
 8008944:	460f      	mov	r7, r1
 8008946:	dc10      	bgt.n	800896a <__kernel_cos+0xfa>
 8008948:	4602      	mov	r2, r0
 800894a:	460b      	mov	r3, r1
 800894c:	4650      	mov	r0, sl
 800894e:	4659      	mov	r1, fp
 8008950:	f7f7 fc3e 	bl	80001d0 <__aeabi_dsub>
 8008954:	460b      	mov	r3, r1
 8008956:	4926      	ldr	r1, [pc, #152]	; (80089f0 <__kernel_cos+0x180>)
 8008958:	4602      	mov	r2, r0
 800895a:	2000      	movs	r0, #0
 800895c:	f7f7 fc38 	bl	80001d0 <__aeabi_dsub>
 8008960:	ec41 0b10 	vmov	d0, r0, r1
 8008964:	b003      	add	sp, #12
 8008966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800896a:	4b22      	ldr	r3, [pc, #136]	; (80089f4 <__kernel_cos+0x184>)
 800896c:	4920      	ldr	r1, [pc, #128]	; (80089f0 <__kernel_cos+0x180>)
 800896e:	4598      	cmp	r8, r3
 8008970:	bfcc      	ite	gt
 8008972:	4d21      	ldrgt	r5, [pc, #132]	; (80089f8 <__kernel_cos+0x188>)
 8008974:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008978:	2400      	movs	r4, #0
 800897a:	4622      	mov	r2, r4
 800897c:	462b      	mov	r3, r5
 800897e:	2000      	movs	r0, #0
 8008980:	f7f7 fc26 	bl	80001d0 <__aeabi_dsub>
 8008984:	4622      	mov	r2, r4
 8008986:	4680      	mov	r8, r0
 8008988:	4689      	mov	r9, r1
 800898a:	462b      	mov	r3, r5
 800898c:	4650      	mov	r0, sl
 800898e:	4659      	mov	r1, fp
 8008990:	f7f7 fc1e 	bl	80001d0 <__aeabi_dsub>
 8008994:	4632      	mov	r2, r6
 8008996:	463b      	mov	r3, r7
 8008998:	f7f7 fc1a 	bl	80001d0 <__aeabi_dsub>
 800899c:	4602      	mov	r2, r0
 800899e:	460b      	mov	r3, r1
 80089a0:	4640      	mov	r0, r8
 80089a2:	4649      	mov	r1, r9
 80089a4:	e7da      	b.n	800895c <__kernel_cos+0xec>
 80089a6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80089e0 <__kernel_cos+0x170>
 80089aa:	e7db      	b.n	8008964 <__kernel_cos+0xf4>
 80089ac:	f3af 8000 	nop.w
 80089b0:	be8838d4 	.word	0xbe8838d4
 80089b4:	bda8fae9 	.word	0xbda8fae9
 80089b8:	bdb4b1c4 	.word	0xbdb4b1c4
 80089bc:	3e21ee9e 	.word	0x3e21ee9e
 80089c0:	809c52ad 	.word	0x809c52ad
 80089c4:	3e927e4f 	.word	0x3e927e4f
 80089c8:	19cb1590 	.word	0x19cb1590
 80089cc:	3efa01a0 	.word	0x3efa01a0
 80089d0:	16c15177 	.word	0x16c15177
 80089d4:	3f56c16c 	.word	0x3f56c16c
 80089d8:	5555554c 	.word	0x5555554c
 80089dc:	3fa55555 	.word	0x3fa55555
 80089e0:	00000000 	.word	0x00000000
 80089e4:	3ff00000 	.word	0x3ff00000
 80089e8:	3fe00000 	.word	0x3fe00000
 80089ec:	3fd33332 	.word	0x3fd33332
 80089f0:	3ff00000 	.word	0x3ff00000
 80089f4:	3fe90000 	.word	0x3fe90000
 80089f8:	3fd20000 	.word	0x3fd20000
 80089fc:	00000000 	.word	0x00000000

08008a00 <__kernel_rem_pio2>:
 8008a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a04:	ed2d 8b02 	vpush	{d8}
 8008a08:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8008a0c:	f112 0f14 	cmn.w	r2, #20
 8008a10:	9308      	str	r3, [sp, #32]
 8008a12:	9101      	str	r1, [sp, #4]
 8008a14:	4bc4      	ldr	r3, [pc, #784]	; (8008d28 <__kernel_rem_pio2+0x328>)
 8008a16:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8008a18:	900b      	str	r0, [sp, #44]	; 0x2c
 8008a1a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008a1e:	9302      	str	r3, [sp, #8]
 8008a20:	9b08      	ldr	r3, [sp, #32]
 8008a22:	f103 33ff 	add.w	r3, r3, #4294967295
 8008a26:	bfa8      	it	ge
 8008a28:	1ed4      	subge	r4, r2, #3
 8008a2a:	9306      	str	r3, [sp, #24]
 8008a2c:	bfb2      	itee	lt
 8008a2e:	2400      	movlt	r4, #0
 8008a30:	2318      	movge	r3, #24
 8008a32:	fb94 f4f3 	sdivge	r4, r4, r3
 8008a36:	f06f 0317 	mvn.w	r3, #23
 8008a3a:	fb04 3303 	mla	r3, r4, r3, r3
 8008a3e:	eb03 0a02 	add.w	sl, r3, r2
 8008a42:	9b02      	ldr	r3, [sp, #8]
 8008a44:	9a06      	ldr	r2, [sp, #24]
 8008a46:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8008d18 <__kernel_rem_pio2+0x318>
 8008a4a:	eb03 0802 	add.w	r8, r3, r2
 8008a4e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008a50:	1aa7      	subs	r7, r4, r2
 8008a52:	ae22      	add	r6, sp, #136	; 0x88
 8008a54:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008a58:	2500      	movs	r5, #0
 8008a5a:	4545      	cmp	r5, r8
 8008a5c:	dd13      	ble.n	8008a86 <__kernel_rem_pio2+0x86>
 8008a5e:	9b08      	ldr	r3, [sp, #32]
 8008a60:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8008d18 <__kernel_rem_pio2+0x318>
 8008a64:	aa22      	add	r2, sp, #136	; 0x88
 8008a66:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008a6a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8008a6e:	f04f 0800 	mov.w	r8, #0
 8008a72:	9b02      	ldr	r3, [sp, #8]
 8008a74:	4598      	cmp	r8, r3
 8008a76:	dc2f      	bgt.n	8008ad8 <__kernel_rem_pio2+0xd8>
 8008a78:	ed8d 8b04 	vstr	d8, [sp, #16]
 8008a7c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8008a80:	462f      	mov	r7, r5
 8008a82:	2600      	movs	r6, #0
 8008a84:	e01b      	b.n	8008abe <__kernel_rem_pio2+0xbe>
 8008a86:	42ef      	cmn	r7, r5
 8008a88:	d407      	bmi.n	8008a9a <__kernel_rem_pio2+0x9a>
 8008a8a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008a8e:	f7f7 fced 	bl	800046c <__aeabi_i2d>
 8008a92:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008a96:	3501      	adds	r5, #1
 8008a98:	e7df      	b.n	8008a5a <__kernel_rem_pio2+0x5a>
 8008a9a:	ec51 0b18 	vmov	r0, r1, d8
 8008a9e:	e7f8      	b.n	8008a92 <__kernel_rem_pio2+0x92>
 8008aa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008aa4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008aa8:	f7f7 fd4a 	bl	8000540 <__aeabi_dmul>
 8008aac:	4602      	mov	r2, r0
 8008aae:	460b      	mov	r3, r1
 8008ab0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ab4:	f7f7 fb8e 	bl	80001d4 <__adddf3>
 8008ab8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008abc:	3601      	adds	r6, #1
 8008abe:	9b06      	ldr	r3, [sp, #24]
 8008ac0:	429e      	cmp	r6, r3
 8008ac2:	f1a7 0708 	sub.w	r7, r7, #8
 8008ac6:	ddeb      	ble.n	8008aa0 <__kernel_rem_pio2+0xa0>
 8008ac8:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008acc:	f108 0801 	add.w	r8, r8, #1
 8008ad0:	ecab 7b02 	vstmia	fp!, {d7}
 8008ad4:	3508      	adds	r5, #8
 8008ad6:	e7cc      	b.n	8008a72 <__kernel_rem_pio2+0x72>
 8008ad8:	9b02      	ldr	r3, [sp, #8]
 8008ada:	aa0e      	add	r2, sp, #56	; 0x38
 8008adc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008ae0:	930d      	str	r3, [sp, #52]	; 0x34
 8008ae2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008ae4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008ae8:	9c02      	ldr	r4, [sp, #8]
 8008aea:	930c      	str	r3, [sp, #48]	; 0x30
 8008aec:	00e3      	lsls	r3, r4, #3
 8008aee:	930a      	str	r3, [sp, #40]	; 0x28
 8008af0:	ab9a      	add	r3, sp, #616	; 0x268
 8008af2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008af6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8008afa:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8008afe:	ab72      	add	r3, sp, #456	; 0x1c8
 8008b00:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8008b04:	46c3      	mov	fp, r8
 8008b06:	46a1      	mov	r9, r4
 8008b08:	f1b9 0f00 	cmp.w	r9, #0
 8008b0c:	f1a5 0508 	sub.w	r5, r5, #8
 8008b10:	dc77      	bgt.n	8008c02 <__kernel_rem_pio2+0x202>
 8008b12:	ec47 6b10 	vmov	d0, r6, r7
 8008b16:	4650      	mov	r0, sl
 8008b18:	f000 fde6 	bl	80096e8 <scalbn>
 8008b1c:	ec57 6b10 	vmov	r6, r7, d0
 8008b20:	2200      	movs	r2, #0
 8008b22:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008b26:	ee10 0a10 	vmov	r0, s0
 8008b2a:	4639      	mov	r1, r7
 8008b2c:	f7f7 fd08 	bl	8000540 <__aeabi_dmul>
 8008b30:	ec41 0b10 	vmov	d0, r0, r1
 8008b34:	f000 fd58 	bl	80095e8 <floor>
 8008b38:	4b7c      	ldr	r3, [pc, #496]	; (8008d2c <__kernel_rem_pio2+0x32c>)
 8008b3a:	ec51 0b10 	vmov	r0, r1, d0
 8008b3e:	2200      	movs	r2, #0
 8008b40:	f7f7 fcfe 	bl	8000540 <__aeabi_dmul>
 8008b44:	4602      	mov	r2, r0
 8008b46:	460b      	mov	r3, r1
 8008b48:	4630      	mov	r0, r6
 8008b4a:	4639      	mov	r1, r7
 8008b4c:	f7f7 fb40 	bl	80001d0 <__aeabi_dsub>
 8008b50:	460f      	mov	r7, r1
 8008b52:	4606      	mov	r6, r0
 8008b54:	f7f7 ffa4 	bl	8000aa0 <__aeabi_d2iz>
 8008b58:	9004      	str	r0, [sp, #16]
 8008b5a:	f7f7 fc87 	bl	800046c <__aeabi_i2d>
 8008b5e:	4602      	mov	r2, r0
 8008b60:	460b      	mov	r3, r1
 8008b62:	4630      	mov	r0, r6
 8008b64:	4639      	mov	r1, r7
 8008b66:	f7f7 fb33 	bl	80001d0 <__aeabi_dsub>
 8008b6a:	f1ba 0f00 	cmp.w	sl, #0
 8008b6e:	4606      	mov	r6, r0
 8008b70:	460f      	mov	r7, r1
 8008b72:	dd6d      	ble.n	8008c50 <__kernel_rem_pio2+0x250>
 8008b74:	1e62      	subs	r2, r4, #1
 8008b76:	ab0e      	add	r3, sp, #56	; 0x38
 8008b78:	9d04      	ldr	r5, [sp, #16]
 8008b7a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008b7e:	f1ca 0118 	rsb	r1, sl, #24
 8008b82:	fa40 f301 	asr.w	r3, r0, r1
 8008b86:	441d      	add	r5, r3
 8008b88:	408b      	lsls	r3, r1
 8008b8a:	1ac0      	subs	r0, r0, r3
 8008b8c:	ab0e      	add	r3, sp, #56	; 0x38
 8008b8e:	9504      	str	r5, [sp, #16]
 8008b90:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008b94:	f1ca 0317 	rsb	r3, sl, #23
 8008b98:	fa40 fb03 	asr.w	fp, r0, r3
 8008b9c:	f1bb 0f00 	cmp.w	fp, #0
 8008ba0:	dd65      	ble.n	8008c6e <__kernel_rem_pio2+0x26e>
 8008ba2:	9b04      	ldr	r3, [sp, #16]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	3301      	adds	r3, #1
 8008ba8:	9304      	str	r3, [sp, #16]
 8008baa:	4615      	mov	r5, r2
 8008bac:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008bb0:	4294      	cmp	r4, r2
 8008bb2:	f300 809c 	bgt.w	8008cee <__kernel_rem_pio2+0x2ee>
 8008bb6:	f1ba 0f00 	cmp.w	sl, #0
 8008bba:	dd07      	ble.n	8008bcc <__kernel_rem_pio2+0x1cc>
 8008bbc:	f1ba 0f01 	cmp.w	sl, #1
 8008bc0:	f000 80c0 	beq.w	8008d44 <__kernel_rem_pio2+0x344>
 8008bc4:	f1ba 0f02 	cmp.w	sl, #2
 8008bc8:	f000 80c6 	beq.w	8008d58 <__kernel_rem_pio2+0x358>
 8008bcc:	f1bb 0f02 	cmp.w	fp, #2
 8008bd0:	d14d      	bne.n	8008c6e <__kernel_rem_pio2+0x26e>
 8008bd2:	4632      	mov	r2, r6
 8008bd4:	463b      	mov	r3, r7
 8008bd6:	4956      	ldr	r1, [pc, #344]	; (8008d30 <__kernel_rem_pio2+0x330>)
 8008bd8:	2000      	movs	r0, #0
 8008bda:	f7f7 faf9 	bl	80001d0 <__aeabi_dsub>
 8008bde:	4606      	mov	r6, r0
 8008be0:	460f      	mov	r7, r1
 8008be2:	2d00      	cmp	r5, #0
 8008be4:	d043      	beq.n	8008c6e <__kernel_rem_pio2+0x26e>
 8008be6:	4650      	mov	r0, sl
 8008be8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8008d20 <__kernel_rem_pio2+0x320>
 8008bec:	f000 fd7c 	bl	80096e8 <scalbn>
 8008bf0:	4630      	mov	r0, r6
 8008bf2:	4639      	mov	r1, r7
 8008bf4:	ec53 2b10 	vmov	r2, r3, d0
 8008bf8:	f7f7 faea 	bl	80001d0 <__aeabi_dsub>
 8008bfc:	4606      	mov	r6, r0
 8008bfe:	460f      	mov	r7, r1
 8008c00:	e035      	b.n	8008c6e <__kernel_rem_pio2+0x26e>
 8008c02:	4b4c      	ldr	r3, [pc, #304]	; (8008d34 <__kernel_rem_pio2+0x334>)
 8008c04:	2200      	movs	r2, #0
 8008c06:	4630      	mov	r0, r6
 8008c08:	4639      	mov	r1, r7
 8008c0a:	f7f7 fc99 	bl	8000540 <__aeabi_dmul>
 8008c0e:	f7f7 ff47 	bl	8000aa0 <__aeabi_d2iz>
 8008c12:	f7f7 fc2b 	bl	800046c <__aeabi_i2d>
 8008c16:	4602      	mov	r2, r0
 8008c18:	460b      	mov	r3, r1
 8008c1a:	ec43 2b18 	vmov	d8, r2, r3
 8008c1e:	4b46      	ldr	r3, [pc, #280]	; (8008d38 <__kernel_rem_pio2+0x338>)
 8008c20:	2200      	movs	r2, #0
 8008c22:	f7f7 fc8d 	bl	8000540 <__aeabi_dmul>
 8008c26:	4602      	mov	r2, r0
 8008c28:	460b      	mov	r3, r1
 8008c2a:	4630      	mov	r0, r6
 8008c2c:	4639      	mov	r1, r7
 8008c2e:	f7f7 facf 	bl	80001d0 <__aeabi_dsub>
 8008c32:	f7f7 ff35 	bl	8000aa0 <__aeabi_d2iz>
 8008c36:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008c3a:	f84b 0b04 	str.w	r0, [fp], #4
 8008c3e:	ec51 0b18 	vmov	r0, r1, d8
 8008c42:	f7f7 fac7 	bl	80001d4 <__adddf3>
 8008c46:	f109 39ff 	add.w	r9, r9, #4294967295
 8008c4a:	4606      	mov	r6, r0
 8008c4c:	460f      	mov	r7, r1
 8008c4e:	e75b      	b.n	8008b08 <__kernel_rem_pio2+0x108>
 8008c50:	d106      	bne.n	8008c60 <__kernel_rem_pio2+0x260>
 8008c52:	1e63      	subs	r3, r4, #1
 8008c54:	aa0e      	add	r2, sp, #56	; 0x38
 8008c56:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008c5a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8008c5e:	e79d      	b.n	8008b9c <__kernel_rem_pio2+0x19c>
 8008c60:	4b36      	ldr	r3, [pc, #216]	; (8008d3c <__kernel_rem_pio2+0x33c>)
 8008c62:	2200      	movs	r2, #0
 8008c64:	f7f7 fef2 	bl	8000a4c <__aeabi_dcmpge>
 8008c68:	2800      	cmp	r0, #0
 8008c6a:	d13d      	bne.n	8008ce8 <__kernel_rem_pio2+0x2e8>
 8008c6c:	4683      	mov	fp, r0
 8008c6e:	2200      	movs	r2, #0
 8008c70:	2300      	movs	r3, #0
 8008c72:	4630      	mov	r0, r6
 8008c74:	4639      	mov	r1, r7
 8008c76:	f7f7 fecb 	bl	8000a10 <__aeabi_dcmpeq>
 8008c7a:	2800      	cmp	r0, #0
 8008c7c:	f000 80c0 	beq.w	8008e00 <__kernel_rem_pio2+0x400>
 8008c80:	1e65      	subs	r5, r4, #1
 8008c82:	462b      	mov	r3, r5
 8008c84:	2200      	movs	r2, #0
 8008c86:	9902      	ldr	r1, [sp, #8]
 8008c88:	428b      	cmp	r3, r1
 8008c8a:	da6c      	bge.n	8008d66 <__kernel_rem_pio2+0x366>
 8008c8c:	2a00      	cmp	r2, #0
 8008c8e:	f000 8089 	beq.w	8008da4 <__kernel_rem_pio2+0x3a4>
 8008c92:	ab0e      	add	r3, sp, #56	; 0x38
 8008c94:	f1aa 0a18 	sub.w	sl, sl, #24
 8008c98:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	f000 80ad 	beq.w	8008dfc <__kernel_rem_pio2+0x3fc>
 8008ca2:	4650      	mov	r0, sl
 8008ca4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8008d20 <__kernel_rem_pio2+0x320>
 8008ca8:	f000 fd1e 	bl	80096e8 <scalbn>
 8008cac:	ab9a      	add	r3, sp, #616	; 0x268
 8008cae:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008cb2:	ec57 6b10 	vmov	r6, r7, d0
 8008cb6:	00ec      	lsls	r4, r5, #3
 8008cb8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8008cbc:	46aa      	mov	sl, r5
 8008cbe:	f1ba 0f00 	cmp.w	sl, #0
 8008cc2:	f280 80d6 	bge.w	8008e72 <__kernel_rem_pio2+0x472>
 8008cc6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8008d18 <__kernel_rem_pio2+0x318>
 8008cca:	462e      	mov	r6, r5
 8008ccc:	2e00      	cmp	r6, #0
 8008cce:	f2c0 8104 	blt.w	8008eda <__kernel_rem_pio2+0x4da>
 8008cd2:	ab72      	add	r3, sp, #456	; 0x1c8
 8008cd4:	ed8d 8b06 	vstr	d8, [sp, #24]
 8008cd8:	f8df a064 	ldr.w	sl, [pc, #100]	; 8008d40 <__kernel_rem_pio2+0x340>
 8008cdc:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8008ce0:	f04f 0800 	mov.w	r8, #0
 8008ce4:	1baf      	subs	r7, r5, r6
 8008ce6:	e0ea      	b.n	8008ebe <__kernel_rem_pio2+0x4be>
 8008ce8:	f04f 0b02 	mov.w	fp, #2
 8008cec:	e759      	b.n	8008ba2 <__kernel_rem_pio2+0x1a2>
 8008cee:	f8d8 3000 	ldr.w	r3, [r8]
 8008cf2:	b955      	cbnz	r5, 8008d0a <__kernel_rem_pio2+0x30a>
 8008cf4:	b123      	cbz	r3, 8008d00 <__kernel_rem_pio2+0x300>
 8008cf6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008cfa:	f8c8 3000 	str.w	r3, [r8]
 8008cfe:	2301      	movs	r3, #1
 8008d00:	3201      	adds	r2, #1
 8008d02:	f108 0804 	add.w	r8, r8, #4
 8008d06:	461d      	mov	r5, r3
 8008d08:	e752      	b.n	8008bb0 <__kernel_rem_pio2+0x1b0>
 8008d0a:	1acb      	subs	r3, r1, r3
 8008d0c:	f8c8 3000 	str.w	r3, [r8]
 8008d10:	462b      	mov	r3, r5
 8008d12:	e7f5      	b.n	8008d00 <__kernel_rem_pio2+0x300>
 8008d14:	f3af 8000 	nop.w
	...
 8008d24:	3ff00000 	.word	0x3ff00000
 8008d28:	0800a1e8 	.word	0x0800a1e8
 8008d2c:	40200000 	.word	0x40200000
 8008d30:	3ff00000 	.word	0x3ff00000
 8008d34:	3e700000 	.word	0x3e700000
 8008d38:	41700000 	.word	0x41700000
 8008d3c:	3fe00000 	.word	0x3fe00000
 8008d40:	0800a1a8 	.word	0x0800a1a8
 8008d44:	1e62      	subs	r2, r4, #1
 8008d46:	ab0e      	add	r3, sp, #56	; 0x38
 8008d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d4c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008d50:	a90e      	add	r1, sp, #56	; 0x38
 8008d52:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008d56:	e739      	b.n	8008bcc <__kernel_rem_pio2+0x1cc>
 8008d58:	1e62      	subs	r2, r4, #1
 8008d5a:	ab0e      	add	r3, sp, #56	; 0x38
 8008d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d60:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008d64:	e7f4      	b.n	8008d50 <__kernel_rem_pio2+0x350>
 8008d66:	a90e      	add	r1, sp, #56	; 0x38
 8008d68:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008d6c:	3b01      	subs	r3, #1
 8008d6e:	430a      	orrs	r2, r1
 8008d70:	e789      	b.n	8008c86 <__kernel_rem_pio2+0x286>
 8008d72:	3301      	adds	r3, #1
 8008d74:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008d78:	2900      	cmp	r1, #0
 8008d7a:	d0fa      	beq.n	8008d72 <__kernel_rem_pio2+0x372>
 8008d7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d7e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8008d82:	446a      	add	r2, sp
 8008d84:	3a98      	subs	r2, #152	; 0x98
 8008d86:	920a      	str	r2, [sp, #40]	; 0x28
 8008d88:	9a08      	ldr	r2, [sp, #32]
 8008d8a:	18e3      	adds	r3, r4, r3
 8008d8c:	18a5      	adds	r5, r4, r2
 8008d8e:	aa22      	add	r2, sp, #136	; 0x88
 8008d90:	f104 0801 	add.w	r8, r4, #1
 8008d94:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8008d98:	9304      	str	r3, [sp, #16]
 8008d9a:	9b04      	ldr	r3, [sp, #16]
 8008d9c:	4543      	cmp	r3, r8
 8008d9e:	da04      	bge.n	8008daa <__kernel_rem_pio2+0x3aa>
 8008da0:	461c      	mov	r4, r3
 8008da2:	e6a3      	b.n	8008aec <__kernel_rem_pio2+0xec>
 8008da4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008da6:	2301      	movs	r3, #1
 8008da8:	e7e4      	b.n	8008d74 <__kernel_rem_pio2+0x374>
 8008daa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008dac:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008db0:	f7f7 fb5c 	bl	800046c <__aeabi_i2d>
 8008db4:	e8e5 0102 	strd	r0, r1, [r5], #8
 8008db8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dba:	46ab      	mov	fp, r5
 8008dbc:	461c      	mov	r4, r3
 8008dbe:	f04f 0900 	mov.w	r9, #0
 8008dc2:	2600      	movs	r6, #0
 8008dc4:	2700      	movs	r7, #0
 8008dc6:	9b06      	ldr	r3, [sp, #24]
 8008dc8:	4599      	cmp	r9, r3
 8008dca:	dd06      	ble.n	8008dda <__kernel_rem_pio2+0x3da>
 8008dcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dce:	e8e3 6702 	strd	r6, r7, [r3], #8
 8008dd2:	f108 0801 	add.w	r8, r8, #1
 8008dd6:	930a      	str	r3, [sp, #40]	; 0x28
 8008dd8:	e7df      	b.n	8008d9a <__kernel_rem_pio2+0x39a>
 8008dda:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8008dde:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008de2:	f7f7 fbad 	bl	8000540 <__aeabi_dmul>
 8008de6:	4602      	mov	r2, r0
 8008de8:	460b      	mov	r3, r1
 8008dea:	4630      	mov	r0, r6
 8008dec:	4639      	mov	r1, r7
 8008dee:	f7f7 f9f1 	bl	80001d4 <__adddf3>
 8008df2:	f109 0901 	add.w	r9, r9, #1
 8008df6:	4606      	mov	r6, r0
 8008df8:	460f      	mov	r7, r1
 8008dfa:	e7e4      	b.n	8008dc6 <__kernel_rem_pio2+0x3c6>
 8008dfc:	3d01      	subs	r5, #1
 8008dfe:	e748      	b.n	8008c92 <__kernel_rem_pio2+0x292>
 8008e00:	ec47 6b10 	vmov	d0, r6, r7
 8008e04:	f1ca 0000 	rsb	r0, sl, #0
 8008e08:	f000 fc6e 	bl	80096e8 <scalbn>
 8008e0c:	ec57 6b10 	vmov	r6, r7, d0
 8008e10:	4ba0      	ldr	r3, [pc, #640]	; (8009094 <__kernel_rem_pio2+0x694>)
 8008e12:	ee10 0a10 	vmov	r0, s0
 8008e16:	2200      	movs	r2, #0
 8008e18:	4639      	mov	r1, r7
 8008e1a:	f7f7 fe17 	bl	8000a4c <__aeabi_dcmpge>
 8008e1e:	b1f8      	cbz	r0, 8008e60 <__kernel_rem_pio2+0x460>
 8008e20:	4b9d      	ldr	r3, [pc, #628]	; (8009098 <__kernel_rem_pio2+0x698>)
 8008e22:	2200      	movs	r2, #0
 8008e24:	4630      	mov	r0, r6
 8008e26:	4639      	mov	r1, r7
 8008e28:	f7f7 fb8a 	bl	8000540 <__aeabi_dmul>
 8008e2c:	f7f7 fe38 	bl	8000aa0 <__aeabi_d2iz>
 8008e30:	4680      	mov	r8, r0
 8008e32:	f7f7 fb1b 	bl	800046c <__aeabi_i2d>
 8008e36:	4b97      	ldr	r3, [pc, #604]	; (8009094 <__kernel_rem_pio2+0x694>)
 8008e38:	2200      	movs	r2, #0
 8008e3a:	f7f7 fb81 	bl	8000540 <__aeabi_dmul>
 8008e3e:	460b      	mov	r3, r1
 8008e40:	4602      	mov	r2, r0
 8008e42:	4639      	mov	r1, r7
 8008e44:	4630      	mov	r0, r6
 8008e46:	f7f7 f9c3 	bl	80001d0 <__aeabi_dsub>
 8008e4a:	f7f7 fe29 	bl	8000aa0 <__aeabi_d2iz>
 8008e4e:	1c65      	adds	r5, r4, #1
 8008e50:	ab0e      	add	r3, sp, #56	; 0x38
 8008e52:	f10a 0a18 	add.w	sl, sl, #24
 8008e56:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008e5a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8008e5e:	e720      	b.n	8008ca2 <__kernel_rem_pio2+0x2a2>
 8008e60:	4630      	mov	r0, r6
 8008e62:	4639      	mov	r1, r7
 8008e64:	f7f7 fe1c 	bl	8000aa0 <__aeabi_d2iz>
 8008e68:	ab0e      	add	r3, sp, #56	; 0x38
 8008e6a:	4625      	mov	r5, r4
 8008e6c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008e70:	e717      	b.n	8008ca2 <__kernel_rem_pio2+0x2a2>
 8008e72:	ab0e      	add	r3, sp, #56	; 0x38
 8008e74:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8008e78:	f7f7 faf8 	bl	800046c <__aeabi_i2d>
 8008e7c:	4632      	mov	r2, r6
 8008e7e:	463b      	mov	r3, r7
 8008e80:	f7f7 fb5e 	bl	8000540 <__aeabi_dmul>
 8008e84:	4b84      	ldr	r3, [pc, #528]	; (8009098 <__kernel_rem_pio2+0x698>)
 8008e86:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	4630      	mov	r0, r6
 8008e8e:	4639      	mov	r1, r7
 8008e90:	f7f7 fb56 	bl	8000540 <__aeabi_dmul>
 8008e94:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e98:	4606      	mov	r6, r0
 8008e9a:	460f      	mov	r7, r1
 8008e9c:	e70f      	b.n	8008cbe <__kernel_rem_pio2+0x2be>
 8008e9e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8008ea2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8008ea6:	f7f7 fb4b 	bl	8000540 <__aeabi_dmul>
 8008eaa:	4602      	mov	r2, r0
 8008eac:	460b      	mov	r3, r1
 8008eae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008eb2:	f7f7 f98f 	bl	80001d4 <__adddf3>
 8008eb6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008eba:	f108 0801 	add.w	r8, r8, #1
 8008ebe:	9b02      	ldr	r3, [sp, #8]
 8008ec0:	4598      	cmp	r8, r3
 8008ec2:	dc01      	bgt.n	8008ec8 <__kernel_rem_pio2+0x4c8>
 8008ec4:	45b8      	cmp	r8, r7
 8008ec6:	ddea      	ble.n	8008e9e <__kernel_rem_pio2+0x49e>
 8008ec8:	ed9d 7b06 	vldr	d7, [sp, #24]
 8008ecc:	ab4a      	add	r3, sp, #296	; 0x128
 8008ece:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008ed2:	ed87 7b00 	vstr	d7, [r7]
 8008ed6:	3e01      	subs	r6, #1
 8008ed8:	e6f8      	b.n	8008ccc <__kernel_rem_pio2+0x2cc>
 8008eda:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8008edc:	2b02      	cmp	r3, #2
 8008ede:	dc0b      	bgt.n	8008ef8 <__kernel_rem_pio2+0x4f8>
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	dc35      	bgt.n	8008f50 <__kernel_rem_pio2+0x550>
 8008ee4:	d059      	beq.n	8008f9a <__kernel_rem_pio2+0x59a>
 8008ee6:	9b04      	ldr	r3, [sp, #16]
 8008ee8:	f003 0007 	and.w	r0, r3, #7
 8008eec:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8008ef0:	ecbd 8b02 	vpop	{d8}
 8008ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ef8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8008efa:	2b03      	cmp	r3, #3
 8008efc:	d1f3      	bne.n	8008ee6 <__kernel_rem_pio2+0x4e6>
 8008efe:	ab4a      	add	r3, sp, #296	; 0x128
 8008f00:	4423      	add	r3, r4
 8008f02:	9306      	str	r3, [sp, #24]
 8008f04:	461c      	mov	r4, r3
 8008f06:	469a      	mov	sl, r3
 8008f08:	9502      	str	r5, [sp, #8]
 8008f0a:	9b02      	ldr	r3, [sp, #8]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	f1aa 0a08 	sub.w	sl, sl, #8
 8008f12:	dc6b      	bgt.n	8008fec <__kernel_rem_pio2+0x5ec>
 8008f14:	46aa      	mov	sl, r5
 8008f16:	f1ba 0f01 	cmp.w	sl, #1
 8008f1a:	f1a4 0408 	sub.w	r4, r4, #8
 8008f1e:	f300 8085 	bgt.w	800902c <__kernel_rem_pio2+0x62c>
 8008f22:	9c06      	ldr	r4, [sp, #24]
 8008f24:	2000      	movs	r0, #0
 8008f26:	3408      	adds	r4, #8
 8008f28:	2100      	movs	r1, #0
 8008f2a:	2d01      	cmp	r5, #1
 8008f2c:	f300 809d 	bgt.w	800906a <__kernel_rem_pio2+0x66a>
 8008f30:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8008f34:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8008f38:	f1bb 0f00 	cmp.w	fp, #0
 8008f3c:	f040 809b 	bne.w	8009076 <__kernel_rem_pio2+0x676>
 8008f40:	9b01      	ldr	r3, [sp, #4]
 8008f42:	e9c3 5600 	strd	r5, r6, [r3]
 8008f46:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8008f4a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8008f4e:	e7ca      	b.n	8008ee6 <__kernel_rem_pio2+0x4e6>
 8008f50:	3408      	adds	r4, #8
 8008f52:	ab4a      	add	r3, sp, #296	; 0x128
 8008f54:	441c      	add	r4, r3
 8008f56:	462e      	mov	r6, r5
 8008f58:	2000      	movs	r0, #0
 8008f5a:	2100      	movs	r1, #0
 8008f5c:	2e00      	cmp	r6, #0
 8008f5e:	da36      	bge.n	8008fce <__kernel_rem_pio2+0x5ce>
 8008f60:	f1bb 0f00 	cmp.w	fp, #0
 8008f64:	d039      	beq.n	8008fda <__kernel_rem_pio2+0x5da>
 8008f66:	4602      	mov	r2, r0
 8008f68:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f6c:	9c01      	ldr	r4, [sp, #4]
 8008f6e:	e9c4 2300 	strd	r2, r3, [r4]
 8008f72:	4602      	mov	r2, r0
 8008f74:	460b      	mov	r3, r1
 8008f76:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8008f7a:	f7f7 f929 	bl	80001d0 <__aeabi_dsub>
 8008f7e:	ae4c      	add	r6, sp, #304	; 0x130
 8008f80:	2401      	movs	r4, #1
 8008f82:	42a5      	cmp	r5, r4
 8008f84:	da2c      	bge.n	8008fe0 <__kernel_rem_pio2+0x5e0>
 8008f86:	f1bb 0f00 	cmp.w	fp, #0
 8008f8a:	d002      	beq.n	8008f92 <__kernel_rem_pio2+0x592>
 8008f8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f90:	4619      	mov	r1, r3
 8008f92:	9b01      	ldr	r3, [sp, #4]
 8008f94:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008f98:	e7a5      	b.n	8008ee6 <__kernel_rem_pio2+0x4e6>
 8008f9a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8008f9e:	eb0d 0403 	add.w	r4, sp, r3
 8008fa2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8008fa6:	2000      	movs	r0, #0
 8008fa8:	2100      	movs	r1, #0
 8008faa:	2d00      	cmp	r5, #0
 8008fac:	da09      	bge.n	8008fc2 <__kernel_rem_pio2+0x5c2>
 8008fae:	f1bb 0f00 	cmp.w	fp, #0
 8008fb2:	d002      	beq.n	8008fba <__kernel_rem_pio2+0x5ba>
 8008fb4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008fb8:	4619      	mov	r1, r3
 8008fba:	9b01      	ldr	r3, [sp, #4]
 8008fbc:	e9c3 0100 	strd	r0, r1, [r3]
 8008fc0:	e791      	b.n	8008ee6 <__kernel_rem_pio2+0x4e6>
 8008fc2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008fc6:	f7f7 f905 	bl	80001d4 <__adddf3>
 8008fca:	3d01      	subs	r5, #1
 8008fcc:	e7ed      	b.n	8008faa <__kernel_rem_pio2+0x5aa>
 8008fce:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008fd2:	f7f7 f8ff 	bl	80001d4 <__adddf3>
 8008fd6:	3e01      	subs	r6, #1
 8008fd8:	e7c0      	b.n	8008f5c <__kernel_rem_pio2+0x55c>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	460b      	mov	r3, r1
 8008fde:	e7c5      	b.n	8008f6c <__kernel_rem_pio2+0x56c>
 8008fe0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8008fe4:	f7f7 f8f6 	bl	80001d4 <__adddf3>
 8008fe8:	3401      	adds	r4, #1
 8008fea:	e7ca      	b.n	8008f82 <__kernel_rem_pio2+0x582>
 8008fec:	e9da 8900 	ldrd	r8, r9, [sl]
 8008ff0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8008ff4:	9b02      	ldr	r3, [sp, #8]
 8008ff6:	3b01      	subs	r3, #1
 8008ff8:	9302      	str	r3, [sp, #8]
 8008ffa:	4632      	mov	r2, r6
 8008ffc:	463b      	mov	r3, r7
 8008ffe:	4640      	mov	r0, r8
 8009000:	4649      	mov	r1, r9
 8009002:	f7f7 f8e7 	bl	80001d4 <__adddf3>
 8009006:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800900a:	4602      	mov	r2, r0
 800900c:	460b      	mov	r3, r1
 800900e:	4640      	mov	r0, r8
 8009010:	4649      	mov	r1, r9
 8009012:	f7f7 f8dd 	bl	80001d0 <__aeabi_dsub>
 8009016:	4632      	mov	r2, r6
 8009018:	463b      	mov	r3, r7
 800901a:	f7f7 f8db 	bl	80001d4 <__adddf3>
 800901e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8009022:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009026:	ed8a 7b00 	vstr	d7, [sl]
 800902a:	e76e      	b.n	8008f0a <__kernel_rem_pio2+0x50a>
 800902c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009030:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8009034:	4640      	mov	r0, r8
 8009036:	4632      	mov	r2, r6
 8009038:	463b      	mov	r3, r7
 800903a:	4649      	mov	r1, r9
 800903c:	f7f7 f8ca 	bl	80001d4 <__adddf3>
 8009040:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009044:	4602      	mov	r2, r0
 8009046:	460b      	mov	r3, r1
 8009048:	4640      	mov	r0, r8
 800904a:	4649      	mov	r1, r9
 800904c:	f7f7 f8c0 	bl	80001d0 <__aeabi_dsub>
 8009050:	4632      	mov	r2, r6
 8009052:	463b      	mov	r3, r7
 8009054:	f7f7 f8be 	bl	80001d4 <__adddf3>
 8009058:	ed9d 7b02 	vldr	d7, [sp, #8]
 800905c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009060:	ed84 7b00 	vstr	d7, [r4]
 8009064:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009068:	e755      	b.n	8008f16 <__kernel_rem_pio2+0x516>
 800906a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800906e:	f7f7 f8b1 	bl	80001d4 <__adddf3>
 8009072:	3d01      	subs	r5, #1
 8009074:	e759      	b.n	8008f2a <__kernel_rem_pio2+0x52a>
 8009076:	9b01      	ldr	r3, [sp, #4]
 8009078:	9a01      	ldr	r2, [sp, #4]
 800907a:	601d      	str	r5, [r3, #0]
 800907c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8009080:	605c      	str	r4, [r3, #4]
 8009082:	609f      	str	r7, [r3, #8]
 8009084:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8009088:	60d3      	str	r3, [r2, #12]
 800908a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800908e:	6110      	str	r0, [r2, #16]
 8009090:	6153      	str	r3, [r2, #20]
 8009092:	e728      	b.n	8008ee6 <__kernel_rem_pio2+0x4e6>
 8009094:	41700000 	.word	0x41700000
 8009098:	3e700000 	.word	0x3e700000
 800909c:	00000000 	.word	0x00000000

080090a0 <__kernel_sin>:
 80090a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090a4:	ed2d 8b04 	vpush	{d8-d9}
 80090a8:	eeb0 8a41 	vmov.f32	s16, s2
 80090ac:	eef0 8a61 	vmov.f32	s17, s3
 80090b0:	ec55 4b10 	vmov	r4, r5, d0
 80090b4:	b083      	sub	sp, #12
 80090b6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80090ba:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80090be:	9001      	str	r0, [sp, #4]
 80090c0:	da06      	bge.n	80090d0 <__kernel_sin+0x30>
 80090c2:	ee10 0a10 	vmov	r0, s0
 80090c6:	4629      	mov	r1, r5
 80090c8:	f7f7 fcea 	bl	8000aa0 <__aeabi_d2iz>
 80090cc:	2800      	cmp	r0, #0
 80090ce:	d051      	beq.n	8009174 <__kernel_sin+0xd4>
 80090d0:	4622      	mov	r2, r4
 80090d2:	462b      	mov	r3, r5
 80090d4:	4620      	mov	r0, r4
 80090d6:	4629      	mov	r1, r5
 80090d8:	f7f7 fa32 	bl	8000540 <__aeabi_dmul>
 80090dc:	4682      	mov	sl, r0
 80090de:	468b      	mov	fp, r1
 80090e0:	4602      	mov	r2, r0
 80090e2:	460b      	mov	r3, r1
 80090e4:	4620      	mov	r0, r4
 80090e6:	4629      	mov	r1, r5
 80090e8:	f7f7 fa2a 	bl	8000540 <__aeabi_dmul>
 80090ec:	a341      	add	r3, pc, #260	; (adr r3, 80091f4 <__kernel_sin+0x154>)
 80090ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f2:	4680      	mov	r8, r0
 80090f4:	4689      	mov	r9, r1
 80090f6:	4650      	mov	r0, sl
 80090f8:	4659      	mov	r1, fp
 80090fa:	f7f7 fa21 	bl	8000540 <__aeabi_dmul>
 80090fe:	a33f      	add	r3, pc, #252	; (adr r3, 80091fc <__kernel_sin+0x15c>)
 8009100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009104:	f7f7 f864 	bl	80001d0 <__aeabi_dsub>
 8009108:	4652      	mov	r2, sl
 800910a:	465b      	mov	r3, fp
 800910c:	f7f7 fa18 	bl	8000540 <__aeabi_dmul>
 8009110:	a33c      	add	r3, pc, #240	; (adr r3, 8009204 <__kernel_sin+0x164>)
 8009112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009116:	f7f7 f85d 	bl	80001d4 <__adddf3>
 800911a:	4652      	mov	r2, sl
 800911c:	465b      	mov	r3, fp
 800911e:	f7f7 fa0f 	bl	8000540 <__aeabi_dmul>
 8009122:	a33a      	add	r3, pc, #232	; (adr r3, 800920c <__kernel_sin+0x16c>)
 8009124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009128:	f7f7 f852 	bl	80001d0 <__aeabi_dsub>
 800912c:	4652      	mov	r2, sl
 800912e:	465b      	mov	r3, fp
 8009130:	f7f7 fa06 	bl	8000540 <__aeabi_dmul>
 8009134:	a337      	add	r3, pc, #220	; (adr r3, 8009214 <__kernel_sin+0x174>)
 8009136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913a:	f7f7 f84b 	bl	80001d4 <__adddf3>
 800913e:	9b01      	ldr	r3, [sp, #4]
 8009140:	4606      	mov	r6, r0
 8009142:	460f      	mov	r7, r1
 8009144:	b9eb      	cbnz	r3, 8009182 <__kernel_sin+0xe2>
 8009146:	4602      	mov	r2, r0
 8009148:	460b      	mov	r3, r1
 800914a:	4650      	mov	r0, sl
 800914c:	4659      	mov	r1, fp
 800914e:	f7f7 f9f7 	bl	8000540 <__aeabi_dmul>
 8009152:	a325      	add	r3, pc, #148	; (adr r3, 80091e8 <__kernel_sin+0x148>)
 8009154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009158:	f7f7 f83a 	bl	80001d0 <__aeabi_dsub>
 800915c:	4642      	mov	r2, r8
 800915e:	464b      	mov	r3, r9
 8009160:	f7f7 f9ee 	bl	8000540 <__aeabi_dmul>
 8009164:	4602      	mov	r2, r0
 8009166:	460b      	mov	r3, r1
 8009168:	4620      	mov	r0, r4
 800916a:	4629      	mov	r1, r5
 800916c:	f7f7 f832 	bl	80001d4 <__adddf3>
 8009170:	4604      	mov	r4, r0
 8009172:	460d      	mov	r5, r1
 8009174:	ec45 4b10 	vmov	d0, r4, r5
 8009178:	b003      	add	sp, #12
 800917a:	ecbd 8b04 	vpop	{d8-d9}
 800917e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009182:	4b1b      	ldr	r3, [pc, #108]	; (80091f0 <__kernel_sin+0x150>)
 8009184:	ec51 0b18 	vmov	r0, r1, d8
 8009188:	2200      	movs	r2, #0
 800918a:	f7f7 f9d9 	bl	8000540 <__aeabi_dmul>
 800918e:	4632      	mov	r2, r6
 8009190:	ec41 0b19 	vmov	d9, r0, r1
 8009194:	463b      	mov	r3, r7
 8009196:	4640      	mov	r0, r8
 8009198:	4649      	mov	r1, r9
 800919a:	f7f7 f9d1 	bl	8000540 <__aeabi_dmul>
 800919e:	4602      	mov	r2, r0
 80091a0:	460b      	mov	r3, r1
 80091a2:	ec51 0b19 	vmov	r0, r1, d9
 80091a6:	f7f7 f813 	bl	80001d0 <__aeabi_dsub>
 80091aa:	4652      	mov	r2, sl
 80091ac:	465b      	mov	r3, fp
 80091ae:	f7f7 f9c7 	bl	8000540 <__aeabi_dmul>
 80091b2:	ec53 2b18 	vmov	r2, r3, d8
 80091b6:	f7f7 f80b 	bl	80001d0 <__aeabi_dsub>
 80091ba:	a30b      	add	r3, pc, #44	; (adr r3, 80091e8 <__kernel_sin+0x148>)
 80091bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c0:	4606      	mov	r6, r0
 80091c2:	460f      	mov	r7, r1
 80091c4:	4640      	mov	r0, r8
 80091c6:	4649      	mov	r1, r9
 80091c8:	f7f7 f9ba 	bl	8000540 <__aeabi_dmul>
 80091cc:	4602      	mov	r2, r0
 80091ce:	460b      	mov	r3, r1
 80091d0:	4630      	mov	r0, r6
 80091d2:	4639      	mov	r1, r7
 80091d4:	f7f6 fffe 	bl	80001d4 <__adddf3>
 80091d8:	4602      	mov	r2, r0
 80091da:	460b      	mov	r3, r1
 80091dc:	4620      	mov	r0, r4
 80091de:	4629      	mov	r1, r5
 80091e0:	f7f6 fff6 	bl	80001d0 <__aeabi_dsub>
 80091e4:	e7c4      	b.n	8009170 <__kernel_sin+0xd0>
 80091e6:	bf00      	nop
 80091e8:	55555549 	.word	0x55555549
 80091ec:	3fc55555 	.word	0x3fc55555
 80091f0:	3fe00000 	.word	0x3fe00000
 80091f4:	5acfd57c 	.word	0x5acfd57c
 80091f8:	3de5d93a 	.word	0x3de5d93a
 80091fc:	8a2b9ceb 	.word	0x8a2b9ceb
 8009200:	3e5ae5e6 	.word	0x3e5ae5e6
 8009204:	57b1fe7d 	.word	0x57b1fe7d
 8009208:	3ec71de3 	.word	0x3ec71de3
 800920c:	19c161d5 	.word	0x19c161d5
 8009210:	3f2a01a0 	.word	0x3f2a01a0
 8009214:	1110f8a6 	.word	0x1110f8a6
 8009218:	3f811111 	.word	0x3f811111

0800921c <with_errno>:
 800921c:	b570      	push	{r4, r5, r6, lr}
 800921e:	4604      	mov	r4, r0
 8009220:	460d      	mov	r5, r1
 8009222:	4616      	mov	r6, r2
 8009224:	f7fe f8ea 	bl	80073fc <__errno>
 8009228:	4629      	mov	r1, r5
 800922a:	6006      	str	r6, [r0, #0]
 800922c:	4620      	mov	r0, r4
 800922e:	bd70      	pop	{r4, r5, r6, pc}

08009230 <xflow>:
 8009230:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009232:	4614      	mov	r4, r2
 8009234:	461d      	mov	r5, r3
 8009236:	b108      	cbz	r0, 800923c <xflow+0xc>
 8009238:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800923c:	e9cd 2300 	strd	r2, r3, [sp]
 8009240:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009244:	4620      	mov	r0, r4
 8009246:	4629      	mov	r1, r5
 8009248:	f7f7 f97a 	bl	8000540 <__aeabi_dmul>
 800924c:	2222      	movs	r2, #34	; 0x22
 800924e:	b003      	add	sp, #12
 8009250:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009254:	f7ff bfe2 	b.w	800921c <with_errno>

08009258 <__math_uflow>:
 8009258:	b508      	push	{r3, lr}
 800925a:	2200      	movs	r2, #0
 800925c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009260:	f7ff ffe6 	bl	8009230 <xflow>
 8009264:	ec41 0b10 	vmov	d0, r0, r1
 8009268:	bd08      	pop	{r3, pc}

0800926a <__math_oflow>:
 800926a:	b508      	push	{r3, lr}
 800926c:	2200      	movs	r2, #0
 800926e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009272:	f7ff ffdd 	bl	8009230 <xflow>
 8009276:	ec41 0b10 	vmov	d0, r0, r1
 800927a:	bd08      	pop	{r3, pc}
 800927c:	0000      	movs	r0, r0
	...

08009280 <atan>:
 8009280:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009284:	ec55 4b10 	vmov	r4, r5, d0
 8009288:	4bc3      	ldr	r3, [pc, #780]	; (8009598 <atan+0x318>)
 800928a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800928e:	429e      	cmp	r6, r3
 8009290:	46ab      	mov	fp, r5
 8009292:	dd18      	ble.n	80092c6 <atan+0x46>
 8009294:	4bc1      	ldr	r3, [pc, #772]	; (800959c <atan+0x31c>)
 8009296:	429e      	cmp	r6, r3
 8009298:	dc01      	bgt.n	800929e <atan+0x1e>
 800929a:	d109      	bne.n	80092b0 <atan+0x30>
 800929c:	b144      	cbz	r4, 80092b0 <atan+0x30>
 800929e:	4622      	mov	r2, r4
 80092a0:	462b      	mov	r3, r5
 80092a2:	4620      	mov	r0, r4
 80092a4:	4629      	mov	r1, r5
 80092a6:	f7f6 ff95 	bl	80001d4 <__adddf3>
 80092aa:	4604      	mov	r4, r0
 80092ac:	460d      	mov	r5, r1
 80092ae:	e006      	b.n	80092be <atan+0x3e>
 80092b0:	f1bb 0f00 	cmp.w	fp, #0
 80092b4:	f300 8131 	bgt.w	800951a <atan+0x29a>
 80092b8:	a59b      	add	r5, pc, #620	; (adr r5, 8009528 <atan+0x2a8>)
 80092ba:	e9d5 4500 	ldrd	r4, r5, [r5]
 80092be:	ec45 4b10 	vmov	d0, r4, r5
 80092c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092c6:	4bb6      	ldr	r3, [pc, #728]	; (80095a0 <atan+0x320>)
 80092c8:	429e      	cmp	r6, r3
 80092ca:	dc14      	bgt.n	80092f6 <atan+0x76>
 80092cc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80092d0:	429e      	cmp	r6, r3
 80092d2:	dc0d      	bgt.n	80092f0 <atan+0x70>
 80092d4:	a396      	add	r3, pc, #600	; (adr r3, 8009530 <atan+0x2b0>)
 80092d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092da:	ee10 0a10 	vmov	r0, s0
 80092de:	4629      	mov	r1, r5
 80092e0:	f7f6 ff78 	bl	80001d4 <__adddf3>
 80092e4:	4baf      	ldr	r3, [pc, #700]	; (80095a4 <atan+0x324>)
 80092e6:	2200      	movs	r2, #0
 80092e8:	f7f7 fbba 	bl	8000a60 <__aeabi_dcmpgt>
 80092ec:	2800      	cmp	r0, #0
 80092ee:	d1e6      	bne.n	80092be <atan+0x3e>
 80092f0:	f04f 3aff 	mov.w	sl, #4294967295
 80092f4:	e02b      	b.n	800934e <atan+0xce>
 80092f6:	f000 f963 	bl	80095c0 <fabs>
 80092fa:	4bab      	ldr	r3, [pc, #684]	; (80095a8 <atan+0x328>)
 80092fc:	429e      	cmp	r6, r3
 80092fe:	ec55 4b10 	vmov	r4, r5, d0
 8009302:	f300 80bf 	bgt.w	8009484 <atan+0x204>
 8009306:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800930a:	429e      	cmp	r6, r3
 800930c:	f300 80a0 	bgt.w	8009450 <atan+0x1d0>
 8009310:	ee10 2a10 	vmov	r2, s0
 8009314:	ee10 0a10 	vmov	r0, s0
 8009318:	462b      	mov	r3, r5
 800931a:	4629      	mov	r1, r5
 800931c:	f7f6 ff5a 	bl	80001d4 <__adddf3>
 8009320:	4ba0      	ldr	r3, [pc, #640]	; (80095a4 <atan+0x324>)
 8009322:	2200      	movs	r2, #0
 8009324:	f7f6 ff54 	bl	80001d0 <__aeabi_dsub>
 8009328:	2200      	movs	r2, #0
 800932a:	4606      	mov	r6, r0
 800932c:	460f      	mov	r7, r1
 800932e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009332:	4620      	mov	r0, r4
 8009334:	4629      	mov	r1, r5
 8009336:	f7f6 ff4d 	bl	80001d4 <__adddf3>
 800933a:	4602      	mov	r2, r0
 800933c:	460b      	mov	r3, r1
 800933e:	4630      	mov	r0, r6
 8009340:	4639      	mov	r1, r7
 8009342:	f7f7 fa27 	bl	8000794 <__aeabi_ddiv>
 8009346:	f04f 0a00 	mov.w	sl, #0
 800934a:	4604      	mov	r4, r0
 800934c:	460d      	mov	r5, r1
 800934e:	4622      	mov	r2, r4
 8009350:	462b      	mov	r3, r5
 8009352:	4620      	mov	r0, r4
 8009354:	4629      	mov	r1, r5
 8009356:	f7f7 f8f3 	bl	8000540 <__aeabi_dmul>
 800935a:	4602      	mov	r2, r0
 800935c:	460b      	mov	r3, r1
 800935e:	4680      	mov	r8, r0
 8009360:	4689      	mov	r9, r1
 8009362:	f7f7 f8ed 	bl	8000540 <__aeabi_dmul>
 8009366:	a374      	add	r3, pc, #464	; (adr r3, 8009538 <atan+0x2b8>)
 8009368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800936c:	4606      	mov	r6, r0
 800936e:	460f      	mov	r7, r1
 8009370:	f7f7 f8e6 	bl	8000540 <__aeabi_dmul>
 8009374:	a372      	add	r3, pc, #456	; (adr r3, 8009540 <atan+0x2c0>)
 8009376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800937a:	f7f6 ff2b 	bl	80001d4 <__adddf3>
 800937e:	4632      	mov	r2, r6
 8009380:	463b      	mov	r3, r7
 8009382:	f7f7 f8dd 	bl	8000540 <__aeabi_dmul>
 8009386:	a370      	add	r3, pc, #448	; (adr r3, 8009548 <atan+0x2c8>)
 8009388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938c:	f7f6 ff22 	bl	80001d4 <__adddf3>
 8009390:	4632      	mov	r2, r6
 8009392:	463b      	mov	r3, r7
 8009394:	f7f7 f8d4 	bl	8000540 <__aeabi_dmul>
 8009398:	a36d      	add	r3, pc, #436	; (adr r3, 8009550 <atan+0x2d0>)
 800939a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800939e:	f7f6 ff19 	bl	80001d4 <__adddf3>
 80093a2:	4632      	mov	r2, r6
 80093a4:	463b      	mov	r3, r7
 80093a6:	f7f7 f8cb 	bl	8000540 <__aeabi_dmul>
 80093aa:	a36b      	add	r3, pc, #428	; (adr r3, 8009558 <atan+0x2d8>)
 80093ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b0:	f7f6 ff10 	bl	80001d4 <__adddf3>
 80093b4:	4632      	mov	r2, r6
 80093b6:	463b      	mov	r3, r7
 80093b8:	f7f7 f8c2 	bl	8000540 <__aeabi_dmul>
 80093bc:	a368      	add	r3, pc, #416	; (adr r3, 8009560 <atan+0x2e0>)
 80093be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c2:	f7f6 ff07 	bl	80001d4 <__adddf3>
 80093c6:	4642      	mov	r2, r8
 80093c8:	464b      	mov	r3, r9
 80093ca:	f7f7 f8b9 	bl	8000540 <__aeabi_dmul>
 80093ce:	a366      	add	r3, pc, #408	; (adr r3, 8009568 <atan+0x2e8>)
 80093d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d4:	4680      	mov	r8, r0
 80093d6:	4689      	mov	r9, r1
 80093d8:	4630      	mov	r0, r6
 80093da:	4639      	mov	r1, r7
 80093dc:	f7f7 f8b0 	bl	8000540 <__aeabi_dmul>
 80093e0:	a363      	add	r3, pc, #396	; (adr r3, 8009570 <atan+0x2f0>)
 80093e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e6:	f7f6 fef3 	bl	80001d0 <__aeabi_dsub>
 80093ea:	4632      	mov	r2, r6
 80093ec:	463b      	mov	r3, r7
 80093ee:	f7f7 f8a7 	bl	8000540 <__aeabi_dmul>
 80093f2:	a361      	add	r3, pc, #388	; (adr r3, 8009578 <atan+0x2f8>)
 80093f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f8:	f7f6 feea 	bl	80001d0 <__aeabi_dsub>
 80093fc:	4632      	mov	r2, r6
 80093fe:	463b      	mov	r3, r7
 8009400:	f7f7 f89e 	bl	8000540 <__aeabi_dmul>
 8009404:	a35e      	add	r3, pc, #376	; (adr r3, 8009580 <atan+0x300>)
 8009406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800940a:	f7f6 fee1 	bl	80001d0 <__aeabi_dsub>
 800940e:	4632      	mov	r2, r6
 8009410:	463b      	mov	r3, r7
 8009412:	f7f7 f895 	bl	8000540 <__aeabi_dmul>
 8009416:	a35c      	add	r3, pc, #368	; (adr r3, 8009588 <atan+0x308>)
 8009418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800941c:	f7f6 fed8 	bl	80001d0 <__aeabi_dsub>
 8009420:	4632      	mov	r2, r6
 8009422:	463b      	mov	r3, r7
 8009424:	f7f7 f88c 	bl	8000540 <__aeabi_dmul>
 8009428:	4602      	mov	r2, r0
 800942a:	460b      	mov	r3, r1
 800942c:	4640      	mov	r0, r8
 800942e:	4649      	mov	r1, r9
 8009430:	f7f6 fed0 	bl	80001d4 <__adddf3>
 8009434:	4622      	mov	r2, r4
 8009436:	462b      	mov	r3, r5
 8009438:	f7f7 f882 	bl	8000540 <__aeabi_dmul>
 800943c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009440:	4602      	mov	r2, r0
 8009442:	460b      	mov	r3, r1
 8009444:	d14b      	bne.n	80094de <atan+0x25e>
 8009446:	4620      	mov	r0, r4
 8009448:	4629      	mov	r1, r5
 800944a:	f7f6 fec1 	bl	80001d0 <__aeabi_dsub>
 800944e:	e72c      	b.n	80092aa <atan+0x2a>
 8009450:	ee10 0a10 	vmov	r0, s0
 8009454:	4b53      	ldr	r3, [pc, #332]	; (80095a4 <atan+0x324>)
 8009456:	2200      	movs	r2, #0
 8009458:	4629      	mov	r1, r5
 800945a:	f7f6 feb9 	bl	80001d0 <__aeabi_dsub>
 800945e:	4b51      	ldr	r3, [pc, #324]	; (80095a4 <atan+0x324>)
 8009460:	4606      	mov	r6, r0
 8009462:	460f      	mov	r7, r1
 8009464:	2200      	movs	r2, #0
 8009466:	4620      	mov	r0, r4
 8009468:	4629      	mov	r1, r5
 800946a:	f7f6 feb3 	bl	80001d4 <__adddf3>
 800946e:	4602      	mov	r2, r0
 8009470:	460b      	mov	r3, r1
 8009472:	4630      	mov	r0, r6
 8009474:	4639      	mov	r1, r7
 8009476:	f7f7 f98d 	bl	8000794 <__aeabi_ddiv>
 800947a:	f04f 0a01 	mov.w	sl, #1
 800947e:	4604      	mov	r4, r0
 8009480:	460d      	mov	r5, r1
 8009482:	e764      	b.n	800934e <atan+0xce>
 8009484:	4b49      	ldr	r3, [pc, #292]	; (80095ac <atan+0x32c>)
 8009486:	429e      	cmp	r6, r3
 8009488:	da1d      	bge.n	80094c6 <atan+0x246>
 800948a:	ee10 0a10 	vmov	r0, s0
 800948e:	4b48      	ldr	r3, [pc, #288]	; (80095b0 <atan+0x330>)
 8009490:	2200      	movs	r2, #0
 8009492:	4629      	mov	r1, r5
 8009494:	f7f6 fe9c 	bl	80001d0 <__aeabi_dsub>
 8009498:	4b45      	ldr	r3, [pc, #276]	; (80095b0 <atan+0x330>)
 800949a:	4606      	mov	r6, r0
 800949c:	460f      	mov	r7, r1
 800949e:	2200      	movs	r2, #0
 80094a0:	4620      	mov	r0, r4
 80094a2:	4629      	mov	r1, r5
 80094a4:	f7f7 f84c 	bl	8000540 <__aeabi_dmul>
 80094a8:	4b3e      	ldr	r3, [pc, #248]	; (80095a4 <atan+0x324>)
 80094aa:	2200      	movs	r2, #0
 80094ac:	f7f6 fe92 	bl	80001d4 <__adddf3>
 80094b0:	4602      	mov	r2, r0
 80094b2:	460b      	mov	r3, r1
 80094b4:	4630      	mov	r0, r6
 80094b6:	4639      	mov	r1, r7
 80094b8:	f7f7 f96c 	bl	8000794 <__aeabi_ddiv>
 80094bc:	f04f 0a02 	mov.w	sl, #2
 80094c0:	4604      	mov	r4, r0
 80094c2:	460d      	mov	r5, r1
 80094c4:	e743      	b.n	800934e <atan+0xce>
 80094c6:	462b      	mov	r3, r5
 80094c8:	ee10 2a10 	vmov	r2, s0
 80094cc:	4939      	ldr	r1, [pc, #228]	; (80095b4 <atan+0x334>)
 80094ce:	2000      	movs	r0, #0
 80094d0:	f7f7 f960 	bl	8000794 <__aeabi_ddiv>
 80094d4:	f04f 0a03 	mov.w	sl, #3
 80094d8:	4604      	mov	r4, r0
 80094da:	460d      	mov	r5, r1
 80094dc:	e737      	b.n	800934e <atan+0xce>
 80094de:	4b36      	ldr	r3, [pc, #216]	; (80095b8 <atan+0x338>)
 80094e0:	4e36      	ldr	r6, [pc, #216]	; (80095bc <atan+0x33c>)
 80094e2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80094e6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80094ea:	e9da 2300 	ldrd	r2, r3, [sl]
 80094ee:	f7f6 fe6f 	bl	80001d0 <__aeabi_dsub>
 80094f2:	4622      	mov	r2, r4
 80094f4:	462b      	mov	r3, r5
 80094f6:	f7f6 fe6b 	bl	80001d0 <__aeabi_dsub>
 80094fa:	4602      	mov	r2, r0
 80094fc:	460b      	mov	r3, r1
 80094fe:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009502:	f7f6 fe65 	bl	80001d0 <__aeabi_dsub>
 8009506:	f1bb 0f00 	cmp.w	fp, #0
 800950a:	4604      	mov	r4, r0
 800950c:	460d      	mov	r5, r1
 800950e:	f6bf aed6 	bge.w	80092be <atan+0x3e>
 8009512:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009516:	461d      	mov	r5, r3
 8009518:	e6d1      	b.n	80092be <atan+0x3e>
 800951a:	a51d      	add	r5, pc, #116	; (adr r5, 8009590 <atan+0x310>)
 800951c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009520:	e6cd      	b.n	80092be <atan+0x3e>
 8009522:	bf00      	nop
 8009524:	f3af 8000 	nop.w
 8009528:	54442d18 	.word	0x54442d18
 800952c:	bff921fb 	.word	0xbff921fb
 8009530:	8800759c 	.word	0x8800759c
 8009534:	7e37e43c 	.word	0x7e37e43c
 8009538:	e322da11 	.word	0xe322da11
 800953c:	3f90ad3a 	.word	0x3f90ad3a
 8009540:	24760deb 	.word	0x24760deb
 8009544:	3fa97b4b 	.word	0x3fa97b4b
 8009548:	a0d03d51 	.word	0xa0d03d51
 800954c:	3fb10d66 	.word	0x3fb10d66
 8009550:	c54c206e 	.word	0xc54c206e
 8009554:	3fb745cd 	.word	0x3fb745cd
 8009558:	920083ff 	.word	0x920083ff
 800955c:	3fc24924 	.word	0x3fc24924
 8009560:	5555550d 	.word	0x5555550d
 8009564:	3fd55555 	.word	0x3fd55555
 8009568:	2c6a6c2f 	.word	0x2c6a6c2f
 800956c:	bfa2b444 	.word	0xbfa2b444
 8009570:	52defd9a 	.word	0x52defd9a
 8009574:	3fadde2d 	.word	0x3fadde2d
 8009578:	af749a6d 	.word	0xaf749a6d
 800957c:	3fb3b0f2 	.word	0x3fb3b0f2
 8009580:	fe231671 	.word	0xfe231671
 8009584:	3fbc71c6 	.word	0x3fbc71c6
 8009588:	9998ebc4 	.word	0x9998ebc4
 800958c:	3fc99999 	.word	0x3fc99999
 8009590:	54442d18 	.word	0x54442d18
 8009594:	3ff921fb 	.word	0x3ff921fb
 8009598:	440fffff 	.word	0x440fffff
 800959c:	7ff00000 	.word	0x7ff00000
 80095a0:	3fdbffff 	.word	0x3fdbffff
 80095a4:	3ff00000 	.word	0x3ff00000
 80095a8:	3ff2ffff 	.word	0x3ff2ffff
 80095ac:	40038000 	.word	0x40038000
 80095b0:	3ff80000 	.word	0x3ff80000
 80095b4:	bff00000 	.word	0xbff00000
 80095b8:	0800a218 	.word	0x0800a218
 80095bc:	0800a1f8 	.word	0x0800a1f8

080095c0 <fabs>:
 80095c0:	ec51 0b10 	vmov	r0, r1, d0
 80095c4:	ee10 2a10 	vmov	r2, s0
 80095c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80095cc:	ec43 2b10 	vmov	d0, r2, r3
 80095d0:	4770      	bx	lr

080095d2 <finite>:
 80095d2:	b082      	sub	sp, #8
 80095d4:	ed8d 0b00 	vstr	d0, [sp]
 80095d8:	9801      	ldr	r0, [sp, #4]
 80095da:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80095de:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80095e2:	0fc0      	lsrs	r0, r0, #31
 80095e4:	b002      	add	sp, #8
 80095e6:	4770      	bx	lr

080095e8 <floor>:
 80095e8:	ec51 0b10 	vmov	r0, r1, d0
 80095ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095f0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80095f4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80095f8:	2e13      	cmp	r6, #19
 80095fa:	ee10 5a10 	vmov	r5, s0
 80095fe:	ee10 8a10 	vmov	r8, s0
 8009602:	460c      	mov	r4, r1
 8009604:	dc32      	bgt.n	800966c <floor+0x84>
 8009606:	2e00      	cmp	r6, #0
 8009608:	da14      	bge.n	8009634 <floor+0x4c>
 800960a:	a333      	add	r3, pc, #204	; (adr r3, 80096d8 <floor+0xf0>)
 800960c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009610:	f7f6 fde0 	bl	80001d4 <__adddf3>
 8009614:	2200      	movs	r2, #0
 8009616:	2300      	movs	r3, #0
 8009618:	f7f7 fa22 	bl	8000a60 <__aeabi_dcmpgt>
 800961c:	b138      	cbz	r0, 800962e <floor+0x46>
 800961e:	2c00      	cmp	r4, #0
 8009620:	da57      	bge.n	80096d2 <floor+0xea>
 8009622:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009626:	431d      	orrs	r5, r3
 8009628:	d001      	beq.n	800962e <floor+0x46>
 800962a:	4c2d      	ldr	r4, [pc, #180]	; (80096e0 <floor+0xf8>)
 800962c:	2500      	movs	r5, #0
 800962e:	4621      	mov	r1, r4
 8009630:	4628      	mov	r0, r5
 8009632:	e025      	b.n	8009680 <floor+0x98>
 8009634:	4f2b      	ldr	r7, [pc, #172]	; (80096e4 <floor+0xfc>)
 8009636:	4137      	asrs	r7, r6
 8009638:	ea01 0307 	and.w	r3, r1, r7
 800963c:	4303      	orrs	r3, r0
 800963e:	d01f      	beq.n	8009680 <floor+0x98>
 8009640:	a325      	add	r3, pc, #148	; (adr r3, 80096d8 <floor+0xf0>)
 8009642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009646:	f7f6 fdc5 	bl	80001d4 <__adddf3>
 800964a:	2200      	movs	r2, #0
 800964c:	2300      	movs	r3, #0
 800964e:	f7f7 fa07 	bl	8000a60 <__aeabi_dcmpgt>
 8009652:	2800      	cmp	r0, #0
 8009654:	d0eb      	beq.n	800962e <floor+0x46>
 8009656:	2c00      	cmp	r4, #0
 8009658:	bfbe      	ittt	lt
 800965a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800965e:	fa43 f606 	asrlt.w	r6, r3, r6
 8009662:	19a4      	addlt	r4, r4, r6
 8009664:	ea24 0407 	bic.w	r4, r4, r7
 8009668:	2500      	movs	r5, #0
 800966a:	e7e0      	b.n	800962e <floor+0x46>
 800966c:	2e33      	cmp	r6, #51	; 0x33
 800966e:	dd0b      	ble.n	8009688 <floor+0xa0>
 8009670:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009674:	d104      	bne.n	8009680 <floor+0x98>
 8009676:	ee10 2a10 	vmov	r2, s0
 800967a:	460b      	mov	r3, r1
 800967c:	f7f6 fdaa 	bl	80001d4 <__adddf3>
 8009680:	ec41 0b10 	vmov	d0, r0, r1
 8009684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009688:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800968c:	f04f 33ff 	mov.w	r3, #4294967295
 8009690:	fa23 f707 	lsr.w	r7, r3, r7
 8009694:	4207      	tst	r7, r0
 8009696:	d0f3      	beq.n	8009680 <floor+0x98>
 8009698:	a30f      	add	r3, pc, #60	; (adr r3, 80096d8 <floor+0xf0>)
 800969a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969e:	f7f6 fd99 	bl	80001d4 <__adddf3>
 80096a2:	2200      	movs	r2, #0
 80096a4:	2300      	movs	r3, #0
 80096a6:	f7f7 f9db 	bl	8000a60 <__aeabi_dcmpgt>
 80096aa:	2800      	cmp	r0, #0
 80096ac:	d0bf      	beq.n	800962e <floor+0x46>
 80096ae:	2c00      	cmp	r4, #0
 80096b0:	da02      	bge.n	80096b8 <floor+0xd0>
 80096b2:	2e14      	cmp	r6, #20
 80096b4:	d103      	bne.n	80096be <floor+0xd6>
 80096b6:	3401      	adds	r4, #1
 80096b8:	ea25 0507 	bic.w	r5, r5, r7
 80096bc:	e7b7      	b.n	800962e <floor+0x46>
 80096be:	2301      	movs	r3, #1
 80096c0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80096c4:	fa03 f606 	lsl.w	r6, r3, r6
 80096c8:	4435      	add	r5, r6
 80096ca:	4545      	cmp	r5, r8
 80096cc:	bf38      	it	cc
 80096ce:	18e4      	addcc	r4, r4, r3
 80096d0:	e7f2      	b.n	80096b8 <floor+0xd0>
 80096d2:	2500      	movs	r5, #0
 80096d4:	462c      	mov	r4, r5
 80096d6:	e7aa      	b.n	800962e <floor+0x46>
 80096d8:	8800759c 	.word	0x8800759c
 80096dc:	7e37e43c 	.word	0x7e37e43c
 80096e0:	bff00000 	.word	0xbff00000
 80096e4:	000fffff 	.word	0x000fffff

080096e8 <scalbn>:
 80096e8:	b570      	push	{r4, r5, r6, lr}
 80096ea:	ec55 4b10 	vmov	r4, r5, d0
 80096ee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80096f2:	4606      	mov	r6, r0
 80096f4:	462b      	mov	r3, r5
 80096f6:	b99a      	cbnz	r2, 8009720 <scalbn+0x38>
 80096f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80096fc:	4323      	orrs	r3, r4
 80096fe:	d036      	beq.n	800976e <scalbn+0x86>
 8009700:	4b39      	ldr	r3, [pc, #228]	; (80097e8 <scalbn+0x100>)
 8009702:	4629      	mov	r1, r5
 8009704:	ee10 0a10 	vmov	r0, s0
 8009708:	2200      	movs	r2, #0
 800970a:	f7f6 ff19 	bl	8000540 <__aeabi_dmul>
 800970e:	4b37      	ldr	r3, [pc, #220]	; (80097ec <scalbn+0x104>)
 8009710:	429e      	cmp	r6, r3
 8009712:	4604      	mov	r4, r0
 8009714:	460d      	mov	r5, r1
 8009716:	da10      	bge.n	800973a <scalbn+0x52>
 8009718:	a32b      	add	r3, pc, #172	; (adr r3, 80097c8 <scalbn+0xe0>)
 800971a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800971e:	e03a      	b.n	8009796 <scalbn+0xae>
 8009720:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009724:	428a      	cmp	r2, r1
 8009726:	d10c      	bne.n	8009742 <scalbn+0x5a>
 8009728:	ee10 2a10 	vmov	r2, s0
 800972c:	4620      	mov	r0, r4
 800972e:	4629      	mov	r1, r5
 8009730:	f7f6 fd50 	bl	80001d4 <__adddf3>
 8009734:	4604      	mov	r4, r0
 8009736:	460d      	mov	r5, r1
 8009738:	e019      	b.n	800976e <scalbn+0x86>
 800973a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800973e:	460b      	mov	r3, r1
 8009740:	3a36      	subs	r2, #54	; 0x36
 8009742:	4432      	add	r2, r6
 8009744:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009748:	428a      	cmp	r2, r1
 800974a:	dd08      	ble.n	800975e <scalbn+0x76>
 800974c:	2d00      	cmp	r5, #0
 800974e:	a120      	add	r1, pc, #128	; (adr r1, 80097d0 <scalbn+0xe8>)
 8009750:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009754:	da1c      	bge.n	8009790 <scalbn+0xa8>
 8009756:	a120      	add	r1, pc, #128	; (adr r1, 80097d8 <scalbn+0xf0>)
 8009758:	e9d1 0100 	ldrd	r0, r1, [r1]
 800975c:	e018      	b.n	8009790 <scalbn+0xa8>
 800975e:	2a00      	cmp	r2, #0
 8009760:	dd08      	ble.n	8009774 <scalbn+0x8c>
 8009762:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009766:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800976a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800976e:	ec45 4b10 	vmov	d0, r4, r5
 8009772:	bd70      	pop	{r4, r5, r6, pc}
 8009774:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009778:	da19      	bge.n	80097ae <scalbn+0xc6>
 800977a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800977e:	429e      	cmp	r6, r3
 8009780:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009784:	dd0a      	ble.n	800979c <scalbn+0xb4>
 8009786:	a112      	add	r1, pc, #72	; (adr r1, 80097d0 <scalbn+0xe8>)
 8009788:	e9d1 0100 	ldrd	r0, r1, [r1]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d1e2      	bne.n	8009756 <scalbn+0x6e>
 8009790:	a30f      	add	r3, pc, #60	; (adr r3, 80097d0 <scalbn+0xe8>)
 8009792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009796:	f7f6 fed3 	bl	8000540 <__aeabi_dmul>
 800979a:	e7cb      	b.n	8009734 <scalbn+0x4c>
 800979c:	a10a      	add	r1, pc, #40	; (adr r1, 80097c8 <scalbn+0xe0>)
 800979e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d0b8      	beq.n	8009718 <scalbn+0x30>
 80097a6:	a10e      	add	r1, pc, #56	; (adr r1, 80097e0 <scalbn+0xf8>)
 80097a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097ac:	e7b4      	b.n	8009718 <scalbn+0x30>
 80097ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80097b2:	3236      	adds	r2, #54	; 0x36
 80097b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80097b8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80097bc:	4620      	mov	r0, r4
 80097be:	4b0c      	ldr	r3, [pc, #48]	; (80097f0 <scalbn+0x108>)
 80097c0:	2200      	movs	r2, #0
 80097c2:	e7e8      	b.n	8009796 <scalbn+0xae>
 80097c4:	f3af 8000 	nop.w
 80097c8:	c2f8f359 	.word	0xc2f8f359
 80097cc:	01a56e1f 	.word	0x01a56e1f
 80097d0:	8800759c 	.word	0x8800759c
 80097d4:	7e37e43c 	.word	0x7e37e43c
 80097d8:	8800759c 	.word	0x8800759c
 80097dc:	fe37e43c 	.word	0xfe37e43c
 80097e0:	c2f8f359 	.word	0xc2f8f359
 80097e4:	81a56e1f 	.word	0x81a56e1f
 80097e8:	43500000 	.word	0x43500000
 80097ec:	ffff3cb0 	.word	0xffff3cb0
 80097f0:	3c900000 	.word	0x3c900000

080097f4 <_init>:
 80097f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097f6:	bf00      	nop
 80097f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097fa:	bc08      	pop	{r3}
 80097fc:	469e      	mov	lr, r3
 80097fe:	4770      	bx	lr

08009800 <_fini>:
 8009800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009802:	bf00      	nop
 8009804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009806:	bc08      	pop	{r3}
 8009808:	469e      	mov	lr, r3
 800980a:	4770      	bx	lr
